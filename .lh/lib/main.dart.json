{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1756118470313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756119166950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,108 @@\n+import 'package:firebase_auth/firebase_auth.dart';\r\n+import 'package:firebase_core/firebase_core.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:google_api_availability/google_api_availability.dart';\r\n+import 'package:l_f/Frontend/Top/home_screen.dart';\r\n+import 'package:l_f/firebase_options.dart';\r\n+import 'package:l_f/newCode/Frontend/pages/HomeScreen/home_screen.dart';\r\n+import 'package:l_f/newCode/Frontend/pages/Login/login_page.dart';\r\n+\r\n+void main() async {\r\n+  BindingBase.debugZoneErrorsAreFatal = true;\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+\r\n+  Future<void> checkGooglePlayServices() async {\r\n+    GooglePlayServicesAvailability availability = await GoogleApiAvailability\r\n+        .instance\r\n+        .checkGooglePlayServicesAvailability();\r\n+\r\n+    switch (availability) {\r\n+      case GooglePlayServicesAvailability.success:\r\n+        print('Google Play Services is available');\r\n+        break;\r\n+      case GooglePlayServicesAvailability.serviceMissing:\r\n+      case GooglePlayServicesAvailability.serviceVersionUpdateRequired:\r\n+      case GooglePlayServicesAvailability.serviceDisabled:\r\n+        // Show a message to the user or prompt them to update Google Play Services\r\n+        print('Google Play Services needs to be updated or enabled');\r\n+        break;\r\n+      default:\r\n+        print('Google Play Services status: $availability');\r\n+        break;\r\n+    }\r\n+  }\r\n+\r\n+  await Firebase.initializeApp(\r\n+    options: DefaultFirebaseOptions.currentPlatform,\r\n+  );\r\n+  PaintingBinding.instance.imageCache.clear();\r\n+  runApp(const MyApp());\r\n+}\r\n+\r\n+class MyApp extends StatelessWidget {\r\n+  const MyApp({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return MaterialApp(\r\n+      debugShowCheckedModeBanner: false,\r\n+      title: 'CampusTracker',\r\n+      theme: ThemeData(\r\n+        primarySwatch: Colors.blue,\r\n+        visualDensity: VisualDensity.adaptivePlatformDensity,\r\n+      ),\r\n+      home: const AuthWrapper2(),\r\n+      routes: {\r\n+        '/login': (context) => const LoginPage(),\r\n+        '/home': (context) => const HomePage(),\r\n+      },\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class AuthWrapper extends StatelessWidget {\r\n+  const AuthWrapper({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return StreamBuilder<User?>(\r\n+      // Listen to FirebaseAuth's authStateChanges stream\r\n+      stream: FirebaseAuth.instance.authStateChanges(),\r\n+      builder: (context, snapshot) {\r\n+        // Show a loading screen while Firebase is determining the auth status\r\n+        if (snapshot.connectionState == ConnectionState.waiting) {\r\n+          return const Scaffold(\r\n+            body: Center(\r\n+              child: CircularProgressIndicator(),\r\n+            ),\r\n+          );\r\n+        }\r\n+\r\n+        // If the user is signed in, show HomePage; otherwise, show LoginPage\r\n+        if (snapshot.hasData) {\r\n+          return const HomePage();\r\n+        } else {\r\n+          return const LoginPage();\r\n+        }\r\n+      },\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class AuthWrapper2 extends StatelessWidget {\r\n+  const AuthWrapper2({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    // Check if the user is signed in\r\n+    User? user = FirebaseAuth.instance.currentUser;\r\n+\r\n+    // If the user is signed in, navigate to HomePage, otherwise navigate to LoginPage\r\n+    if (user != null) {\r\n+      return const HomePage();\r\n+    } else {\r\n+      return const LoginPage();\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1756122932497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,120 +2,11 @@\n import 'package:firebase_core/firebase_core.dart';\r\n import 'package:flutter/foundation.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:google_api_availability/google_api_availability.dart';\r\n-import 'package:l_f/Frontend/Top/home_screen.dart';\r\n-import 'package:l_f/firebase_options.dart';\r\n-import 'package:l_f/newCode/Frontend/pages/HomeScreen/home_screen.dart';\r\n-import 'package:l_f/newCode/Frontend/pages/Login/login_page.dart';\r\n-\r\n-void main() async {\r\n-  BindingBase.debugZoneErrorsAreFatal = true;\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-\r\n-  Future<void> checkGooglePlayServices() async {\r\n-    GooglePlayServicesAvailability availability = await GoogleApiAvailability\r\n-        .instance\r\n-        .checkGooglePlayServicesAvailability();\r\n-\r\n-    switch (availability) {\r\n-      case GooglePlayServicesAvailability.success:\r\n-        print('Google Play Services is available');\r\n-        break;\r\n-      case GooglePlayServicesAvailability.serviceMissing:\r\n-      case GooglePlayServicesAvailability.serviceVersionUpdateRequired:\r\n-      case GooglePlayServicesAvailability.serviceDisabled:\r\n-        // Show a message to the user or prompt them to update Google Play Services\r\n-        print('Google Play Services needs to be updated or enabled');\r\n-        break;\r\n-      default:\r\n-        print('Google Play Services status: $availability');\r\n-        break;\r\n-    }\r\n-  }\r\n-\r\n-  await Firebase.initializeApp(\r\n-    options: DefaultFirebaseOptions.currentPlatform,\r\n-  );\r\n-  PaintingBinding.instance.imageCache.clear();\r\n-  runApp(const MyApp());\r\n-}\r\n-\r\n-class MyApp extends StatelessWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return MaterialApp(\r\n-      debugShowCheckedModeBanner: false,\r\n-      title: 'CampusTracker',\r\n-      theme: ThemeData(\r\n-        primarySwatch: Colors.blue,\r\n-        visualDensity: VisualDensity.adaptivePlatformDensity,\r\n-      ),\r\n-      home: const AuthWrapper2(),\r\n-      routes: {\r\n-        '/login': (context) => const LoginPage(),\r\n-        '/home': (context) => const HomePage(),\r\n-      },\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-class AuthWrapper extends StatelessWidget {\r\n-  const AuthWrapper({super.key});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return StreamBuilder<User?>(\r\n-      // Listen to FirebaseAuth's authStateChanges stream\r\n-      stream: FirebaseAuth.instance.authStateChanges(),\r\n-      builder: (context, snapshot) {\r\n-        // Show a loading screen while Firebase is determining the auth status\r\n-        if (snapshot.connectionState == ConnectionState.waiting) {\r\n-          return const Scaffold(\r\n-            body: Center(\r\n-              child: CircularProgressIndicator(),\r\n-            ),\r\n-          );\r\n-        }\r\n-\r\n-        // If the user is signed in, show HomePage; otherwise, show LoginPage\r\n-        if (snapshot.hasData) {\r\n-          return const HomePage();\r\n-        } else {\r\n-          return const LoginPage();\r\n-        }\r\n-      },\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-class AuthWrapper2 extends StatelessWidget {\r\n-  const AuthWrapper2({super.key});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    // Check if the user is signed in\r\n-    User? user = FirebaseAuth.instance.currentUser;\r\n-\r\n-    // If the user is signed in, navigate to HomePage, otherwise navigate to LoginPage\r\n-    if (user != null) {\r\n-      return const HomePage();\r\n-    } else {\r\n-      return const LoginPage();\r\n-    }\r\n-  }\r\n-}\r\n-import 'package:firebase_auth/firebase_auth.dart';\r\n-import 'package:firebase_core/firebase_core.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:google_api_availability/google_api_availability.dart';\r\n import 'package:l_f/Backend/Login/login.dart';\r\n import 'package:l_f/Frontend/Top/home_screen.dart';\r\n import 'package:l_f/firebase_options.dart';\r\n-import 'package:l_f/newCode/Frontend/pages/Login/login_page.dart';\r\n \r\n void main() async {\r\n   BindingBase.debugZoneErrorsAreFatal = true;\r\n   WidgetsFlutterBinding.ensureInitialized();\r\n"
                },
                {
                    "date": 1756131152492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n }\r\n \r\n class AuthWrapper2 extends StatelessWidget {\r\n   const AuthWrapper2({super.key});\r\n-\r\n+// Trigger deployment\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     // Check if the user is signed in\r\n     User? user = FirebaseAuth.instance.currentUser;\r\n"
                }
            ],
            "date": 1756118470313,
            "name": "Commit-0",
            "content": "import 'package:firebase_auth/firebase_auth.dart';\r\nimport 'package:firebase_core/firebase_core.dart';\r\nimport 'package:flutter/foundation.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:google_api_availability/google_api_availability.dart';\r\nimport 'package:l_f/Backend/Login/login.dart';\r\nimport 'package:l_f/Frontend/Top/home_screen.dart';\r\nimport 'package:l_f/firebase_options.dart';\r\nimport 'package:l_f/newCode/Frontend/pages/Login/login_page.dart';\r\n\r\nvoid main() async {\r\n  BindingBase.debugZoneErrorsAreFatal = true;\r\n  WidgetsFlutterBinding.ensureInitialized();\r\n\r\n  Future<void> checkGooglePlayServices() async {\r\n    GooglePlayServicesAvailability availability = await GoogleApiAvailability\r\n        .instance\r\n        .checkGooglePlayServicesAvailability();\r\n\r\n    switch (availability) {\r\n      case GooglePlayServicesAvailability.success:\r\n        print('Google Play Services is available');\r\n        break;\r\n      case GooglePlayServicesAvailability.serviceMissing:\r\n      case GooglePlayServicesAvailability.serviceVersionUpdateRequired:\r\n      case GooglePlayServicesAvailability.serviceDisabled:\r\n        // Show a message to the user or prompt them to update Google Play Services\r\n        print('Google Play Services needs to be updated or enabled');\r\n        break;\r\n      default:\r\n        print('Google Play Services status: $availability');\r\n        break;\r\n    }\r\n  }\r\n\r\n  await Firebase.initializeApp(\r\n    options: DefaultFirebaseOptions.currentPlatform,\r\n  );\r\n  PaintingBinding.instance.imageCache.clear();\r\n  runApp(const MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  const MyApp({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      debugShowCheckedModeBanner: false,\r\n      title: 'CampusTracker',\r\n      theme: ThemeData(\r\n        primarySwatch: Colors.blue,\r\n        visualDensity: VisualDensity.adaptivePlatformDensity,\r\n      ),\r\n      home: const AuthWrapper2(),\r\n      routes: {\r\n        '/login': (context) => const LoginPage(),\r\n        '/home': (context) => const HomePage(),\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\nclass AuthWrapper extends StatelessWidget {\r\n  const AuthWrapper({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return StreamBuilder<User?>(\r\n      // Listen to FirebaseAuth's authStateChanges stream\r\n      stream: FirebaseAuth.instance.authStateChanges(),\r\n      builder: (context, snapshot) {\r\n        // Show a loading screen while Firebase is determining the auth status\r\n        if (snapshot.connectionState == ConnectionState.waiting) {\r\n          return const Scaffold(\r\n            body: Center(\r\n              child: CircularProgressIndicator(),\r\n            ),\r\n          );\r\n        }\r\n\r\n        // If the user is signed in, show HomePage; otherwise, show LoginPage\r\n        if (snapshot.hasData) {\r\n          return const HomePage();\r\n        } else {\r\n          return const LoginPage();\r\n        }\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\nclass AuthWrapper2 extends StatelessWidget {\r\n  const AuthWrapper2({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // Check if the user is signed in\r\n    User? user = FirebaseAuth.instance.currentUser;\r\n\r\n    // If the user is signed in, navigate to HomePage, otherwise navigate to LoginPage\r\n    if (user != null) {\r\n      return const HomePage();\r\n    } else {\r\n      return const LoginPage();\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}