{
    "sourceFile": "lib/Backend/Login/login.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1756118451957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756122788904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,354 +1,354 @@\n-// import 'package:cloud_firestore/cloud_firestore.dart';\n-// import 'package:firebase_auth/firebase_auth.dart';\n-// import 'package:flutter/material.dart';\n-// import 'package:l_f/Backend/Reset_Password/reset_password.dart';\n-// import 'package:l_f/Backend/SignUp/signup.dart';\n-// import 'package:l_f/Frontend/Top/home_screen.dart';\n+import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:flutter/material.dart';\n+import 'package:l_f/Backend/Reset_Password/reset_password.dart';\n+import 'package:l_f/Backend/SignUp/signup.dart';\n+import 'package:l_f/Frontend/Top/home_screen.dart';\n \n-// // Login Page\n+// Login Page\n \n-// class LoginPage extends StatefulWidget {\n-//   const LoginPage({super.key});\n+class LoginPage extends StatefulWidget {\n+  const LoginPage({super.key});\n \n-//   @override\n-//   _LoginPageState createState() => _LoginPageState();\n-// }\n+  @override\n+  _LoginPageState createState() => _LoginPageState();\n+}\n \n-// class _LoginPageState extends State<LoginPage> {\n-//   final _emailController = TextEditingController();\n-//   final _passwordController = TextEditingController();\n-//   final FirebaseAuth _auth = FirebaseAuth.instance;\n-//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n+class _LoginPageState extends State<LoginPage> {\n+  final _emailController = TextEditingController();\n+  final _passwordController = TextEditingController();\n+  final FirebaseAuth _auth = FirebaseAuth.instance;\n+  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n \n-//   bool _isLoading = false;\n-//   String? _errorMessage;\n-//   String? _verificationMessage;\n-//   String? _domainErrorMessage;\n+  bool _isLoading = false;\n+  String? _errorMessage;\n+  String? _verificationMessage;\n+  String? _domainErrorMessage;\n \n-//   final String _expectedDomain = '@nith.ac.in';\n+  final String _expectedDomain = '@nith.ac.in';\n \n-//   Future<void> _login() async {\n-//     setState(() {\n-//       _isLoading = true;\n-//       _errorMessage = null;\n-//       _verificationMessage = null;\n-//       _domainErrorMessage = null;\n-//     });\n+  Future<void> _login() async {\n+    setState(() {\n+      _isLoading = true;\n+      _errorMessage = null;\n+      _verificationMessage = null;\n+      _domainErrorMessage = null;\n+    });\n \n-//     try {\n-//       // Check if the email domain is correct\n-//       if (!_emailController.text.trim().endsWith(_expectedDomain)) {\n-//         setState(() {\n-//           _domainErrorMessage =\n-//               'Please log in with your college email address.';\n-//         });\n-//         setState(() {\n-//           _isLoading = false;\n-//         });\n-//         return;\n-//       }\n+    try {\n+      // Check if the email domain is correct\n+      if (!_emailController.text.trim().endsWith(_expectedDomain)) {\n+        setState(() {\n+          _domainErrorMessage =\n+              'Please log in with your college email address.';\n+        });\n+        setState(() {\n+          _isLoading = false;\n+        });\n+        return;\n+      }\n \n-//       // Sign in user\n-//       UserCredential userCredential = await _auth.signInWithEmailAndPassword(\n-//         email: _emailController.text.trim(),\n-//         password: _passwordController.text.trim(),\n-//       );\n+      // Sign in user\n+      UserCredential userCredential = await _auth.signInWithEmailAndPassword(\n+        email: _emailController.text.trim(),\n+        password: _passwordController.text.trim(),\n+      );\n \n-//       User? user = userCredential.user;\n+      User? user = userCredential.user;\n \n-//       if (user != null) {\n-//         // Check if the email is verified\n-//         if (!user.emailVerified) {\n-//           setState(() {\n-//             _verificationMessage =\n-//                 'Email is not verified. Please check your inbox.';\n-//           });\n+      if (user != null) {\n+        // Check if the email is verified\n+        if (!user.emailVerified) {\n+          setState(() {\n+            _verificationMessage =\n+                'Email is not verified. Please check your inbox.';\n+          });\n \n-//           await user.sendEmailVerification();\n+          await user.sendEmailVerification();\n \n-//           // Optionally log out the user if email is not verified\n-//           await _auth.signOut();\n-//           setState(() {\n-//             _isLoading = false;\n-//           });\n-//           return;\n-//         }\n+          // Optionally log out the user if email is not verified\n+          await _auth.signOut();\n+          setState(() {\n+            _isLoading = false;\n+          });\n+          return;\n+        }\n \n-//         // Check if user document exists in Firestore\n-//         DocumentSnapshot userDoc =\n-//             await _firestore.collection('users').doc(user.uid).get();\n+        // Check if user document exists in Firestore\n+        DocumentSnapshot userDoc =\n+            await _firestore.collection('users').doc(user.uid).get();\n \n-//         if (!userDoc.exists) {\n-//           // Show a message to the user if their data does not exist in Firestore\n-//           ScaffoldMessenger.of(context).showSnackBar(\n-//             const SnackBar(\n-//               content: Text('User data not found'),\n-//               backgroundColor: Colors.red,\n-//             ),\n-//           );\n+        if (!userDoc.exists) {\n+          // Show a message to the user if their data does not exist in Firestore\n+          ScaffoldMessenger.of(context).showSnackBar(\n+            const SnackBar(\n+              content: Text('User data not found'),\n+              backgroundColor: Colors.red,\n+            ),\n+          );\n \n-//           // Optionally log out the user if document doesn't exist\n-//           await _auth.signOut();\n-//           setState(() {\n-//             _isLoading = false;\n-//           });\n-//           return;\n-//         }\n+          // Optionally log out the user if document doesn't exist\n+          await _auth.signOut();\n+          setState(() {\n+            _isLoading = false;\n+          });\n+          return;\n+        }\n \n-//         // Navigate to HomePage\n-//         Navigator.pushReplacement(\n-//           context,\n-//           MaterialPageRoute(builder: (_) => const HomePage()),\n-//         );\n-//       }\n-//     } on FirebaseAuthException catch (e) {\n-//       setState(() {\n-//         _errorMessage = e.code == 'user-not-found'\n-//             ? 'No user found for that email.'\n-//             : e.code == 'wrong-password'\n-//                 ? 'Wrong password provided for that user.'\n-//                 : 'Failed to log in. Please try again.';\n-//       });\n-//     } catch (e) {\n-//       setState(() {\n-//         _errorMessage = 'An error occurred. Please try again.';\n-//       });\n-//     } finally {\n-//       setState(() {\n-//         _isLoading = false;\n-//       });\n-//     }\n-//   }\n+        // Navigate to HomePage\n+        Navigator.pushReplacement(\n+          context,\n+          MaterialPageRoute(builder: (_) => const HomePage()),\n+        );\n+      }\n+    } on FirebaseAuthException catch (e) {\n+      setState(() {\n+        _errorMessage = e.code == 'user-not-found'\n+            ? 'No user found for that email.'\n+            : e.code == 'wrong-password'\n+                ? 'Wrong password provided for that user.'\n+                : 'Failed to log in. Please try again.';\n+      });\n+    } catch (e) {\n+      setState(() {\n+        _errorMessage = 'An error occurred. Please try again.';\n+      });\n+    } finally {\n+      setState(() {\n+        _isLoading = false;\n+      });\n+    }\n+  }\n \n-//   // Future<void> _login() async {\n-//   //   setState(() {\n-//   //     _isLoading = true;\n-//   //     _errorMessage = null;\n-//   //     _verificationMessage = null;\n-//   //     _domainErrorMessage = null;\n-//   //   });\n+  // Future<void> _login() async {\n+  //   setState(() {\n+  //     _isLoading = true;\n+  //     _errorMessage = null;\n+  //     _verificationMessage = null;\n+  //     _domainErrorMessage = null;\n+  //   });\n \n-//   //   try {\n-//   //     // Check if the email domain is correct\n-//   //     if (!_emailController.text.trim().endsWith(_expectedDomain)) {\n-//   //       setState(() {\n-//   //         _domainErrorMessage =\n-//   //             'Please log in with your college email address.';\n-//   //       });\n-//   //       setState(() {\n-//   //         _isLoading = false;\n-//   //       });\n-//   //       return;\n-//   //     }\n+  //   try {\n+  //     // Check if the email domain is correct\n+  //     if (!_emailController.text.trim().endsWith(_expectedDomain)) {\n+  //       setState(() {\n+  //         _domainErrorMessage =\n+  //             'Please log in with your college email address.';\n+  //       });\n+  //       setState(() {\n+  //         _isLoading = false;\n+  //       });\n+  //       return;\n+  //     }\n \n-//   //     // Sign in user\n-//   //     UserCredential userCredential = await _auth.signInWithEmailAndPassword(\n-//   //       email: _emailController.text.trim(),\n-//   //       password: _passwordController.text.trim(),\n-//   //     );\n+  //     // Sign in user\n+  //     UserCredential userCredential = await _auth.signInWithEmailAndPassword(\n+  //       email: _emailController.text.trim(),\n+  //       password: _passwordController.text.trim(),\n+  //     );\n \n-//   //     User? user = userCredential.user;\n+  //     User? user = userCredential.user;\n \n-//   //     if (user != null) {\n-//   //       // Check if user document exists in Firestore\n-//   //       DocumentSnapshot userDoc =\n-//   //           await _firestore.collection('users').doc(user.uid).get();\n+  //     if (user != null) {\n+  //       // Check if user document exists in Firestore\n+  //       DocumentSnapshot userDoc =\n+  //           await _firestore.collection('users').doc(user.uid).get();\n \n-//   //       if (!userDoc.exists) {\n-//   //         // Show a message to the user if their data does not exist in Firestore\n-//   //         ScaffoldMessenger.of(context).showSnackBar(\n-//   //           const SnackBar(\n-//   //             content: Text('User data not found'),\n-//   //             backgroundColor: Colors.red,\n-//   //           ),\n-//   //         );\n+  //       if (!userDoc.exists) {\n+  //         // Show a message to the user if their data does not exist in Firestore\n+  //         ScaffoldMessenger.of(context).showSnackBar(\n+  //           const SnackBar(\n+  //             content: Text('User data not found'),\n+  //             backgroundColor: Colors.red,\n+  //           ),\n+  //         );\n \n-//   //         // Optionally log out the user if document doesn't exist\n-//   //         await _auth.signOut();\n-//   //         setState(() {\n-//   //           _isLoading = false;\n-//   //         });\n-//   //         return;\n-//   //       }\n+  //         // Optionally log out the user if document doesn't exist\n+  //         await _auth.signOut();\n+  //         setState(() {\n+  //           _isLoading = false;\n+  //         });\n+  //         return;\n+  //       }\n \n-//   //       // Navigate to HomePage (even if email is not verified)\n-//   //       Navigator.pushReplacement(\n-//   //         context,\n-//   //         MaterialPageRoute(builder: (_) => const HomePage()),\n-//   //       );\n-//   //     }\n-//   //   } on FirebaseAuthException catch (e) {\n-//   //     setState(() {\n-//   //       _errorMessage = e.code == 'user-not-found'\n-//   //           ? 'No user found for that email.'\n-//   //           : e.code == 'wrong-password'\n-//   //               ? 'Wrong password provided for that user.'\n-//   //               : 'Failed to log in. Please try again.';\n-//   //     });\n-//   //   } catch (e) {\n-//   //     setState(() {\n-//   //       _errorMessage = 'An error occurred. Please try again.';\n-//   //     });\n-//   //   } finally {\n-//   //     setState(() {\n-//   //       _isLoading = false;\n-//   //     });\n-//   //   }\n-//   // }\n+  //       // Navigate to HomePage (even if email is not verified)\n+  //       Navigator.pushReplacement(\n+  //         context,\n+  //         MaterialPageRoute(builder: (_) => const HomePage()),\n+  //       );\n+  //     }\n+  //   } on FirebaseAuthException catch (e) {\n+  //     setState(() {\n+  //       _errorMessage = e.code == 'user-not-found'\n+  //           ? 'No user found for that email.'\n+  //           : e.code == 'wrong-password'\n+  //               ? 'Wrong password provided for that user.'\n+  //               : 'Failed to log in. Please try again.';\n+  //     });\n+  //   } catch (e) {\n+  //     setState(() {\n+  //       _errorMessage = 'An error occurred. Please try again.';\n+  //     });\n+  //   } finally {\n+  //     setState(() {\n+  //       _isLoading = false;\n+  //     });\n+  //   }\n+  // }\n \n-//   @override\n-//   Widget build(BuildContext context) {\n-//     bool isMobile = MediaQuery.of(context).size.width < 630;\n-//     Size size = MediaQuery.of(context).size;\n-//     return Scaffold(\n-//       body: Center(\n-//         child: SingleChildScrollView(\n-//           padding: const EdgeInsets.all(16.0),\n-//           child: Column(\n-//             mainAxisAlignment: MainAxisAlignment.center,\n-//             children: [\n-//               const SizedBox(height: 16),\n-//               const Text(\n-//                 'Welcome Back!',\n-//                 style: TextStyle(\n-//                   fontSize: 32,\n-//                   fontWeight: FontWeight.bold,\n-//                   color: Colors.black,\n-//                 ),\n-//               ),\n-//               const SizedBox(height: 32),\n-//               Container(\n-//                 width: isMobile ? size.width * 0.8 : size.width * 0.5,\n-//                 decoration: BoxDecoration(\n-//                   color: Colors.white.withOpacity(0.1),\n-//                   borderRadius: BorderRadius.circular(12),\n-//                   boxShadow: [\n-//                     BoxShadow(\n-//                       color: Colors.black.withOpacity(0.1),\n-//                       blurRadius: 10,\n-//                       offset: const Offset(0, 4),\n-//                     ),\n-//                   ],\n-//                 ),\n-//                 padding: const EdgeInsets.all(16.0),\n-//                 child: Column(\n-//                   children: [\n-//                     _buildTextField(\n-//                       controller: _emailController,\n-//                       label: 'Email',\n-//                       icon: Icons.email,\n-//                       keyboardType: TextInputType.emailAddress,\n-//                     ),\n-//                     const SizedBox(height: 16),\n-//                     _buildTextField(\n-//                       controller: _passwordController,\n-//                       label: 'Password',\n-//                       icon: Icons.lock,\n-//                       obscureText: true,\n-//                     ),\n-//                     const SizedBox(height: 16),\n-//                     if (_errorMessage != null)\n-//                       Text(\n-//                         _errorMessage!,\n-//                         style: const TextStyle(color: Colors.red, fontSize: 16),\n-//                       ),\n-//                     if (_verificationMessage != null)\n-//                       Text(\n-//                         _verificationMessage!,\n-//                         style:\n-//                             const TextStyle(color: Colors.orange, fontSize: 16),\n-//                         textAlign: TextAlign.center,\n-//                       ),\n-//                     if (_domainErrorMessage != null)\n-//                       Text(\n-//                         _domainErrorMessage!,\n-//                         style: const TextStyle(color: Colors.red, fontSize: 16),\n-//                         textAlign: TextAlign.center,\n-//                       ),\n-//                     SizedBox(height: isMobile ? 0 : 16),\n-//                     _isLoading\n-//                         ? const CircularProgressIndicator()\n-//                         : ElevatedButton(\n-//                             onPressed: _login,\n-//                             style: ElevatedButton.styleFrom(\n-//                               backgroundColor: Colors.deepOrange,\n-//                               padding: const EdgeInsets.symmetric(\n-//                                   horizontal: 32, vertical: 12),\n-//                               textStyle: const TextStyle(\n-//                                   fontSize: 18, fontWeight: FontWeight.bold),\n-//                               shape: RoundedRectangleBorder(\n-//                                 borderRadius: BorderRadius.circular(12),\n-//                               ),\n-//                             ),\n-//                             child: const Text(\n-//                               'Login',\n-//                               style: TextStyle(color: Colors.white),\n-//                             ),\n-//                           ),\n-//                     SizedBox(height: isMobile ? 0 : 16),\n-//                     TextButton(\n-//                       onPressed: () {\n-//                         Navigator.push(\n-//                             context,\n-//                             MaterialPageRoute(\n-//                                 builder: (_) => const ResetPasswordPage()));\n-//                       },\n-//                       child: const Text(\n-//                         'Forgot Password?',\n-//                         style: TextStyle(\n-//                           decoration: TextDecoration.underline,\n-//                             color: Colors.black, fontWeight: FontWeight.bold),\n-//                       ),\n-//                     ),\n-//                     TextButton(\n-//                       onPressed: () {\n-//                         Navigator.push(\n-//                             context,\n-//                             MaterialPageRoute(\n-//                                 builder: (_) => const SignUpPage()));\n-//                       },\n-//                       child: const Text(\n-//                         'Don\\'t have an account? Sign Up',\n-//                         style: TextStyle(\n-//                           decoration: TextDecoration.underline,\n-//                             color: Colors.black, fontWeight: FontWeight.bold),\n-//                       ),\n-//                     ),\n-//                   ],\n-//                 ),\n-//               ),\n-//             ],\n-//           ),\n-//         ),\n-//       ),\n-//     );\n-//   }\n+  @override\n+  Widget build(BuildContext context) {\n+    bool isMobile = MediaQuery.of(context).size.width < 630;\n+    Size size = MediaQuery.of(context).size;\n+    return Scaffold(\n+      body: Center(\n+        child: SingleChildScrollView(\n+          padding: const EdgeInsets.all(16.0),\n+          child: Column(\n+            mainAxisAlignment: MainAxisAlignment.center,\n+            children: [\n+              const SizedBox(height: 16),\n+              const Text(\n+                'Welcome Back!',\n+                style: TextStyle(\n+                  fontSize: 32,\n+                  fontWeight: FontWeight.bold,\n+                  color: Colors.black,\n+                ),\n+              ),\n+              const SizedBox(height: 32),\n+              Container(\n+                width: isMobile ? size.width * 0.8 : size.width * 0.5,\n+                decoration: BoxDecoration(\n+                  color: Colors.white.withOpacity(0.1),\n+                  borderRadius: BorderRadius.circular(12),\n+                  boxShadow: [\n+                    BoxShadow(\n+                      color: Colors.black.withOpacity(0.1),\n+                      blurRadius: 10,\n+                      offset: const Offset(0, 4),\n+                    ),\n+                  ],\n+                ),\n+                padding: const EdgeInsets.all(16.0),\n+                child: Column(\n+                  children: [\n+                    _buildTextField(\n+                      controller: _emailController,\n+                      label: 'Email',\n+                      icon: Icons.email,\n+                      keyboardType: TextInputType.emailAddress,\n+                    ),\n+                    const SizedBox(height: 16),\n+                    _buildTextField(\n+                      controller: _passwordController,\n+                      label: 'Password',\n+                      icon: Icons.lock,\n+                      obscureText: true,\n+                    ),\n+                    const SizedBox(height: 16),\n+                    if (_errorMessage != null)\n+                      Text(\n+                        _errorMessage!,\n+                        style: const TextStyle(color: Colors.red, fontSize: 16),\n+                      ),\n+                    if (_verificationMessage != null)\n+                      Text(\n+                        _verificationMessage!,\n+                        style:\n+                            const TextStyle(color: Colors.orange, fontSize: 16),\n+                        textAlign: TextAlign.center,\n+                      ),\n+                    if (_domainErrorMessage != null)\n+                      Text(\n+                        _domainErrorMessage!,\n+                        style: const TextStyle(color: Colors.red, fontSize: 16),\n+                        textAlign: TextAlign.center,\n+                      ),\n+                    SizedBox(height: isMobile ? 0 : 16),\n+                    _isLoading\n+                        ? const CircularProgressIndicator()\n+                        : ElevatedButton(\n+                            onPressed: _login,\n+                            style: ElevatedButton.styleFrom(\n+                              backgroundColor: Colors.deepOrange,\n+                              padding: const EdgeInsets.symmetric(\n+                                  horizontal: 32, vertical: 12),\n+                              textStyle: const TextStyle(\n+                                  fontSize: 18, fontWeight: FontWeight.bold),\n+                              shape: RoundedRectangleBorder(\n+                                borderRadius: BorderRadius.circular(12),\n+                              ),\n+                            ),\n+                            child: const Text(\n+                              'Login',\n+                              style: TextStyle(color: Colors.white),\n+                            ),\n+                          ),\n+                    SizedBox(height: isMobile ? 0 : 16),\n+                    TextButton(\n+                      onPressed: () {\n+                        Navigator.push(\n+                            context,\n+                            MaterialPageRoute(\n+                                builder: (_) => const ResetPasswordPage()));\n+                      },\n+                      child: const Text(\n+                        'Forgot Password?',\n+                        style: TextStyle(\n+                          decoration: TextDecoration.underline,\n+                            color: Colors.black, fontWeight: FontWeight.bold),\n+                      ),\n+                    ),\n+                    TextButton(\n+                      onPressed: () {\n+                        Navigator.push(\n+                            context,\n+                            MaterialPageRoute(\n+                                builder: (_) => const SignUpPage()));\n+                      },\n+                      child: const Text(\n+                        'Don\\'t have an account? Sign Up',\n+                        style: TextStyle(\n+                          decoration: TextDecoration.underline,\n+                            color: Colors.black, fontWeight: FontWeight.bold),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+              ),\n+            ],\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n \n-//   Widget _buildTextField({\n-//     required TextEditingController controller,\n-//     required String label,\n-//     required IconData icon,\n-//     bool obscureText = false,\n-//     TextInputType keyboardType = TextInputType.text,\n-//   }) {\n-//     return TextField(\n-//       controller: controller,\n-//       decoration: InputDecoration(\n-//         labelText: label,\n-//         labelStyle: const TextStyle(color: Colors.black),\n-//         prefixIcon: Icon(icon, color: Colors.deepOrange),\n-//         filled: true,\n-//         fillColor: Colors.white.withOpacity(1),\n-//         border: OutlineInputBorder(\n-//           borderRadius: BorderRadius.circular(12),\n-//           borderSide: BorderSide.none,\n-//         ),\n-//         contentPadding:\n-//             const EdgeInsets.symmetric(horizontal: 16, vertical: 12),\n-//       ),\n-//       obscureText: obscureText,\n-//       keyboardType: keyboardType,\n-//       style: const TextStyle(color: Colors.black),\n-//     );\n-//   }\n-// }\n+  Widget _buildTextField({\n+    required TextEditingController controller,\n+    required String label,\n+    required IconData icon,\n+    bool obscureText = false,\n+    TextInputType keyboardType = TextInputType.text,\n+  }) {\n+    return TextField(\n+      controller: controller,\n+      decoration: InputDecoration(\n+        labelText: label,\n+        labelStyle: const TextStyle(color: Colors.black),\n+        prefixIcon: Icon(icon, color: Colors.deepOrange),\n+        filled: true,\n+        fillColor: Colors.white.withOpacity(1),\n+        border: OutlineInputBorder(\n+          borderRadius: BorderRadius.circular(12),\n+          borderSide: BorderSide.none,\n+        ),\n+        contentPadding:\n+            const EdgeInsets.symmetric(horizontal: 16, vertical: 12),\n+      ),\n+      obscureText: obscureText,\n+      keyboardType: keyboardType,\n+      style: const TextStyle(color: Colors.black),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1756123214044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,12 +301,9 @@\n                       ),\n                     ),\n                     TextButton(\n                       onPressed: () {\n-                        Navigator.push(\n-                            context,\n-                            MaterialPageRoute(\n-                                builder: (_) => const SignUpPage()));\n+\n                       },\n                       child: const Text(\n                         'Don\\'t have an account? Sign Up',\n                         style: TextStyle(\n"
                },
                {
                    "date": 1756123221218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -295,21 +295,38 @@\n                       },\n                       child: const Text(\n                         'Forgot Password?',\n                         style: TextStyle(\n-                          decoration: TextDecoration.underline,\n-                            color: Colors.black, fontWeight: FontWeight.bold),\n+                            decoration: TextDecoration.underline,\n+                            color: Colors.black,\n+                            fontWeight: FontWeight.bold),\n                       ),\n                     ),\n                     TextButton(\n                       onPressed: () {\n-\n+                        Navigator.push(\n+                          context,\n+                          PageRouteBuilder(\n+                            transitionDuration:\n+                                const Duration(milliseconds: 500),\n+                            pageBuilder: (_, __, ___) =>\n+                                ,\n+                            transitionsBuilder: (context, animation,\n+                                secondaryAnimation, child) {\n+                              return FadeTransition(\n+                                opacity: animation,\n+                                child: child,\n+                              );\n+                            },\n+                          ),\n+                        );\n                       },\n                       child: const Text(\n                         'Don\\'t have an account? Sign Up',\n                         style: TextStyle(\n-                          decoration: TextDecoration.underline,\n-                            color: Colors.black, fontWeight: FontWeight.bold),\n+                            decoration: TextDecoration.underline,\n+                            color: Colors.black,\n+                            fontWeight: FontWeight.bold),\n                       ),\n                     ),\n                   ],\n                 ),\n"
                },
                {
                    "date": 1756123229576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -308,9 +308,9 @@\n                           PageRouteBuilder(\n                             transitionDuration:\n                                 const Duration(milliseconds: 500),\n                             pageBuilder: (_, __, ___) =>\n-                                ,\n+                                const SignUpPage(),\n                             transitionsBuilder: (context, animation,\n                                 secondaryAnimation, child) {\n                               return FadeTransition(\n                                 opacity: animation,\n"
                },
                {
                    "date": 1756123241671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,12 +287,9 @@\n                           ),\n                     SizedBox(height: isMobile ? 0 : 16),\n                     TextButton(\n                       onPressed: () {\n-                        Navigator.push(\n-                            context,\n-                            MaterialPageRoute(\n-                                builder: (_) => const ResetPasswordPage()));\n+                      \n                       },\n                       child: const Text(\n                         'Forgot Password?',\n                         style: TextStyle(\n"
                },
                {
                    "date": 1756123247278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,9 +287,21 @@\n                           ),\n                     SizedBox(height: isMobile ? 0 : 16),\n                     TextButton(\n                       onPressed: () {\n-                      \n+                        Navigator.push(\n+                        context,\n+                        PageRouteBuilder(\n+                          transitionDuration: const Duration(milliseconds: 500),\n+                          pageBuilder: (_, __, ___) => R,\n+                          transitionsBuilder: (context, animation, secondaryAnimation, child) {\n+                            return FadeTransition(\n+                              opacity: animation,\n+                              child: child,\n+                            );\n+                          },\n+                        ),\n+                      );\n                       },\n                       child: const Text(\n                         'Forgot Password?',\n                         style: TextStyle(\n"
                }
            ],
            "date": 1756118451957,
            "name": "Commit-0",
            "content": "// import 'package:cloud_firestore/cloud_firestore.dart';\n// import 'package:firebase_auth/firebase_auth.dart';\n// import 'package:flutter/material.dart';\n// import 'package:l_f/Backend/Reset_Password/reset_password.dart';\n// import 'package:l_f/Backend/SignUp/signup.dart';\n// import 'package:l_f/Frontend/Top/home_screen.dart';\n\n// // Login Page\n\n// class LoginPage extends StatefulWidget {\n//   const LoginPage({super.key});\n\n//   @override\n//   _LoginPageState createState() => _LoginPageState();\n// }\n\n// class _LoginPageState extends State<LoginPage> {\n//   final _emailController = TextEditingController();\n//   final _passwordController = TextEditingController();\n//   final FirebaseAuth _auth = FirebaseAuth.instance;\n//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n\n//   bool _isLoading = false;\n//   String? _errorMessage;\n//   String? _verificationMessage;\n//   String? _domainErrorMessage;\n\n//   final String _expectedDomain = '@nith.ac.in';\n\n//   Future<void> _login() async {\n//     setState(() {\n//       _isLoading = true;\n//       _errorMessage = null;\n//       _verificationMessage = null;\n//       _domainErrorMessage = null;\n//     });\n\n//     try {\n//       // Check if the email domain is correct\n//       if (!_emailController.text.trim().endsWith(_expectedDomain)) {\n//         setState(() {\n//           _domainErrorMessage =\n//               'Please log in with your college email address.';\n//         });\n//         setState(() {\n//           _isLoading = false;\n//         });\n//         return;\n//       }\n\n//       // Sign in user\n//       UserCredential userCredential = await _auth.signInWithEmailAndPassword(\n//         email: _emailController.text.trim(),\n//         password: _passwordController.text.trim(),\n//       );\n\n//       User? user = userCredential.user;\n\n//       if (user != null) {\n//         // Check if the email is verified\n//         if (!user.emailVerified) {\n//           setState(() {\n//             _verificationMessage =\n//                 'Email is not verified. Please check your inbox.';\n//           });\n\n//           await user.sendEmailVerification();\n\n//           // Optionally log out the user if email is not verified\n//           await _auth.signOut();\n//           setState(() {\n//             _isLoading = false;\n//           });\n//           return;\n//         }\n\n//         // Check if user document exists in Firestore\n//         DocumentSnapshot userDoc =\n//             await _firestore.collection('users').doc(user.uid).get();\n\n//         if (!userDoc.exists) {\n//           // Show a message to the user if their data does not exist in Firestore\n//           ScaffoldMessenger.of(context).showSnackBar(\n//             const SnackBar(\n//               content: Text('User data not found'),\n//               backgroundColor: Colors.red,\n//             ),\n//           );\n\n//           // Optionally log out the user if document doesn't exist\n//           await _auth.signOut();\n//           setState(() {\n//             _isLoading = false;\n//           });\n//           return;\n//         }\n\n//         // Navigate to HomePage\n//         Navigator.pushReplacement(\n//           context,\n//           MaterialPageRoute(builder: (_) => const HomePage()),\n//         );\n//       }\n//     } on FirebaseAuthException catch (e) {\n//       setState(() {\n//         _errorMessage = e.code == 'user-not-found'\n//             ? 'No user found for that email.'\n//             : e.code == 'wrong-password'\n//                 ? 'Wrong password provided for that user.'\n//                 : 'Failed to log in. Please try again.';\n//       });\n//     } catch (e) {\n//       setState(() {\n//         _errorMessage = 'An error occurred. Please try again.';\n//       });\n//     } finally {\n//       setState(() {\n//         _isLoading = false;\n//       });\n//     }\n//   }\n\n//   // Future<void> _login() async {\n//   //   setState(() {\n//   //     _isLoading = true;\n//   //     _errorMessage = null;\n//   //     _verificationMessage = null;\n//   //     _domainErrorMessage = null;\n//   //   });\n\n//   //   try {\n//   //     // Check if the email domain is correct\n//   //     if (!_emailController.text.trim().endsWith(_expectedDomain)) {\n//   //       setState(() {\n//   //         _domainErrorMessage =\n//   //             'Please log in with your college email address.';\n//   //       });\n//   //       setState(() {\n//   //         _isLoading = false;\n//   //       });\n//   //       return;\n//   //     }\n\n//   //     // Sign in user\n//   //     UserCredential userCredential = await _auth.signInWithEmailAndPassword(\n//   //       email: _emailController.text.trim(),\n//   //       password: _passwordController.text.trim(),\n//   //     );\n\n//   //     User? user = userCredential.user;\n\n//   //     if (user != null) {\n//   //       // Check if user document exists in Firestore\n//   //       DocumentSnapshot userDoc =\n//   //           await _firestore.collection('users').doc(user.uid).get();\n\n//   //       if (!userDoc.exists) {\n//   //         // Show a message to the user if their data does not exist in Firestore\n//   //         ScaffoldMessenger.of(context).showSnackBar(\n//   //           const SnackBar(\n//   //             content: Text('User data not found'),\n//   //             backgroundColor: Colors.red,\n//   //           ),\n//   //         );\n\n//   //         // Optionally log out the user if document doesn't exist\n//   //         await _auth.signOut();\n//   //         setState(() {\n//   //           _isLoading = false;\n//   //         });\n//   //         return;\n//   //       }\n\n//   //       // Navigate to HomePage (even if email is not verified)\n//   //       Navigator.pushReplacement(\n//   //         context,\n//   //         MaterialPageRoute(builder: (_) => const HomePage()),\n//   //       );\n//   //     }\n//   //   } on FirebaseAuthException catch (e) {\n//   //     setState(() {\n//   //       _errorMessage = e.code == 'user-not-found'\n//   //           ? 'No user found for that email.'\n//   //           : e.code == 'wrong-password'\n//   //               ? 'Wrong password provided for that user.'\n//   //               : 'Failed to log in. Please try again.';\n//   //     });\n//   //   } catch (e) {\n//   //     setState(() {\n//   //       _errorMessage = 'An error occurred. Please try again.';\n//   //     });\n//   //   } finally {\n//   //     setState(() {\n//   //       _isLoading = false;\n//   //     });\n//   //   }\n//   // }\n\n//   @override\n//   Widget build(BuildContext context) {\n//     bool isMobile = MediaQuery.of(context).size.width < 630;\n//     Size size = MediaQuery.of(context).size;\n//     return Scaffold(\n//       body: Center(\n//         child: SingleChildScrollView(\n//           padding: const EdgeInsets.all(16.0),\n//           child: Column(\n//             mainAxisAlignment: MainAxisAlignment.center,\n//             children: [\n//               const SizedBox(height: 16),\n//               const Text(\n//                 'Welcome Back!',\n//                 style: TextStyle(\n//                   fontSize: 32,\n//                   fontWeight: FontWeight.bold,\n//                   color: Colors.black,\n//                 ),\n//               ),\n//               const SizedBox(height: 32),\n//               Container(\n//                 width: isMobile ? size.width * 0.8 : size.width * 0.5,\n//                 decoration: BoxDecoration(\n//                   color: Colors.white.withOpacity(0.1),\n//                   borderRadius: BorderRadius.circular(12),\n//                   boxShadow: [\n//                     BoxShadow(\n//                       color: Colors.black.withOpacity(0.1),\n//                       blurRadius: 10,\n//                       offset: const Offset(0, 4),\n//                     ),\n//                   ],\n//                 ),\n//                 padding: const EdgeInsets.all(16.0),\n//                 child: Column(\n//                   children: [\n//                     _buildTextField(\n//                       controller: _emailController,\n//                       label: 'Email',\n//                       icon: Icons.email,\n//                       keyboardType: TextInputType.emailAddress,\n//                     ),\n//                     const SizedBox(height: 16),\n//                     _buildTextField(\n//                       controller: _passwordController,\n//                       label: 'Password',\n//                       icon: Icons.lock,\n//                       obscureText: true,\n//                     ),\n//                     const SizedBox(height: 16),\n//                     if (_errorMessage != null)\n//                       Text(\n//                         _errorMessage!,\n//                         style: const TextStyle(color: Colors.red, fontSize: 16),\n//                       ),\n//                     if (_verificationMessage != null)\n//                       Text(\n//                         _verificationMessage!,\n//                         style:\n//                             const TextStyle(color: Colors.orange, fontSize: 16),\n//                         textAlign: TextAlign.center,\n//                       ),\n//                     if (_domainErrorMessage != null)\n//                       Text(\n//                         _domainErrorMessage!,\n//                         style: const TextStyle(color: Colors.red, fontSize: 16),\n//                         textAlign: TextAlign.center,\n//                       ),\n//                     SizedBox(height: isMobile ? 0 : 16),\n//                     _isLoading\n//                         ? const CircularProgressIndicator()\n//                         : ElevatedButton(\n//                             onPressed: _login,\n//                             style: ElevatedButton.styleFrom(\n//                               backgroundColor: Colors.deepOrange,\n//                               padding: const EdgeInsets.symmetric(\n//                                   horizontal: 32, vertical: 12),\n//                               textStyle: const TextStyle(\n//                                   fontSize: 18, fontWeight: FontWeight.bold),\n//                               shape: RoundedRectangleBorder(\n//                                 borderRadius: BorderRadius.circular(12),\n//                               ),\n//                             ),\n//                             child: const Text(\n//                               'Login',\n//                               style: TextStyle(color: Colors.white),\n//                             ),\n//                           ),\n//                     SizedBox(height: isMobile ? 0 : 16),\n//                     TextButton(\n//                       onPressed: () {\n//                         Navigator.push(\n//                             context,\n//                             MaterialPageRoute(\n//                                 builder: (_) => const ResetPasswordPage()));\n//                       },\n//                       child: const Text(\n//                         'Forgot Password?',\n//                         style: TextStyle(\n//                           decoration: TextDecoration.underline,\n//                             color: Colors.black, fontWeight: FontWeight.bold),\n//                       ),\n//                     ),\n//                     TextButton(\n//                       onPressed: () {\n//                         Navigator.push(\n//                             context,\n//                             MaterialPageRoute(\n//                                 builder: (_) => const SignUpPage()));\n//                       },\n//                       child: const Text(\n//                         'Don\\'t have an account? Sign Up',\n//                         style: TextStyle(\n//                           decoration: TextDecoration.underline,\n//                             color: Colors.black, fontWeight: FontWeight.bold),\n//                       ),\n//                     ),\n//                   ],\n//                 ),\n//               ),\n//             ],\n//           ),\n//         ),\n//       ),\n//     );\n//   }\n\n//   Widget _buildTextField({\n//     required TextEditingController controller,\n//     required String label,\n//     required IconData icon,\n//     bool obscureText = false,\n//     TextInputType keyboardType = TextInputType.text,\n//   }) {\n//     return TextField(\n//       controller: controller,\n//       decoration: InputDecoration(\n//         labelText: label,\n//         labelStyle: const TextStyle(color: Colors.black),\n//         prefixIcon: Icon(icon, color: Colors.deepOrange),\n//         filled: true,\n//         fillColor: Colors.white.withOpacity(1),\n//         border: OutlineInputBorder(\n//           borderRadius: BorderRadius.circular(12),\n//           borderSide: BorderSide.none,\n//         ),\n//         contentPadding:\n//             const EdgeInsets.symmetric(horizontal: 16, vertical: 12),\n//       ),\n//       obscureText: obscureText,\n//       keyboardType: keyboardType,\n//       style: const TextStyle(color: Colors.black),\n//     );\n//   }\n// }\n"
        }
    ]
}