{
    "sourceFile": "lib/Frontend/MyList/my_posts.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1756119059834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756122898246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -397,9 +397,9 @@\n //                 await _deletePost(context);\n \n //                 Navigator.of(context).pop();\n //               },\n-//               child: const Text('Yes'),\n+              child: const Text('Yes'),\n //             ),\n //             TextButton(\n //               onPressed: () => Navigator.of(context).pop(),\n //               child: const Text('No'),\n"
                }
            ],
            "date": 1756119059834,
            "name": "Commit-0",
            "content": "// import 'package:carousel_slider/carousel_slider.dart';\n// import 'package:cloud_firestore/cloud_firestore.dart';\n// import 'package:firebase_auth/firebase_auth.dart';\n// import 'package:flutter/material.dart';\n// import 'package:intl/intl.dart';\n// import 'package:l_f/Frontend/Home/Post/post_model.dart';\n// import 'package:l_f/Frontend/Profile/user_see_page.dart';\n\n// class MyPostsPage extends StatefulWidget {\n//   const MyPostsPage({super.key});\n\n//   @override\n//   State<MyPostsPage> createState() => _MyPostsPageState();\n// }\n\n// class _MyPostsPageState extends State<MyPostsPage> {\n//   final Map<String, Map<String, String>> _userCache =\n//       {}; // Cache to store user data\n//   User? user = FirebaseAuth.instance.currentUser;\n//   String? postId;\n//   String _formatDate(Timestamp? timestamp) {\n//     if (timestamp == null) return 'Not available';\n//     DateTime date = timestamp.toDate();\n//     return DateFormat('dd MMMM yyyy').format(date);\n//   }\n\n//   Future<void> _deletePost(BuildContext context) async {\n//     try {\n//       await FirebaseFirestore.instance.collection('posts').doc(postId).delete();\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         const SnackBar(\n//           content: Text('Post deleted successfully'),\n//           behavior: SnackBarBehavior.floating,\n//           margin: EdgeInsets.all(16.0),\n//           duration: Duration(seconds: 2),\n//         ),\n//       );\n//     } catch (e) {\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         SnackBar(content: Text('Failed to delete post: $e')),\n//       );\n//     }\n//   }\n\n//   Future<Map<String, String>> fetchUserNameAndProfilePic(String uid) async {\n//     if (_userCache.containsKey(uid)) {\n//       return _userCache[uid]!; // Return cached data if available\n//     }\n\n//     try {\n//       DocumentSnapshot userDoc =\n//           await FirebaseFirestore.instance.collection('users').doc(uid).get();\n\n//       if (!userDoc.exists) {\n//         throw Exception(\"User not found.\");\n//       }\n\n//       Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n\n//       String name = userData['name'] ?? 'NITH User';\n//       String profileImage = userData['profileImage'] ?? '';\n\n//       // Cache the user data\n//       _userCache[uid] = {\n//         'name': name,\n//         'profileImage': profileImage,\n//       };\n\n//       return _userCache[uid]!;\n//     } catch (e) {\n//       print(\"Error fetching user profile: $e\");\n//       throw Exception(\"Error fetching user profile.\");\n//     }\n//   }\n\n//   @override\n//   Widget build(BuildContext context) {\n//     bool isMobile = MediaQuery.of(context).size.width < 830;\n//     Size size = MediaQuery.of(context).size;\n//     return Scaffold(\n//       body: StreamBuilder<QuerySnapshot>(\n//         stream: FirebaseFirestore.instance\n//             .collection('posts')\n//             .orderBy('timestamp', descending: true)\n//             .where('postmakerId', isEqualTo: user!.uid)\n//             .snapshots(),\n//         builder: (context, snapshot) {\n//           if (snapshot.connectionState == ConnectionState.waiting) {\n//             return const Center(child: CircularProgressIndicator());\n//           }\n//           if (snapshot.hasError) {\n//             print(\"Error : ${snapshot.error}\");\n//             return const Center(child: Text('Error loading posts'));\n//           }\n\n//           if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n//             return const Center(child: Text('No posts available'));\n//           }\n//           final postDocs = snapshot.data!.docs;\n\n//           final postsFutures = postDocs.map((doc) {\n//             final data = doc.data() as Map<String, dynamic>;\n//             final String uid = data['postmakerId'];\n\n//             return fetchUserNameAndProfilePic(uid).then((userDetails) {\n//               return PostModel(\n//                 userName: userDetails['name'] ?? 'NITH User',\n//                 profileImageUrl: userDetails['profileImage'] ?? '',\n//                 postTime: _formatDate(data['timestamp']),\n//                 itemImages: List<String>.from(\n//                     data['imageUrls'] ?? ['']),\n//                 status: data['status'] ?? '',\n//                 title: data['item'] ?? '',\n//                 location: data['location'] ?? '',\n//                 description: data['description'] ?? '',\n//                 postmakerId: data['postmakerId'],\n//                 postId: doc.id,\n//               );\n//             });\n//           });\n\n//           return FutureBuilder<List<PostModel>>(\n//             future:\n//                 Future.wait(postsFutures), // Wait for all futures to complete\n//             builder: (context, futureSnapshot) {\n//               if (futureSnapshot.connectionState == ConnectionState.waiting) {\n//                 return const Center(child: CircularProgressIndicator());\n//               }\n\n//               if (futureSnapshot.hasError) {\n//                 return const Center(child: Text('Error loading posts'));\n//               }\n\n//               final postsList = futureSnapshot.data ?? [];\n\n//               return ListView.builder(\n//                 itemCount: postsList.length,\n//                 itemBuilder: (context, index) {\n//                   final post = postsList[index];\n//                   return Padding(\n//                     padding: EdgeInsets.all(isMobile ? 2 : 8.0),\n//                     child: Center(\n//                       child: SizedBox(\n//                         width: isMobile ? size.width : 600,\n//                         child: Card(\n//                           elevation: 5,\n//                           shape: RoundedRectangleBorder(\n//                             borderRadius: BorderRadius.circular(10),\n//                           ),\n//                           child: Column(\n//                             crossAxisAlignment: CrossAxisAlignment.start,\n//                             children: [\n//                               GestureDetector(\n//                                 onTap: () {\n//                                   Navigator.push(\n//                                       context,\n//                                       MaterialPageRoute(\n//                                           builder: (_) => ProfilePage2(\n//                                               uid: post.postmakerId)));\n//                                 },\n//                                 child: ListTile(\n//                                   leading: CircleAvatar(\n//                                     //    radius: 40,\n//                                     backgroundImage:\n//                                         NetworkImage(post.profileImageUrl),\n//                                   ),\n//                                   title: Text(post.userName,\n//                                       style: const TextStyle(\n//                                           fontWeight: FontWeight.bold)),\n//                                   subtitle: Text(\n//                                       \"Location : ${post.location} , NITH\"),\n//                                   trailing: PopupMenuButton<String>(\n//                                     onSelected: (value) {\n//                                       if (value == 'Delete') {\n//                                         if (user!.uid == post.postmakerId) {\n//                                           _showDeleteConfirmation(\n//                                               context, post);\n//                                         } else {\n//                                           ScaffoldMessenger.of(context)\n//                                               .showSnackBar(\n//                                             const SnackBar(\n//                                                 backgroundColor: Colors.red,\n//                                                 content: Text(\n//                                                     \"You can't delete this post\")),\n//                                           );\n//                                         }\n//                                       }\n//                                     },\n//                                     itemBuilder: (BuildContext context) {\n//                                       return {'Delete'}.map((String choice) {\n//                                         return PopupMenuItem<String>(\n//                                           value: choice,\n//                                           child: Text(choice),\n//                                         );\n//                                       }).toList();\n//                                     },\n//                                   ),\n//                                 ),\n//                               ),\n//                               Stack(\n//                                 children: [\n//                                   CarouselSlider(\n//                                     options: CarouselOptions(\n//                                       autoPlay: true,\n//                                       height: 400.0,\n//                                       enlargeCenterPage: true,\n//                                     ),\n//                                     items:\n//                                         post.itemImages.map<Widget>((imageUrl) {\n//                                       return GestureDetector(\n//                                         onTap: () {\n//                                           showDialog(\n//                                             context: context,\n//                                             builder: (BuildContext context) {\n//                                               return Dialog(\n//                                                 child: Stack(\n//                                                   children: [\n//                                                     Image.network(imageUrl),\n//                                                     Positioned(\n//                                                       right: 10,\n//                                                       top: 10,\n//                                                       child: IconButton(\n//                                                         icon: const Icon(\n//                                                             Icons.cancel,\n//                                                             color: Colors.red),\n//                                                         onPressed: () {\n//                                                           Navigator.of(context)\n//                                                               .pop();\n//                                                         },\n//                                                       ),\n//                                                     ),\n//                                                   ],\n//                                                 ),\n//                                               );\n//                                             },\n//                                           );\n//                                         },\n//                                         child: ClipRRect(\n//                                           borderRadius:\n//                                               BorderRadius.circular(10),\n//                                           child: Image.network(\n//                                             imageUrl,\n//                                             fit: BoxFit.cover,\n//                                             width: 500,\n//                                             errorBuilder:\n//                                                 (context, error, stackTrace) {\n//                                               return const Icon(Icons.error);\n//                                             },\n//                                           ),\n//                                         ),\n//                                       );\n//                                     }).toList(),\n//                                   ),\n//                                   Positioned(\n//                                     top: isMobile ? 10 : 2,\n//                                     left: 50,\n//                                     child: Container(\n//                                       padding: const EdgeInsets.symmetric(\n//                                           horizontal: 10, vertical: 5),\n//                                       decoration: BoxDecoration(\n//                                         color: post.status == 'Lost'\n//                                             ? Colors.red\n//                                             : Colors.green,\n//                                         borderRadius: BorderRadius.circular(5),\n//                                       ),\n//                                       child: Text(\n//                                         post.status,\n//                                         style: const TextStyle(\n//                                           color: Colors.white,\n//                                           fontWeight: FontWeight.bold,\n//                                         ),\n//                                       ),\n//                                     ),\n//                                   ),\n//                                 ],\n//                               ),\n//                               Padding(\n//                                 padding: EdgeInsets.symmetric(\n//                                     horizontal: isMobile ? 10 : 58.0,\n//                                     vertical: 10),\n//                                 child: Column(\n//                                   crossAxisAlignment: CrossAxisAlignment.start,\n//                                   children: [\n//                                     Row(\n//                                       mainAxisAlignment:\n//                                           MainAxisAlignment.spaceBetween,\n//                                       children: [\n//                                         Text(\n//                                           post.title == 'Other'\n//                                               ? '${post.status} Item'\n//                                               : post.title,\n//                                           style: const TextStyle(\n//                                               fontSize: 18,\n//                                               fontWeight: FontWeight.bold),\n//                                         ),\n//                                         SizedBox(width: isMobile ? 0 : 5),\n//                                         Row(\n//                                           children: [\n//                                             Text(\"${post.status} On : \",\n//                                                 style: const TextStyle(\n//                                                     color: Colors.red,\n//                                                     fontWeight:\n//                                                         FontWeight.bold)),\n//                                             Text(post.postTime,\n//                                                 style: const TextStyle(\n//                                                     fontWeight:\n//                                                         FontWeight.bold)),\n//                                           ],\n//                                         ),\n//                                       ],\n//                                     ),\n//                                     const SizedBox(height: 5),\n//                                     Row(\n//                                       crossAxisAlignment: CrossAxisAlignment\n//                                           .start, // Align text to the start\n//                                       children: [\n//                                         const Text(\n//                                           \"Description : \",\n//                                           style: TextStyle(\n//                                             fontWeight: FontWeight.bold,\n//                                           ),\n//                                         ),\n//                                         Expanded(\n//                                           child: Text(\n//                                             post.description,\n//                                             style: const TextStyle(\n//                                               fontSize: 16,\n//                                             ),\n//                                             softWrap: true,\n//                                             overflow: TextOverflow.visible,\n//                                           ),\n//                                         ),\n//                                       ],\n//                                     ),\n//                                     const SizedBox(height: 10),\n//                                     Row(\n//                                       mainAxisAlignment:\n//                                           MainAxisAlignment.spaceAround,\n//                                       children: [\n//                                         GestureDetector(\n//                                           onTap: () {\n//                                             _sharePost(context, post.title,\n//                                                 post.description);\n//                                           },\n//                                           child: const Row(\n//                                             children: [\n//                                               Icon(Icons.share_rounded),\n//                                               SizedBox(width: 5),\n//                                               Text('Share'),\n//                                             ],\n//                                           ),\n//                                         ),\n//                                       ],\n//                                     ),\n//                                   ],\n//                                 ),\n//                               ),\n//                             ],\n//                           ),\n//                         ),\n//                       ),\n//                     ),\n//                   );\n//                 },\n//               );\n//             },\n//           );\n//         },\n//       ),\n//     );\n//   }\n\n//   void _sharePost(BuildContext context, String title, String description) {\n//     final content = 'Check out this post: $title\\nDescription: $description';\n//     final snackBar = SnackBar(content: Text('Shared! $content'));\n//     ScaffoldMessenger.of(context).showSnackBar(snackBar);\n//   }\n\n//   void _showDeleteConfirmation(BuildContext context, PostModel post) {\n//     postId = post.postId;\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return AlertDialog(\n//           title: const Text('Delete Post'),\n//           content: const Text('Are you sure you want to delete this post?'),\n//           actions: [\n//             TextButton(\n//               onPressed: () async {\n//                 // Call your delete functionality here\n//                 ScaffoldMessenger.of(context).showSnackBar(\n//                   const SnackBar(\n//                       backgroundColor: Colors.deepOrange,\n//                       content: Text('Post deleted successfully')),\n//                 );\n\n//                 await _deletePost(context);\n\n//                 Navigator.of(context).pop();\n//               },\n//               child: const Text('Yes'),\n//             ),\n//             TextButton(\n//               onPressed: () => Navigator.of(context).pop(),\n//               child: const Text('No'),\n//             ),\n//           ],\n//         );\n//       },\n//     );\n//   }\n\n//   void _showFullImageDialog(BuildContext context, String imageUrl) {\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return Dialog(\n//           child: Stack(\n//             children: [\n//               Image.network(imageUrl),\n//               Positioned(\n//                 right: 10,\n//                 top: 10,\n//                 child: IconButton(\n//                   icon: const Icon(Icons.cancel, color: Colors.red),\n//                   onPressed: () {\n//                     Navigator.of(context).pop();\n//                   },\n//                 ),\n//               ),\n//             ],\n//           ),\n//         );\n//       },\n//     );\n//   }\n// }\n"
        }
    ]
}