{
    "sourceFile": "lib/Frontend/Home/Post/create_post.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1756119020044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756122841168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,490 +1,490 @@\n-// import 'package:cloud_firestore/cloud_firestore.dart';\n-// import 'package:file_picker/file_picker.dart';\n-// import 'package:firebase_auth/firebase_auth.dart';\n-// import 'package:firebase_storage/firebase_storage.dart';\n-// import 'package:flutter/foundation.dart';\n-// import 'package:flutter/material.dart';\n-// import 'package:image_picker/image_picker.dart';\n-// import 'package:l_f/Frontend/Contants/lists.dart';\n+import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:file_picker/file_picker.dart';\n+import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:firebase_storage/firebase_storage.dart';\n+import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:image_picker/image_picker.dart';\n+import 'package:l_f/Frontend/Contants/lists.dart';\n \n-// class CreatePostPage extends StatefulWidget {\n-//   const CreatePostPage({super.key});\n+class CreatePostPage extends StatefulWidget {\n+  const CreatePostPage({super.key});\n \n-//   @override\n-//   _CreatePostPageState createState() => _CreatePostPageState();\n-// }\n+  @override\n+  _CreatePostPageState createState() => _CreatePostPageState();\n+}\n \n-// class _CreatePostPageState extends State<CreatePostPage> {\n-//   List<Uint8List>? _imageBytes;\n-//   final _formKey = GlobalKey<FormState>();\n-//   String _status = 'Lost';\n-//   String? _title;\n-//   String? _location;\n-//   String? _hostel;\n-//   String? _description;\n-//   String? _question;\n-//   String? postClaimer;\n-//   bool _isLoading = false;\n-//   bool _isSuccess = false;\n-//   final bool _isClaimed = false;\n-//   FirebaseStorage storage = FirebaseStorage.instance;\n-//   FirebaseAuth auth = FirebaseAuth.instance;\n-//   final FirebaseFirestore firestore = FirebaseFirestore.instance;\n+class _CreatePostPageState extends State<CreatePostPage> {\n+  List<Uint8List>? _imageBytes;\n+  final _formKey = GlobalKey<FormState>();\n+  String _status = 'Lost';\n+  String? _title;\n+  String? _location;\n+  String? _hostel;\n+  String? _description;\n+  String? _question;\n+  String? postClaimer;\n+  bool _isLoading = false;\n+  bool _isSuccess = false;\n+  final bool _isClaimed = false;\n+  FirebaseStorage storage = FirebaseStorage.instance;\n+  FirebaseAuth auth = FirebaseAuth.instance;\n+  final FirebaseFirestore firestore = FirebaseFirestore.instance;\n \n-//   final List<String> _boysHostels = boyshostelsList;\n-//   final List<String> _girlsHostels = girlshostelsList;\n-//   final List<String> _itemLists = itemsList;\n-//   final List<String> _locations = locationsList;\n+  final List<String> _boysHostels = boyshostelsList;\n+  final List<String> _girlsHostels = girlshostelsList;\n+  final List<String> _itemLists = itemsList;\n+  final List<String> _locations = locationsList;\n \n-//   @override\n-//   void initState() {\n-//     super.initState();\n-//     _fetchUserData();\n-//   }\n+  @override\n+  void initState() {\n+    super.initState();\n+    _fetchUserData();\n+  }\n \n-//   Future<void> _pickImages() async {\n-//     try {\n-//       if (kIsWeb) {\n-//         // Use FilePicker for web\n-//         final result = await FilePicker.platform.pickFiles(\n-//           allowMultiple: true,\n-//           type: FileType.image,\n-//         );\n+  Future<void> _pickImages() async {\n+    try {\n+      if (kIsWeb) {\n+        // Use FilePicker for web\n+        final result = await FilePicker.platform.pickFiles(\n+          allowMultiple: true,\n+          type: FileType.image,\n+        );\n \n-//         if (result != null) {\n-//           setState(() {\n-//             _imageBytes = result.files.map((file) => file.bytes!).toList();\n-//           });\n-//         }\n-//       } else {\n-//         // Use ImagePicker for mobile\n-//         final ImagePicker picker = ImagePicker();\n-//         final List<XFile> pickedFiles = await picker.pickMultiImage();\n+        if (result != null) {\n+          setState(() {\n+            _imageBytes = result.files.map((file) => file.bytes!).toList();\n+          });\n+        }\n+      } else {\n+        // Use ImagePicker for mobile\n+        final ImagePicker picker = ImagePicker();\n+        final List<XFile> pickedFiles = await picker.pickMultiImage();\n \n-//         if (pickedFiles.isNotEmpty) {\n-//           List<Uint8List> imageBytes = [];\n-//           for (var pickedFile in pickedFiles) {\n-//             final Uint8List fileBytes = await pickedFile.readAsBytes();\n-//             imageBytes.add(fileBytes);\n-//           }\n+        if (pickedFiles.isNotEmpty) {\n+          List<Uint8List> imageBytes = [];\n+          for (var pickedFile in pickedFiles) {\n+            final Uint8List fileBytes = await pickedFile.readAsBytes();\n+            imageBytes.add(fileBytes);\n+          }\n \n-//           setState(() {\n-//             _imageBytes = imageBytes;\n-//           });\n-//         }\n-//       }\n-//     } catch (e) {\n-//       print('Error picking files: $e');\n-//     }\n-//   }\n+          setState(() {\n+            _imageBytes = imageBytes;\n+          });\n+        }\n+      }\n+    } catch (e) {\n+      print('Error picking files: $e');\n+    }\n+  }\n \n-//   Future<void> _fetchUserData() async {\n-//     try {\n-//       User user = auth.currentUser!;\n-//       DocumentSnapshot userDoc =\n-//           await firestore.collection('users').doc(user.uid).get();\n+  Future<void> _fetchUserData() async {\n+    try {\n+      User user = auth.currentUser!;\n+      DocumentSnapshot userDoc =\n+          await firestore.collection('users').doc(user.uid).get();\n \n-//       if (userDoc.exists) {\n-//         setState(() {\n-//           print(\"USER DATAAAA  ::::  $userDoc\");\n-//         });\n-//       }\n-//     } catch (e) {\n-//       print('Error fetching user data: $e');\n-//     }\n-//   }\n+      if (userDoc.exists) {\n+        setState(() {\n+          print(\"USER DATAAAA  ::::  $userDoc\");\n+        });\n+      }\n+    } catch (e) {\n+      print('Error fetching user data: $e');\n+    }\n+  }\n \n-//   Future<void> _submitData() async {\n-//     if (_formKey.currentState?.validate() == false) {\n-//       return;\n-//     }\n+  Future<void> _submitData() async {\n+    if (_formKey.currentState?.validate() == false) {\n+      return;\n+    }\n \n-//     _formKey.currentState?.save();\n+    _formKey.currentState?.save();\n \n-//     if (!mounted) return;\n+    if (!mounted) return;\n \n-//     if (_imageBytes == null || _imageBytes!.isEmpty) {\n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         const SnackBar(\n-//             backgroundColor: Colors.deepOrange,\n-//             content: Text('Please select at least one image')),\n-//       );\n-//       return;\n-//     }\n-//     setState(() {\n-//       _isLoading = true;\n-//       _isSuccess = false;\n-//     });\n+    if (_imageBytes == null || _imageBytes!.isEmpty) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+            backgroundColor: Colors.deepOrange,\n+            content: Text('Please select at least one image')),\n+      );\n+      return;\n+    }\n+    setState(() {\n+      _isLoading = true;\n+      _isSuccess = false;\n+    });\n \n-//     try {\n-//       final FirebaseFirestore firestore = FirebaseFirestore.instance;\n-//       final FirebaseStorage storage = FirebaseStorage.instance;\n-//       User? user = FirebaseAuth.instance.currentUser;\n-//       List<String> imageUrls = [];\n+    try {\n+      final FirebaseFirestore firestore = FirebaseFirestore.instance;\n+      final FirebaseStorage storage = FirebaseStorage.instance;\n+      User? user = FirebaseAuth.instance.currentUser;\n+      List<String> imageUrls = [];\n \n-//       final uploadFutures = _imageBytes!.asMap().entries.map((entry) async {\n-//         final index = entry.key;\n-//         final imageByteData = entry.value;\n-//         final fileName =\n-//             'images/${DateTime.now().millisecondsSinceEpoch}_$index.jpg';\n-//         final ref = storage.ref().child(fileName);\n-//         await ref.putData(imageByteData);\n-//         return ref.getDownloadURL();\n-//       });\n+      final uploadFutures = _imageBytes!.asMap().entries.map((entry) async {\n+        final index = entry.key;\n+        final imageByteData = entry.value;\n+        final fileName =\n+            'images/${DateTime.now().millisecondsSinceEpoch}_$index.jpg';\n+        final ref = storage.ref().child(fileName);\n+        await ref.putData(imageByteData);\n+        return ref.getDownloadURL();\n+      });\n \n-//       imageUrls = await Future.wait(uploadFutures);\n+      imageUrls = await Future.wait(uploadFutures);\n \n-//       print(\"Images :  ::::###### $imageUrls\");\n+      print(\"Images :  ::::###### $imageUrls\");\n \n-//       final data = {\n-//         'location': _location,\n-//         'item': _title,\n-//         'description': _description,\n-//         'imageUrls': imageUrls,\n-//         'timestamp': FieldValue.serverTimestamp(),\n-//         'postmakerId': user!.uid,\n-//         'isClaimed': _isClaimed,\n-//         'postClaimer': postClaimer,\n-//         'claimStatus': \"\",\n-//         'question': _question,\n-//         'status': _status,\n-//       };\n+      final data = {\n+        'location': _location,\n+        'item': _title,\n+        'description': _description,\n+        'imageUrls': imageUrls,\n+        'timestamp': FieldValue.serverTimestamp(),\n+        'postmakerId': user!.uid,\n+        'isClaimed': _isClaimed,\n+        'postClaimer': postClaimer,\n+        'claimStatus': \"\",\n+        'question': _question,\n+        'status': _status,\n+      };\n \n-//       print('Submitting data: $data');\n+      print('Submitting data: $data');\n \n-//       DocumentReference postRef = await firestore.collection('posts').add(data);\n+      DocumentReference postRef = await firestore.collection('posts').add(data);\n \n-//       await postRef.update({'postId': postRef.id});\n+      await postRef.update({'postId': postRef.id});\n \n-//       setState(() {\n-//         _isLoading = false;\n-//         _isSuccess = true;\n-//       });\n+      setState(() {\n+        _isLoading = false;\n+        _isSuccess = true;\n+      });\n \n-//       if (mounted) {\n-//         ScaffoldMessenger.of(context).showSnackBar(\n-//           const SnackBar(\n-//               backgroundColor: Colors.green,\n-//               content: Text('Item uploaded successfully!')),\n-//         );\n-//         Navigator.of(context).pop();\n-//       }\n-//     } catch (e) {\n-//       setState(() {\n-//         _isLoading = false;\n-//         _isSuccess = false;\n-//       });\n-//       print('Error submitting data: $e');\n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         const SnackBar(\n-//             backgroundColor: Colors.red, content: Text('Error uploading item')),\n-//       );\n-//     }\n-//   }\n+      if (mounted) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          const SnackBar(\n+              backgroundColor: Colors.green,\n+              content: Text('Item uploaded successfully!')),\n+        );\n+        Navigator.of(context).pop();\n+      }\n+    } catch (e) {\n+      setState(() {\n+        _isLoading = false;\n+        _isSuccess = false;\n+      });\n+      print('Error submitting data: $e');\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+            backgroundColor: Colors.red, content: Text('Error uploading item')),\n+      );\n+    }\n+  }\n \n-//   void _removeImage(int index) {\n-//     setState(() {\n-//       _imageBytes!.removeAt(index);\n-//     });\n-//   }\n+  void _removeImage(int index) {\n+    setState(() {\n+      _imageBytes!.removeAt(index);\n+    });\n+  }\n \n-//   @override\n-//   Widget build(BuildContext context) {\n-//     return Scaffold(\n-//       appBar: AppBar(\n-//         backgroundColor: Colors.deepOrange,\n-//         foregroundColor: Colors.white,\n-//         title: const Text('Create New Post'),\n-//       ),\n-//       body: Center(\n-//         child: SizedBox(\n-//           width: 500,\n-//           child: Card(\n-//             child: Padding(\n-//               padding: const EdgeInsets.all(16.0),\n-//               child: Form(\n-//                 key: _formKey,\n-//                 child: SingleChildScrollView(\n-//                   child: Column(\n-//                     crossAxisAlignment: CrossAxisAlignment.start,\n-//                     children: [\n-//                       Row(\n-//                         mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n-//                         children: [\n-//                           _statusSelector('Lost'),\n-//                           _statusSelector('Found'),\n-//                         ],\n-//                       ),\n-//                       const SizedBox(height: 16),\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        backgroundColor: Colors.deepOrange,\n+        foregroundColor: Colors.white,\n+        title: const Text('Create New Post'),\n+      ),\n+      body: Center(\n+        child: SizedBox(\n+          width: 500,\n+          child: Card(\n+            child: Padding(\n+              padding: const EdgeInsets.all(16.0),\n+              child: Form(\n+                key: _formKey,\n+                child: SingleChildScrollView(\n+                  child: Column(\n+                    crossAxisAlignment: CrossAxisAlignment.start,\n+                    children: [\n+                      Row(\n+                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n+                        children: [\n+                          _statusSelector('Lost'),\n+                          _statusSelector('Found'),\n+                        ],\n+                      ),\n+                      const SizedBox(height: 16),\n \n-//                       // Title input\n-//                       DropdownButtonFormField<String>(\n-//                         decoration: const InputDecoration(\n-//                           labelText: 'Item Title',\n-//                           border: OutlineInputBorder(),\n-//                         ),\n-//                         value: _title,\n-//                         items: _itemLists\n-//                             .map((itemTitle) => DropdownMenuItem<String>(\n-//                                   value: itemTitle,\n-//                                   child: Text(itemTitle),\n-//                                 ))\n-//                             .toList(),\n-//                         validator: (value) =>\n-//                             value == null ? 'Please select a title' : null,\n-//                         onChanged: (value) {\n-//                           setState(() {\n-//                             _title = value;\n-//                           });\n-//                         },\n-//                       ),\n+                      // Title input\n+                      DropdownButtonFormField<String>(\n+                        decoration: const InputDecoration(\n+                          labelText: 'Item Title',\n+                          border: OutlineInputBorder(),\n+                        ),\n+                        value: _title,\n+                        items: _itemLists\n+                            .map((itemTitle) => DropdownMenuItem<String>(\n+                                  value: itemTitle,\n+                                  child: Text(itemTitle),\n+                                ))\n+                            .toList(),\n+                        validator: (value) =>\n+                            value == null ? 'Please select a title' : null,\n+                        onChanged: (value) {\n+                          setState(() {\n+                            _title = value;\n+                          });\n+                        },\n+                      ),\n \n-//                       const SizedBox(height: 16),\n+                      const SizedBox(height: 16),\n \n-//                       // Location dropdown menu\n-//                       DropdownButtonFormField<String>(\n-//                         decoration: const InputDecoration(\n-//                           labelText: 'Location',\n-//                           border: OutlineInputBorder(),\n-//                         ),\n-//                         value: _location,\n-//                         items: _locations\n-//                             .map((location) => DropdownMenuItem<String>(\n-//                                   value: location,\n-//                                   child: Text(location),\n-//                                 ))\n-//                             .toList(),\n-//                         onChanged: (value) {\n-//                           setState(() {\n-//                             _location = value;\n-//                             _hostel =\n-//                                 null; // Reset hostel selection when location changes\n-//                           });\n-//                         },\n-//                         validator: (value) =>\n-//                             value == null ? 'Please select a location' : null,\n-//                         onSaved: (value) => _location = value,\n-//                       ),\n+                      // Location dropdown menu\n+                      DropdownButtonFormField<String>(\n+                        decoration: const InputDecoration(\n+                          labelText: 'Location',\n+                          border: OutlineInputBorder(),\n+                        ),\n+                        value: _location,\n+                        items: _locations\n+                            .map((location) => DropdownMenuItem<String>(\n+                                  value: location,\n+                                  child: Text(location),\n+                                ))\n+                            .toList(),\n+                        onChanged: (value) {\n+                          setState(() {\n+                            _location = value;\n+                            _hostel =\n+                                null; // Reset hostel selection when location changes\n+                          });\n+                        },\n+                        validator: (value) =>\n+                            value == null ? 'Please select a location' : null,\n+                        onSaved: (value) => _location = value,\n+                      ),\n \n-//                       const SizedBox(height: 16),\n+                      const SizedBox(height: 16),\n \n-//                       // Hostel dropdown for 'Boys Hostel' or 'Girls Hostel'\n-//                       if (_location == 'Boys Hostel' ||\n-//                           _location == 'Girls Hostel')\n-//                         DropdownButtonFormField<String>(\n-//                           decoration: const InputDecoration(\n-//                             labelText: 'Hostel Name',\n-//                             border: OutlineInputBorder(),\n-//                           ),\n-//                           value: _hostel,\n-//                           items: (_location == 'Boys Hostel'\n-//                                   ? _boysHostels\n-//                                   : _girlsHostels)\n-//                               .map((hostel) => DropdownMenuItem<String>(\n-//                                     value: hostel,\n-//                                     child: Text(hostel),\n-//                                   ))\n-//                               .toList(),\n-//                           onChanged: (value) {\n-//                             setState(() {\n-//                               _hostel = value;\n-//                             });\n-//                           },\n-//                           validator: (value) {\n-//                             if ((_location == 'Boys Hostel' ||\n-//                                     _location == 'Girls Hostel') &&\n-//                                 value == null) {\n-//                               return 'Please select a hostel';\n-//                             }\n-//                             return null;\n-//                           },\n-//                           onSaved: (value) => _hostel = value,\n-//                         ),\n-//                       const SizedBox(height: 16),\n+                      // Hostel dropdown for 'Boys Hostel' or 'Girls Hostel'\n+                      if (_location == 'Boys Hostel' ||\n+                          _location == 'Girls Hostel')\n+                        DropdownButtonFormField<String>(\n+                          decoration: const InputDecoration(\n+                            labelText: 'Hostel Name',\n+                            border: OutlineInputBorder(),\n+                          ),\n+                          value: _hostel,\n+                          items: (_location == 'Boys Hostel'\n+                                  ? _boysHostels\n+                                  : _girlsHostels)\n+                              .map((hostel) => DropdownMenuItem<String>(\n+                                    value: hostel,\n+                                    child: Text(hostel),\n+                                  ))\n+                              .toList(),\n+                          onChanged: (value) {\n+                            setState(() {\n+                              _hostel = value;\n+                            });\n+                          },\n+                          validator: (value) {\n+                            if ((_location == 'Boys Hostel' ||\n+                                    _location == 'Girls Hostel') &&\n+                                value == null) {\n+                              return 'Please select a hostel';\n+                            }\n+                            return null;\n+                          },\n+                          onSaved: (value) => _hostel = value,\n+                        ),\n+                      const SizedBox(height: 16),\n \n-//                       // Description input\n-//                       TextFormField(\n-//                         decoration: const InputDecoration(\n-//                           labelText: 'Description',\n-//                           border: OutlineInputBorder(),\n-//                         ),\n-//                         maxLines: 4,\n-//                         onSaved: (value) => _description = value,\n-//                         validator: (value) => value!.isEmpty\n-//                             ? 'Please enter a description'\n-//                             : null,\n-//                       ),\n-//                       const SizedBox(height: 16),\n+                      // Description input\n+                      TextFormField(\n+                        decoration: const InputDecoration(\n+                          labelText: 'Description',\n+                          border: OutlineInputBorder(),\n+                        ),\n+                        maxLines: 4,\n+                        onSaved: (value) => _description = value,\n+                        validator: (value) => value!.isEmpty\n+                            ? 'Please enter a description'\n+                            : null,\n+                      ),\n+                      const SizedBox(height: 16),\n \n-//                       // Question input (only for 'Found' items)\n-//                       if (_status == 'Found')\n-//                         Column(\n-//                           crossAxisAlignment: CrossAxisAlignment.start,\n-//                           children: [\n-//                             TextFormField(\n-//                               decoration: const InputDecoration(\n-//                                 labelText:\n-//                                     'Verification Question (to ask the Claimer)',\n-//                                 border: OutlineInputBorder(),\n-//                               ),\n-//                               onSaved: (value) => _question = value,\n-//                               validator: (value) {\n-//                                 if (_status == 'Found' &&\n-//                                     (value == null || value.isEmpty)) {\n-//                                   return 'Please provide a verification question for found items';\n-//                                 }\n-//                                 return null;\n-//                               },\n-//                             ),\n-//                             const SizedBox(height: 16),\n-//                           ],\n-//                         ),\n+                      // Question input (only for 'Found' items)\n+                      if (_status == 'Found')\n+                        Column(\n+                          crossAxisAlignment: CrossAxisAlignment.start,\n+                          children: [\n+                            TextFormField(\n+                              decoration: const InputDecoration(\n+                                labelText:\n+                                    'Verification Question (to ask the Claimer)',\n+                                border: OutlineInputBorder(),\n+                              ),\n+                              onSaved: (value) => _question = value,\n+                              validator: (value) {\n+                                if (_status == 'Found' &&\n+                                    (value == null || value.isEmpty)) {\n+                                  return 'Please provide a verification question for found items';\n+                                }\n+                                return null;\n+                              },\n+                            ),\n+                            const SizedBox(height: 16),\n+                          ],\n+                        ),\n \n-//                       const SizedBox(height: 16),\n+                      const SizedBox(height: 16),\n \n-//                       // Select Images Button\n-//                       SizedBox(\n-//                         width: 200,\n-//                         child: Center(\n-//                           child: ElevatedButton(\n-//                             onPressed: _pickImages,\n-//                             style: ElevatedButton.styleFrom(\n-//                               backgroundColor: Colors.deepOrange,\n-//                               shape: RoundedRectangleBorder(\n-//                                 borderRadius: BorderRadius.circular(10),\n-//                               ),\n-//                             ),\n-//                             child: const Row(\n-//                               children: [\n-//                                 Icon(Icons.photo_library_outlined,\n-//                                     color: Colors.white),\n-//                                 SizedBox(width: 8),\n-//                                 Text(\n-//                                   'Select Images',\n-//                                   style: TextStyle(\n-//                                       fontSize: 16, color: Colors.white),\n-//                                 ),\n-//                               ],\n-//                             ),\n-//                           ),\n-//                         ),\n-//                       ),\n-//                       const SizedBox(height: 16),\n+                      // Select Images Button\n+                      SizedBox(\n+                        width: 200,\n+                        child: Center(\n+                          child: ElevatedButton(\n+                            onPressed: _pickImages,\n+                            style: ElevatedButton.styleFrom(\n+                              backgroundColor: Colors.deepOrange,\n+                              shape: RoundedRectangleBorder(\n+                                borderRadius: BorderRadius.circular(10),\n+                              ),\n+                            ),\n+                            child: const Row(\n+                              children: [\n+                                Icon(Icons.photo_library_outlined,\n+                                    color: Colors.white),\n+                                SizedBox(width: 8),\n+                                Text(\n+                                  'Select Images',\n+                                  style: TextStyle(\n+                                      fontSize: 16, color: Colors.white),\n+                                ),\n+                              ],\n+                            ),\n+                          ),\n+                        ),\n+                      ),\n+                      const SizedBox(height: 16),\n \n-//                       if (_imageBytes != null && _imageBytes!.isNotEmpty)\n-//                         SizedBox(\n-//                           height: 110,\n-//                           child: ListView.builder(\n-//                             scrollDirection: Axis.horizontal,\n-//                             itemCount: _imageBytes!.length,\n-//                             itemBuilder: (context, index) {\n-//                               return Padding(\n-//                                 padding:\n-//                                     const EdgeInsets.symmetric(horizontal: 8.0),\n-//                                 child: Stack(\n-//                                   children: [\n-//                                     ClipRRect(\n-//                                       borderRadius: BorderRadius.circular(12),\n-//                                       child: Image.memory(\n-//                                         _imageBytes![index],\n-//                                         width: 90,\n-//                                         height: 100,\n-//                                         fit: BoxFit.cover,\n-//                                       ),\n-//                                     ),\n-//                                     Positioned(\n-//                                       top: 0,\n-//                                       right: 0,\n-//                                       child: IconButton(\n-//                                         icon: const Icon(Icons.cancel,\n-//                                             color: Colors.red),\n-//                                         onPressed: () => _removeImage(index),\n-//                                       ),\n-//                                     ),\n-//                                   ],\n-//                                 ),\n-//                               );\n-//                             },\n-//                           ),\n-//                         ),\n-//                       const SizedBox(height: 20),\n-//                       // Submit button\n-//                       Center(\n-//                         child: ElevatedButton(\n-//                           onPressed: _isLoading\n-//                               ? null\n-//                               : () {\n-//                                   if (_formKey.currentState!.validate()) {\n-//                                     _formKey.currentState!.save();\n-//                                     _submitData();\n-//                                   }\n-//                                 },\n-//                           style: ElevatedButton.styleFrom(\n-//                             backgroundColor: Colors.deepOrange,\n-//                             shape: RoundedRectangleBorder(\n-//                               borderRadius: BorderRadius.circular(10),\n-//                             ),\n-//                           ),\n-//                           child: Text(\n-//                             _isLoading ? 'Uploading...' : 'Submit',\n-//                             // 'Post',\n-//                             style: const TextStyle(\n-//                                 fontSize: 16,\n-//                                 color: Colors.white,\n-//                                 fontWeight: FontWeight.w600),\n-//                           ),\n-//                         ),\n-//                       ),\n-//                     ],\n-//                   ),\n-//                 ),\n-//               ),\n-//             ),\n-//           ),\n-//         ),\n-//       ),\n-//     );\n-//   }\n+                      if (_imageBytes != null && _imageBytes!.isNotEmpty)\n+                        SizedBox(\n+                          height: 110,\n+                          child: ListView.builder(\n+                            scrollDirection: Axis.horizontal,\n+                            itemCount: _imageBytes!.length,\n+                            itemBuilder: (context, index) {\n+                              return Padding(\n+                                padding:\n+                                    const EdgeInsets.symmetric(horizontal: 8.0),\n+                                child: Stack(\n+                                  children: [\n+                                    ClipRRect(\n+                                      borderRadius: BorderRadius.circular(12),\n+                                      child: Image.memory(\n+                                        _imageBytes![index],\n+                                        width: 90,\n+                                        height: 100,\n+                                        fit: BoxFit.cover,\n+                                      ),\n+                                    ),\n+                                    Positioned(\n+                                      top: 0,\n+                                      right: 0,\n+                                      child: IconButton(\n+                                        icon: const Icon(Icons.cancel,\n+                                            color: Colors.red),\n+                                        onPressed: () => _removeImage(index),\n+                                      ),\n+                                    ),\n+                                  ],\n+                                ),\n+                              );\n+                            },\n+                          ),\n+                        ),\n+                      const SizedBox(height: 20),\n+                      // Submit button\n+                      Center(\n+                        child: ElevatedButton(\n+                          onPressed: _isLoading\n+                              ? null\n+                              : () {\n+                                  if (_formKey.currentState!.validate()) {\n+                                    _formKey.currentState!.save();\n+                                    _submitData();\n+                                  }\n+                                },\n+                          style: ElevatedButton.styleFrom(\n+                            backgroundColor: Colors.deepOrange,\n+                            shape: RoundedRectangleBorder(\n+                              borderRadius: BorderRadius.circular(10),\n+                            ),\n+                          ),\n+                          child: Text(\n+                            _isLoading ? 'Uploading...' : 'Submit',\n+                            // 'Post',\n+                            style: const TextStyle(\n+                                fontSize: 16,\n+                                color: Colors.white,\n+                                fontWeight: FontWeight.w600),\n+                          ),\n+                        ),\n+                      ),\n+                    ],\n+                  ),\n+                ),\n+              ),\n+            ),\n+          ),\n+        ),\n+      ),\n+    );\n+  }\n \n-//   // Widget to select Lost/Found status\n-//   Widget _statusSelector(String status) {\n-//     return ChoiceChip(\n-//       label: Row(\n-//         mainAxisSize: MainAxisSize.min,\n-//         children: [\n-//           CircleAvatar(\n-//             radius: 12,\n-//             child: CircleAvatar(\n-//               radius: 10,\n-//               backgroundColor:\n-//                   _status == status ? Colors.deepOrange : Colors.transparent,\n-//               child: _status == status\n-//                   ? null\n-//                   : Container(\n-//                       decoration: BoxDecoration(\n-//                         shape: BoxShape.circle,\n-//                         border: Border.all(color: Colors.black, width: 2),\n-//                       ),\n-//                     ),\n-//             ),\n-//           ),\n-//           const SizedBox(width: 8),\n-//           Text(status,\n-//               style:\n-//                   const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),\n-//         ],\n-//       ),\n-//       showCheckmark: false,\n-//       selectedColor: Colors.transparent,\n-//       backgroundColor: Colors.transparent,\n-//       selected: _status == status,\n-//       onSelected: (selected) {\n-//         if (selected) {\n-//           setState(() {\n-//             _status = status;\n-//           });\n-//         }\n-//       },\n-//     );\n-//   }\n-// }\n+  // Widget to select Lost/Found status\n+  Widget _statusSelector(String status) {\n+    return ChoiceChip(\n+      label: Row(\n+        mainAxisSize: MainAxisSize.min,\n+        children: [\n+          CircleAvatar(\n+            radius: 12,\n+            child: CircleAvatar(\n+              radius: 10,\n+              backgroundColor:\n+                  _status == status ? Colors.deepOrange : Colors.transparent,\n+              child: _status == status\n+                  ? null\n+                  : Container(\n+                      decoration: BoxDecoration(\n+                        shape: BoxShape.circle,\n+                        border: Border.all(color: Colors.black, width: 2),\n+                      ),\n+                    ),\n+            ),\n+          ),\n+          const SizedBox(width: 8),\n+          Text(status,\n+              style:\n+                  const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),\n+        ],\n+      ),\n+      showCheckmark: false,\n+      selectedColor: Colors.transparent,\n+      backgroundColor: Colors.transparent,\n+      selected: _status == status,\n+      onSelected: (selected) {\n+        if (selected) {\n+          setState(() {\n+            _status = status;\n+          });\n+        }\n+      },\n+    );\n+  }\n+}\n"
                }
            ],
            "date": 1756119020044,
            "name": "Commit-0",
            "content": "// import 'package:cloud_firestore/cloud_firestore.dart';\n// import 'package:file_picker/file_picker.dart';\n// import 'package:firebase_auth/firebase_auth.dart';\n// import 'package:firebase_storage/firebase_storage.dart';\n// import 'package:flutter/foundation.dart';\n// import 'package:flutter/material.dart';\n// import 'package:image_picker/image_picker.dart';\n// import 'package:l_f/Frontend/Contants/lists.dart';\n\n// class CreatePostPage extends StatefulWidget {\n//   const CreatePostPage({super.key});\n\n//   @override\n//   _CreatePostPageState createState() => _CreatePostPageState();\n// }\n\n// class _CreatePostPageState extends State<CreatePostPage> {\n//   List<Uint8List>? _imageBytes;\n//   final _formKey = GlobalKey<FormState>();\n//   String _status = 'Lost';\n//   String? _title;\n//   String? _location;\n//   String? _hostel;\n//   String? _description;\n//   String? _question;\n//   String? postClaimer;\n//   bool _isLoading = false;\n//   bool _isSuccess = false;\n//   final bool _isClaimed = false;\n//   FirebaseStorage storage = FirebaseStorage.instance;\n//   FirebaseAuth auth = FirebaseAuth.instance;\n//   final FirebaseFirestore firestore = FirebaseFirestore.instance;\n\n//   final List<String> _boysHostels = boyshostelsList;\n//   final List<String> _girlsHostels = girlshostelsList;\n//   final List<String> _itemLists = itemsList;\n//   final List<String> _locations = locationsList;\n\n//   @override\n//   void initState() {\n//     super.initState();\n//     _fetchUserData();\n//   }\n\n//   Future<void> _pickImages() async {\n//     try {\n//       if (kIsWeb) {\n//         // Use FilePicker for web\n//         final result = await FilePicker.platform.pickFiles(\n//           allowMultiple: true,\n//           type: FileType.image,\n//         );\n\n//         if (result != null) {\n//           setState(() {\n//             _imageBytes = result.files.map((file) => file.bytes!).toList();\n//           });\n//         }\n//       } else {\n//         // Use ImagePicker for mobile\n//         final ImagePicker picker = ImagePicker();\n//         final List<XFile> pickedFiles = await picker.pickMultiImage();\n\n//         if (pickedFiles.isNotEmpty) {\n//           List<Uint8List> imageBytes = [];\n//           for (var pickedFile in pickedFiles) {\n//             final Uint8List fileBytes = await pickedFile.readAsBytes();\n//             imageBytes.add(fileBytes);\n//           }\n\n//           setState(() {\n//             _imageBytes = imageBytes;\n//           });\n//         }\n//       }\n//     } catch (e) {\n//       print('Error picking files: $e');\n//     }\n//   }\n\n//   Future<void> _fetchUserData() async {\n//     try {\n//       User user = auth.currentUser!;\n//       DocumentSnapshot userDoc =\n//           await firestore.collection('users').doc(user.uid).get();\n\n//       if (userDoc.exists) {\n//         setState(() {\n//           print(\"USER DATAAAA  ::::  $userDoc\");\n//         });\n//       }\n//     } catch (e) {\n//       print('Error fetching user data: $e');\n//     }\n//   }\n\n//   Future<void> _submitData() async {\n//     if (_formKey.currentState?.validate() == false) {\n//       return;\n//     }\n\n//     _formKey.currentState?.save();\n\n//     if (!mounted) return;\n\n//     if (_imageBytes == null || _imageBytes!.isEmpty) {\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         const SnackBar(\n//             backgroundColor: Colors.deepOrange,\n//             content: Text('Please select at least one image')),\n//       );\n//       return;\n//     }\n//     setState(() {\n//       _isLoading = true;\n//       _isSuccess = false;\n//     });\n\n//     try {\n//       final FirebaseFirestore firestore = FirebaseFirestore.instance;\n//       final FirebaseStorage storage = FirebaseStorage.instance;\n//       User? user = FirebaseAuth.instance.currentUser;\n//       List<String> imageUrls = [];\n\n//       final uploadFutures = _imageBytes!.asMap().entries.map((entry) async {\n//         final index = entry.key;\n//         final imageByteData = entry.value;\n//         final fileName =\n//             'images/${DateTime.now().millisecondsSinceEpoch}_$index.jpg';\n//         final ref = storage.ref().child(fileName);\n//         await ref.putData(imageByteData);\n//         return ref.getDownloadURL();\n//       });\n\n//       imageUrls = await Future.wait(uploadFutures);\n\n//       print(\"Images :  ::::###### $imageUrls\");\n\n//       final data = {\n//         'location': _location,\n//         'item': _title,\n//         'description': _description,\n//         'imageUrls': imageUrls,\n//         'timestamp': FieldValue.serverTimestamp(),\n//         'postmakerId': user!.uid,\n//         'isClaimed': _isClaimed,\n//         'postClaimer': postClaimer,\n//         'claimStatus': \"\",\n//         'question': _question,\n//         'status': _status,\n//       };\n\n//       print('Submitting data: $data');\n\n//       DocumentReference postRef = await firestore.collection('posts').add(data);\n\n//       await postRef.update({'postId': postRef.id});\n\n//       setState(() {\n//         _isLoading = false;\n//         _isSuccess = true;\n//       });\n\n//       if (mounted) {\n//         ScaffoldMessenger.of(context).showSnackBar(\n//           const SnackBar(\n//               backgroundColor: Colors.green,\n//               content: Text('Item uploaded successfully!')),\n//         );\n//         Navigator.of(context).pop();\n//       }\n//     } catch (e) {\n//       setState(() {\n//         _isLoading = false;\n//         _isSuccess = false;\n//       });\n//       print('Error submitting data: $e');\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         const SnackBar(\n//             backgroundColor: Colors.red, content: Text('Error uploading item')),\n//       );\n//     }\n//   }\n\n//   void _removeImage(int index) {\n//     setState(() {\n//       _imageBytes!.removeAt(index);\n//     });\n//   }\n\n//   @override\n//   Widget build(BuildContext context) {\n//     return Scaffold(\n//       appBar: AppBar(\n//         backgroundColor: Colors.deepOrange,\n//         foregroundColor: Colors.white,\n//         title: const Text('Create New Post'),\n//       ),\n//       body: Center(\n//         child: SizedBox(\n//           width: 500,\n//           child: Card(\n//             child: Padding(\n//               padding: const EdgeInsets.all(16.0),\n//               child: Form(\n//                 key: _formKey,\n//                 child: SingleChildScrollView(\n//                   child: Column(\n//                     crossAxisAlignment: CrossAxisAlignment.start,\n//                     children: [\n//                       Row(\n//                         mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n//                         children: [\n//                           _statusSelector('Lost'),\n//                           _statusSelector('Found'),\n//                         ],\n//                       ),\n//                       const SizedBox(height: 16),\n\n//                       // Title input\n//                       DropdownButtonFormField<String>(\n//                         decoration: const InputDecoration(\n//                           labelText: 'Item Title',\n//                           border: OutlineInputBorder(),\n//                         ),\n//                         value: _title,\n//                         items: _itemLists\n//                             .map((itemTitle) => DropdownMenuItem<String>(\n//                                   value: itemTitle,\n//                                   child: Text(itemTitle),\n//                                 ))\n//                             .toList(),\n//                         validator: (value) =>\n//                             value == null ? 'Please select a title' : null,\n//                         onChanged: (value) {\n//                           setState(() {\n//                             _title = value;\n//                           });\n//                         },\n//                       ),\n\n//                       const SizedBox(height: 16),\n\n//                       // Location dropdown menu\n//                       DropdownButtonFormField<String>(\n//                         decoration: const InputDecoration(\n//                           labelText: 'Location',\n//                           border: OutlineInputBorder(),\n//                         ),\n//                         value: _location,\n//                         items: _locations\n//                             .map((location) => DropdownMenuItem<String>(\n//                                   value: location,\n//                                   child: Text(location),\n//                                 ))\n//                             .toList(),\n//                         onChanged: (value) {\n//                           setState(() {\n//                             _location = value;\n//                             _hostel =\n//                                 null; // Reset hostel selection when location changes\n//                           });\n//                         },\n//                         validator: (value) =>\n//                             value == null ? 'Please select a location' : null,\n//                         onSaved: (value) => _location = value,\n//                       ),\n\n//                       const SizedBox(height: 16),\n\n//                       // Hostel dropdown for 'Boys Hostel' or 'Girls Hostel'\n//                       if (_location == 'Boys Hostel' ||\n//                           _location == 'Girls Hostel')\n//                         DropdownButtonFormField<String>(\n//                           decoration: const InputDecoration(\n//                             labelText: 'Hostel Name',\n//                             border: OutlineInputBorder(),\n//                           ),\n//                           value: _hostel,\n//                           items: (_location == 'Boys Hostel'\n//                                   ? _boysHostels\n//                                   : _girlsHostels)\n//                               .map((hostel) => DropdownMenuItem<String>(\n//                                     value: hostel,\n//                                     child: Text(hostel),\n//                                   ))\n//                               .toList(),\n//                           onChanged: (value) {\n//                             setState(() {\n//                               _hostel = value;\n//                             });\n//                           },\n//                           validator: (value) {\n//                             if ((_location == 'Boys Hostel' ||\n//                                     _location == 'Girls Hostel') &&\n//                                 value == null) {\n//                               return 'Please select a hostel';\n//                             }\n//                             return null;\n//                           },\n//                           onSaved: (value) => _hostel = value,\n//                         ),\n//                       const SizedBox(height: 16),\n\n//                       // Description input\n//                       TextFormField(\n//                         decoration: const InputDecoration(\n//                           labelText: 'Description',\n//                           border: OutlineInputBorder(),\n//                         ),\n//                         maxLines: 4,\n//                         onSaved: (value) => _description = value,\n//                         validator: (value) => value!.isEmpty\n//                             ? 'Please enter a description'\n//                             : null,\n//                       ),\n//                       const SizedBox(height: 16),\n\n//                       // Question input (only for 'Found' items)\n//                       if (_status == 'Found')\n//                         Column(\n//                           crossAxisAlignment: CrossAxisAlignment.start,\n//                           children: [\n//                             TextFormField(\n//                               decoration: const InputDecoration(\n//                                 labelText:\n//                                     'Verification Question (to ask the Claimer)',\n//                                 border: OutlineInputBorder(),\n//                               ),\n//                               onSaved: (value) => _question = value,\n//                               validator: (value) {\n//                                 if (_status == 'Found' &&\n//                                     (value == null || value.isEmpty)) {\n//                                   return 'Please provide a verification question for found items';\n//                                 }\n//                                 return null;\n//                               },\n//                             ),\n//                             const SizedBox(height: 16),\n//                           ],\n//                         ),\n\n//                       const SizedBox(height: 16),\n\n//                       // Select Images Button\n//                       SizedBox(\n//                         width: 200,\n//                         child: Center(\n//                           child: ElevatedButton(\n//                             onPressed: _pickImages,\n//                             style: ElevatedButton.styleFrom(\n//                               backgroundColor: Colors.deepOrange,\n//                               shape: RoundedRectangleBorder(\n//                                 borderRadius: BorderRadius.circular(10),\n//                               ),\n//                             ),\n//                             child: const Row(\n//                               children: [\n//                                 Icon(Icons.photo_library_outlined,\n//                                     color: Colors.white),\n//                                 SizedBox(width: 8),\n//                                 Text(\n//                                   'Select Images',\n//                                   style: TextStyle(\n//                                       fontSize: 16, color: Colors.white),\n//                                 ),\n//                               ],\n//                             ),\n//                           ),\n//                         ),\n//                       ),\n//                       const SizedBox(height: 16),\n\n//                       if (_imageBytes != null && _imageBytes!.isNotEmpty)\n//                         SizedBox(\n//                           height: 110,\n//                           child: ListView.builder(\n//                             scrollDirection: Axis.horizontal,\n//                             itemCount: _imageBytes!.length,\n//                             itemBuilder: (context, index) {\n//                               return Padding(\n//                                 padding:\n//                                     const EdgeInsets.symmetric(horizontal: 8.0),\n//                                 child: Stack(\n//                                   children: [\n//                                     ClipRRect(\n//                                       borderRadius: BorderRadius.circular(12),\n//                                       child: Image.memory(\n//                                         _imageBytes![index],\n//                                         width: 90,\n//                                         height: 100,\n//                                         fit: BoxFit.cover,\n//                                       ),\n//                                     ),\n//                                     Positioned(\n//                                       top: 0,\n//                                       right: 0,\n//                                       child: IconButton(\n//                                         icon: const Icon(Icons.cancel,\n//                                             color: Colors.red),\n//                                         onPressed: () => _removeImage(index),\n//                                       ),\n//                                     ),\n//                                   ],\n//                                 ),\n//                               );\n//                             },\n//                           ),\n//                         ),\n//                       const SizedBox(height: 20),\n//                       // Submit button\n//                       Center(\n//                         child: ElevatedButton(\n//                           onPressed: _isLoading\n//                               ? null\n//                               : () {\n//                                   if (_formKey.currentState!.validate()) {\n//                                     _formKey.currentState!.save();\n//                                     _submitData();\n//                                   }\n//                                 },\n//                           style: ElevatedButton.styleFrom(\n//                             backgroundColor: Colors.deepOrange,\n//                             shape: RoundedRectangleBorder(\n//                               borderRadius: BorderRadius.circular(10),\n//                             ),\n//                           ),\n//                           child: Text(\n//                             _isLoading ? 'Uploading...' : 'Submit',\n//                             // 'Post',\n//                             style: const TextStyle(\n//                                 fontSize: 16,\n//                                 color: Colors.white,\n//                                 fontWeight: FontWeight.w600),\n//                           ),\n//                         ),\n//                       ),\n//                     ],\n//                   ),\n//                 ),\n//               ),\n//             ),\n//           ),\n//         ),\n//       ),\n//     );\n//   }\n\n//   // Widget to select Lost/Found status\n//   Widget _statusSelector(String status) {\n//     return ChoiceChip(\n//       label: Row(\n//         mainAxisSize: MainAxisSize.min,\n//         children: [\n//           CircleAvatar(\n//             radius: 12,\n//             child: CircleAvatar(\n//               radius: 10,\n//               backgroundColor:\n//                   _status == status ? Colors.deepOrange : Colors.transparent,\n//               child: _status == status\n//                   ? null\n//                   : Container(\n//                       decoration: BoxDecoration(\n//                         shape: BoxShape.circle,\n//                         border: Border.all(color: Colors.black, width: 2),\n//                       ),\n//                     ),\n//             ),\n//           ),\n//           const SizedBox(width: 8),\n//           Text(status,\n//               style:\n//                   const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),\n//         ],\n//       ),\n//       showCheckmark: false,\n//       selectedColor: Colors.transparent,\n//       backgroundColor: Colors.transparent,\n//       selected: _status == status,\n//       onSelected: (selected) {\n//         if (selected) {\n//           setState(() {\n//             _status = status;\n//           });\n//         }\n//       },\n//     );\n//   }\n// }\n"
        }
    ]
}