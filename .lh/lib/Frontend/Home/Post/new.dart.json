{
    "sourceFile": "lib/Frontend/Home/Post/new.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1747558614845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747558620066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,14 +146,9 @@\n                   builder: (context, userSnapshot) {\n                     // While the user profile is loading, show a placeholder\n                     if (userSnapshot.connectionState ==\n                         ConnectionState.waiting) {\n-                      return  const SizedBox(\n-                        height: 60, // Adjust height as needed\n-                        child: ListTile(\n-                          title: Text('Loading...'),\n-                        ),\n-                      );\n+                      return  Ske\n                     }\n \n                     // If user data is available, show the message\n                     if (userSnapshot.hasData && userSnapshot.data != null) {\n"
                },
                {
                    "date": 1747558669125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n                   builder: (context, userSnapshot) {\n                     // While the user profile is loading, show a placeholder\n                     if (userSnapshot.connectionState ==\n                         ConnectionState.waiting) {\n-                      return  Ske\n+                      return  ShimmerSkeleton()\n                     }\n \n                     // If user data is available, show the message\n                     if (userSnapshot.hasData && userSnapshot.data != null) {\n"
                },
                {
                    "date": 1747558690195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n                   builder: (context, userSnapshot) {\n                     // While the user profile is loading, show a placeholder\n                     if (userSnapshot.connectionState ==\n                         ConnectionState.waiting) {\n-                      return  ShimmerSkeleton()\n+                      return ();\n                     }\n \n                     // If user data is available, show the message\n                     if (userSnapshot.hasData && userSnapshot.data != null) {\n"
                },
                {
                    "date": 1747558844373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n                   builder: (context, userSnapshot) {\n                     // While the user profile is loading, show a placeholder\n                     if (userSnapshot.connectionState ==\n                         ConnectionState.waiting) {\n-                      return ();\n+                      return ShimmerSkeleton();\n                     }\n \n                     // If user data is available, show the message\n                     if (userSnapshot.hasData && userSnapshot.data != null) {\n@@ -257,9 +257,9 @@\n           .orderBy('timestamp', descending: true)\n           .snapshots(),\n       builder: (context, snapshot) {\n         if (!snapshot.hasData) {\n-          return const Center(child: CircularProgressIndicator());\n+          return const Center(child: ());\n         }\n         if (snapshot.data!.docs.isEmpty) {\n           return const Center(child: Text('No Sent Claims available'));\n         }\n"
                },
                {
                    "date": 1747558853303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,9 +257,9 @@\n           .orderBy('timestamp', descending: true)\n           .snapshots(),\n       builder: (context, snapshot) {\n         if (!snapshot.hasData) {\n-          return const Center(child: ());\n+          return const Center(child: ShimmerSkeleton());\n         }\n         if (snapshot.data!.docs.isEmpty) {\n           return const Center(child: Text('No Sent Claims available'));\n         }\n@@ -282,9 +282,9 @@\n               builder: (context, claimSnapshot) {\n                 if (!claimSnapshot.hasData) {\n                   return const Center(\n                       child: SizedBox(\n-                          child: Center(child: CircularProgressIndicator())));\n+                          child: Center(child: ())));\n                 }\n \n                 if (claimSnapshot.hasError) {\n                   print('Error : ${snapshot.error}');\n"
                },
                {
                    "date": 1747558866973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,9 +282,9 @@\n               builder: (context, claimSnapshot) {\n                 if (!claimSnapshot.hasData) {\n                   return const Center(\n                       child: SizedBox(\n-                          child: Center(child: ())));\n+                          child: Center(child: ShimmerSkeleton())));\n                 }\n \n                 if (claimSnapshot.hasError) {\n                   print('Error : ${snapshot.error}');\n@@ -392,9 +392,9 @@\n           .snapshots(),\n       builder: (context, snapshot) {\n         // Show a single CircularProgressIndicator while the posts are loading\n         if (!snapshot.hasData) {\n-          return const Center(child: CircularProgressIndicator());\n+          return const Center(child: ());\n         }\n \n         // If no posts are available, show the no data message\n         if (snapshot.data!.docs.isEmpty) {\n"
                },
                {
                    "date": 1747558872742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,9 +392,9 @@\n           .snapshots(),\n       builder: (context, snapshot) {\n         // Show a single CircularProgressIndicator while the posts are loading\n         if (!snapshot.hasData) {\n-          return const Center(child: ());\n+          return const Center(child: ShimmerSkeleton());\n         }\n \n         // If no posts are available, show the no data message\n         if (snapshot.data!.docs.isEmpty) {\n@@ -425,9 +425,9 @@\n                 // Skip rendering this post if claims are still loading\n                 if (!claimSnapshot.hasData) {\n                   return const Center(\n                       child:\n-                          CircularProgressIndicator()); // Avoid showing loading indicator per post\n+                          ()); // Avoid showing loading indicator per post\n                 }\n \n                 var claims = claimSnapshot.data!.docs;\n \n"
                },
                {
                    "date": 1747558878288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n           .snapshots(),\n       builder: (context, receivedSnapshot) {\n         // Show loading indicator if the first snapshot is still loading\n         if (receivedSnapshot.connectionState == ConnectionState.waiting) {\n-          return const Center(child: CircularProgressIndicator());\n+          return const Center(child: ());\n         }\n \n         // Fetch sent messages by the current user\n         return StreamBuilder<QuerySnapshot>(\n@@ -425,9 +425,9 @@\n                 // Skip rendering this post if claims are still loading\n                 if (!claimSnapshot.hasData) {\n                   return const Center(\n                       child:\n-                          ()); // Avoid showing loading indicator per post\n+                          ShimmerSkeleton()); // Avoid showing loading indicator per post\n                 }\n \n                 var claims = claimSnapshot.data!.docs;\n \n"
                },
                {
                    "date": 1747558883875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n           .snapshots(),\n       builder: (context, receivedSnapshot) {\n         // Show loading indicator if the first snapshot is still loading\n         if (receivedSnapshot.connectionState == ConnectionState.waiting) {\n-          return const Center(child: ());\n+          return const Center(child: ShimmerSkeleton());\n         }\n \n         // Fetch sent messages by the current user\n         return StreamBuilder<QuerySnapshot>(\n@@ -93,9 +93,9 @@\n               .where('senderId', isEqualTo: user!.uid)\n               .snapshots(),\n           builder: (context, sentSnapshot) {\n             if (sentSnapshot.connectionState == ConnectionState.waiting) {\n-              return const Center(child: CircularProgressIndicator());\n+              return const Center(child: ());\n             }\n \n             if (sentSnapshot.data!.docs.isEmpty) {\n               return const Center(child: Text('No Messags available'));\n"
                },
                {
                    "date": 1747559053050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n               .where('senderId', isEqualTo: user!.uid)\n               .snapshots(),\n           builder: (context, sentSnapshot) {\n             if (sentSnapshot.connectionState == ConnectionState.waiting) {\n-              return const Center(child: ());\n+              return const Center(child: ShimmerSkeleton());\n             }\n \n             if (sentSnapshot.data!.docs.isEmpty) {\n               return const Center(child: Text('No Messags available'));\n@@ -146,9 +146,9 @@\n                   builder: (context, userSnapshot) {\n                     // While the user profile is loading, show a placeholder\n                     if (userSnapshot.connectionState ==\n                         ConnectionState.waiting) {\n-                      return ShimmerSkeleton();\n+                      return const ShimmerSkeleton();\n                     }\n \n                     // If user data is available, show the message\n                     if (userSnapshot.hasData && userSnapshot.data != null) {\n"
                }
            ],
            "date": 1747558614845,
            "name": "Commit-0",
            "content": "import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:l_f/Frontend/Home/ChatPage/userchatpage.dart';\nimport 'package:l_f/Frontend/Home/Post/Utils/full_post.dart';\nimport 'package:l_f/Frontend/MyList/my_posts.dart';\nimport 'package:l_f/Frontend/Profile/user_see_page.dart';\n\nclass MessagesPage extends StatefulWidget {\n  @override\n  State<MessagesPage> createState() => _MessagesPageState();\n}\n\nclass _MessagesPageState extends State<MessagesPage>\n    with SingleTickerProviderStateMixin {\n  final User? user = FirebaseAuth.instance.currentUser;\n  late TabController _tabController;\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(length: 3, vsync: this);\n  }\n\n  @override\n  void dispose() {\n    _tabController.dispose();\n    super.dispose();\n  }\n\n  // Fetch user profile (name and profile image)\n  Future<Map<String, dynamic>?> _fetchUserProfile(String uid) async {\n    try {\n      DocumentSnapshot userDoc =\n          await FirebaseFirestore.instance.collection('users').doc(uid).get();\n\n      if (userDoc.exists) {\n        return userDoc.data() as Map<String, dynamic>;\n      } else {\n        print('User not found');\n        return null;\n      }\n    } catch (e) {\n      print('Error fetching user profile: $e');\n      return null;\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        backgroundColor: Colors.deepOrange,\n        foregroundColor: Colors.white,\n        title: const Text('Messages and Claims'),\n        bottom: TabBar(\n          controller: _tabController,\n          tabs: const [\n            Tab(text: 'Messages'),\n            Tab(text: 'Claims'),\n            Tab(text: 'My Posts'),\n          ],\n        ),\n      ),\n      body: TabBarView(\n        controller: _tabController,\n        children: [\n          _buildMessagesTab(),\n          _buildClaimsTab(), // Claims Tab\n          const MyPostsPage()\n        ],\n      ),\n    );\n  }\n\n// Build Messages Tab\n  Widget _buildMessagesTab() {\n    return StreamBuilder<QuerySnapshot>(\n      stream: FirebaseFirestore.instance\n          .collection('chats')\n          .where('receiverId', isEqualTo: user!.uid)\n          .snapshots(),\n      builder: (context, receivedSnapshot) {\n        // Show loading indicator if the first snapshot is still loading\n        if (receivedSnapshot.connectionState == ConnectionState.waiting) {\n          return const Center(child: CircularProgressIndicator());\n        }\n\n        // Fetch sent messages by the current user\n        return StreamBuilder<QuerySnapshot>(\n          stream: FirebaseFirestore.instance\n              .collection('chats')\n              .where('senderId', isEqualTo: user!.uid)\n              .snapshots(),\n          builder: (context, sentSnapshot) {\n            if (sentSnapshot.connectionState == ConnectionState.waiting) {\n              return const Center(child: CircularProgressIndicator());\n            }\n\n            if (sentSnapshot.data!.docs.isEmpty) {\n              return const Center(child: Text('No Messags available'));\n            }\n\n            var sentMessages = sentSnapshot.data?.docs ?? [];\n            var receivedMessages = receivedSnapshot.data?.docs ?? [];\n\n            // Combine sent and received messages\n            var allMessages = [...sentMessages, ...receivedMessages];\n\n            // Map to store the latest message per user\n            Map<String, DocumentSnapshot> latestMessages = {};\n\n            for (var message in allMessages) {\n              var otherUserId = message['senderId'] == user!.uid\n                  ? message['receiverId']\n                  : message['senderId'];\n\n              // Check if this is the latest message for the other user\n              if (!latestMessages.containsKey(otherUserId) ||\n                  (message['timestamp'] as Timestamp).toDate().isAfter(\n                      (latestMessages[otherUserId]!['timestamp'] as Timestamp)\n                          .toDate())) {\n                latestMessages[otherUserId] = message;\n              }\n            }\n\n            // Sort messages by timestamp (latest first)\n            var sortedMessages = latestMessages.values.toList()\n              ..sort((a, b) => (b['timestamp'] as Timestamp)\n                  .compareTo(a['timestamp'] as Timestamp));\n\n            // Build the UI\n            return ListView.builder(\n              itemCount: sortedMessages.length,\n              itemBuilder: (context, index) {\n                var message = sortedMessages[index];\n                var isSentByUser = message['senderId'] == user!.uid;\n                var otherUserId =\n                    isSentByUser ? message['receiverId'] : message['senderId'];\n                var messageText = message['message'];\n                var timestamp = (message['timestamp'] as Timestamp).toDate();\n\n                // Fetch the profile of the other user\n                return FutureBuilder<Map<String, dynamic>?>(\n                  future: _fetchUserProfile(otherUserId),\n                  builder: (context, userSnapshot) {\n                    // While the user profile is loading, show a placeholder\n                    if (userSnapshot.connectionState ==\n                        ConnectionState.waiting) {\n                      return  const SizedBox(\n                        height: 60, // Adjust height as needed\n                        child: ListTile(\n                          title: Text('Loading...'),\n                        ),\n                      );\n                    }\n\n                    // If user data is available, show the message\n                    if (userSnapshot.hasData && userSnapshot.data != null) {\n                      var userProfile = userSnapshot.data!;\n                      String userName = userProfile['name'] ?? 'Unknown User';\n                      String userProfileImage =\n                          userProfile['profileImage'] ?? '';\n\n                      return Padding(\n                        padding: const EdgeInsets.all(5),\n                        child: Card(\n                          elevation: 4,\n                          child: ListTile(\n                            leading: CircleAvatar(\n                              backgroundImage: userProfileImage.isNotEmpty\n                                  ? NetworkImage(userProfileImage)\n                                  : const AssetImage(\n                                          'assets/default_avatar.png')\n                                      as ImageProvider,\n                            ),\n                            title: Text(\n                              isSentByUser ? ' $userName' : ' $userName',\n                              style: TextStyle(\n                                fontWeight: isSentByUser\n                                    ? FontWeight.bold\n                                    : FontWeight.bold,\n                              ),\n                            ),\n                            subtitle: Row(\n                              mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                              children: [\n                                // Show last message regardless of who sent it\n                                Text(\n                                  messageText,\n                                  maxLines: 1,\n                                  overflow: TextOverflow.ellipsis,\n                                ),\n                                const SizedBox(height: 5),\n                                Text(\n                                  '${timestamp.hour}:${timestamp.minute.toString().padLeft(2, '0')}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n                                  style: const TextStyle(\n                                      fontSize: 12, color: Colors.grey),\n                                ),\n                              ],\n                            ),\n                            onTap: () {\n                              Navigator.push(\n                                context,\n                                MaterialPageRoute(\n                                  builder: (context) =>\n                                      ChatDetailPage(otherUserId: otherUserId),\n                                ),\n                              );\n                            },\n                          ),\n                        ),\n                      );\n                    } else {\n                      // When user data is not found, show an empty state\n                      return const SizedBox(\n                        height: 60, // Adjust height as needed\n                        child: ListTile(\n                          title: Text('User not found'),\n                        ),\n                      );\n                    }\n                  },\n                );\n              },\n            );\n          },\n        );\n      },\n    );\n  }\n\n  Widget _buildClaimsTab() {\n    return DefaultTabController(\n      length: 2, // Two tabs: Sent and Received\n      child: Column(\n        children: [\n          const TabBar(\n            tabs: [\n              Tab(text: 'Sent Claims'),\n              Tab(text: 'Received Claims'),\n            ],\n          ),\n          Expanded(\n            child: TabBarView(\n              children: [\n                _buildSentClaimsTab(),\n                _buildReceivedClaimsTab(),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildSentClaimsTab() {\n    bool isMobile = MediaQuery.of(context).size.width < 830;\n    return StreamBuilder<QuerySnapshot>(\n      stream: FirebaseFirestore.instance\n          .collection('posts')\n          .orderBy('timestamp', descending: true)\n          .snapshots(),\n      builder: (context, snapshot) {\n        if (!snapshot.hasData) {\n          return const Center(child: CircularProgressIndicator());\n        }\n        if (snapshot.data!.docs.isEmpty) {\n          return const Center(child: Text('No Sent Claims available'));\n        }\n\n        var posts = snapshot.data!.docs;\n\n        return ListView.builder(\n          itemCount: posts.length,\n          itemBuilder: (context, index) {\n            var post = posts[index];\n            var postId = post.id;\n\n            return StreamBuilder<QuerySnapshot>(\n              stream: FirebaseFirestore.instance\n                  .collection('posts')\n                  .doc(postId)\n                  .collection('claims')\n                  .where('senderId', isEqualTo: user!.uid)\n                  .snapshots(),\n              builder: (context, claimSnapshot) {\n                if (!claimSnapshot.hasData) {\n                  return const Center(\n                      child: SizedBox(\n                          child: Center(child: CircularProgressIndicator())));\n                }\n\n                if (claimSnapshot.hasError) {\n                  print('Error : ${snapshot.error}');\n                  return const Center(child: Text('Error in loading !!!'));\n                }\n\n                var claims = claimSnapshot.data!.docs;\n                print(\"SENT DATA ::: $claims\");\n\n                return Column(\n                  children: claims.map((claim) {\n                    var claimResponse = claim['answer'];\n                    var timestamp = (claim['timestamp'] as Timestamp).toDate();\n                    var claimStatus = claim['claimStatusC'];\n\n                    return GestureDetector(\n                      onTap: () {\n                        print('Status: $claimStatus');\n                        Navigator.push(\n                            context,\n                            MaterialPageRoute(\n                                builder: (_) =>\n                                    PostDetailsPage(postId: postId)));\n                      },\n                      child: SizedBox(\n                        width:\n                            isMobile ? MediaQuery.of(context).size.width : 500,\n                        child: Card(\n                          elevation: 4,\n                          margin: const EdgeInsets.all(8.0),\n                          child: Padding(\n                            padding: const EdgeInsets.all(12.0),\n                            child: Column(\n                              crossAxisAlignment: CrossAxisAlignment.start,\n                              children: [\n                                Text(\n                                  \"Post Title: ${post['item']}\", // Assuming post has a title field\n                                  style: const TextStyle(\n                                      fontWeight: FontWeight.bold,\n                                      fontSize: 16),\n                                ),\n                                const SizedBox(height: 4),\n                                Text(\n                                  \"Question: ${post['question']}\", // Assuming post has a title field\n                                  style: const TextStyle(\n                                      fontWeight: FontWeight.bold,\n                                      fontSize: 16),\n                                ),\n                                const SizedBox(height: 4),\n                                Text(\n                                  \"Your Answer: $claimResponse\",\n                                  style: const TextStyle(\n                                      fontSize: 14, color: Colors.blueGrey),\n                                ),\n                                const SizedBox(height: 4),\n                                Row(\n                                  children: [\n                                    const Text(\n                                      'Status: ',\n                                      style: TextStyle(\n                                          color: Colors.red,\n                                          fontWeight: FontWeight.bold),\n                                    ),\n                                    Text(\n                                      post['claimStatus'] == 'accepted'\n                                          ? 'Accepted'\n                                          : claimStatus == 'declined'\n                                              ? ' Declined'\n                                              : 'Requested ',\n                                      style: const TextStyle(\n                                          fontWeight: FontWeight.bold),\n                                    ),\n                                  ],\n                                ),\n                                const SizedBox(height: 4),\n                                Text(\n                                  '${timestamp.hour}:${timestamp.minute.toString().padLeft(2, '0')}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n                                  style: const TextStyle(\n                                      fontSize: 12, color: Colors.grey),\n                                ),\n                              ],\n                            ),\n                          ),\n                        ),\n                      ),\n                    );\n                  }).toList(),\n                );\n              },\n            );\n          },\n        );\n      },\n    );\n  }\n\n  Widget _buildReceivedClaimsTab() {\n    bool isMobile = MediaQuery.of(context).size.width < 830;\n\n    // Main stream for posts\n    return StreamBuilder<QuerySnapshot>(\n      stream: FirebaseFirestore.instance\n          .collection('posts')\n          .orderBy('timestamp', descending: true)\n          .snapshots(),\n      builder: (context, snapshot) {\n        // Show a single CircularProgressIndicator while the posts are loading\n        if (!snapshot.hasData) {\n          return const Center(child: CircularProgressIndicator());\n        }\n\n        // If no posts are available, show the no data message\n        if (snapshot.data!.docs.isEmpty) {\n          return const Center(child: Text('No Received Claims available'));\n        }\n\n        // Retrieve the list of posts\n        var posts = snapshot.data!.docs;\n\n        // Build the list once all posts are loaded\n        return ListView.builder(\n          itemCount: posts.length,\n          itemBuilder: (context, index) {\n            var post = posts[index];\n            var postId = post.id;\n\n            // Claim stream for each post\n            return StreamBuilder<QuerySnapshot>(\n              stream: FirebaseFirestore.instance\n                  .collection('posts')\n                  .doc(postId)\n                  .collection('claims') // Access the claims sub-collection\n                  .where('receiverId',\n                      isEqualTo:\n                          user!.uid) // Filter for claims received by the user\n                  .snapshots(),\n              builder: (context, claimSnapshot) {\n                // Skip rendering this post if claims are still loading\n                if (!claimSnapshot.hasData) {\n                  return const Center(\n                      child:\n                          CircularProgressIndicator()); // Avoid showing loading indicator per post\n                }\n\n                var claims = claimSnapshot.data!.docs;\n\n                // Display all claims for this post\n                return Column(\n                  children: claims.map((claim) {\n                    var claimResponse = claim['answer'];\n                    var timestamp = (claim['timestamp'] as Timestamp).toDate();\n                    var senderId = claim['senderId'];\n                    var claimStatus = claim['claimStatusC'];\n\n                    print(\"Received DATA ::: $claims\");\n\n                    return FutureBuilder<DocumentSnapshot>(\n                      future: FirebaseFirestore.instance\n                          .collection('users')\n                          .doc(senderId)\n                          .get(), // Fetching user details for the claimer\n                      builder: (context, userSnapshot) {\n                        // Skip rendering the card until the claimer's user data is loaded\n                        if (!userSnapshot.hasData) {\n                          return Container(); // Avoid showing a progress indicator here\n                        }\n\n                        var claimerName = userSnapshot.data!['name'];\n\n                        return GestureDetector(\n                          onTap: () {\n                            Navigator.push(\n                                context,\n                                MaterialPageRoute(\n                                    builder: (_) =>\n                                        PostDetailsPage(postId: postId)));\n                          },\n                          child: SizedBox(\n                            width: isMobile\n                                ? MediaQuery.of(context).size.width\n                                : 500,\n                            child: Card(\n                              elevation: 4,\n                              margin: EdgeInsets.all(isMobile ? 8.0 : 18),\n                              child: Padding(\n                                padding: const EdgeInsets.only(\n                                    top: 12.0, left: 12, right: 12, bottom: 9),\n                                child: Column(\n                                  crossAxisAlignment: CrossAxisAlignment.start,\n                                  children: [\n                                    Text(\n                                      \"Post Title : ${post['item']}\",\n                                      style: const TextStyle(\n                                          fontWeight: FontWeight.bold,\n                                          fontSize: 16),\n                                    ),\n                                    Text(\n                                      \"Your Question: ${post['question']}\",\n                                      softWrap: true,\n                                      style: const TextStyle(\n                                          fontWeight: FontWeight.w500,\n                                          fontSize: 16),\n                                    ),\n                                    Text(\n                                      \"$claimerName's Answer: $claimResponse\",\n                                      style: const TextStyle(\n                                          fontSize: 14, color: Colors.blueGrey),\n                                    ),\n                                    Text(\n                                      'Time & Date : ${timestamp.hour}:${timestamp.minute.toString().padLeft(2, '0')}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n                                      style: const TextStyle(\n                                          fontSize: 12, color: Colors.grey),\n                                    ),\n                                    (post['claimStatus'] == 'accepted' &&\n                                            post['isClaimed'] == true)\n                                        ? Column(\n                                            crossAxisAlignment:\n                                                CrossAxisAlignment.start,\n                                            children: [\n                                              Column(\n                                                crossAxisAlignment:\n                                                    CrossAxisAlignment.start,\n                                                children: [\n                                                  const Text('Accepted by you'),\n                                                  Row(\n                                                    children: [\n                                                      const Text(\n                                                        'Claimed by :',\n                                                        style: TextStyle(\n                                                            fontSize: 14,\n                                                            color:\n                                                                Colors.green),\n                                                      ),\n                                                      TextButton(\n                                                        onPressed: () {\n                                                          print(\n                                                              \"Sender ID: $senderId\");\n                                                          ProfilePage2(\n                                                              uid: senderId);\n                                                        },\n                                                        child: Text(\n                                                          '$claimerName',\n                                                          style:\n                                                              const TextStyle(\n                                                                  color: Colors\n                                                                      .green),\n                                                        ),\n                                                      ),\n                                                    ],\n                                                  ),\n                                                ],\n                                              )\n                                            ],\n                                          )\n                                        : (claimStatus == 'requested')\n                                            ? Row(\n                                                children: [\n                                                  ElevatedButton(\n                                                      onPressed: () {\n                                                        _acceptclaimPost(\n                                                            postId,\n                                                            post['postmakerId'],\n                                                            senderId,\n                                                            claimResponse);\n                                                      },\n                                                      style: ElevatedButton\n                                                          .styleFrom(\n                                                              backgroundColor:\n                                                                  Colors\n                                                                      .deepOrange),\n                                                      child:\n                                                          const Text('Accept')),\n                                                  const SizedBox(width: 7),\n                                                  ElevatedButton(\n                                                      onPressed: () {\n                                                        _declinedclaimPost(\n                                                            postId, claim.id);\n                                                      },\n                                                      style: ElevatedButton\n                                                          .styleFrom(\n                                                              backgroundColor:\n                                                                  Colors\n                                                                      .deepOrange),\n                                                      child: const Text(\n                                                          'Decline')),\n                                                ],\n                                              )\n                                            : (claimStatus == 'declined')\n                                                ? Column(\n                                                    children: [\n                                                      Column(\n                                                        crossAxisAlignment:\n                                                            CrossAxisAlignment\n                                                                .start,\n                                                        children: [\n                                                          Text(\n                                                            'Claimed By :$claimerName ',\n                                                            style:\n                                                                const TextStyle(\n                                                                    color: Colors\n                                                                        .red),\n                                                          ),\n                                                          const Text(\n                                                            ' Your Response : Declined',\n                                                            style: TextStyle(\n                                                                color:\n                                                                    Colors.red),\n                                                          ),\n                                                        ],\n                                                      )\n                                                    ],\n                                                  )\n                                                : const Text('Error'),\n                                  ],\n                                ),\n                              ),\n                            ),\n                          ),\n                        );\n                      },\n                    );\n                  }).toList(),\n                );\n              },\n            );\n          },\n        );\n      },\n    );\n  }\n\n  Future<void> _acceptclaimPost(String postId, String postmakerId,\n      String claimerId, String answer) async {\n    try {\n      final postDocRef =\n          FirebaseFirestore.instance.collection('posts').doc(postId);\n      final claimsDocRef = FirebaseFirestore.instance\n          .collection('posts')\n          .doc(postId)\n          .collection('claims')\n          .doc(claimerId);\n\n      await postDocRef.update({\n        'postClaimer': claimerId,\n        'answer': answer,\n        'claimStatus': 'accepted',\n        'isClaimed': true,\n      });\n      await claimsDocRef.update({\n        'claimStatusC': 'accepted',\n        'isClaimed': true,\n        'timestamp': Timestamp.now(),\n      });\n\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          content: Text('Post claimed successfully!'),\n          backgroundColor: Colors.green,\n        ),\n      );\n      print('Post claimed successfully!');\n    } catch (e) {\n      print('Error claiming post: $e');\n    }\n  }\n\n  Future<void> _declinedclaimPost(String postId, String claimerId) async {\n    try {\n      final claimsDocRef = FirebaseFirestore.instance\n          .collection('posts')\n          .doc(postId)\n          .collection('claims')\n          .doc(claimerId);\n\n      // Update Firestore with the declined status\n      await claimsDocRef.update({\n        'claimStatusC': 'declined',\n      });\n\n      // Show a SnackBar notification for user feedback\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          content: Text('Claim rejected by you'),\n          backgroundColor: Colors.red,\n        ),\n      );\n\n      // Firestore will notify the StreamBuilder of the change automatically,\n      // so no need for additional state management here.\n      print('Post rejected successfully!');\n    } catch (e) {\n      print('Error declining post: $e');\n    }\n  }\n}\n"
        }
    ]
}