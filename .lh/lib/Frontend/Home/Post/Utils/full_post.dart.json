{
    "sourceFile": "lib/Frontend/Home/Post/Utils/full_post.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1756118752288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756118776605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,901 +1,901 @@\n-// import 'package:carousel_slider/carousel_slider.dart';\n-// import 'package:cloud_firestore/cloud_firestore.dart';\n-// import 'package:firebase_auth/firebase_auth.dart';\n-// import 'package:flutter/material.dart';\n-// import 'package:intl/intl.dart';\n-// import 'package:l_f/Frontend/Home/Post/post_model.dart';\n-// import 'package:l_f/Frontend/Profile/user_see_page.dart';\n+import 'package:carousel_slider/carousel_slider.dart';\n+import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:flutter/material.dart';\n+import 'package:intl/intl.dart';\n+import 'package:l_f/Frontend/Home/Post/post_model.dart';\n+import 'package:l_f/Frontend/Profile/user_see_page.dart';\n \n-// class PostDetailsPage extends StatefulWidget {\n-//   final String postId;\n-//   const PostDetailsPage({super.key, required this.postId});\n+class PostDetailsPage extends StatefulWidget {\n+  final String postId;\n+  const PostDetailsPage({super.key, required this.postId});\n \n-//   @override\n-//   State<PostDetailsPage> createState() => _PostDetailsPageState();\n-// }\n+  @override\n+  State<PostDetailsPage> createState() => _PostDetailsPageState();\n+}\n \n-// class _PostDetailsPageState extends State<PostDetailsPage> {\n-//   final Map<String, Map<String, String>> _userCache = {};\n-//   User? user = FirebaseAuth.instance.currentUser;\n+class _PostDetailsPageState extends State<PostDetailsPage> {\n+  final Map<String, Map<String, String>> _userCache = {};\n+  User? user = FirebaseAuth.instance.currentUser;\n \n-//   String _formatDate(Timestamp? timestamp) {\n-//     if (timestamp == null) return 'Not available';\n-//     DateTime date = timestamp.toDate();\n-//     return DateFormat('dd MMMM yyyy').format(date);\n-//   }\n+  String _formatDate(Timestamp? timestamp) {\n+    if (timestamp == null) return 'Not available';\n+    DateTime date = timestamp.toDate();\n+    return DateFormat('dd MMMM yyyy').format(date);\n+  }\n \n-//   Future<Map<String, String>> fetchUserNameAndProfilePic(String uid) async {\n-//     if (_userCache.containsKey(uid)) {\n-//       return _userCache[uid]!;\n-//     }\n+  Future<Map<String, String>> fetchUserNameAndProfilePic(String uid) async {\n+    if (_userCache.containsKey(uid)) {\n+      return _userCache[uid]!;\n+    }\n \n-//     try {\n-//       DocumentSnapshot userDoc =\n-//           await FirebaseFirestore.instance.collection('users').doc(uid).get();\n+    try {\n+      DocumentSnapshot userDoc =\n+          await FirebaseFirestore.instance.collection('users').doc(uid).get();\n \n-//       if (!userDoc.exists) {\n-//         throw Exception(\"User not found.\");\n-//       }\n+      if (!userDoc.exists) {\n+        throw Exception(\"User not found.\");\n+      }\n \n-//       Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n+      Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n \n-//       String name = userData['name'] ?? 'NITH User';\n-//       String profileImage = userData['profileImage'] ?? '';\n+      String name = userData['name'] ?? 'NITH User';\n+      String profileImage = userData['profileImage'] ?? '';\n \n-//       _userCache[uid] = {\n-//         'name': name,\n-//         'profileImage': profileImage,\n-//       };\n+      _userCache[uid] = {\n+        'name': name,\n+        'profileImage': profileImage,\n+      };\n \n-//       return _userCache[uid]!;\n-//     } catch (e) {\n-//       print(\"Error fetching user profile: $e\");\n-//       throw Exception(\"Error fetching user profile.\");\n-//     }\n-//   }\n+      return _userCache[uid]!;\n+    } catch (e) {\n+      print(\"Error fetching user profile: $e\");\n+      throw Exception(\"Error fetching user profile.\");\n+    }\n+  }\n \n-//   @override\n-//   Widget build(BuildContext context) {\n-//     bool isMobile = MediaQuery.of(context).size.width < 830;\n-//     return Scaffold(\n-//       appBar: AppBar(\n-//         backgroundColor: Colors.deepOrange,\n-//         foregroundColor: Colors.white,\n-//         title: const Text('Post Detail'),\n-//       ),\n-//       body: StreamBuilder<QuerySnapshot>(\n-//         stream: FirebaseFirestore.instance\n-//             .collection('posts')\n-//             .where('postId', isEqualTo: widget.postId)\n-//             .snapshots(),\n-//         builder: (context, snapshot) {\n-//           if (snapshot.connectionState == ConnectionState.waiting) {\n-//             return const Center(child: CircularProgressIndicator());\n-//           }\n-//           if (snapshot.hasError) {\n-//             return const Center(child: Text('Error loading posts'));\n-//           }\n+  @override\n+  Widget build(BuildContext context) {\n+    bool isMobile = MediaQuery.of(context).size.width < 830;\n+    return Scaffold(\n+      appBar: AppBar(\n+        backgroundColor: Colors.deepOrange,\n+        foregroundColor: Colors.white,\n+        title: const Text('Post Detail'),\n+      ),\n+      body: StreamBuilder<QuerySnapshot>(\n+        stream: FirebaseFirestore.instance\n+            .collection('posts')\n+            .where('postId', isEqualTo: widget.postId)\n+            .snapshots(),\n+        builder: (context, snapshot) {\n+          if (snapshot.connectionState == ConnectionState.waiting) {\n+            return const Center(child: CircularProgressIndicator());\n+          }\n+          if (snapshot.hasError) {\n+            return const Center(child: Text('Error loading posts'));\n+          }\n \n-//           if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-//             return const Center(child: Text('No posts available'));\n-//           }\n+          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+            return const Center(child: Text('No posts available'));\n+          }\n \n-//           final posts = snapshot.data!.docs.map((doc) {\n-//             final data = doc.data() as Map<String, dynamic>;\n-//             final String uid = data['postmakerId'];\n-//             final bool isClaimed = data['isClaimed'] ?? false;\n-//             final String? claimerUid = data['postClaimer'];\n-//             print(\"post claimerasss: : $claimerUid\");\n-//             print(\"POST IDDDDDDDD : ${data['postId']}\");\n-//             print(\"Is Post Claimed: $isClaimed\");\n+          final posts = snapshot.data!.docs.map((doc) {\n+            final data = doc.data() as Map<String, dynamic>;\n+            final String uid = data['postmakerId'];\n+            final bool isClaimed = data['isClaimed'] ?? false;\n+            final String? claimerUid = data['postClaimer'];\n+            print(\"post claimerasss: : $claimerUid\");\n+            print(\"POST IDDDDDDDD : ${data['postId']}\");\n+            print(\"Is Post Claimed: $isClaimed\");\n \n-//             return fetchUserNameAndProfilePic(uid).then((userDetails) async {\n-//               String postClaimerName = '';\n-//               String postClaimerProfilePic = '';\n+            return fetchUserNameAndProfilePic(uid).then((userDetails) async {\n+              String postClaimerName = '';\n+              String postClaimerProfilePic = '';\n \n-//               if (isClaimed && claimerUid != null) {\n-//                 final claimerDetails =\n-//                     await fetchUserNameAndProfilePic(claimerUid);\n-//                 postClaimerName = claimerDetails['name'] ?? 'NITH User';\n-//                 postClaimerProfilePic = claimerDetails['profileImage'] ?? '';\n-//               }\n+              if (isClaimed && claimerUid != null) {\n+                final claimerDetails =\n+                    await fetchUserNameAndProfilePic(claimerUid);\n+                postClaimerName = claimerDetails['name'] ?? 'NITH User';\n+                postClaimerProfilePic = claimerDetails['profileImage'] ?? '';\n+              }\n \n-//               return PostModel(\n-//                 userName: userDetails['name'] ?? 'NITH User',\n-//                 profileImageUrl: userDetails['profileImage'] ?? '',\n-//                 postTime: _formatDate(data['timestamp']),\n-//                 itemImages: List<String>.from(\n-//                     data['imageUrls'] ?? ['']),\n-//                 status: data['status'] ?? '',\n-//                 title: data['item'] ?? '',\n-//                 location: data['location'] ?? '',\n-//                 description: data['description'] ?? '',\n-//                 postmakerId: data['postmakerId'],\n-//                 question: data['question'],\n-//                 postId: data['postId'],\n-//                 claimStatus: data['claimStatus'],\n-//                 isClaimed: isClaimed,\n-//                 postclaimerId: data['postClaimer'],\n-//                 postClaimer:\n-//                     postClaimerName.isNotEmpty ? postClaimerName : null,\n-//                 postClaimerPic: postClaimerProfilePic.isNotEmpty\n-//                     ? postClaimerProfilePic\n-//                     : null,\n-//               );\n-//             });\n-//           });\n+              return PostModel(\n+                userName: userDetails['name'] ?? 'NITH User',\n+                profileImageUrl: userDetails['profileImage'] ?? '',\n+                postTime: _formatDate(data['timestamp']),\n+                itemImages: List<String>.from(\n+                    data['imageUrls'] ?? ['']),\n+                status: data['status'] ?? '',\n+                title: data['item'] ?? '',\n+                location: data['location'] ?? '',\n+                description: data['description'] ?? '',\n+                postmakerId: data['postmakerId'],\n+                question: data['question'],\n+                postId: data['postId'],\n+                claimStatus: data['claimStatus'],\n+                isClaimed: isClaimed,\n+                postclaimerId: data['postClaimer'],\n+                postClaimer:\n+                    postClaimerName.isNotEmpty ? postClaimerName : null,\n+                postClaimerPic: postClaimerProfilePic.isNotEmpty\n+                    ? postClaimerProfilePic\n+                    : null,\n+              );\n+            });\n+          });\n \n-//           return FutureBuilder<List<PostModel>>(\n-//             future: Future.wait(posts.toList()),\n-//             builder: (context, futureSnapshot) {\n-//               if (futureSnapshot.connectionState == ConnectionState.waiting) {\n-//                 return const Center(child: CircularProgressIndicator());\n-//               }\n+          return FutureBuilder<List<PostModel>>(\n+            future: Future.wait(posts.toList()),\n+            builder: (context, futureSnapshot) {\n+              if (futureSnapshot.connectionState == ConnectionState.waiting) {\n+                return const Center(child: CircularProgressIndicator());\n+              }\n \n-//               if (futureSnapshot.hasError) {\n-//                 print(\"Error : ${futureSnapshot.error}\");\n-//                 return const Center(child: Text('Error loading posts'));\n-//               }\n+              if (futureSnapshot.hasError) {\n+                print(\"Error : ${futureSnapshot.error}\");\n+                return const Center(child: Text('Error loading posts'));\n+              }\n \n-//               final postsList = futureSnapshot.data ?? [];\n+              final postsList = futureSnapshot.data ?? [];\n \n-//               return ListView.builder(\n-//                 itemCount: postsList.length,\n-//                 itemBuilder: (context, index) {\n-//                   final post = postsList[index];\n-//                   return Padding(\n-//                     padding: const EdgeInsets.all(2.0),\n-//                     child: Center(\n-//                       child: SizedBox(\n-//                         width:\n-//                             isMobile ? MediaQuery.of(context).size.width : 600,\n-//                         child: Card(\n-//                           elevation: 5,\n-//                           shape: RoundedRectangleBorder(\n-//                             borderRadius: BorderRadius.circular(10),\n-//                           ),\n-//                           child: Column(\n-//                             crossAxisAlignment: CrossAxisAlignment.start,\n-//                             children: [\n-//                               // Header  of the POST (profiel,name.location,delete)\n-//                               GestureDetector(\n-//                                 onTap: () {\n-//                                   Navigator.push(\n-//                                       context,\n-//                                       MaterialPageRoute(\n-//                                           builder: (_) => ProfilePage2(\n-//                                               uid: post.postmakerId)));\n-//                                 },\n-//                                 child: ListTile(\n-//                                   leading: CircleAvatar(\n-//                                     radius: 30,\n-//                                     backgroundImage:\n-//                                         NetworkImage(post.profileImageUrl),\n-//                                   ),\n-//                                   title: Text(post.userName,\n-//                                       style: const TextStyle(\n-//                                           fontWeight: FontWeight.bold)),\n-//                                   subtitle: Text(\n-//                                       \"Location : ${post.location} , NITH\"),\n-//                                   trailing: PopupMenuButton<String>(\n-//                                     onSelected: (value) {\n-//                                       if (value == 'Delete') {\n-//                                         if (user!.uid == post.postmakerId) {\n-//                                           _showDeleteConfirmation(\n-//                                               context, post);\n-//                                         } else {\n-//                                           ScaffoldMessenger.of(context)\n-//                                               .showSnackBar(\n-//                                             const SnackBar(\n-//                                                 backgroundColor: Colors.red,\n-//                                                 content: Text(\n-//                                                     \"You can't delete this post\")),\n-//                                           );\n-//                                         }\n-//                                       }\n-//                                     },\n-//                                     itemBuilder: (BuildContext context) {\n-//                                       return {'Delete'}.map((String choice) {\n-//                                         return PopupMenuItem<String>(\n-//                                           value: choice,\n-//                                           child: Text(choice),\n-//                                         );\n-//                                       }).toList();\n-//                                     },\n-//                                   ),\n-//                                 ),\n-//                               ),\n+              return ListView.builder(\n+                itemCount: postsList.length,\n+                itemBuilder: (context, index) {\n+                  final post = postsList[index];\n+                  return Padding(\n+                    padding: const EdgeInsets.all(2.0),\n+                    child: Center(\n+                      child: SizedBox(\n+                        width:\n+                            isMobile ? MediaQuery.of(context).size.width : 600,\n+                        child: Card(\n+                          elevation: 5,\n+                          shape: RoundedRectangleBorder(\n+                            borderRadius: BorderRadius.circular(10),\n+                          ),\n+                          child: Column(\n+                            crossAxisAlignment: CrossAxisAlignment.start,\n+                            children: [\n+                              // Header  of the POST (profiel,name.location,delete)\n+                              GestureDetector(\n+                                onTap: () {\n+                                  Navigator.push(\n+                                      context,\n+                                      MaterialPageRoute(\n+                                          builder: (_) => ProfilePage2(\n+                                              uid: post.postmakerId)));\n+                                },\n+                                child: ListTile(\n+                                  leading: CircleAvatar(\n+                                    radius: 30,\n+                                    backgroundImage:\n+                                        NetworkImage(post.profileImageUrl),\n+                                  ),\n+                                  title: Text(post.userName,\n+                                      style: const TextStyle(\n+                                          fontWeight: FontWeight.bold)),\n+                                  subtitle: Text(\n+                                      \"Location : ${post.location} , NITH\"),\n+                                  trailing: PopupMenuButton<String>(\n+                                    onSelected: (value) {\n+                                      if (value == 'Delete') {\n+                                        if (user!.uid == post.postmakerId) {\n+                                          _showDeleteConfirmation(\n+                                              context, post);\n+                                        } else {\n+                                          ScaffoldMessenger.of(context)\n+                                              .showSnackBar(\n+                                            const SnackBar(\n+                                                backgroundColor: Colors.red,\n+                                                content: Text(\n+                                                    \"You can't delete this post\")),\n+                                          );\n+                                        }\n+                                      }\n+                                    },\n+                                    itemBuilder: (BuildContext context) {\n+                                      return {'Delete'}.map((String choice) {\n+                                        return PopupMenuItem<String>(\n+                                          value: choice,\n+                                          child: Text(choice),\n+                                        );\n+                                      }).toList();\n+                                    },\n+                                  ),\n+                                ),\n+                              ),\n \n-//                               // LOST OR FOUND\n-//                               Stack(\n-//                                 children: [\n-//                                   CarouselSlider(\n-//                                     options: CarouselOptions(\n-//                                       autoPlay: true,\n-//                                       height: 500.0,\n-//                                       enlargeCenterPage: true,\n-//                                     ),\n-//                                     items:\n-//                                         post.itemImages.map<Widget>((imageUrl) {\n-//                                       return GestureDetector(\n-//                                         onTap: () {\n-//                                           showDialog(\n-//                                             context: context,\n-//                                             builder: (BuildContext context) {\n-//                                               return Dialog(\n-//                                                 child: Stack(\n-//                                                   children: [\n-//                                                     Image.network(imageUrl),\n-//                                                     Positioned(\n-//                                                       right: 10,\n-//                                                       top: 10,\n-//                                                       child: IconButton(\n-//                                                         icon: const Icon(\n-//                                                             Icons.cancel,\n-//                                                             color: Colors.red),\n-//                                                         onPressed: () {\n-//                                                           Navigator.of(context)\n-//                                                               .pop();\n-//                                                         },\n-//                                                       ),\n-//                                                     ),\n-//                                                   ],\n-//                                                 ),\n-//                                               );\n-//                                             },\n-//                                           );\n-//                                         },\n-//                                         child: ClipRRect(\n-//                                           borderRadius:\n-//                                               BorderRadius.circular(10),\n-//                                           child: Image.network(\n-//                                             imageUrl,\n-//                                             fit: BoxFit.cover,\n-//                                             width: MediaQuery.of(context)\n-//                                                 .size\n-//                                                 .width,\n-//                                             errorBuilder:\n-//                                                 (context, error, stackTrace) {\n-//                                               return const Icon(Icons.error);\n-//                                             },\n-//                                           ),\n-//                                         ),\n-//                                       );\n-//                                     }).toList(),\n-//                                   ),\n-//                                   Positioned(\n-//                                     top: isMobile ? 16 : 6,\n-//                                     left: 50,\n-//                                     child: Container(\n-//                                       padding: const EdgeInsets.symmetric(\n-//                                           horizontal: 10, vertical: 5),\n-//                                       decoration: BoxDecoration(\n-//                                         color: post.status == 'Lost'\n-//                                             ? Colors.red\n-//                                             : Colors.green,\n-//                                         borderRadius: BorderRadius.circular(5),\n-//                                       ),\n-//                                       child: Text(\n-//                                         post.status,\n-//                                         style: const TextStyle(\n-//                                           color: Colors.white,\n-//                                           fontWeight: FontWeight.bold,\n-//                                         ),\n-//                                       ),\n-//                                     ),\n-//                                   ),\n-//                                 ],\n-//                               ),\n+                              // LOST OR FOUND\n+                              Stack(\n+                                children: [\n+                                  CarouselSlider(\n+                                    options: CarouselOptions(\n+                                      autoPlay: true,\n+                                      height: 500.0,\n+                                      enlargeCenterPage: true,\n+                                    ),\n+                                    items:\n+                                        post.itemImages.map<Widget>((imageUrl) {\n+                                      return GestureDetector(\n+                                        onTap: () {\n+                                          showDialog(\n+                                            context: context,\n+                                            builder: (BuildContext context) {\n+                                              return Dialog(\n+                                                child: Stack(\n+                                                  children: [\n+                                                    Image.network(imageUrl),\n+                                                    Positioned(\n+                                                      right: 10,\n+                                                      top: 10,\n+                                                      child: IconButton(\n+                                                        icon: const Icon(\n+                                                            Icons.cancel,\n+                                                            color: Colors.red),\n+                                                        onPressed: () {\n+                                                          Navigator.of(context)\n+                                                              .pop();\n+                                                        },\n+                                                      ),\n+                                                    ),\n+                                                  ],\n+                                                ),\n+                                              );\n+                                            },\n+                                          );\n+                                        },\n+                                        child: ClipRRect(\n+                                          borderRadius:\n+                                              BorderRadius.circular(10),\n+                                          child: Image.network(\n+                                            imageUrl,\n+                                            fit: BoxFit.cover,\n+                                            width: MediaQuery.of(context)\n+                                                .size\n+                                                .width,\n+                                            errorBuilder:\n+                                                (context, error, stackTrace) {\n+                                              return const Icon(Icons.error);\n+                                            },\n+                                          ),\n+                                        ),\n+                                      );\n+                                    }).toList(),\n+                                  ),\n+                                  Positioned(\n+                                    top: isMobile ? 16 : 6,\n+                                    left: 50,\n+                                    child: Container(\n+                                      padding: const EdgeInsets.symmetric(\n+                                          horizontal: 10, vertical: 5),\n+                                      decoration: BoxDecoration(\n+                                        color: post.status == 'Lost'\n+                                            ? Colors.red\n+                                            : Colors.green,\n+                                        borderRadius: BorderRadius.circular(5),\n+                                      ),\n+                                      child: Text(\n+                                        post.status,\n+                                        style: const TextStyle(\n+                                          color: Colors.white,\n+                                          fontWeight: FontWeight.bold,\n+                                        ),\n+                                      ),\n+                                    ),\n+                                  ),\n+                                ],\n+                              ),\n \n-//                               Padding(\n-//                                 padding: const EdgeInsets.symmetric(\n-//                                     horizontal: 18.0, vertical: 10),\n-//                                 child: Column(\n-//                                   crossAxisAlignment: CrossAxisAlignment.start,\n-//                                   children: [\n-//                                     // ITEM item,date\n-//                                     Row(\n-//                                       mainAxisAlignment:\n-//                                           MainAxisAlignment.spaceBetween,\n-//                                       children: [\n-//                                         Text(\n-//                                           post.title == 'Other'\n-//                                               ? '${post.status} Item'\n-//                                               : post.title,\n-//                                           overflow: TextOverflow.clip,\n-//                                           softWrap: true,\n-//                                           style: const TextStyle(\n-//                                               fontSize: 18,\n-//                                               fontWeight: FontWeight.bold),\n-//                                         ),\n-//                                         const SizedBox(width: 5),\n-//                                         Row(\n-//                                           children: [\n-//                                             Text(\"${post.status} On : \",\n-//                                                 overflow: TextOverflow.clip,\n-//                                                 softWrap: true,\n-//                                                 style: const TextStyle(\n-//                                                     color: Colors.red,\n-//                                                     fontWeight:\n-//                                                         FontWeight.bold)),\n-//                                             Text(post.postTime,\n-//                                                 style: const TextStyle(\n-//                                                     fontWeight:\n-//                                                         FontWeight.bold)),\n-//                                           ],\n-//                                         ),\n-//                                       ],\n-//                                     ),\n-//                                     const SizedBox(height: 5),\n+                              Padding(\n+                                padding: const EdgeInsets.symmetric(\n+                                    horizontal: 18.0, vertical: 10),\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    // ITEM item,date\n+                                    Row(\n+                                      mainAxisAlignment:\n+                                          MainAxisAlignment.spaceBetween,\n+                                      children: [\n+                                        Text(\n+                                          post.title == 'Other'\n+                                              ? '${post.status} Item'\n+                                              : post.title,\n+                                          overflow: TextOverflow.clip,\n+                                          softWrap: true,\n+                                          style: const TextStyle(\n+                                              fontSize: 18,\n+                                              fontWeight: FontWeight.bold),\n+                                        ),\n+                                        const SizedBox(width: 5),\n+                                        Row(\n+                                          children: [\n+                                            Text(\"${post.status} On : \",\n+                                                overflow: TextOverflow.clip,\n+                                                softWrap: true,\n+                                                style: const TextStyle(\n+                                                    color: Colors.red,\n+                                                    fontWeight:\n+                                                        FontWeight.bold)),\n+                                            Text(post.postTime,\n+                                                style: const TextStyle(\n+                                                    fontWeight:\n+                                                        FontWeight.bold)),\n+                                          ],\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    const SizedBox(height: 5),\n \n-//                                     //DESCRIPTION\n-//                                     Row(\n-//                                       crossAxisAlignment: CrossAxisAlignment\n-//                                           .start, // Align text to the top\n-//                                       children: [\n-//                                         const Text(\n-//                                           \"Description : \",\n-//                                           style: TextStyle(\n-//                                             fontWeight: FontWeight.bold,\n-//                                           ),\n-//                                         ),\n-//                                         const SizedBox(width: 4),\n-//                                         Expanded(\n-//                                           child: Text(\n-//                                             post.description,\n-//                                             overflow: TextOverflow.clip,\n-//                                             softWrap: true,\n-//                                             style: const TextStyle(\n-//                                               fontSize: 14,\n-//                                             ),\n-//                                           ),\n-//                                         ),\n-//                                       ],\n-//                                     ),\n-//                                     const SizedBox(height: 10),\n+                                    //DESCRIPTION\n+                                    Row(\n+                                      crossAxisAlignment: CrossAxisAlignment\n+                                          .start, // Align text to the top\n+                                      children: [\n+                                        const Text(\n+                                          \"Description : \",\n+                                          style: TextStyle(\n+                                            fontWeight: FontWeight.bold,\n+                                          ),\n+                                        ),\n+                                        const SizedBox(width: 4),\n+                                        Expanded(\n+                                          child: Text(\n+                                            post.description,\n+                                            overflow: TextOverflow.clip,\n+                                            softWrap: true,\n+                                            style: const TextStyle(\n+                                              fontSize: 14,\n+                                            ),\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    const SizedBox(height: 10),\n \n-//                                     //BUTTONNS\n-//                                     StreamBuilder<QuerySnapshot>(\n-//                                         stream: FirebaseFirestore.instance\n-//                                             .collection('posts')\n-//                                             .doc(post.postId)\n-//                                             .collection('claims')\n-//                                             .where('senderId',\n-//                                                 isEqualTo: user!.uid)\n-//                                             .snapshots(),\n-//                                         builder: (context, claimSnapshot) {\n-//                                           if (claimSnapshot.connectionState ==\n-//                                               ConnectionState.waiting) {\n-//                                             return const Center(\n-//                                                 child:\n-//                                                     CircularProgressIndicator());\n-//                                           }\n+                                    //BUTTONNS\n+                                    StreamBuilder<QuerySnapshot>(\n+                                        stream: FirebaseFirestore.instance\n+                                            .collection('posts')\n+                                            .doc(post.postId)\n+                                            .collection('claims')\n+                                            .where('senderId',\n+                                                isEqualTo: user!.uid)\n+                                            .snapshots(),\n+                                        builder: (context, claimSnapshot) {\n+                                          if (claimSnapshot.connectionState ==\n+                                              ConnectionState.waiting) {\n+                                            return const Center(\n+                                                child:\n+                                                    CircularProgressIndicator());\n+                                          }\n \n-//                                           bool userHasRequestedClaim = false;\n+                                          bool userHasRequestedClaim = false;\n \n-//                                           if (claimSnapshot.hasData &&\n-//                                               claimSnapshot\n-//                                                   .data!.docs.isNotEmpty) {\n-//                                             final claimData = claimSnapshot\n-//                                                 .data!.docs.first\n-//                                                 .data() as Map<String, dynamic>;\n+                                          if (claimSnapshot.hasData &&\n+                                              claimSnapshot\n+                                                  .data!.docs.isNotEmpty) {\n+                                            final claimData = claimSnapshot\n+                                                .data!.docs.first\n+                                                .data() as Map<String, dynamic>;\n \n-//                                             if (claimData['claimStatusC'] ==\n-//                                                 'requested') {\n-//                                               userHasRequestedClaim = true;\n-//                                             }\n-//                                             if (claimData['claimStatusC'] ==\n-//                                                     'accepted' ||\n-//                                                 claimData['claimStatusC'] ==\n-//                                                     'declined') {\n-//                                               userHasRequestedClaim = false;\n-//                                             }\n-//                                           }\n+                                            if (claimData['claimStatusC'] ==\n+                                                'requested') {\n+                                              userHasRequestedClaim = true;\n+                                            }\n+                                            if (claimData['claimStatusC'] ==\n+                                                    'accepted' ||\n+                                                claimData['claimStatusC'] ==\n+                                                    'declined') {\n+                                              userHasRequestedClaim = false;\n+                                            }\n+                                          }\n \n-//                                           return Row(\n-//                                               mainAxisAlignment:\n-//                                                   MainAxisAlignment.spaceAround,\n-//                                               children: [\n-//                                                 GestureDetector(\n-//                                                   onTap: () {\n-//                                                     _sharePost(\n-//                                                         context,\n-//                                                         post.title,\n-//                                                         post.description);\n-//                                                   },\n-//                                                   child: const Row(\n-//                                                     children: [\n-//                                                       Icon(Icons.share_rounded),\n-//                                                       SizedBox(width: 3),\n-//                                                       Text('Share'),\n-//                                                     ],\n-//                                                   ),\n-//                                                 ),\n+                                          return Row(\n+                                              mainAxisAlignment:\n+                                                  MainAxisAlignment.spaceAround,\n+                                              children: [\n+                                                GestureDetector(\n+                                                  onTap: () {\n+                                                    _sharePost(\n+                                                        context,\n+                                                        post.title,\n+                                                        post.description);\n+                                                  },\n+                                                  child: const Row(\n+                                                    children: [\n+                                                      Icon(Icons.share_rounded),\n+                                                      SizedBox(width: 3),\n+                                                      Text('Share'),\n+                                                    ],\n+                                                  ),\n+                                                ),\n \n-//                                                 if (post.postmakerId !=\n-//                                                     user!.uid)\n-//                                                   ElevatedButton(\n-//                                                     onPressed: () {\n-//                                                       _replyToPostmaker(\n-//                                                           context,\n-//                                                           post.postmakerId,\n-//                                                           post.userName,\n-//                                                           post.postId);\n-//                                                     },\n-//                                                     style: ElevatedButton\n-//                                                         .styleFrom(\n-//                                                       backgroundColor:\n-//                                                           Colors.green.shade600,\n-//                                                       shape:\n-//                                                           RoundedRectangleBorder(\n-//                                                         borderRadius:\n-//                                                             BorderRadius\n-//                                                                 .circular(10),\n-//                                                       ),\n-//                                                     ),\n-//                                                     child: const Row(\n-//                                                       mainAxisAlignment:\n-//                                                           MainAxisAlignment\n-//                                                               .center,\n-//                                                       children: [\n-//                                                         Icon(Icons.reply,\n-//                                                             color:\n-//                                                                 Colors.white),\n-//                                                         SizedBox(width: 3),\n-//                                                         Text(\n-//                                                           'Reply',\n-//                                                           style: TextStyle(\n-//                                                               fontSize: 16,\n-//                                                               color:\n-//                                                                   Colors.white),\n-//                                                         ),\n-//                                                       ],\n-//                                                     ),\n-//                                                   ),\n+                                                if (post.postmakerId !=\n+                                                    user!.uid)\n+                                                  ElevatedButton(\n+                                                    onPressed: () {\n+                                                      _replyToPostmaker(\n+                                                          context,\n+                                                          post.postmakerId,\n+                                                          post.userName,\n+                                                          post.postId);\n+                                                    },\n+                                                    style: ElevatedButton\n+                                                        .styleFrom(\n+                                                      backgroundColor:\n+                                                          Colors.green.shade600,\n+                                                      shape:\n+                                                          RoundedRectangleBorder(\n+                                                        borderRadius:\n+                                                            BorderRadius\n+                                                                .circular(10),\n+                                                      ),\n+                                                    ),\n+                                                    child: const Row(\n+                                                      mainAxisAlignment:\n+                                                          MainAxisAlignment\n+                                                              .center,\n+                                                      children: [\n+                                                        Icon(Icons.reply,\n+                                                            color:\n+                                                                Colors.white),\n+                                                        SizedBox(width: 3),\n+                                                        Text(\n+                                                          'Reply',\n+                                                          style: TextStyle(\n+                                                              fontSize: 16,\n+                                                              color:\n+                                                                  Colors.white),\n+                                                        ),\n+                                                      ],\n+                                                    ),\n+                                                  ),\n \n-//                                                 //Claimed Button\n-//                                                 if (post.status != 'Lost' &&\n-//                                                     post.isClaimed == true)\n-//                                                   ElevatedButton(\n-//                                                     onPressed: () {\n-//                                                       _claimedPost(\n-//                                                           context,\n-//                                                           post.postclaimerId!,\n-//                                                           post.title,\n-//                                                           post.postClaimer!,\n-//                                                           post.postId);\n-//                                                     },\n-//                                                     style: ElevatedButton\n-//                                                         .styleFrom(\n-//                                                       backgroundColor: Colors\n-//                                                           .deepOrange.shade600,\n-//                                                       shape:\n-//                                                           RoundedRectangleBorder(\n-//                                                         borderRadius:\n-//                                                             BorderRadius\n-//                                                                 .circular(10),\n-//                                                       ),\n-//                                                     ),\n-//                                                     child: const Row(\n-//                                                       mainAxisAlignment:\n-//                                                           MainAxisAlignment\n-//                                                               .center,\n-//                                                       children: [\n-//                                                         Icon(Icons.back_hand,\n-//                                                             color:\n-//                                                                 Colors.white),\n-//                                                         SizedBox(width: 3),\n-//                                                         Text(\n-//                                                           'Claimed',\n-//                                                           style: TextStyle(\n-//                                                               fontSize: 16,\n-//                                                               color:\n-//                                                                   Colors.white),\n-//                                                         ),\n-//                                                       ],\n-//                                                     ),\n-//                                                   ),\n+                                                //Claimed Button\n+                                                if (post.status != 'Lost' &&\n+                                                    post.isClaimed == true)\n+                                                  ElevatedButton(\n+                                                    onPressed: () {\n+                                                      _claimedPost(\n+                                                          context,\n+                                                          post.postclaimerId!,\n+                                                          post.title,\n+                                                          post.postClaimer!,\n+                                                          post.postId);\n+                                                    },\n+                                                    style: ElevatedButton\n+                                                        .styleFrom(\n+                                                      backgroundColor: Colors\n+                                                          .deepOrange.shade600,\n+                                                      shape:\n+                                                          RoundedRectangleBorder(\n+                                                        borderRadius:\n+                                                            BorderRadius\n+                                                                .circular(10),\n+                                                      ),\n+                                                    ),\n+                                                    child: const Row(\n+                                                      mainAxisAlignment:\n+                                                          MainAxisAlignment\n+                                                              .center,\n+                                                      children: [\n+                                                        Icon(Icons.back_hand,\n+                                                            color:\n+                                                                Colors.white),\n+                                                        SizedBox(width: 3),\n+                                                        Text(\n+                                                          'Claimed',\n+                                                          style: TextStyle(\n+                                                              fontSize: 16,\n+                                                              color:\n+                                                                  Colors.white),\n+                                                        ),\n+                                                      ],\n+                                                    ),\n+                                                  ),\n \n-//                                                 // Claim Buttton\n-//                                                 if (post.postmakerId !=\n-//                                                         user!.uid &&\n-//                                                     post.status == 'Found' &&\n-//                                                     post.isClaimed == false &&\n-//                                                     !userHasRequestedClaim)\n-//                                                   ElevatedButton(\n-//                                                     onPressed: () {\n-//                                                       _claimPost(\n-//                                                           context,\n-//                                                           post.postmakerId,\n-//                                                           post.title,\n-//                                                           post.question!,\n-//                                                           post.description,\n-//                                                           post.postId);\n-//                                                     },\n-//                                                     style: ElevatedButton\n-//                                                         .styleFrom(\n-//                                                       backgroundColor: Colors\n-//                                                           .deepOrange.shade600,\n-//                                                       shape:\n-//                                                           RoundedRectangleBorder(\n-//                                                         borderRadius:\n-//                                                             BorderRadius\n-//                                                                 .circular(10),\n-//                                                       ),\n-//                                                     ),\n-//                                                     child: const Row(\n-//                                                       mainAxisAlignment:\n-//                                                           MainAxisAlignment\n-//                                                               .center,\n-//                                                       children: [\n-//                                                         Icon(Icons.back_hand,\n-//                                                             color:\n-//                                                                 Colors.white),\n-//                                                         SizedBox(width: 6),\n-//                                                         Text(\n-//                                                           'Claim',\n-//                                                           style: TextStyle(\n-//                                                               fontSize: 16,\n-//                                                               color:\n-//                                                                   Colors.white),\n-//                                                         ),\n-//                                                       ],\n-//                                                     ),\n-//                                                   ),\n+                                                // Claim Buttton\n+                                                if (post.postmakerId !=\n+                                                        user!.uid &&\n+                                                    post.status == 'Found' &&\n+                                                    post.isClaimed == false &&\n+                                                    !userHasRequestedClaim)\n+                                                  ElevatedButton(\n+                                                    onPressed: () {\n+                                                      _claimPost(\n+                                                          context,\n+                                                          post.postmakerId,\n+                                                          post.title,\n+                                                          post.question!,\n+                                                          post.description,\n+                                                          post.postId);\n+                                                    },\n+                                                    style: ElevatedButton\n+                                                        .styleFrom(\n+                                                      backgroundColor: Colors\n+                                                          .deepOrange.shade600,\n+                                                      shape:\n+                                                          RoundedRectangleBorder(\n+                                                        borderRadius:\n+                                                            BorderRadius\n+                                                                .circular(10),\n+                                                      ),\n+                                                    ),\n+                                                    child: const Row(\n+                                                      mainAxisAlignment:\n+                                                          MainAxisAlignment\n+                                                              .center,\n+                                                      children: [\n+                                                        Icon(Icons.back_hand,\n+                                                            color:\n+                                                                Colors.white),\n+                                                        SizedBox(width: 6),\n+                                                        Text(\n+                                                          'Claim',\n+                                                          style: TextStyle(\n+                                                              fontSize: 16,\n+                                                              color:\n+                                                                  Colors.white),\n+                                                        ),\n+                                                      ],\n+                                                    ),\n+                                                  ),\n \n-//                                                 // Request Button\n-//                                                 if (post.postmakerId !=\n-//                                                         user!.uid &&\n-//                                                     post.status == 'Found' &&\n-//                                                     post.isClaimed == false &&\n-//                                                     userHasRequestedClaim)\n-//                                                   ElevatedButton(\n-//                                                     onPressed: () {},\n-//                                                     style: ElevatedButton\n-//                                                         .styleFrom(\n-//                                                       backgroundColor: Colors\n-//                                                           .deepOrange.shade600,\n-//                                                       shape:\n-//                                                           RoundedRectangleBorder(\n-//                                                         borderRadius:\n-//                                                             BorderRadius\n-//                                                                 .circular(10),\n-//                                                       ),\n-//                                                     ),\n-//                                                     child: const Row(\n-//                                                       mainAxisAlignment:\n-//                                                           MainAxisAlignment\n-//                                                               .center,\n-//                                                       children: [\n-//                                                         Icon(Icons.back_hand,\n-//                                                             color:\n-//                                                                 Colors.white),\n-//                                                         SizedBox(width: 3),\n-//                                                         Text(\n-//                                                           'Requested',\n-//                                                           style: TextStyle(\n-//                                                               fontSize: 16,\n-//                                                               color:\n-//                                                                   Colors.white),\n-//                                                         ),\n-//                                                       ],\n-//                                                     ),\n-//                                                   )\n-//                                               ]);\n-//                                         })\n-//                                   ],\n-//                                 ),\n-//                               ),\n-//                             ],\n-//                           ),\n-//                         ),\n-//                       ),\n-//                     ),\n-//                   );\n-//                 },\n-//               );\n-//             },\n-//           );\n-//         },\n-//       ),\n-//     );\n-//   }\n+                                                // Request Button\n+                                                if (post.postmakerId !=\n+                                                        user!.uid &&\n+                                                    post.status == 'Found' &&\n+                                                    post.isClaimed == false &&\n+                                                    userHasRequestedClaim)\n+                                                  ElevatedButton(\n+                                                    onPressed: () {},\n+                                                    style: ElevatedButton\n+                                                        .styleFrom(\n+                                                      backgroundColor: Colors\n+                                                          .deepOrange.shade600,\n+                                                      shape:\n+                                                          RoundedRectangleBorder(\n+                                                        borderRadius:\n+                                                            BorderRadius\n+                                                                .circular(10),\n+                                                      ),\n+                                                    ),\n+                                                    child: const Row(\n+                                                      mainAxisAlignment:\n+                                                          MainAxisAlignment\n+                                                              .center,\n+                                                      children: [\n+                                                        Icon(Icons.back_hand,\n+                                                            color:\n+                                                                Colors.white),\n+                                                        SizedBox(width: 3),\n+                                                        Text(\n+                                                          'Requested',\n+                                                          style: TextStyle(\n+                                                              fontSize: 16,\n+                                                              color:\n+                                                                  Colors.white),\n+                                                        ),\n+                                                      ],\n+                                                    ),\n+                                                  )\n+                                              ]);\n+                                        })\n+                                  ],\n+                                ),\n+                              ),\n+                            ],\n+                          ),\n+                        ),\n+                      ),\n+                    ),\n+                  );\n+                },\n+              );\n+            },\n+          );\n+        },\n+      ),\n+    );\n+  }\n \n-//   void _replyToPostmaker(BuildContext context, String postmakerId,\n-//       String postmaker, String postId) {\n-//     TextEditingController messageController = TextEditingController();\n+  void _replyToPostmaker(BuildContext context, String postmakerId,\n+      String postmaker, String postId) {\n+    TextEditingController messageController = TextEditingController();\n \n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: const Text('Send a Reply'),\n-//           content: Column(\n-//             mainAxisSize: MainAxisSize.min,\n-//             children: [\n-//               Row(\n-//                 children: [\n-//                   const Text('Reply to'),\n-//                   TextButton(\n-//                       onPressed: () {\n-//                         Navigator.push(\n-//                             context,\n-//                             MaterialPageRoute(\n-//                                 builder: (_) =>\n-//                                     ProfilePage2(uid: postmakerId)));\n-//                       },\n-//                       child: Text(postmaker))\n-//                 ],\n-//               ),\n-//               const SizedBox(height: 10),\n-//               TextField(\n-//                 controller: messageController,\n-//                 decoration: const InputDecoration(\n-//                   labelText: 'Your message',\n-//                   alignLabelWithHint: true,\n-//                   border: OutlineInputBorder(),\n-//                 ),\n-//                 maxLines: 3,\n-//               ),\n-//             ],\n-//           ),\n-//           actions: [\n-//             TextButton(\n-//               onPressed: () {\n-//                 Navigator.of(context).pop(); // Close the dialog without sending\n-//               },\n-//               child: const Text('Cancel'),\n-//             ),\n-//             TextButton(\n-//               onPressed: () {\n-//                 String message = messageController.text.trim();\n-//                 if (message.isNotEmpty) {\n-//                   _sendMessageToPostmaker(\n-//                       context, postmakerId, message, postId);\n-//                 }\n-//                 ScaffoldMessenger.of(context).showSnackBar(\n-//                   const SnackBar(\n-//                     content: Text('Message sent successfully'),\n-//                     behavior: SnackBarBehavior.floating,\n-//                     margin: EdgeInsets.all(16.0),\n-//                   ),\n-//                 );\n-//                 Navigator.of(context).pop(); // Close the dialog after sending\n-//               },\n-//               child: const Text('Send'),\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Send a Reply'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              Row(\n+                children: [\n+                  const Text('Reply to'),\n+                  TextButton(\n+                      onPressed: () {\n+                        Navigator.push(\n+                            context,\n+                            MaterialPageRoute(\n+                                builder: (_) =>\n+                                    ProfilePage2(uid: postmakerId)));\n+                      },\n+                      child: Text(postmaker))\n+                ],\n+              ),\n+              const SizedBox(height: 10),\n+              TextField(\n+                controller: messageController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your message',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop(); // Close the dialog without sending\n+              },\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String message = messageController.text.trim();\n+                if (message.isNotEmpty) {\n+                  _sendMessageToPostmaker(\n+                      context, postmakerId, message, postId);\n+                }\n+                ScaffoldMessenger.of(context).showSnackBar(\n+                  const SnackBar(\n+                    content: Text('Message sent successfully'),\n+                    behavior: SnackBarBehavior.floating,\n+                    margin: EdgeInsets.all(16.0),\n+                  ),\n+                );\n+                Navigator.of(context).pop(); // Close the dialog after sending\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n-//       String message, String postId) async {\n-//     try {\n-//       // Add a chat message to Firestore\n-//       await FirebaseFirestore.instance.collection('chats').add({\n-//         'senderId': user!.uid,\n-//         'receiverId': postmakerId,\n-//         'participants': [user!.uid, postmakerId],\n-//         'message': message,\n-//         'postId': postId,\n-//         'timestamp': Timestamp.now(),\n-//       });\n+  Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n+      String message, String postId) async {\n+    try {\n+      // Add a chat message to Firestore\n+      await FirebaseFirestore.instance.collection('chats').add({\n+        'senderId': user!.uid,\n+        'receiverId': postmakerId,\n+        'participants': [user!.uid, postmakerId],\n+        'message': message,\n+        'postId': postId,\n+        'timestamp': Timestamp.now(),\n+      });\n \n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         const SnackBar(\n-//           content: Text('Message sent successfully'),\n-//           behavior: SnackBarBehavior.floating,\n-//           margin: EdgeInsets.all(16.0),\n-//         ),\n-//       );\n-//     } catch (e) {\n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         SnackBar(\n-//           content: Text('Failed to send message: $e'),\n-//           backgroundColor: Colors.red,\n-//         ),\n-//       );\n-//     }\n-//   }\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Message sent successfully'),\n+          behavior: SnackBarBehavior.floating,\n+          margin: EdgeInsets.all(16.0),\n+        ),\n+      );\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          content: Text('Failed to send message: $e'),\n+          backgroundColor: Colors.red,\n+        ),\n+      );\n+    }\n+  }\n \n-//   void _claimPost(BuildContext context, String postmakerId, String postTitle,\n-//       String postQuestion, String postdescription, String postId) {\n-//     TextEditingController answerController = TextEditingController();\n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: const Text('Claim Item'),\n-//           content: Column(\n-//             mainAxisSize: MainAxisSize.min,\n-//             children: [\n-//               const Text('Question from the post owner:'),\n-//               const SizedBox(height: 10),\n-//               Text(postQuestion,\n-//                   style: const TextStyle(fontWeight: FontWeight.bold)),\n-//               const SizedBox(height: 20),\n-//               TextField(\n-//                 controller: answerController,\n-//                 decoration: const InputDecoration(\n-//                   labelText: 'Your answer',\n-//                   alignLabelWithHint: true,\n-//                   border: OutlineInputBorder(),\n-//                 ),\n-//                 maxLines: 3,\n-//               ),\n-//             ],\n-//           ),\n-//           actions: [\n-//             TextButton(\n-//               onPressed: () {\n-//                 Navigator.of(context).pop();\n-//               },\n-//               child: const Text('Cancel'),\n-//             ),\n-//             TextButton(\n-//               onPressed: () {\n-//                 String answer = answerController.text.trim();\n-//                 if (answer.isNotEmpty) {\n-//                   _sendAnswerToPostmaker(\n-//                       context, answer, postId, postmakerId, 'requested');\n-//                 }\n-//                 ScaffoldMessenger.of(context).showSnackBar(\n-//                   const SnackBar(\n-//                     content: Text('Request sent successfully'),\n-//                     behavior: SnackBarBehavior.floating,\n-//                     margin: EdgeInsets.all(16.0),\n-//                   ),\n-//                 );\n-//                 Navigator.of(context).pop();\n-//               },\n-//               child: const Text('Send'),\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+  void _claimPost(BuildContext context, String postmakerId, String postTitle,\n+      String postQuestion, String postdescription, String postId) {\n+    TextEditingController answerController = TextEditingController();\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Claim Item'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              const Text('Question from the post owner:'),\n+              const SizedBox(height: 10),\n+              Text(postQuestion,\n+                  style: const TextStyle(fontWeight: FontWeight.bold)),\n+              const SizedBox(height: 20),\n+              TextField(\n+                controller: answerController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your answer',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String answer = answerController.text.trim();\n+                if (answer.isNotEmpty) {\n+                  _sendAnswerToPostmaker(\n+                      context, answer, postId, postmakerId, 'requested');\n+                }\n+                ScaffoldMessenger.of(context).showSnackBar(\n+                  const SnackBar(\n+                    content: Text('Request sent successfully'),\n+                    behavior: SnackBarBehavior.floating,\n+                    margin: EdgeInsets.all(16.0),\n+                  ),\n+                );\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   void _claimedPost(BuildContext context, String postclaimerId,\n-//       String postTitle, String claimername, String postId) {\n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: Text('Claimed Item : $postTitle',\n-//               style:\n-//                   const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n-//           content: Column(\n-//             mainAxisSize: MainAxisSize.min,\n-//             children: [\n-//               Row(\n-//                 children: [\n-//                   const Text('Already claimed by :',\n-//                       style: TextStyle(fontWeight: FontWeight.bold)),\n-//                   TextButton(\n-//                       onPressed: () {\n-//                         Navigator.push(\n-//                             context,\n-//                             MaterialPageRoute(\n-//                                 builder: (_) =>\n-//                                     ProfilePage2(uid: postclaimerId)));\n-//                       },\n-//                       child: Text(\n-//                           user!.uid == postclaimerId ? 'You' : claimername,\n-//                           style: const TextStyle(fontWeight: FontWeight.bold))),\n-//                 ],\n-//               ),\n-//               const SizedBox(height: 10),\n-//             ],\n-//           ),\n-//           actions: [\n-//             TextButton(\n-//               onPressed: () {\n-//                 Navigator.of(context).pop();\n-//               },\n-//               child: const Text('Cancel'),\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+  void _claimedPost(BuildContext context, String postclaimerId,\n+      String postTitle, String claimername, String postId) {\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: Text('Claimed Item : $postTitle',\n+              style:\n+                  const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              Row(\n+                children: [\n+                  const Text('Already claimed by :',\n+                      style: TextStyle(fontWeight: FontWeight.bold)),\n+                  TextButton(\n+                      onPressed: () {\n+                        Navigator.push(\n+                            context,\n+                            MaterialPageRoute(\n+                                builder: (_) =>\n+                                    ProfilePage2(uid: postclaimerId)));\n+                      },\n+                      child: Text(\n+                          user!.uid == postclaimerId ? 'You' : claimername,\n+                          style: const TextStyle(fontWeight: FontWeight.bold))),\n+                ],\n+              ),\n+              const SizedBox(height: 10),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Cancel'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   Future<void> _sendAnswerToPostmaker(\n-//     BuildContext context,\n-//     String answer,\n-//     String postId,\n-//     String postmakerId,\n-//     String statusofRequest,\n-//   ) async {\n-//     try {\n-//       // Reference to the specific post's claims subcollection\n-//       CollectionReference claimsRef = FirebaseFirestore.instance\n-//           .collection('posts')\n-//           .doc(postId) // Get the post document using its ID\n-//           .collection('claims'); // Access the subcollection\n+  Future<void> _sendAnswerToPostmaker(\n+    BuildContext context,\n+    String answer,\n+    String postId,\n+    String postmakerId,\n+    String statusofRequest,\n+  ) async {\n+    try {\n+      // Reference to the specific post's claims subcollection\n+      CollectionReference claimsRef = FirebaseFirestore.instance\n+          .collection('posts')\n+          .doc(postId) // Get the post document using its ID\n+          .collection('claims'); // Access the subcollection\n \n-//       // Add a new claim document\n-//       await claimsRef.add({\n-//         'senderId': user!.uid,\n-//         'answer': answer,\n-//         'claimStatusC': statusofRequest,\n-//         'timestamp': Timestamp.now(),\n-//         'isClaimed': false,\n-//         'receiverId': postmakerId,\n-//       });\n+      // Add a new claim document\n+      await claimsRef.add({\n+        'senderId': user!.uid,\n+        'answer': answer,\n+        'claimStatusC': statusofRequest,\n+        'timestamp': Timestamp.now(),\n+        'isClaimed': false,\n+        'receiverId': postmakerId,\n+      });\n \n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         const SnackBar(\n-//           content: Text('Your answer has been sent to the post maker'),\n-//           behavior: SnackBarBehavior.floating,\n-//           margin: EdgeInsets.all(16.0),\n-//         ),\n-//       );\n-//     } catch (e) {\n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         SnackBar(\n-//           content: Text('Failed to send answer: $e'),\n-//           backgroundColor: Colors.red,\n-//         ),\n-//       );\n-//     }\n-//   }\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Your answer has been sent to the post maker'),\n+          behavior: SnackBarBehavior.floating,\n+          margin: EdgeInsets.all(16.0),\n+        ),\n+      );\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          content: Text('Failed to send answer: $e'),\n+          backgroundColor: Colors.red,\n+        ),\n+      );\n+    }\n+  }\n \n-//   void _sharePost(BuildContext context, String title, String description) {\n-//     final content = 'Check out this post: $title\\nDescription: $description';\n-//     final snackBar = SnackBar(content: Text('Shared! $content'));\n-//     ScaffoldMessenger.of(context).showSnackBar(snackBar);\n-//   }\n+  void _sharePost(BuildContext context, String title, String description) {\n+    final content = 'Check out this post: $title\\nDescription: $description';\n+    final snackBar = SnackBar(content: Text('Shared! $content'));\n+    ScaffoldMessenger.of(context).showSnackBar(snackBar);\n+  }\n \n-//   void _showDeleteConfirmation(BuildContext context, PostModel post) {\n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: const Text('Delete Post'),\n-//           content: const Text('Are you sure you want to delete this post?'),\n-//           actions: <Widget>[\n-//             TextButton(\n-//               child: const Text('Cancel'),\n-//               onPressed: () {\n-//                 Navigator.of(context).pop();\n-//               },\n-//             ),\n-//             TextButton(\n-//               child: const Text('Delete'),\n-//               onPressed: () {\n-//                 FirebaseFirestore.instance\n-//                     .collection('posts')\n-//                     .doc(post.postId)\n-//                     .delete();\n-//                 Navigator.of(context).pop();\n-//               },\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+  void _showDeleteConfirmation(BuildContext context, PostModel post) {\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Delete Post'),\n+          content: const Text('Are you sure you want to delete this post?'),\n+          actions: <Widget>[\n+            TextButton(\n+              child: const Text('Cancel'),\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n+            ),\n+            TextButton(\n+              child: const Text('Delete'),\n+              onPressed: () {\n+                FirebaseFirestore.instance\n+                    .collection('posts')\n+                    .doc(post.postId)\n+                    .delete();\n+                Navigator.of(context).pop();\n+              },\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   void _showFullImageDialog(BuildContext context, String imageUrl) {\n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return Dialog(\n-//           child: Container(\n-//             padding: const EdgeInsets.all(10),\n-//             child: Image.network(\n-//               imageUrl,\n-//               fit: BoxFit.cover,\n-//               width: double.infinity,\n-//               height: double.infinity,\n-//             ),\n-//           ),\n-//         );\n-//       },\n-//     );\n-//   }\n-// }\n+  void _showFullImageDialog(BuildContext context, String imageUrl) {\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return Dialog(\n+          child: Container(\n+            padding: const EdgeInsets.all(10),\n+            child: Image.network(\n+              imageUrl,\n+              fit: BoxFit.cover,\n+              width: double.infinity,\n+              height: double.infinity,\n+            ),\n+          ),\n+        );\n+      },\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1756119011292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,901 +1,901 @@\n-import 'package:carousel_slider/carousel_slider.dart';\n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:flutter/material.dart';\n-import 'package:intl/intl.dart';\n-import 'package:l_f/Frontend/Home/Post/post_model.dart';\n-import 'package:l_f/Frontend/Profile/user_see_page.dart';\n+  // import 'package:carousel_slider/carousel_slider.dart';\n+  // import 'package:cloud_firestore/cloud_firestore.dart';\n+  // import 'package:firebase_auth/firebase_auth.dart';\n+  // import 'package:flutter/material.dart';\n+  // import 'package:intl/intl.dart';\n+  // import 'package:l_f/Frontend/Home/Post/post_model.dart';\n+  // import 'package:l_f/Frontend/Profile/user_see_page.dart';\n \n-class PostDetailsPage extends StatefulWidget {\n-  final String postId;\n-  const PostDetailsPage({super.key, required this.postId});\n+  // class PostDetailsPage extends StatefulWidget {\n+  //   final String postId;\n+  //   const PostDetailsPage({super.key, required this.postId});\n \n-  @override\n-  State<PostDetailsPage> createState() => _PostDetailsPageState();\n-}\n+  //   @override\n+  //   State<PostDetailsPage> createState() => _PostDetailsPageState();\n+  // }\n \n-class _PostDetailsPageState extends State<PostDetailsPage> {\n-  final Map<String, Map<String, String>> _userCache = {};\n-  User? user = FirebaseAuth.instance.currentUser;\n+  // class _PostDetailsPageState extends State<PostDetailsPage> {\n+  //   final Map<String, Map<String, String>> _userCache = {};\n+  //   User? user = FirebaseAuth.instance.currentUser;\n \n-  String _formatDate(Timestamp? timestamp) {\n-    if (timestamp == null) return 'Not available';\n-    DateTime date = timestamp.toDate();\n-    return DateFormat('dd MMMM yyyy').format(date);\n-  }\n+  //   String _formatDate(Timestamp? timestamp) {\n+  //     if (timestamp == null) return 'Not available';\n+  //     DateTime date = timestamp.toDate();\n+  //     return DateFormat('dd MMMM yyyy').format(date);\n+  //   }\n \n-  Future<Map<String, String>> fetchUserNameAndProfilePic(String uid) async {\n-    if (_userCache.containsKey(uid)) {\n-      return _userCache[uid]!;\n-    }\n+  //   Future<Map<String, String>> fetchUserNameAndProfilePic(String uid) async {\n+  //     if (_userCache.containsKey(uid)) {\n+  //       return _userCache[uid]!;\n+  //     }\n \n-    try {\n-      DocumentSnapshot userDoc =\n-          await FirebaseFirestore.instance.collection('users').doc(uid).get();\n+  //     try {\n+  //       DocumentSnapshot userDoc =\n+  //           await FirebaseFirestore.instance.collection('users').doc(uid).get();\n \n-      if (!userDoc.exists) {\n-        throw Exception(\"User not found.\");\n-      }\n+  //       if (!userDoc.exists) {\n+  //         throw Exception(\"User not found.\");\n+  //       }\n \n-      Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n+  //       Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n \n-      String name = userData['name'] ?? 'NITH User';\n-      String profileImage = userData['profileImage'] ?? '';\n+  //       String name = userData['name'] ?? 'NITH User';\n+  //       String profileImage = userData['profileImage'] ?? '';\n \n-      _userCache[uid] = {\n-        'name': name,\n-        'profileImage': profileImage,\n-      };\n+  //       _userCache[uid] = {\n+  //         'name': name,\n+  //         'profileImage': profileImage,\n+  //       };\n \n-      return _userCache[uid]!;\n-    } catch (e) {\n-      print(\"Error fetching user profile: $e\");\n-      throw Exception(\"Error fetching user profile.\");\n-    }\n-  }\n+  //       return _userCache[uid]!;\n+  //     } catch (e) {\n+  //       print(\"Error fetching user profile: $e\");\n+  //       throw Exception(\"Error fetching user profile.\");\n+  //     }\n+  //   }\n \n-  @override\n-  Widget build(BuildContext context) {\n-    bool isMobile = MediaQuery.of(context).size.width < 830;\n-    return Scaffold(\n-      appBar: AppBar(\n-        backgroundColor: Colors.deepOrange,\n-        foregroundColor: Colors.white,\n-        title: const Text('Post Detail'),\n-      ),\n-      body: StreamBuilder<QuerySnapshot>(\n-        stream: FirebaseFirestore.instance\n-            .collection('posts')\n-            .where('postId', isEqualTo: widget.postId)\n-            .snapshots(),\n-        builder: (context, snapshot) {\n-          if (snapshot.connectionState == ConnectionState.waiting) {\n-            return const Center(child: CircularProgressIndicator());\n-          }\n-          if (snapshot.hasError) {\n-            return const Center(child: Text('Error loading posts'));\n-          }\n+  //   @override\n+  //   Widget build(BuildContext context) {\n+  //     bool isMobile = MediaQuery.of(context).size.width < 830;\n+  //     return Scaffold(\n+  //       appBar: AppBar(\n+  //         backgroundColor: Colors.deepOrange,\n+  //         foregroundColor: Colors.white,\n+  //         title: const Text('Post Detail'),\n+  //       ),\n+  //       body: StreamBuilder<QuerySnapshot>(\n+  //         stream: FirebaseFirestore.instance\n+  //             .collection('posts')\n+  //             .where('postId', isEqualTo: widget.postId)\n+  //             .snapshots(),\n+  //         builder: (context, snapshot) {\n+  //           if (snapshot.connectionState == ConnectionState.waiting) {\n+  //             return const Center(child: CircularProgressIndicator());\n+  //           }\n+  //           if (snapshot.hasError) {\n+  //             return const Center(child: Text('Error loading posts'));\n+  //           }\n \n-          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-            return const Center(child: Text('No posts available'));\n-          }\n+  //           if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+  //             return const Center(child: Text('No posts available'));\n+  //           }\n \n-          final posts = snapshot.data!.docs.map((doc) {\n-            final data = doc.data() as Map<String, dynamic>;\n-            final String uid = data['postmakerId'];\n-            final bool isClaimed = data['isClaimed'] ?? false;\n-            final String? claimerUid = data['postClaimer'];\n-            print(\"post claimerasss: : $claimerUid\");\n-            print(\"POST IDDDDDDDD : ${data['postId']}\");\n-            print(\"Is Post Claimed: $isClaimed\");\n+  //           final posts = snapshot.data!.docs.map((doc) {\n+  //             final data = doc.data() as Map<String, dynamic>;\n+  //             final String uid = data['postmakerId'];\n+  //             final bool isClaimed = data['isClaimed'] ?? false;\n+  //             final String? claimerUid = data['postClaimer'];\n+  //             print(\"post claimerasss: : $claimerUid\");\n+  //             print(\"POST IDDDDDDDD : ${data['postId']}\");\n+  //             print(\"Is Post Claimed: $isClaimed\");\n \n-            return fetchUserNameAndProfilePic(uid).then((userDetails) async {\n-              String postClaimerName = '';\n-              String postClaimerProfilePic = '';\n+  //             return fetchUserNameAndProfilePic(uid).then((userDetails) async {\n+  //               String postClaimerName = '';\n+  //               String postClaimerProfilePic = '';\n \n-              if (isClaimed && claimerUid != null) {\n-                final claimerDetails =\n-                    await fetchUserNameAndProfilePic(claimerUid);\n-                postClaimerName = claimerDetails['name'] ?? 'NITH User';\n-                postClaimerProfilePic = claimerDetails['profileImage'] ?? '';\n-              }\n+  //               if (isClaimed && claimerUid != null) {\n+  //                 final claimerDetails =\n+  //                     await fetchUserNameAndProfilePic(claimerUid);\n+  //                 postClaimerName = claimerDetails['name'] ?? 'NITH User';\n+  //                 postClaimerProfilePic = claimerDetails['profileImage'] ?? '';\n+  //               }\n \n-              return PostModel(\n-                userName: userDetails['name'] ?? 'NITH User',\n-                profileImageUrl: userDetails['profileImage'] ?? '',\n-                postTime: _formatDate(data['timestamp']),\n-                itemImages: List<String>.from(\n-                    data['imageUrls'] ?? ['']),\n-                status: data['status'] ?? '',\n-                title: data['item'] ?? '',\n-                location: data['location'] ?? '',\n-                description: data['description'] ?? '',\n-                postmakerId: data['postmakerId'],\n-                question: data['question'],\n-                postId: data['postId'],\n-                claimStatus: data['claimStatus'],\n-                isClaimed: isClaimed,\n-                postclaimerId: data['postClaimer'],\n-                postClaimer:\n-                    postClaimerName.isNotEmpty ? postClaimerName : null,\n-                postClaimerPic: postClaimerProfilePic.isNotEmpty\n-                    ? postClaimerProfilePic\n-                    : null,\n-              );\n-            });\n-          });\n+  //               return PostModel(\n+  //                 userName: userDetails['name'] ?? 'NITH User',\n+  //                 profileImageUrl: userDetails['profileImage'] ?? '',\n+  //                 postTime: _formatDate(data['timestamp']),\n+  //                 itemImages: List<String>.from(\n+  //                     data['imageUrls'] ?? ['']),\n+  //                 status: data['status'] ?? '',\n+  //                 title: data['item'] ?? '',\n+  //                 location: data['location'] ?? '',\n+  //                 description: data['description'] ?? '',\n+  //                 postmakerId: data['postmakerId'],\n+  //                 question: data['question'],\n+  //                 postId: data['postId'],\n+  //                 claimStatus: data['claimStatus'],\n+  //                 isClaimed: isClaimed,\n+  //                 postclaimerId: data['postClaimer'],\n+  //                 postClaimer:\n+  //                     postClaimerName.isNotEmpty ? postClaimerName : null,\n+  //                 postClaimerPic: postClaimerProfilePic.isNotEmpty\n+  //                     ? postClaimerProfilePic\n+  //                     : null,\n+  //               );\n+  //             });\n+  //           });\n \n-          return FutureBuilder<List<PostModel>>(\n-            future: Future.wait(posts.toList()),\n-            builder: (context, futureSnapshot) {\n-              if (futureSnapshot.connectionState == ConnectionState.waiting) {\n-                return const Center(child: CircularProgressIndicator());\n-              }\n+  //           return FutureBuilder<List<PostModel>>(\n+  //             future: Future.wait(posts.toList()),\n+  //             builder: (context, futureSnapshot) {\n+  //               if (futureSnapshot.connectionState == ConnectionState.waiting) {\n+  //                 return const Center(child: CircularProgressIndicator());\n+  //               }\n \n-              if (futureSnapshot.hasError) {\n-                print(\"Error : ${futureSnapshot.error}\");\n-                return const Center(child: Text('Error loading posts'));\n-              }\n+  //               if (futureSnapshot.hasError) {\n+  //                 print(\"Error : ${futureSnapshot.error}\");\n+  //                 return const Center(child: Text('Error loading posts'));\n+  //               }\n \n-              final postsList = futureSnapshot.data ?? [];\n+  //               final postsList = futureSnapshot.data ?? [];\n \n-              return ListView.builder(\n-                itemCount: postsList.length,\n-                itemBuilder: (context, index) {\n-                  final post = postsList[index];\n-                  return Padding(\n-                    padding: const EdgeInsets.all(2.0),\n-                    child: Center(\n-                      child: SizedBox(\n-                        width:\n-                            isMobile ? MediaQuery.of(context).size.width : 600,\n-                        child: Card(\n-                          elevation: 5,\n-                          shape: RoundedRectangleBorder(\n-                            borderRadius: BorderRadius.circular(10),\n-                          ),\n-                          child: Column(\n-                            crossAxisAlignment: CrossAxisAlignment.start,\n-                            children: [\n-                              // Header  of the POST (profiel,name.location,delete)\n-                              GestureDetector(\n-                                onTap: () {\n-                                  Navigator.push(\n-                                      context,\n-                                      MaterialPageRoute(\n-                                          builder: (_) => ProfilePage2(\n-                                              uid: post.postmakerId)));\n-                                },\n-                                child: ListTile(\n-                                  leading: CircleAvatar(\n-                                    radius: 30,\n-                                    backgroundImage:\n-                                        NetworkImage(post.profileImageUrl),\n-                                  ),\n-                                  title: Text(post.userName,\n-                                      style: const TextStyle(\n-                                          fontWeight: FontWeight.bold)),\n-                                  subtitle: Text(\n-                                      \"Location : ${post.location} , NITH\"),\n-                                  trailing: PopupMenuButton<String>(\n-                                    onSelected: (value) {\n-                                      if (value == 'Delete') {\n-                                        if (user!.uid == post.postmakerId) {\n-                                          _showDeleteConfirmation(\n-                                              context, post);\n-                                        } else {\n-                                          ScaffoldMessenger.of(context)\n-                                              .showSnackBar(\n-                                            const SnackBar(\n-                                                backgroundColor: Colors.red,\n-                                                content: Text(\n-                                                    \"You can't delete this post\")),\n-                                          );\n-                                        }\n-                                      }\n-                                    },\n-                                    itemBuilder: (BuildContext context) {\n-                                      return {'Delete'}.map((String choice) {\n-                                        return PopupMenuItem<String>(\n-                                          value: choice,\n-                                          child: Text(choice),\n-                                        );\n-                                      }).toList();\n-                                    },\n-                                  ),\n-                                ),\n-                              ),\n+  //               return ListView.builder(\n+  //                 itemCount: postsList.length,\n+  //                 itemBuilder: (context, index) {\n+  //                   final post = postsList[index];\n+  //                   return Padding(\n+  //                     padding: const EdgeInsets.all(2.0),\n+  //                     child: Center(\n+  //                       child: SizedBox(\n+  //                         width:\n+  //                             isMobile ? MediaQuery.of(context).size.width : 600,\n+  //                         child: Card(\n+  //                           elevation: 5,\n+  //                           shape: RoundedRectangleBorder(\n+  //                             borderRadius: BorderRadius.circular(10),\n+  //                           ),\n+  //                           child: Column(\n+  //                             crossAxisAlignment: CrossAxisAlignment.start,\n+  //                             children: [\n+  //                               // Header  of the POST (profiel,name.location,delete)\n+  //                               GestureDetector(\n+  //                                 onTap: () {\n+  //                                   Navigator.push(\n+  //                                       context,\n+  //                                       MaterialPageRoute(\n+  //                                           builder: (_) => ProfilePage2(\n+  //                                               uid: post.postmakerId)));\n+  //                                 },\n+  //                                 child: ListTile(\n+  //                                   leading: CircleAvatar(\n+  //                                     radius: 30,\n+  //                                     backgroundImage:\n+  //                                         NetworkImage(post.profileImageUrl),\n+  //                                   ),\n+  //                                   title: Text(post.userName,\n+  //                                       style: const TextStyle(\n+  //                                           fontWeight: FontWeight.bold)),\n+  //                                   subtitle: Text(\n+  //                                       \"Location : ${post.location} , NITH\"),\n+  //                                   trailing: PopupMenuButton<String>(\n+  //                                     onSelected: (value) {\n+  //                                       if (value == 'Delete') {\n+  //                                         if (user!.uid == post.postmakerId) {\n+  //                                           _showDeleteConfirmation(\n+  //                                               context, post);\n+  //                                         } else {\n+  //                                           ScaffoldMessenger.of(context)\n+  //                                               .showSnackBar(\n+  //                                             const SnackBar(\n+  //                                                 backgroundColor: Colors.red,\n+  //                                                 content: Text(\n+  //                                                     \"You can't delete this post\")),\n+  //                                           );\n+  //                                         }\n+  //                                       }\n+  //                                     },\n+  //                                     itemBuilder: (BuildContext context) {\n+  //                                       return {'Delete'}.map((String choice) {\n+  //                                         return PopupMenuItem<String>(\n+  //                                           value: choice,\n+  //                                           child: Text(choice),\n+  //                                         );\n+  //                                       }).toList();\n+  //                                     },\n+  //                                   ),\n+  //                                 ),\n+  //                               ),\n \n-                              // LOST OR FOUND\n-                              Stack(\n-                                children: [\n-                                  CarouselSlider(\n-                                    options: CarouselOptions(\n-                                      autoPlay: true,\n-                                      height: 500.0,\n-                                      enlargeCenterPage: true,\n-                                    ),\n-                                    items:\n-                                        post.itemImages.map<Widget>((imageUrl) {\n-                                      return GestureDetector(\n-                                        onTap: () {\n-                                          showDialog(\n-                                            context: context,\n-                                            builder: (BuildContext context) {\n-                                              return Dialog(\n-                                                child: Stack(\n-                                                  children: [\n-                                                    Image.network(imageUrl),\n-                                                    Positioned(\n-                                                      right: 10,\n-                                                      top: 10,\n-                                                      child: IconButton(\n-                                                        icon: const Icon(\n-                                                            Icons.cancel,\n-                                                            color: Colors.red),\n-                                                        onPressed: () {\n-                                                          Navigator.of(context)\n-                                                              .pop();\n-                                                        },\n-                                                      ),\n-                                                    ),\n-                                                  ],\n-                                                ),\n-                                              );\n-                                            },\n-                                          );\n-                                        },\n-                                        child: ClipRRect(\n-                                          borderRadius:\n-                                              BorderRadius.circular(10),\n-                                          child: Image.network(\n-                                            imageUrl,\n-                                            fit: BoxFit.cover,\n-                                            width: MediaQuery.of(context)\n-                                                .size\n-                                                .width,\n-                                            errorBuilder:\n-                                                (context, error, stackTrace) {\n-                                              return const Icon(Icons.error);\n-                                            },\n-                                          ),\n-                                        ),\n-                                      );\n-                                    }).toList(),\n-                                  ),\n-                                  Positioned(\n-                                    top: isMobile ? 16 : 6,\n-                                    left: 50,\n-                                    child: Container(\n-                                      padding: const EdgeInsets.symmetric(\n-                                          horizontal: 10, vertical: 5),\n-                                      decoration: BoxDecoration(\n-                                        color: post.status == 'Lost'\n-                                            ? Colors.red\n-                                            : Colors.green,\n-                                        borderRadius: BorderRadius.circular(5),\n-                                      ),\n-                                      child: Text(\n-                                        post.status,\n-                                        style: const TextStyle(\n-                                          color: Colors.white,\n-                                          fontWeight: FontWeight.bold,\n-                                        ),\n-                                      ),\n-                                    ),\n-                                  ),\n-                                ],\n-                              ),\n+  //                               // LOST OR FOUND\n+  //                               Stack(\n+  //                                 children: [\n+  //                                   CarouselSlider(\n+  //                                     options: CarouselOptions(\n+  //                                       autoPlay: true,\n+  //                                       height: 500.0,\n+  //                                       enlargeCenterPage: true,\n+  //                                     ),\n+  //                                     items:\n+  //                                         post.itemImages.map<Widget>((imageUrl) {\n+  //                                       return GestureDetector(\n+  //                                         onTap: () {\n+  //                                           showDialog(\n+  //                                             context: context,\n+  //                                             builder: (BuildContext context) {\n+  //                                               return Dialog(\n+  //                                                 child: Stack(\n+  //                                                   children: [\n+  //                                                     Image.network(imageUrl),\n+  //                                                     Positioned(\n+  //                                                       right: 10,\n+  //                                                       top: 10,\n+  //                                                       child: IconButton(\n+  //                                                         icon: const Icon(\n+  //                                                             Icons.cancel,\n+  //                                                             color: Colors.red),\n+  //                                                         onPressed: () {\n+  //                                                           Navigator.of(context)\n+  //                                                               .pop();\n+  //                                                         },\n+  //                                                       ),\n+  //                                                     ),\n+  //                                                   ],\n+  //                                                 ),\n+  //                                               );\n+  //                                             },\n+  //                                           );\n+  //                                         },\n+  //                                         child: ClipRRect(\n+  //                                           borderRadius:\n+  //                                               BorderRadius.circular(10),\n+  //                                           child: Image.network(\n+  //                                             imageUrl,\n+  //                                             fit: BoxFit.cover,\n+  //                                             width: MediaQuery.of(context)\n+  //                                                 .size\n+  //                                                 .width,\n+  //                                             errorBuilder:\n+  //                                                 (context, error, stackTrace) {\n+  //                                               return const Icon(Icons.error);\n+  //                                             },\n+  //                                           ),\n+  //                                         ),\n+  //                                       );\n+  //                                     }).toList(),\n+  //                                   ),\n+  //                                   Positioned(\n+  //                                     top: isMobile ? 16 : 6,\n+  //                                     left: 50,\n+  //                                     child: Container(\n+  //                                       padding: const EdgeInsets.symmetric(\n+  //                                           horizontal: 10, vertical: 5),\n+  //                                       decoration: BoxDecoration(\n+  //                                         color: post.status == 'Lost'\n+  //                                             ? Colors.red\n+  //                                             : Colors.green,\n+  //                                         borderRadius: BorderRadius.circular(5),\n+  //                                       ),\n+  //                                       child: Text(\n+  //                                         post.status,\n+  //                                         style: const TextStyle(\n+  //                                           color: Colors.white,\n+  //                                           fontWeight: FontWeight.bold,\n+  //                                         ),\n+  //                                       ),\n+  //                                     ),\n+  //                                   ),\n+  //                                 ],\n+  //                               ),\n \n-                              Padding(\n-                                padding: const EdgeInsets.symmetric(\n-                                    horizontal: 18.0, vertical: 10),\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    // ITEM item,date\n-                                    Row(\n-                                      mainAxisAlignment:\n-                                          MainAxisAlignment.spaceBetween,\n-                                      children: [\n-                                        Text(\n-                                          post.title == 'Other'\n-                                              ? '${post.status} Item'\n-                                              : post.title,\n-                                          overflow: TextOverflow.clip,\n-                                          softWrap: true,\n-                                          style: const TextStyle(\n-                                              fontSize: 18,\n-                                              fontWeight: FontWeight.bold),\n-                                        ),\n-                                        const SizedBox(width: 5),\n-                                        Row(\n-                                          children: [\n-                                            Text(\"${post.status} On : \",\n-                                                overflow: TextOverflow.clip,\n-                                                softWrap: true,\n-                                                style: const TextStyle(\n-                                                    color: Colors.red,\n-                                                    fontWeight:\n-                                                        FontWeight.bold)),\n-                                            Text(post.postTime,\n-                                                style: const TextStyle(\n-                                                    fontWeight:\n-                                                        FontWeight.bold)),\n-                                          ],\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    const SizedBox(height: 5),\n+  //                               Padding(\n+  //                                 padding: const EdgeInsets.symmetric(\n+  //                                     horizontal: 18.0, vertical: 10),\n+  //                                 child: Column(\n+  //                                   crossAxisAlignment: CrossAxisAlignment.start,\n+  //                                   children: [\n+  //                                     // ITEM item,date\n+  //                                     Row(\n+  //                                       mainAxisAlignment:\n+  //                                           MainAxisAlignment.spaceBetween,\n+  //                                       children: [\n+  //                                         Text(\n+  //                                           post.title == 'Other'\n+  //                                               ? '${post.status} Item'\n+  //                                               : post.title,\n+  //                                           overflow: TextOverflow.clip,\n+  //                                           softWrap: true,\n+  //                                           style: const TextStyle(\n+  //                                               fontSize: 18,\n+  //                                               fontWeight: FontWeight.bold),\n+  //                                         ),\n+  //                                         const SizedBox(width: 5),\n+  //                                         Row(\n+  //                                           children: [\n+  //                                             Text(\"${post.status} On : \",\n+  //                                                 overflow: TextOverflow.clip,\n+  //                                                 softWrap: true,\n+  //                                                 style: const TextStyle(\n+  //                                                     color: Colors.red,\n+  //                                                     fontWeight:\n+  //                                                         FontWeight.bold)),\n+  //                                             Text(post.postTime,\n+  //                                                 style: const TextStyle(\n+  //                                                     fontWeight:\n+  //                                                         FontWeight.bold)),\n+  //                                           ],\n+  //                                         ),\n+  //                                       ],\n+  //                                     ),\n+  //                                     const SizedBox(height: 5),\n \n-                                    //DESCRIPTION\n-                                    Row(\n-                                      crossAxisAlignment: CrossAxisAlignment\n-                                          .start, // Align text to the top\n-                                      children: [\n-                                        const Text(\n-                                          \"Description : \",\n-                                          style: TextStyle(\n-                                            fontWeight: FontWeight.bold,\n-                                          ),\n-                                        ),\n-                                        const SizedBox(width: 4),\n-                                        Expanded(\n-                                          child: Text(\n-                                            post.description,\n-                                            overflow: TextOverflow.clip,\n-                                            softWrap: true,\n-                                            style: const TextStyle(\n-                                              fontSize: 14,\n-                                            ),\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n-                                    const SizedBox(height: 10),\n+  //                                     //DESCRIPTION\n+  //                                     Row(\n+  //                                       crossAxisAlignment: CrossAxisAlignment\n+  //                                           .start, // Align text to the top\n+  //                                       children: [\n+  //                                         const Text(\n+  //                                           \"Description : \",\n+  //                                           style: TextStyle(\n+  //                                             fontWeight: FontWeight.bold,\n+  //                                           ),\n+  //                                         ),\n+  //                                         const SizedBox(width: 4),\n+  //                                         Expanded(\n+  //                                           child: Text(\n+  //                                             post.description,\n+  //                                             overflow: TextOverflow.clip,\n+  //                                             softWrap: true,\n+  //                                             style: const TextStyle(\n+  //                                               fontSize: 14,\n+  //                                             ),\n+  //                                           ),\n+  //                                         ),\n+  //                                       ],\n+  //                                     ),\n+  //                                     const SizedBox(height: 10),\n \n-                                    //BUTTONNS\n-                                    StreamBuilder<QuerySnapshot>(\n-                                        stream: FirebaseFirestore.instance\n-                                            .collection('posts')\n-                                            .doc(post.postId)\n-                                            .collection('claims')\n-                                            .where('senderId',\n-                                                isEqualTo: user!.uid)\n-                                            .snapshots(),\n-                                        builder: (context, claimSnapshot) {\n-                                          if (claimSnapshot.connectionState ==\n-                                              ConnectionState.waiting) {\n-                                            return const Center(\n-                                                child:\n-                                                    CircularProgressIndicator());\n-                                          }\n+  //                                     //BUTTONNS\n+  //                                     StreamBuilder<QuerySnapshot>(\n+  //                                         stream: FirebaseFirestore.instance\n+  //                                             .collection('posts')\n+  //                                             .doc(post.postId)\n+  //                                             .collection('claims')\n+  //                                             .where('senderId',\n+  //                                                 isEqualTo: user!.uid)\n+  //                                             .snapshots(),\n+  //                                         builder: (context, claimSnapshot) {\n+  //                                           if (claimSnapshot.connectionState ==\n+  //                                               ConnectionState.waiting) {\n+  //                                             return const Center(\n+  //                                                 child:\n+  //                                                     CircularProgressIndicator());\n+  //                                           }\n \n-                                          bool userHasRequestedClaim = false;\n+  //                                           bool userHasRequestedClaim = false;\n \n-                                          if (claimSnapshot.hasData &&\n-                                              claimSnapshot\n-                                                  .data!.docs.isNotEmpty) {\n-                                            final claimData = claimSnapshot\n-                                                .data!.docs.first\n-                                                .data() as Map<String, dynamic>;\n+  //                                           if (claimSnapshot.hasData &&\n+  //                                               claimSnapshot\n+  //                                                   .data!.docs.isNotEmpty) {\n+  //                                             final claimData = claimSnapshot\n+  //                                                 .data!.docs.first\n+  //                                                 .data() as Map<String, dynamic>;\n \n-                                            if (claimData['claimStatusC'] ==\n-                                                'requested') {\n-                                              userHasRequestedClaim = true;\n-                                            }\n-                                            if (claimData['claimStatusC'] ==\n-                                                    'accepted' ||\n-                                                claimData['claimStatusC'] ==\n-                                                    'declined') {\n-                                              userHasRequestedClaim = false;\n-                                            }\n-                                          }\n+  //                                             if (claimData['claimStatusC'] ==\n+  //                                                 'requested') {\n+  //                                               userHasRequestedClaim = true;\n+  //                                             }\n+  //                                             if (claimData['claimStatusC'] ==\n+  //                                                     'accepted' ||\n+  //                                                 claimData['claimStatusC'] ==\n+  //                                                     'declined') {\n+  //                                               userHasRequestedClaim = false;\n+  //                                             }\n+  //                                           }\n \n-                                          return Row(\n-                                              mainAxisAlignment:\n-                                                  MainAxisAlignment.spaceAround,\n-                                              children: [\n-                                                GestureDetector(\n-                                                  onTap: () {\n-                                                    _sharePost(\n-                                                        context,\n-                                                        post.title,\n-                                                        post.description);\n-                                                  },\n-                                                  child: const Row(\n-                                                    children: [\n-                                                      Icon(Icons.share_rounded),\n-                                                      SizedBox(width: 3),\n-                                                      Text('Share'),\n-                                                    ],\n-                                                  ),\n-                                                ),\n+  //                                           return Row(\n+  //                                               mainAxisAlignment:\n+  //                                                   MainAxisAlignment.spaceAround,\n+  //                                               children: [\n+  //                                                 GestureDetector(\n+  //                                                   onTap: () {\n+  //                                                     _sharePost(\n+  //                                                         context,\n+  //                                                         post.title,\n+  //                                                         post.description);\n+  //                                                   },\n+  //                                                   child: const Row(\n+  //                                                     children: [\n+  //                                                       Icon(Icons.share_rounded),\n+  //                                                       SizedBox(width: 3),\n+  //                                                       Text('Share'),\n+  //                                                     ],\n+  //                                                   ),\n+  //                                                 ),\n \n-                                                if (post.postmakerId !=\n-                                                    user!.uid)\n-                                                  ElevatedButton(\n-                                                    onPressed: () {\n-                                                      _replyToPostmaker(\n-                                                          context,\n-                                                          post.postmakerId,\n-                                                          post.userName,\n-                                                          post.postId);\n-                                                    },\n-                                                    style: ElevatedButton\n-                                                        .styleFrom(\n-                                                      backgroundColor:\n-                                                          Colors.green.shade600,\n-                                                      shape:\n-                                                          RoundedRectangleBorder(\n-                                                        borderRadius:\n-                                                            BorderRadius\n-                                                                .circular(10),\n-                                                      ),\n-                                                    ),\n-                                                    child: const Row(\n-                                                      mainAxisAlignment:\n-                                                          MainAxisAlignment\n-                                                              .center,\n-                                                      children: [\n-                                                        Icon(Icons.reply,\n-                                                            color:\n-                                                                Colors.white),\n-                                                        SizedBox(width: 3),\n-                                                        Text(\n-                                                          'Reply',\n-                                                          style: TextStyle(\n-                                                              fontSize: 16,\n-                                                              color:\n-                                                                  Colors.white),\n-                                                        ),\n-                                                      ],\n-                                                    ),\n-                                                  ),\n+  //                                                 if (post.postmakerId !=\n+  //                                                     user!.uid)\n+  //                                                   ElevatedButton(\n+  //                                                     onPressed: () {\n+  //                                                       _replyToPostmaker(\n+  //                                                           context,\n+  //                                                           post.postmakerId,\n+  //                                                           post.userName,\n+  //                                                           post.postId);\n+  //                                                     },\n+  //                                                     style: ElevatedButton\n+  //                                                         .styleFrom(\n+  //                                                       backgroundColor:\n+  //                                                           Colors.green.shade600,\n+  //                                                       shape:\n+  //                                                           RoundedRectangleBorder(\n+  //                                                         borderRadius:\n+  //                                                             BorderRadius\n+  //                                                                 .circular(10),\n+  //                                                       ),\n+  //                                                     ),\n+  //                                                     child: const Row(\n+  //                                                       mainAxisAlignment:\n+  //                                                           MainAxisAlignment\n+  //                                                               .center,\n+  //                                                       children: [\n+  //                                                         Icon(Icons.reply,\n+  //                                                             color:\n+  //                                                                 Colors.white),\n+  //                                                         SizedBox(width: 3),\n+  //                                                         Text(\n+  //                                                           'Reply',\n+  //                                                           style: TextStyle(\n+  //                                                               fontSize: 16,\n+  //                                                               color:\n+  //                                                                   Colors.white),\n+  //                                                         ),\n+  //                                                       ],\n+  //                                                     ),\n+  //                                                   ),\n \n-                                                //Claimed Button\n-                                                if (post.status != 'Lost' &&\n-                                                    post.isClaimed == true)\n-                                                  ElevatedButton(\n-                                                    onPressed: () {\n-                                                      _claimedPost(\n-                                                          context,\n-                                                          post.postclaimerId!,\n-                                                          post.title,\n-                                                          post.postClaimer!,\n-                                                          post.postId);\n-                                                    },\n-                                                    style: ElevatedButton\n-                                                        .styleFrom(\n-                                                      backgroundColor: Colors\n-                                                          .deepOrange.shade600,\n-                                                      shape:\n-                                                          RoundedRectangleBorder(\n-                                                        borderRadius:\n-                                                            BorderRadius\n-                                                                .circular(10),\n-                                                      ),\n-                                                    ),\n-                                                    child: const Row(\n-                                                      mainAxisAlignment:\n-                                                          MainAxisAlignment\n-                                                              .center,\n-                                                      children: [\n-                                                        Icon(Icons.back_hand,\n-                                                            color:\n-                                                                Colors.white),\n-                                                        SizedBox(width: 3),\n-                                                        Text(\n-                                                          'Claimed',\n-                                                          style: TextStyle(\n-                                                              fontSize: 16,\n-                                                              color:\n-                                                                  Colors.white),\n-                                                        ),\n-                                                      ],\n-                                                    ),\n-                                                  ),\n+  //                                                 //Claimed Button\n+  //                                                 if (post.status != 'Lost' &&\n+  //                                                     post.isClaimed == true)\n+  //                                                   ElevatedButton(\n+  //                                                     onPressed: () {\n+  //                                                       _claimedPost(\n+  //                                                           context,\n+  //                                                           post.postclaimerId!,\n+  //                                                           post.title,\n+  //                                                           post.postClaimer!,\n+  //                                                           post.postId);\n+  //                                                     },\n+  //                                                     style: ElevatedButton\n+  //                                                         .styleFrom(\n+  //                                                       backgroundColor: Colors\n+  //                                                           .deepOrange.shade600,\n+  //                                                       shape:\n+  //                                                           RoundedRectangleBorder(\n+  //                                                         borderRadius:\n+  //                                                             BorderRadius\n+  //                                                                 .circular(10),\n+  //                                                       ),\n+  //                                                     ),\n+  //                                                     child: const Row(\n+  //                                                       mainAxisAlignment:\n+  //                                                           MainAxisAlignment\n+  //                                                               .center,\n+  //                                                       children: [\n+  //                                                         Icon(Icons.back_hand,\n+  //                                                             color:\n+  //                                                                 Colors.white),\n+  //                                                         SizedBox(width: 3),\n+  //                                                         Text(\n+  //                                                           'Claimed',\n+  //                                                           style: TextStyle(\n+  //                                                               fontSize: 16,\n+  //                                                               color:\n+  //                                                                   Colors.white),\n+  //                                                         ),\n+  //                                                       ],\n+  //                                                     ),\n+  //                                                   ),\n \n-                                                // Claim Buttton\n-                                                if (post.postmakerId !=\n-                                                        user!.uid &&\n-                                                    post.status == 'Found' &&\n-                                                    post.isClaimed == false &&\n-                                                    !userHasRequestedClaim)\n-                                                  ElevatedButton(\n-                                                    onPressed: () {\n-                                                      _claimPost(\n-                                                          context,\n-                                                          post.postmakerId,\n-                                                          post.title,\n-                                                          post.question!,\n-                                                          post.description,\n-                                                          post.postId);\n-                                                    },\n-                                                    style: ElevatedButton\n-                                                        .styleFrom(\n-                                                      backgroundColor: Colors\n-                                                          .deepOrange.shade600,\n-                                                      shape:\n-                                                          RoundedRectangleBorder(\n-                                                        borderRadius:\n-                                                            BorderRadius\n-                                                                .circular(10),\n-                                                      ),\n-                                                    ),\n-                                                    child: const Row(\n-                                                      mainAxisAlignment:\n-                                                          MainAxisAlignment\n-                                                              .center,\n-                                                      children: [\n-                                                        Icon(Icons.back_hand,\n-                                                            color:\n-                                                                Colors.white),\n-                                                        SizedBox(width: 6),\n-                                                        Text(\n-                                                          'Claim',\n-                                                          style: TextStyle(\n-                                                              fontSize: 16,\n-                                                              color:\n-                                                                  Colors.white),\n-                                                        ),\n-                                                      ],\n-                                                    ),\n-                                                  ),\n+  //                                                 // Claim Buttton\n+  //                                                 if (post.postmakerId !=\n+  //                                                         user!.uid &&\n+  //                                                     post.status == 'Found' &&\n+  //                                                     post.isClaimed == false &&\n+  //                                                     !userHasRequestedClaim)\n+  //                                                   ElevatedButton(\n+  //                                                     onPressed: () {\n+  //                                                       _claimPost(\n+  //                                                           context,\n+  //                                                           post.postmakerId,\n+  //                                                           post.title,\n+  //                                                           post.question!,\n+  //                                                           post.description,\n+  //                                                           post.postId);\n+  //                                                     },\n+  //                                                     style: ElevatedButton\n+  //                                                         .styleFrom(\n+  //                                                       backgroundColor: Colors\n+  //                                                           .deepOrange.shade600,\n+  //                                                       shape:\n+  //                                                           RoundedRectangleBorder(\n+  //                                                         borderRadius:\n+  //                                                             BorderRadius\n+  //                                                                 .circular(10),\n+  //                                                       ),\n+  //                                                     ),\n+  //                                                     child: const Row(\n+  //                                                       mainAxisAlignment:\n+  //                                                           MainAxisAlignment\n+  //                                                               .center,\n+  //                                                       children: [\n+  //                                                         Icon(Icons.back_hand,\n+  //                                                             color:\n+  //                                                                 Colors.white),\n+  //                                                         SizedBox(width: 6),\n+  //                                                         Text(\n+  //                                                           'Claim',\n+  //                                                           style: TextStyle(\n+  //                                                               fontSize: 16,\n+  //                                                               color:\n+  //                                                                   Colors.white),\n+  //                                                         ),\n+  //                                                       ],\n+  //                                                     ),\n+  //                                                   ),\n \n-                                                // Request Button\n-                                                if (post.postmakerId !=\n-                                                        user!.uid &&\n-                                                    post.status == 'Found' &&\n-                                                    post.isClaimed == false &&\n-                                                    userHasRequestedClaim)\n-                                                  ElevatedButton(\n-                                                    onPressed: () {},\n-                                                    style: ElevatedButton\n-                                                        .styleFrom(\n-                                                      backgroundColor: Colors\n-                                                          .deepOrange.shade600,\n-                                                      shape:\n-                                                          RoundedRectangleBorder(\n-                                                        borderRadius:\n-                                                            BorderRadius\n-                                                                .circular(10),\n-                                                      ),\n-                                                    ),\n-                                                    child: const Row(\n-                                                      mainAxisAlignment:\n-                                                          MainAxisAlignment\n-                                                              .center,\n-                                                      children: [\n-                                                        Icon(Icons.back_hand,\n-                                                            color:\n-                                                                Colors.white),\n-                                                        SizedBox(width: 3),\n-                                                        Text(\n-                                                          'Requested',\n-                                                          style: TextStyle(\n-                                                              fontSize: 16,\n-                                                              color:\n-                                                                  Colors.white),\n-                                                        ),\n-                                                      ],\n-                                                    ),\n-                                                  )\n-                                              ]);\n-                                        })\n-                                  ],\n-                                ),\n-                              ),\n-                            ],\n-                          ),\n-                        ),\n-                      ),\n-                    ),\n-                  );\n-                },\n-              );\n-            },\n-          );\n-        },\n-      ),\n-    );\n-  }\n+  //                                                 // Request Button\n+  //                                                 if (post.postmakerId !=\n+  //                                                         user!.uid &&\n+  //                                                     post.status == 'Found' &&\n+  //                                                     post.isClaimed == false &&\n+  //                                                     userHasRequestedClaim)\n+  //                                                   ElevatedButton(\n+  //                                                     onPressed: () {},\n+  //                                                     style: ElevatedButton\n+  //                                                         .styleFrom(\n+  //                                                       backgroundColor: Colors\n+  //                                                           .deepOrange.shade600,\n+  //                                                       shape:\n+  //                                                           RoundedRectangleBorder(\n+  //                                                         borderRadius:\n+  //                                                             BorderRadius\n+  //                                                                 .circular(10),\n+  //                                                       ),\n+  //                                                     ),\n+  //                                                     child: const Row(\n+  //                                                       mainAxisAlignment:\n+  //                                                           MainAxisAlignment\n+  //                                                               .center,\n+  //                                                       children: [\n+  //                                                         Icon(Icons.back_hand,\n+  //                                                             color:\n+  //                                                                 Colors.white),\n+  //                                                         SizedBox(width: 3),\n+  //                                                         Text(\n+  //                                                           'Requested',\n+  //                                                           style: TextStyle(\n+  //                                                               fontSize: 16,\n+  //                                                               color:\n+  //                                                                   Colors.white),\n+  //                                                         ),\n+  //                                                       ],\n+  //                                                     ),\n+  //                                                   )\n+  //                                               ]);\n+  //                                         })\n+  //                                   ],\n+  //                                 ),\n+  //                               ),\n+  //                             ],\n+  //                           ),\n+  //                         ),\n+  //                       ),\n+  //                     ),\n+  //                   );\n+  //                 },\n+  //               );\n+  //             },\n+  //           );\n+  //         },\n+  //       ),\n+  //     );\n+  //   }\n \n-  void _replyToPostmaker(BuildContext context, String postmakerId,\n-      String postmaker, String postId) {\n-    TextEditingController messageController = TextEditingController();\n+  //   void _replyToPostmaker(BuildContext context, String postmakerId,\n+  //       String postmaker, String postId) {\n+  //     TextEditingController messageController = TextEditingController();\n \n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Send a Reply'),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              Row(\n-                children: [\n-                  const Text('Reply to'),\n-                  TextButton(\n-                      onPressed: () {\n-                        Navigator.push(\n-                            context,\n-                            MaterialPageRoute(\n-                                builder: (_) =>\n-                                    ProfilePage2(uid: postmakerId)));\n-                      },\n-                      child: Text(postmaker))\n-                ],\n-              ),\n-              const SizedBox(height: 10),\n-              TextField(\n-                controller: messageController,\n-                decoration: const InputDecoration(\n-                  labelText: 'Your message',\n-                  alignLabelWithHint: true,\n-                  border: OutlineInputBorder(),\n-                ),\n-                maxLines: 3,\n-              ),\n-            ],\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () {\n-                Navigator.of(context).pop(); // Close the dialog without sending\n-              },\n-              child: const Text('Cancel'),\n-            ),\n-            TextButton(\n-              onPressed: () {\n-                String message = messageController.text.trim();\n-                if (message.isNotEmpty) {\n-                  _sendMessageToPostmaker(\n-                      context, postmakerId, message, postId);\n-                }\n-                ScaffoldMessenger.of(context).showSnackBar(\n-                  const SnackBar(\n-                    content: Text('Message sent successfully'),\n-                    behavior: SnackBarBehavior.floating,\n-                    margin: EdgeInsets.all(16.0),\n-                  ),\n-                );\n-                Navigator.of(context).pop(); // Close the dialog after sending\n-              },\n-              child: const Text('Send'),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+  //     showDialog(\n+  //       context: context,\n+  //       builder: (BuildContext context) {\n+  //         return AlertDialog(\n+  //           title: const Text('Send a Reply'),\n+  //           content: Column(\n+  //             mainAxisSize: MainAxisSize.min,\n+  //             children: [\n+  //               Row(\n+  //                 children: [\n+  //                   const Text('Reply to'),\n+  //                   TextButton(\n+  //                       onPressed: () {\n+  //                         Navigator.push(\n+  //                             context,\n+  //                             MaterialPageRoute(\n+  //                                 builder: (_) =>\n+  //                                     ProfilePage2(uid: postmakerId)));\n+  //                       },\n+  //                       child: Text(postmaker))\n+  //                 ],\n+  //               ),\n+  //               const SizedBox(height: 10),\n+  //               TextField(\n+  //                 controller: messageController,\n+  //                 decoration: const InputDecoration(\n+  //                   labelText: 'Your message',\n+  //                   alignLabelWithHint: true,\n+  //                   border: OutlineInputBorder(),\n+  //                 ),\n+  //                 maxLines: 3,\n+  //               ),\n+  //             ],\n+  //           ),\n+  //           actions: [\n+  //             TextButton(\n+  //               onPressed: () {\n+  //                 Navigator.of(context).pop(); // Close the dialog without sending\n+  //               },\n+  //               child: const Text('Cancel'),\n+  //             ),\n+  //             TextButton(\n+  //               onPressed: () {\n+  //                 String message = messageController.text.trim();\n+  //                 if (message.isNotEmpty) {\n+  //                   _sendMessageToPostmaker(\n+  //                       context, postmakerId, message, postId);\n+  //                 }\n+  //                 ScaffoldMessenger.of(context).showSnackBar(\n+  //                   const SnackBar(\n+  //                     content: Text('Message sent successfully'),\n+  //                     behavior: SnackBarBehavior.floating,\n+  //                     margin: EdgeInsets.all(16.0),\n+  //                   ),\n+  //                 );\n+  //                 Navigator.of(context).pop(); // Close the dialog after sending\n+  //               },\n+  //               child: const Text('Send'),\n+  //             ),\n+  //           ],\n+  //         );\n+  //       },\n+  //     );\n+  //   }\n \n-  Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n-      String message, String postId) async {\n-    try {\n-      // Add a chat message to Firestore\n-      await FirebaseFirestore.instance.collection('chats').add({\n-        'senderId': user!.uid,\n-        'receiverId': postmakerId,\n-        'participants': [user!.uid, postmakerId],\n-        'message': message,\n-        'postId': postId,\n-        'timestamp': Timestamp.now(),\n-      });\n+  //   Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n+  //       String message, String postId) async {\n+  //     try {\n+  //       // Add a chat message to Firestore\n+  //       await FirebaseFirestore.instance.collection('chats').add({\n+  //         'senderId': user!.uid,\n+  //         'receiverId': postmakerId,\n+  //         'participants': [user!.uid, postmakerId],\n+  //         'message': message,\n+  //         'postId': postId,\n+  //         'timestamp': Timestamp.now(),\n+  //       });\n \n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          content: Text('Message sent successfully'),\n-          behavior: SnackBarBehavior.floating,\n-          margin: EdgeInsets.all(16.0),\n-        ),\n-      );\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-          content: Text('Failed to send message: $e'),\n-          backgroundColor: Colors.red,\n-        ),\n-      );\n-    }\n-  }\n+  //       ScaffoldMessenger.of(context).showSnackBar(\n+  //         const SnackBar(\n+  //           content: Text('Message sent successfully'),\n+  //           behavior: SnackBarBehavior.floating,\n+  //           margin: EdgeInsets.all(16.0),\n+  //         ),\n+  //       );\n+  //     } catch (e) {\n+  //       ScaffoldMessenger.of(context).showSnackBar(\n+  //         SnackBar(\n+  //           content: Text('Failed to send message: $e'),\n+  //           backgroundColor: Colors.red,\n+  //         ),\n+  //       );\n+  //     }\n+  //   }\n \n-  void _claimPost(BuildContext context, String postmakerId, String postTitle,\n-      String postQuestion, String postdescription, String postId) {\n-    TextEditingController answerController = TextEditingController();\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Claim Item'),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              const Text('Question from the post owner:'),\n-              const SizedBox(height: 10),\n-              Text(postQuestion,\n-                  style: const TextStyle(fontWeight: FontWeight.bold)),\n-              const SizedBox(height: 20),\n-              TextField(\n-                controller: answerController,\n-                decoration: const InputDecoration(\n-                  labelText: 'Your answer',\n-                  alignLabelWithHint: true,\n-                  border: OutlineInputBorder(),\n-                ),\n-                maxLines: 3,\n-              ),\n-            ],\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () {\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Cancel'),\n-            ),\n-            TextButton(\n-              onPressed: () {\n-                String answer = answerController.text.trim();\n-                if (answer.isNotEmpty) {\n-                  _sendAnswerToPostmaker(\n-                      context, answer, postId, postmakerId, 'requested');\n-                }\n-                ScaffoldMessenger.of(context).showSnackBar(\n-                  const SnackBar(\n-                    content: Text('Request sent successfully'),\n-                    behavior: SnackBarBehavior.floating,\n-                    margin: EdgeInsets.all(16.0),\n-                  ),\n-                );\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Send'),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+  //   void _claimPost(BuildContext context, String postmakerId, String postTitle,\n+  //       String postQuestion, String postdescription, String postId) {\n+  //     TextEditingController answerController = TextEditingController();\n+  //     showDialog(\n+  //       context: context,\n+  //       builder: (BuildContext context) {\n+  //         return AlertDialog(\n+  //           title: const Text('Claim Item'),\n+  //           content: Column(\n+  //             mainAxisSize: MainAxisSize.min,\n+  //             children: [\n+  //               const Text('Question from the post owner:'),\n+  //               const SizedBox(height: 10),\n+  //               Text(postQuestion,\n+  //                   style: const TextStyle(fontWeight: FontWeight.bold)),\n+  //               const SizedBox(height: 20),\n+  //               TextField(\n+  //                 controller: answerController,\n+  //                 decoration: const InputDecoration(\n+  //                   labelText: 'Your answer',\n+  //                   alignLabelWithHint: true,\n+  //                   border: OutlineInputBorder(),\n+  //                 ),\n+  //                 maxLines: 3,\n+  //               ),\n+  //             ],\n+  //           ),\n+  //           actions: [\n+  //             TextButton(\n+  //               onPressed: () {\n+  //                 Navigator.of(context).pop();\n+  //               },\n+  //               child: const Text('Cancel'),\n+  //             ),\n+  //             TextButton(\n+  //               onPressed: () {\n+  //                 String answer = answerController.text.trim();\n+  //                 if (answer.isNotEmpty) {\n+  //                   _sendAnswerToPostmaker(\n+  //                       context, answer, postId, postmakerId, 'requested');\n+  //                 }\n+  //                 ScaffoldMessenger.of(context).showSnackBar(\n+  //                   const SnackBar(\n+  //                     content: Text('Request sent successfully'),\n+  //                     behavior: SnackBarBehavior.floating,\n+  //                     margin: EdgeInsets.all(16.0),\n+  //                   ),\n+  //                 );\n+  //                 Navigator.of(context).pop();\n+  //               },\n+  //               child: const Text('Send'),\n+  //             ),\n+  //           ],\n+  //         );\n+  //       },\n+  //     );\n+  //   }\n \n-  void _claimedPost(BuildContext context, String postclaimerId,\n-      String postTitle, String claimername, String postId) {\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: Text('Claimed Item : $postTitle',\n-              style:\n-                  const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              Row(\n-                children: [\n-                  const Text('Already claimed by :',\n-                      style: TextStyle(fontWeight: FontWeight.bold)),\n-                  TextButton(\n-                      onPressed: () {\n-                        Navigator.push(\n-                            context,\n-                            MaterialPageRoute(\n-                                builder: (_) =>\n-                                    ProfilePage2(uid: postclaimerId)));\n-                      },\n-                      child: Text(\n-                          user!.uid == postclaimerId ? 'You' : claimername,\n-                          style: const TextStyle(fontWeight: FontWeight.bold))),\n-                ],\n-              ),\n-              const SizedBox(height: 10),\n-            ],\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () {\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Cancel'),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+  //   void _claimedPost(BuildContext context, String postclaimerId,\n+  //       String postTitle, String claimername, String postId) {\n+  //     showDialog(\n+  //       context: context,\n+  //       builder: (BuildContext context) {\n+  //         return AlertDialog(\n+  //           title: Text('Claimed Item : $postTitle',\n+  //               style:\n+  //                   const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n+  //           content: Column(\n+  //             mainAxisSize: MainAxisSize.min,\n+  //             children: [\n+  //               Row(\n+  //                 children: [\n+  //                   const Text('Already claimed by :',\n+  //                       style: TextStyle(fontWeight: FontWeight.bold)),\n+  //                   TextButton(\n+  //                       onPressed: () {\n+  //                         Navigator.push(\n+  //                             context,\n+  //                             MaterialPageRoute(\n+  //                                 builder: (_) =>\n+  //                                     ProfilePage2(uid: postclaimerId)));\n+  //                       },\n+  //                       child: Text(\n+  //                           user!.uid == postclaimerId ? 'You' : claimername,\n+  //                           style: const TextStyle(fontWeight: FontWeight.bold))),\n+  //                 ],\n+  //               ),\n+  //               const SizedBox(height: 10),\n+  //             ],\n+  //           ),\n+  //           actions: [\n+  //             TextButton(\n+  //               onPressed: () {\n+  //                 Navigator.of(context).pop();\n+  //               },\n+  //               child: const Text('Cancel'),\n+  //             ),\n+  //           ],\n+  //         );\n+  //       },\n+  //     );\n+  //   }\n \n-  Future<void> _sendAnswerToPostmaker(\n-    BuildContext context,\n-    String answer,\n-    String postId,\n-    String postmakerId,\n-    String statusofRequest,\n-  ) async {\n-    try {\n-      // Reference to the specific post's claims subcollection\n-      CollectionReference claimsRef = FirebaseFirestore.instance\n-          .collection('posts')\n-          .doc(postId) // Get the post document using its ID\n-          .collection('claims'); // Access the subcollection\n+  //   Future<void> _sendAnswerToPostmaker(\n+  //     BuildContext context,\n+  //     String answer,\n+  //     String postId,\n+  //     String postmakerId,\n+  //     String statusofRequest,\n+  //   ) async {\n+  //     try {\n+  //       // Reference to the specific post's claims subcollection\n+  //       CollectionReference claimsRef = FirebaseFirestore.instance\n+  //           .collection('posts')\n+  //           .doc(postId) // Get the post document using its ID\n+  //           .collection('claims'); // Access the subcollection\n \n-      // Add a new claim document\n-      await claimsRef.add({\n-        'senderId': user!.uid,\n-        'answer': answer,\n-        'claimStatusC': statusofRequest,\n-        'timestamp': Timestamp.now(),\n-        'isClaimed': false,\n-        'receiverId': postmakerId,\n-      });\n+  //       // Add a new claim document\n+  //       await claimsRef.add({\n+  //         'senderId': user!.uid,\n+  //         'answer': answer,\n+  //         'claimStatusC': statusofRequest,\n+  //         'timestamp': Timestamp.now(),\n+  //         'isClaimed': false,\n+  //         'receiverId': postmakerId,\n+  //       });\n \n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          content: Text('Your answer has been sent to the post maker'),\n-          behavior: SnackBarBehavior.floating,\n-          margin: EdgeInsets.all(16.0),\n-        ),\n-      );\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-          content: Text('Failed to send answer: $e'),\n-          backgroundColor: Colors.red,\n-        ),\n-      );\n-    }\n-  }\n+  //       ScaffoldMessenger.of(context).showSnackBar(\n+  //         const SnackBar(\n+  //           content: Text('Your answer has been sent to the post maker'),\n+  //           behavior: SnackBarBehavior.floating,\n+  //           margin: EdgeInsets.all(16.0),\n+  //         ),\n+  //       );\n+  //     } catch (e) {\n+  //       ScaffoldMessenger.of(context).showSnackBar(\n+  //         SnackBar(\n+  //           content: Text('Failed to send answer: $e'),\n+  //           backgroundColor: Colors.red,\n+  //         ),\n+  //       );\n+  //     }\n+  //   }\n \n-  void _sharePost(BuildContext context, String title, String description) {\n-    final content = 'Check out this post: $title\\nDescription: $description';\n-    final snackBar = SnackBar(content: Text('Shared! $content'));\n-    ScaffoldMessenger.of(context).showSnackBar(snackBar);\n-  }\n+  //   void _sharePost(BuildContext context, String title, String description) {\n+  //     final content = 'Check out this post: $title\\nDescription: $description';\n+  //     final snackBar = SnackBar(content: Text('Shared! $content'));\n+  //     ScaffoldMessenger.of(context).showSnackBar(snackBar);\n+  //   }\n \n-  void _showDeleteConfirmation(BuildContext context, PostModel post) {\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Delete Post'),\n-          content: const Text('Are you sure you want to delete this post?'),\n-          actions: <Widget>[\n-            TextButton(\n-              child: const Text('Cancel'),\n-              onPressed: () {\n-                Navigator.of(context).pop();\n-              },\n-            ),\n-            TextButton(\n-              child: const Text('Delete'),\n-              onPressed: () {\n-                FirebaseFirestore.instance\n-                    .collection('posts')\n-                    .doc(post.postId)\n-                    .delete();\n-                Navigator.of(context).pop();\n-              },\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+  //   void _showDeleteConfirmation(BuildContext context, PostModel post) {\n+  //     showDialog(\n+  //       context: context,\n+  //       builder: (BuildContext context) {\n+  //         return AlertDialog(\n+  //           title: const Text('Delete Post'),\n+  //           content: const Text('Are you sure you want to delete this post?'),\n+  //           actions: <Widget>[\n+  //             TextButton(\n+  //               child: const Text('Cancel'),\n+  //               onPressed: () {\n+  //                 Navigator.of(context).pop();\n+  //               },\n+  //             ),\n+  //             TextButton(\n+  //               child: const Text('Delete'),\n+  //               onPressed: () {\n+  //                 FirebaseFirestore.instance\n+  //                     .collection('posts')\n+  //                     .doc(post.postId)\n+  //                     .delete();\n+  //                 Navigator.of(context).pop();\n+  //               },\n+  //             ),\n+  //           ],\n+  //         );\n+  //       },\n+  //     );\n+  //   }\n \n-  void _showFullImageDialog(BuildContext context, String imageUrl) {\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return Dialog(\n-          child: Container(\n-            padding: const EdgeInsets.all(10),\n-            child: Image.network(\n-              imageUrl,\n-              fit: BoxFit.cover,\n-              width: double.infinity,\n-              height: double.infinity,\n-            ),\n-          ),\n-        );\n-      },\n-    );\n-  }\n-}\n+  //   void _showFullImageDialog(BuildContext context, String imageUrl) {\n+  //     showDialog(\n+  //       context: context,\n+  //       builder: (BuildContext context) {\n+  //         return Dialog(\n+  //           child: Container(\n+  //             padding: const EdgeInsets.all(10),\n+  //             child: Image.network(\n+  //               imageUrl,\n+  //               fit: BoxFit.cover,\n+  //               width: double.infinity,\n+  //               height: double.infinity,\n+  //             ),\n+  //           ),\n+  //         );\n+  //       },\n+  //     );\n+  //   }\n+  // }\n"
                },
                {
                    "date": 1756122833455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,901 +1,901 @@\n-  // import 'package:carousel_slider/carousel_slider.dart';\n-  // import 'package:cloud_firestore/cloud_firestore.dart';\n-  // import 'package:firebase_auth/firebase_auth.dart';\n-  // import 'package:flutter/material.dart';\n-  // import 'package:intl/intl.dart';\n-  // import 'package:l_f/Frontend/Home/Post/post_model.dart';\n-  // import 'package:l_f/Frontend/Profile/user_see_page.dart';\n+  import 'package:carousel_slider/carousel_slider.dart';\n+  import 'package:cloud_firestore/cloud_firestore.dart';\n+  import 'package:firebase_auth/firebase_auth.dart';\n+  import 'package:flutter/material.dart';\n+  import 'package:intl/intl.dart';\n+  import 'package:l_f/Frontend/Home/Post/post_model.dart';\n+  import 'package:l_f/Frontend/Profile/user_see_page.dart';\n \n-  // class PostDetailsPage extends StatefulWidget {\n-  //   final String postId;\n-  //   const PostDetailsPage({super.key, required this.postId});\n+  class PostDetailsPage extends StatefulWidget {\n+    final String postId;\n+    const PostDetailsPage({super.key, required this.postId});\n \n-  //   @override\n-  //   State<PostDetailsPage> createState() => _PostDetailsPageState();\n-  // }\n+    @override\n+    State<PostDetailsPage> createState() => _PostDetailsPageState();\n+  }\n \n-  // class _PostDetailsPageState extends State<PostDetailsPage> {\n-  //   final Map<String, Map<String, String>> _userCache = {};\n-  //   User? user = FirebaseAuth.instance.currentUser;\n+  class _PostDetailsPageState extends State<PostDetailsPage> {\n+    final Map<String, Map<String, String>> _userCache = {};\n+    User? user = FirebaseAuth.instance.currentUser;\n \n-  //   String _formatDate(Timestamp? timestamp) {\n-  //     if (timestamp == null) return 'Not available';\n-  //     DateTime date = timestamp.toDate();\n-  //     return DateFormat('dd MMMM yyyy').format(date);\n-  //   }\n+    String _formatDate(Timestamp? timestamp) {\n+      if (timestamp == null) return 'Not available';\n+      DateTime date = timestamp.toDate();\n+      return DateFormat('dd MMMM yyyy').format(date);\n+    }\n \n-  //   Future<Map<String, String>> fetchUserNameAndProfilePic(String uid) async {\n-  //     if (_userCache.containsKey(uid)) {\n-  //       return _userCache[uid]!;\n-  //     }\n+    Future<Map<String, String>> fetchUserNameAndProfilePic(String uid) async {\n+      if (_userCache.containsKey(uid)) {\n+        return _userCache[uid]!;\n+      }\n \n-  //     try {\n-  //       DocumentSnapshot userDoc =\n-  //           await FirebaseFirestore.instance.collection('users').doc(uid).get();\n+      try {\n+        DocumentSnapshot userDoc =\n+            await FirebaseFirestore.instance.collection('users').doc(uid).get();\n \n-  //       if (!userDoc.exists) {\n-  //         throw Exception(\"User not found.\");\n-  //       }\n+        if (!userDoc.exists) {\n+          throw Exception(\"User not found.\");\n+        }\n \n-  //       Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n+        Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n \n-  //       String name = userData['name'] ?? 'NITH User';\n-  //       String profileImage = userData['profileImage'] ?? '';\n+        String name = userData['name'] ?? 'NITH User';\n+        String profileImage = userData['profileImage'] ?? '';\n \n-  //       _userCache[uid] = {\n-  //         'name': name,\n-  //         'profileImage': profileImage,\n-  //       };\n+        _userCache[uid] = {\n+          'name': name,\n+          'profileImage': profileImage,\n+        };\n \n-  //       return _userCache[uid]!;\n-  //     } catch (e) {\n-  //       print(\"Error fetching user profile: $e\");\n-  //       throw Exception(\"Error fetching user profile.\");\n-  //     }\n-  //   }\n+        return _userCache[uid]!;\n+      } catch (e) {\n+        print(\"Error fetching user profile: $e\");\n+        throw Exception(\"Error fetching user profile.\");\n+      }\n+    }\n \n-  //   @override\n-  //   Widget build(BuildContext context) {\n-  //     bool isMobile = MediaQuery.of(context).size.width < 830;\n-  //     return Scaffold(\n-  //       appBar: AppBar(\n-  //         backgroundColor: Colors.deepOrange,\n-  //         foregroundColor: Colors.white,\n-  //         title: const Text('Post Detail'),\n-  //       ),\n-  //       body: StreamBuilder<QuerySnapshot>(\n-  //         stream: FirebaseFirestore.instance\n-  //             .collection('posts')\n-  //             .where('postId', isEqualTo: widget.postId)\n-  //             .snapshots(),\n-  //         builder: (context, snapshot) {\n-  //           if (snapshot.connectionState == ConnectionState.waiting) {\n-  //             return const Center(child: CircularProgressIndicator());\n-  //           }\n-  //           if (snapshot.hasError) {\n-  //             return const Center(child: Text('Error loading posts'));\n-  //           }\n+    @override\n+    Widget build(BuildContext context) {\n+      bool isMobile = MediaQuery.of(context).size.width < 830;\n+      return Scaffold(\n+        appBar: AppBar(\n+          backgroundColor: Colors.deepOrange,\n+          foregroundColor: Colors.white,\n+          title: const Text('Post Detail'),\n+        ),\n+        body: StreamBuilder<QuerySnapshot>(\n+          stream: FirebaseFirestore.instance\n+              .collection('posts')\n+              .where('postId', isEqualTo: widget.postId)\n+              .snapshots(),\n+          builder: (context, snapshot) {\n+            if (snapshot.connectionState == ConnectionState.waiting) {\n+              return const Center(child: CircularProgressIndicator());\n+            }\n+            if (snapshot.hasError) {\n+              return const Center(child: Text('Error loading posts'));\n+            }\n \n-  //           if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-  //             return const Center(child: Text('No posts available'));\n-  //           }\n+            if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+              return const Center(child: Text('No posts available'));\n+            }\n \n-  //           final posts = snapshot.data!.docs.map((doc) {\n-  //             final data = doc.data() as Map<String, dynamic>;\n-  //             final String uid = data['postmakerId'];\n-  //             final bool isClaimed = data['isClaimed'] ?? false;\n-  //             final String? claimerUid = data['postClaimer'];\n-  //             print(\"post claimerasss: : $claimerUid\");\n-  //             print(\"POST IDDDDDDDD : ${data['postId']}\");\n-  //             print(\"Is Post Claimed: $isClaimed\");\n+            final posts = snapshot.data!.docs.map((doc) {\n+              final data = doc.data() as Map<String, dynamic>;\n+              final String uid = data['postmakerId'];\n+              final bool isClaimed = data['isClaimed'] ?? false;\n+              final String? claimerUid = data['postClaimer'];\n+              print(\"post claimerasss: : $claimerUid\");\n+              print(\"POST IDDDDDDDD : ${data['postId']}\");\n+              print(\"Is Post Claimed: $isClaimed\");\n \n-  //             return fetchUserNameAndProfilePic(uid).then((userDetails) async {\n-  //               String postClaimerName = '';\n-  //               String postClaimerProfilePic = '';\n+              return fetchUserNameAndProfilePic(uid).then((userDetails) async {\n+                String postClaimerName = '';\n+                String postClaimerProfilePic = '';\n \n-  //               if (isClaimed && claimerUid != null) {\n-  //                 final claimerDetails =\n-  //                     await fetchUserNameAndProfilePic(claimerUid);\n-  //                 postClaimerName = claimerDetails['name'] ?? 'NITH User';\n-  //                 postClaimerProfilePic = claimerDetails['profileImage'] ?? '';\n-  //               }\n+                if (isClaimed && claimerUid != null) {\n+                  final claimerDetails =\n+                      await fetchUserNameAndProfilePic(claimerUid);\n+                  postClaimerName = claimerDetails['name'] ?? 'NITH User';\n+                  postClaimerProfilePic = claimerDetails['profileImage'] ?? '';\n+                }\n \n-  //               return PostModel(\n-  //                 userName: userDetails['name'] ?? 'NITH User',\n-  //                 profileImageUrl: userDetails['profileImage'] ?? '',\n-  //                 postTime: _formatDate(data['timestamp']),\n-  //                 itemImages: List<String>.from(\n-  //                     data['imageUrls'] ?? ['']),\n-  //                 status: data['status'] ?? '',\n-  //                 title: data['item'] ?? '',\n-  //                 location: data['location'] ?? '',\n-  //                 description: data['description'] ?? '',\n-  //                 postmakerId: data['postmakerId'],\n-  //                 question: data['question'],\n-  //                 postId: data['postId'],\n-  //                 claimStatus: data['claimStatus'],\n-  //                 isClaimed: isClaimed,\n-  //                 postclaimerId: data['postClaimer'],\n-  //                 postClaimer:\n-  //                     postClaimerName.isNotEmpty ? postClaimerName : null,\n-  //                 postClaimerPic: postClaimerProfilePic.isNotEmpty\n-  //                     ? postClaimerProfilePic\n-  //                     : null,\n-  //               );\n-  //             });\n-  //           });\n+                return PostModel(\n+                  userName: userDetails['name'] ?? 'NITH User',\n+                  profileImageUrl: userDetails['profileImage'] ?? '',\n+                  postTime: _formatDate(data['timestamp']),\n+                  itemImages: List<String>.from(\n+                      data['imageUrls'] ?? ['']),\n+                  status: data['status'] ?? '',\n+                  title: data['item'] ?? '',\n+                  location: data['location'] ?? '',\n+                  description: data['description'] ?? '',\n+                  postmakerId: data['postmakerId'],\n+                  question: data['question'],\n+                  postId: data['postId'],\n+                  claimStatus: data['claimStatus'],\n+                  isClaimed: isClaimed,\n+                  postclaimerId: data['postClaimer'],\n+                  postClaimer:\n+                      postClaimerName.isNotEmpty ? postClaimerName : null,\n+                  postClaimerPic: postClaimerProfilePic.isNotEmpty\n+                      ? postClaimerProfilePic\n+                      : null,\n+                );\n+              });\n+            });\n \n-  //           return FutureBuilder<List<PostModel>>(\n-  //             future: Future.wait(posts.toList()),\n-  //             builder: (context, futureSnapshot) {\n-  //               if (futureSnapshot.connectionState == ConnectionState.waiting) {\n-  //                 return const Center(child: CircularProgressIndicator());\n-  //               }\n+            return FutureBuilder<List<PostModel>>(\n+              future: Future.wait(posts.toList()),\n+              builder: (context, futureSnapshot) {\n+                if (futureSnapshot.connectionState == ConnectionState.waiting) {\n+                  return const Center(child: CircularProgressIndicator());\n+                }\n \n-  //               if (futureSnapshot.hasError) {\n-  //                 print(\"Error : ${futureSnapshot.error}\");\n-  //                 return const Center(child: Text('Error loading posts'));\n-  //               }\n+                if (futureSnapshot.hasError) {\n+                  print(\"Error : ${futureSnapshot.error}\");\n+                  return const Center(child: Text('Error loading posts'));\n+                }\n \n-  //               final postsList = futureSnapshot.data ?? [];\n+                final postsList = futureSnapshot.data ?? [];\n \n-  //               return ListView.builder(\n-  //                 itemCount: postsList.length,\n-  //                 itemBuilder: (context, index) {\n-  //                   final post = postsList[index];\n-  //                   return Padding(\n-  //                     padding: const EdgeInsets.all(2.0),\n-  //                     child: Center(\n-  //                       child: SizedBox(\n-  //                         width:\n-  //                             isMobile ? MediaQuery.of(context).size.width : 600,\n-  //                         child: Card(\n-  //                           elevation: 5,\n-  //                           shape: RoundedRectangleBorder(\n-  //                             borderRadius: BorderRadius.circular(10),\n-  //                           ),\n-  //                           child: Column(\n-  //                             crossAxisAlignment: CrossAxisAlignment.start,\n-  //                             children: [\n-  //                               // Header  of the POST (profiel,name.location,delete)\n-  //                               GestureDetector(\n-  //                                 onTap: () {\n-  //                                   Navigator.push(\n-  //                                       context,\n-  //                                       MaterialPageRoute(\n-  //                                           builder: (_) => ProfilePage2(\n-  //                                               uid: post.postmakerId)));\n-  //                                 },\n-  //                                 child: ListTile(\n-  //                                   leading: CircleAvatar(\n-  //                                     radius: 30,\n-  //                                     backgroundImage:\n-  //                                         NetworkImage(post.profileImageUrl),\n-  //                                   ),\n-  //                                   title: Text(post.userName,\n-  //                                       style: const TextStyle(\n-  //                                           fontWeight: FontWeight.bold)),\n-  //                                   subtitle: Text(\n-  //                                       \"Location : ${post.location} , NITH\"),\n-  //                                   trailing: PopupMenuButton<String>(\n-  //                                     onSelected: (value) {\n-  //                                       if (value == 'Delete') {\n-  //                                         if (user!.uid == post.postmakerId) {\n-  //                                           _showDeleteConfirmation(\n-  //                                               context, post);\n-  //                                         } else {\n-  //                                           ScaffoldMessenger.of(context)\n-  //                                               .showSnackBar(\n-  //                                             const SnackBar(\n-  //                                                 backgroundColor: Colors.red,\n-  //                                                 content: Text(\n-  //                                                     \"You can't delete this post\")),\n-  //                                           );\n-  //                                         }\n-  //                                       }\n-  //                                     },\n-  //                                     itemBuilder: (BuildContext context) {\n-  //                                       return {'Delete'}.map((String choice) {\n-  //                                         return PopupMenuItem<String>(\n-  //                                           value: choice,\n-  //                                           child: Text(choice),\n-  //                                         );\n-  //                                       }).toList();\n-  //                                     },\n-  //                                   ),\n-  //                                 ),\n-  //                               ),\n+                return ListView.builder(\n+                  itemCount: postsList.length,\n+                  itemBuilder: (context, index) {\n+                    final post = postsList[index];\n+                    return Padding(\n+                      padding: const EdgeInsets.all(2.0),\n+                      child: Center(\n+                        child: SizedBox(\n+                          width:\n+                              isMobile ? MediaQuery.of(context).size.width : 600,\n+                          child: Card(\n+                            elevation: 5,\n+                            shape: RoundedRectangleBorder(\n+                              borderRadius: BorderRadius.circular(10),\n+                            ),\n+                            child: Column(\n+                              crossAxisAlignment: CrossAxisAlignment.start,\n+                              children: [\n+                                // Header  of the POST (profiel,name.location,delete)\n+                                GestureDetector(\n+                                  onTap: () {\n+                                    Navigator.push(\n+                                        context,\n+                                        MaterialPageRoute(\n+                                            builder: (_) => ProfilePage2(\n+                                                uid: post.postmakerId)));\n+                                  },\n+                                  child: ListTile(\n+                                    leading: CircleAvatar(\n+                                      radius: 30,\n+                                      backgroundImage:\n+                                          NetworkImage(post.profileImageUrl),\n+                                    ),\n+                                    title: Text(post.userName,\n+                                        style: const TextStyle(\n+                                            fontWeight: FontWeight.bold)),\n+                                    subtitle: Text(\n+                                        \"Location : ${post.location} , NITH\"),\n+                                    trailing: PopupMenuButton<String>(\n+                                      onSelected: (value) {\n+                                        if (value == 'Delete') {\n+                                          if (user!.uid == post.postmakerId) {\n+                                            _showDeleteConfirmation(\n+                                                context, post);\n+                                          } else {\n+                                            ScaffoldMessenger.of(context)\n+                                                .showSnackBar(\n+                                              const SnackBar(\n+                                                  backgroundColor: Colors.red,\n+                                                  content: Text(\n+                                                      \"You can't delete this post\")),\n+                                            );\n+                                          }\n+                                        }\n+                                      },\n+                                      itemBuilder: (BuildContext context) {\n+                                        return {'Delete'}.map((String choice) {\n+                                          return PopupMenuItem<String>(\n+                                            value: choice,\n+                                            child: Text(choice),\n+                                          );\n+                                        }).toList();\n+                                      },\n+                                    ),\n+                                  ),\n+                                ),\n \n-  //                               // LOST OR FOUND\n-  //                               Stack(\n-  //                                 children: [\n-  //                                   CarouselSlider(\n-  //                                     options: CarouselOptions(\n-  //                                       autoPlay: true,\n-  //                                       height: 500.0,\n-  //                                       enlargeCenterPage: true,\n-  //                                     ),\n-  //                                     items:\n-  //                                         post.itemImages.map<Widget>((imageUrl) {\n-  //                                       return GestureDetector(\n-  //                                         onTap: () {\n-  //                                           showDialog(\n-  //                                             context: context,\n-  //                                             builder: (BuildContext context) {\n-  //                                               return Dialog(\n-  //                                                 child: Stack(\n-  //                                                   children: [\n-  //                                                     Image.network(imageUrl),\n-  //                                                     Positioned(\n-  //                                                       right: 10,\n-  //                                                       top: 10,\n-  //                                                       child: IconButton(\n-  //                                                         icon: const Icon(\n-  //                                                             Icons.cancel,\n-  //                                                             color: Colors.red),\n-  //                                                         onPressed: () {\n-  //                                                           Navigator.of(context)\n-  //                                                               .pop();\n-  //                                                         },\n-  //                                                       ),\n-  //                                                     ),\n-  //                                                   ],\n-  //                                                 ),\n-  //                                               );\n-  //                                             },\n-  //                                           );\n-  //                                         },\n-  //                                         child: ClipRRect(\n-  //                                           borderRadius:\n-  //                                               BorderRadius.circular(10),\n-  //                                           child: Image.network(\n-  //                                             imageUrl,\n-  //                                             fit: BoxFit.cover,\n-  //                                             width: MediaQuery.of(context)\n-  //                                                 .size\n-  //                                                 .width,\n-  //                                             errorBuilder:\n-  //                                                 (context, error, stackTrace) {\n-  //                                               return const Icon(Icons.error);\n-  //                                             },\n-  //                                           ),\n-  //                                         ),\n-  //                                       );\n-  //                                     }).toList(),\n-  //                                   ),\n-  //                                   Positioned(\n-  //                                     top: isMobile ? 16 : 6,\n-  //                                     left: 50,\n-  //                                     child: Container(\n-  //                                       padding: const EdgeInsets.symmetric(\n-  //                                           horizontal: 10, vertical: 5),\n-  //                                       decoration: BoxDecoration(\n-  //                                         color: post.status == 'Lost'\n-  //                                             ? Colors.red\n-  //                                             : Colors.green,\n-  //                                         borderRadius: BorderRadius.circular(5),\n-  //                                       ),\n-  //                                       child: Text(\n-  //                                         post.status,\n-  //                                         style: const TextStyle(\n-  //                                           color: Colors.white,\n-  //                                           fontWeight: FontWeight.bold,\n-  //                                         ),\n-  //                                       ),\n-  //                                     ),\n-  //                                   ),\n-  //                                 ],\n-  //                               ),\n+                                // LOST OR FOUND\n+                                Stack(\n+                                  children: [\n+                                    CarouselSlider(\n+                                      options: CarouselOptions(\n+                                        autoPlay: true,\n+                                        height: 500.0,\n+                                        enlargeCenterPage: true,\n+                                      ),\n+                                      items:\n+                                          post.itemImages.map<Widget>((imageUrl) {\n+                                        return GestureDetector(\n+                                          onTap: () {\n+                                            showDialog(\n+                                              context: context,\n+                                              builder: (BuildContext context) {\n+                                                return Dialog(\n+                                                  child: Stack(\n+                                                    children: [\n+                                                      Image.network(imageUrl),\n+                                                      Positioned(\n+                                                        right: 10,\n+                                                        top: 10,\n+                                                        child: IconButton(\n+                                                          icon: const Icon(\n+                                                              Icons.cancel,\n+                                                              color: Colors.red),\n+                                                          onPressed: () {\n+                                                            Navigator.of(context)\n+                                                                .pop();\n+                                                          },\n+                                                        ),\n+                                                      ),\n+                                                    ],\n+                                                  ),\n+                                                );\n+                                              },\n+                                            );\n+                                          },\n+                                          child: ClipRRect(\n+                                            borderRadius:\n+                                                BorderRadius.circular(10),\n+                                            child: Image.network(\n+                                              imageUrl,\n+                                              fit: BoxFit.cover,\n+                                              width: MediaQuery.of(context)\n+                                                  .size\n+                                                  .width,\n+                                              errorBuilder:\n+                                                  (context, error, stackTrace) {\n+                                                return const Icon(Icons.error);\n+                                              },\n+                                            ),\n+                                          ),\n+                                        );\n+                                      }).toList(),\n+                                    ),\n+                                    Positioned(\n+                                      top: isMobile ? 16 : 6,\n+                                      left: 50,\n+                                      child: Container(\n+                                        padding: const EdgeInsets.symmetric(\n+                                            horizontal: 10, vertical: 5),\n+                                        decoration: BoxDecoration(\n+                                          color: post.status == 'Lost'\n+                                              ? Colors.red\n+                                              : Colors.green,\n+                                          borderRadius: BorderRadius.circular(5),\n+                                        ),\n+                                        child: Text(\n+                                          post.status,\n+                                          style: const TextStyle(\n+                                            color: Colors.white,\n+                                            fontWeight: FontWeight.bold,\n+                                          ),\n+                                        ),\n+                                      ),\n+                                    ),\n+                                  ],\n+                                ),\n \n-  //                               Padding(\n-  //                                 padding: const EdgeInsets.symmetric(\n-  //                                     horizontal: 18.0, vertical: 10),\n-  //                                 child: Column(\n-  //                                   crossAxisAlignment: CrossAxisAlignment.start,\n-  //                                   children: [\n-  //                                     // ITEM item,date\n-  //                                     Row(\n-  //                                       mainAxisAlignment:\n-  //                                           MainAxisAlignment.spaceBetween,\n-  //                                       children: [\n-  //                                         Text(\n-  //                                           post.title == 'Other'\n-  //                                               ? '${post.status} Item'\n-  //                                               : post.title,\n-  //                                           overflow: TextOverflow.clip,\n-  //                                           softWrap: true,\n-  //                                           style: const TextStyle(\n-  //                                               fontSize: 18,\n-  //                                               fontWeight: FontWeight.bold),\n-  //                                         ),\n-  //                                         const SizedBox(width: 5),\n-  //                                         Row(\n-  //                                           children: [\n-  //                                             Text(\"${post.status} On : \",\n-  //                                                 overflow: TextOverflow.clip,\n-  //                                                 softWrap: true,\n-  //                                                 style: const TextStyle(\n-  //                                                     color: Colors.red,\n-  //                                                     fontWeight:\n-  //                                                         FontWeight.bold)),\n-  //                                             Text(post.postTime,\n-  //                                                 style: const TextStyle(\n-  //                                                     fontWeight:\n-  //                                                         FontWeight.bold)),\n-  //                                           ],\n-  //                                         ),\n-  //                                       ],\n-  //                                     ),\n-  //                                     const SizedBox(height: 5),\n+                                Padding(\n+                                  padding: const EdgeInsets.symmetric(\n+                                      horizontal: 18.0, vertical: 10),\n+                                  child: Column(\n+                                    crossAxisAlignment: CrossAxisAlignment.start,\n+                                    children: [\n+                                      // ITEM item,date\n+                                      Row(\n+                                        mainAxisAlignment:\n+                                            MainAxisAlignment.spaceBetween,\n+                                        children: [\n+                                          Text(\n+                                            post.title == 'Other'\n+                                                ? '${post.status} Item'\n+                                                : post.title,\n+                                            overflow: TextOverflow.clip,\n+                                            softWrap: true,\n+                                            style: const TextStyle(\n+                                                fontSize: 18,\n+                                                fontWeight: FontWeight.bold),\n+                                          ),\n+                                          const SizedBox(width: 5),\n+                                          Row(\n+                                            children: [\n+                                              Text(\"${post.status} On : \",\n+                                                  overflow: TextOverflow.clip,\n+                                                  softWrap: true,\n+                                                  style: const TextStyle(\n+                                                      color: Colors.red,\n+                                                      fontWeight:\n+                                                          FontWeight.bold)),\n+                                              Text(post.postTime,\n+                                                  style: const TextStyle(\n+                                                      fontWeight:\n+                                                          FontWeight.bold)),\n+                                            ],\n+                                          ),\n+                                        ],\n+                                      ),\n+                                      const SizedBox(height: 5),\n \n-  //                                     //DESCRIPTION\n-  //                                     Row(\n-  //                                       crossAxisAlignment: CrossAxisAlignment\n-  //                                           .start, // Align text to the top\n-  //                                       children: [\n-  //                                         const Text(\n-  //                                           \"Description : \",\n-  //                                           style: TextStyle(\n-  //                                             fontWeight: FontWeight.bold,\n-  //                                           ),\n-  //                                         ),\n-  //                                         const SizedBox(width: 4),\n-  //                                         Expanded(\n-  //                                           child: Text(\n-  //                                             post.description,\n-  //                                             overflow: TextOverflow.clip,\n-  //                                             softWrap: true,\n-  //                                             style: const TextStyle(\n-  //                                               fontSize: 14,\n-  //                                             ),\n-  //                                           ),\n-  //                                         ),\n-  //                                       ],\n-  //                                     ),\n-  //                                     const SizedBox(height: 10),\n+                                      //DESCRIPTION\n+                                      Row(\n+                                        crossAxisAlignment: CrossAxisAlignment\n+                                            .start, // Align text to the top\n+                                        children: [\n+                                          const Text(\n+                                            \"Description : \",\n+                                            style: TextStyle(\n+                                              fontWeight: FontWeight.bold,\n+                                            ),\n+                                          ),\n+                                          const SizedBox(width: 4),\n+                                          Expanded(\n+                                            child: Text(\n+                                              post.description,\n+                                              overflow: TextOverflow.clip,\n+                                              softWrap: true,\n+                                              style: const TextStyle(\n+                                                fontSize: 14,\n+                                              ),\n+                                            ),\n+                                          ),\n+                                        ],\n+                                      ),\n+                                      const SizedBox(height: 10),\n \n-  //                                     //BUTTONNS\n-  //                                     StreamBuilder<QuerySnapshot>(\n-  //                                         stream: FirebaseFirestore.instance\n-  //                                             .collection('posts')\n-  //                                             .doc(post.postId)\n-  //                                             .collection('claims')\n-  //                                             .where('senderId',\n-  //                                                 isEqualTo: user!.uid)\n-  //                                             .snapshots(),\n-  //                                         builder: (context, claimSnapshot) {\n-  //                                           if (claimSnapshot.connectionState ==\n-  //                                               ConnectionState.waiting) {\n-  //                                             return const Center(\n-  //                                                 child:\n-  //                                                     CircularProgressIndicator());\n-  //                                           }\n+                                      //BUTTONNS\n+                                      StreamBuilder<QuerySnapshot>(\n+                                          stream: FirebaseFirestore.instance\n+                                              .collection('posts')\n+                                              .doc(post.postId)\n+                                              .collection('claims')\n+                                              .where('senderId',\n+                                                  isEqualTo: user!.uid)\n+                                              .snapshots(),\n+                                          builder: (context, claimSnapshot) {\n+                                            if (claimSnapshot.connectionState ==\n+                                                ConnectionState.waiting) {\n+                                              return const Center(\n+                                                  child:\n+                                                      CircularProgressIndicator());\n+                                            }\n \n-  //                                           bool userHasRequestedClaim = false;\n+                                            bool userHasRequestedClaim = false;\n \n-  //                                           if (claimSnapshot.hasData &&\n-  //                                               claimSnapshot\n-  //                                                   .data!.docs.isNotEmpty) {\n-  //                                             final claimData = claimSnapshot\n-  //                                                 .data!.docs.first\n-  //                                                 .data() as Map<String, dynamic>;\n+                                            if (claimSnapshot.hasData &&\n+                                                claimSnapshot\n+                                                    .data!.docs.isNotEmpty) {\n+                                              final claimData = claimSnapshot\n+                                                  .data!.docs.first\n+                                                  .data() as Map<String, dynamic>;\n \n-  //                                             if (claimData['claimStatusC'] ==\n-  //                                                 'requested') {\n-  //                                               userHasRequestedClaim = true;\n-  //                                             }\n-  //                                             if (claimData['claimStatusC'] ==\n-  //                                                     'accepted' ||\n-  //                                                 claimData['claimStatusC'] ==\n-  //                                                     'declined') {\n-  //                                               userHasRequestedClaim = false;\n-  //                                             }\n-  //                                           }\n+                                              if (claimData['claimStatusC'] ==\n+                                                  'requested') {\n+                                                userHasRequestedClaim = true;\n+                                              }\n+                                              if (claimData['claimStatusC'] ==\n+                                                      'accepted' ||\n+                                                  claimData['claimStatusC'] ==\n+                                                      'declined') {\n+                                                userHasRequestedClaim = false;\n+                                              }\n+                                            }\n \n-  //                                           return Row(\n-  //                                               mainAxisAlignment:\n-  //                                                   MainAxisAlignment.spaceAround,\n-  //                                               children: [\n-  //                                                 GestureDetector(\n-  //                                                   onTap: () {\n-  //                                                     _sharePost(\n-  //                                                         context,\n-  //                                                         post.title,\n-  //                                                         post.description);\n-  //                                                   },\n-  //                                                   child: const Row(\n-  //                                                     children: [\n-  //                                                       Icon(Icons.share_rounded),\n-  //                                                       SizedBox(width: 3),\n-  //                                                       Text('Share'),\n-  //                                                     ],\n-  //                                                   ),\n-  //                                                 ),\n+                                            return Row(\n+                                                mainAxisAlignment:\n+                                                    MainAxisAlignment.spaceAround,\n+                                                children: [\n+                                                  GestureDetector(\n+                                                    onTap: () {\n+                                                      _sharePost(\n+                                                          context,\n+                                                          post.title,\n+                                                          post.description);\n+                                                    },\n+                                                    child: const Row(\n+                                                      children: [\n+                                                        Icon(Icons.share_rounded),\n+                                                        SizedBox(width: 3),\n+                                                        Text('Share'),\n+                                                      ],\n+                                                    ),\n+                                                  ),\n \n-  //                                                 if (post.postmakerId !=\n-  //                                                     user!.uid)\n-  //                                                   ElevatedButton(\n-  //                                                     onPressed: () {\n-  //                                                       _replyToPostmaker(\n-  //                                                           context,\n-  //                                                           post.postmakerId,\n-  //                                                           post.userName,\n-  //                                                           post.postId);\n-  //                                                     },\n-  //                                                     style: ElevatedButton\n-  //                                                         .styleFrom(\n-  //                                                       backgroundColor:\n-  //                                                           Colors.green.shade600,\n-  //                                                       shape:\n-  //                                                           RoundedRectangleBorder(\n-  //                                                         borderRadius:\n-  //                                                             BorderRadius\n-  //                                                                 .circular(10),\n-  //                                                       ),\n-  //                                                     ),\n-  //                                                     child: const Row(\n-  //                                                       mainAxisAlignment:\n-  //                                                           MainAxisAlignment\n-  //                                                               .center,\n-  //                                                       children: [\n-  //                                                         Icon(Icons.reply,\n-  //                                                             color:\n-  //                                                                 Colors.white),\n-  //                                                         SizedBox(width: 3),\n-  //                                                         Text(\n-  //                                                           'Reply',\n-  //                                                           style: TextStyle(\n-  //                                                               fontSize: 16,\n-  //                                                               color:\n-  //                                                                   Colors.white),\n-  //                                                         ),\n-  //                                                       ],\n-  //                                                     ),\n-  //                                                   ),\n+                                                  if (post.postmakerId !=\n+                                                      user!.uid)\n+                                                    ElevatedButton(\n+                                                      onPressed: () {\n+                                                        _replyToPostmaker(\n+                                                            context,\n+                                                            post.postmakerId,\n+                                                            post.userName,\n+                                                            post.postId);\n+                                                      },\n+                                                      style: ElevatedButton\n+                                                          .styleFrom(\n+                                                        backgroundColor:\n+                                                            Colors.green.shade600,\n+                                                        shape:\n+                                                            RoundedRectangleBorder(\n+                                                          borderRadius:\n+                                                              BorderRadius\n+                                                                  .circular(10),\n+                                                        ),\n+                                                      ),\n+                                                      child: const Row(\n+                                                        mainAxisAlignment:\n+                                                            MainAxisAlignment\n+                                                                .center,\n+                                                        children: [\n+                                                          Icon(Icons.reply,\n+                                                              color:\n+                                                                  Colors.white),\n+                                                          SizedBox(width: 3),\n+                                                          Text(\n+                                                            'Reply',\n+                                                            style: TextStyle(\n+                                                                fontSize: 16,\n+                                                                color:\n+                                                                    Colors.white),\n+                                                          ),\n+                                                        ],\n+                                                      ),\n+                                                    ),\n \n-  //                                                 //Claimed Button\n-  //                                                 if (post.status != 'Lost' &&\n-  //                                                     post.isClaimed == true)\n-  //                                                   ElevatedButton(\n-  //                                                     onPressed: () {\n-  //                                                       _claimedPost(\n-  //                                                           context,\n-  //                                                           post.postclaimerId!,\n-  //                                                           post.title,\n-  //                                                           post.postClaimer!,\n-  //                                                           post.postId);\n-  //                                                     },\n-  //                                                     style: ElevatedButton\n-  //                                                         .styleFrom(\n-  //                                                       backgroundColor: Colors\n-  //                                                           .deepOrange.shade600,\n-  //                                                       shape:\n-  //                                                           RoundedRectangleBorder(\n-  //                                                         borderRadius:\n-  //                                                             BorderRadius\n-  //                                                                 .circular(10),\n-  //                                                       ),\n-  //                                                     ),\n-  //                                                     child: const Row(\n-  //                                                       mainAxisAlignment:\n-  //                                                           MainAxisAlignment\n-  //                                                               .center,\n-  //                                                       children: [\n-  //                                                         Icon(Icons.back_hand,\n-  //                                                             color:\n-  //                                                                 Colors.white),\n-  //                                                         SizedBox(width: 3),\n-  //                                                         Text(\n-  //                                                           'Claimed',\n-  //                                                           style: TextStyle(\n-  //                                                               fontSize: 16,\n-  //                                                               color:\n-  //                                                                   Colors.white),\n-  //                                                         ),\n-  //                                                       ],\n-  //                                                     ),\n-  //                                                   ),\n+                                                  //Claimed Button\n+                                                  if (post.status != 'Lost' &&\n+                                                      post.isClaimed == true)\n+                                                    ElevatedButton(\n+                                                      onPressed: () {\n+                                                        _claimedPost(\n+                                                            context,\n+                                                            post.postclaimerId!,\n+                                                            post.title,\n+                                                            post.postClaimer!,\n+                                                            post.postId);\n+                                                      },\n+                                                      style: ElevatedButton\n+                                                          .styleFrom(\n+                                                        backgroundColor: Colors\n+                                                            .deepOrange.shade600,\n+                                                        shape:\n+                                                            RoundedRectangleBorder(\n+                                                          borderRadius:\n+                                                              BorderRadius\n+                                                                  .circular(10),\n+                                                        ),\n+                                                      ),\n+                                                      child: const Row(\n+                                                        mainAxisAlignment:\n+                                                            MainAxisAlignment\n+                                                                .center,\n+                                                        children: [\n+                                                          Icon(Icons.back_hand,\n+                                                              color:\n+                                                                  Colors.white),\n+                                                          SizedBox(width: 3),\n+                                                          Text(\n+                                                            'Claimed',\n+                                                            style: TextStyle(\n+                                                                fontSize: 16,\n+                                                                color:\n+                                                                    Colors.white),\n+                                                          ),\n+                                                        ],\n+                                                      ),\n+                                                    ),\n \n-  //                                                 // Claim Buttton\n-  //                                                 if (post.postmakerId !=\n-  //                                                         user!.uid &&\n-  //                                                     post.status == 'Found' &&\n-  //                                                     post.isClaimed == false &&\n-  //                                                     !userHasRequestedClaim)\n-  //                                                   ElevatedButton(\n-  //                                                     onPressed: () {\n-  //                                                       _claimPost(\n-  //                                                           context,\n-  //                                                           post.postmakerId,\n-  //                                                           post.title,\n-  //                                                           post.question!,\n-  //                                                           post.description,\n-  //                                                           post.postId);\n-  //                                                     },\n-  //                                                     style: ElevatedButton\n-  //                                                         .styleFrom(\n-  //                                                       backgroundColor: Colors\n-  //                                                           .deepOrange.shade600,\n-  //                                                       shape:\n-  //                                                           RoundedRectangleBorder(\n-  //                                                         borderRadius:\n-  //                                                             BorderRadius\n-  //                                                                 .circular(10),\n-  //                                                       ),\n-  //                                                     ),\n-  //                                                     child: const Row(\n-  //                                                       mainAxisAlignment:\n-  //                                                           MainAxisAlignment\n-  //                                                               .center,\n-  //                                                       children: [\n-  //                                                         Icon(Icons.back_hand,\n-  //                                                             color:\n-  //                                                                 Colors.white),\n-  //                                                         SizedBox(width: 6),\n-  //                                                         Text(\n-  //                                                           'Claim',\n-  //                                                           style: TextStyle(\n-  //                                                               fontSize: 16,\n-  //                                                               color:\n-  //                                                                   Colors.white),\n-  //                                                         ),\n-  //                                                       ],\n-  //                                                     ),\n-  //                                                   ),\n+                                                  // Claim Buttton\n+                                                  if (post.postmakerId !=\n+                                                          user!.uid &&\n+                                                      post.status == 'Found' &&\n+                                                      post.isClaimed == false &&\n+                                                      !userHasRequestedClaim)\n+                                                    ElevatedButton(\n+                                                      onPressed: () {\n+                                                        _claimPost(\n+                                                            context,\n+                                                            post.postmakerId,\n+                                                            post.title,\n+                                                            post.question!,\n+                                                            post.description,\n+                                                            post.postId);\n+                                                      },\n+                                                      style: ElevatedButton\n+                                                          .styleFrom(\n+                                                        backgroundColor: Colors\n+                                                            .deepOrange.shade600,\n+                                                        shape:\n+                                                            RoundedRectangleBorder(\n+                                                          borderRadius:\n+                                                              BorderRadius\n+                                                                  .circular(10),\n+                                                        ),\n+                                                      ),\n+                                                      child: const Row(\n+                                                        mainAxisAlignment:\n+                                                            MainAxisAlignment\n+                                                                .center,\n+                                                        children: [\n+                                                          Icon(Icons.back_hand,\n+                                                              color:\n+                                                                  Colors.white),\n+                                                          SizedBox(width: 6),\n+                                                          Text(\n+                                                            'Claim',\n+                                                            style: TextStyle(\n+                                                                fontSize: 16,\n+                                                                color:\n+                                                                    Colors.white),\n+                                                          ),\n+                                                        ],\n+                                                      ),\n+                                                    ),\n \n-  //                                                 // Request Button\n-  //                                                 if (post.postmakerId !=\n-  //                                                         user!.uid &&\n-  //                                                     post.status == 'Found' &&\n-  //                                                     post.isClaimed == false &&\n-  //                                                     userHasRequestedClaim)\n-  //                                                   ElevatedButton(\n-  //                                                     onPressed: () {},\n-  //                                                     style: ElevatedButton\n-  //                                                         .styleFrom(\n-  //                                                       backgroundColor: Colors\n-  //                                                           .deepOrange.shade600,\n-  //                                                       shape:\n-  //                                                           RoundedRectangleBorder(\n-  //                                                         borderRadius:\n-  //                                                             BorderRadius\n-  //                                                                 .circular(10),\n-  //                                                       ),\n-  //                                                     ),\n-  //                                                     child: const Row(\n-  //                                                       mainAxisAlignment:\n-  //                                                           MainAxisAlignment\n-  //                                                               .center,\n-  //                                                       children: [\n-  //                                                         Icon(Icons.back_hand,\n-  //                                                             color:\n-  //                                                                 Colors.white),\n-  //                                                         SizedBox(width: 3),\n-  //                                                         Text(\n-  //                                                           'Requested',\n-  //                                                           style: TextStyle(\n-  //                                                               fontSize: 16,\n-  //                                                               color:\n-  //                                                                   Colors.white),\n-  //                                                         ),\n-  //                                                       ],\n-  //                                                     ),\n-  //                                                   )\n-  //                                               ]);\n-  //                                         })\n-  //                                   ],\n-  //                                 ),\n-  //                               ),\n-  //                             ],\n-  //                           ),\n-  //                         ),\n-  //                       ),\n-  //                     ),\n-  //                   );\n-  //                 },\n-  //               );\n-  //             },\n-  //           );\n-  //         },\n-  //       ),\n-  //     );\n-  //   }\n+                                                  // Request Button\n+                                                  if (post.postmakerId !=\n+                                                          user!.uid &&\n+                                                      post.status == 'Found' &&\n+                                                      post.isClaimed == false &&\n+                                                      userHasRequestedClaim)\n+                                                    ElevatedButton(\n+                                                      onPressed: () {},\n+                                                      style: ElevatedButton\n+                                                          .styleFrom(\n+                                                        backgroundColor: Colors\n+                                                            .deepOrange.shade600,\n+                                                        shape:\n+                                                            RoundedRectangleBorder(\n+                                                          borderRadius:\n+                                                              BorderRadius\n+                                                                  .circular(10),\n+                                                        ),\n+                                                      ),\n+                                                      child: const Row(\n+                                                        mainAxisAlignment:\n+                                                            MainAxisAlignment\n+                                                                .center,\n+                                                        children: [\n+                                                          Icon(Icons.back_hand,\n+                                                              color:\n+                                                                  Colors.white),\n+                                                          SizedBox(width: 3),\n+                                                          Text(\n+                                                            'Requested',\n+                                                            style: TextStyle(\n+                                                                fontSize: 16,\n+                                                                color:\n+                                                                    Colors.white),\n+                                                          ),\n+                                                        ],\n+                                                      ),\n+                                                    )\n+                                                ]);\n+                                          })\n+                                    ],\n+                                  ),\n+                                ),\n+                              ],\n+                            ),\n+                          ),\n+                        ),\n+                      ),\n+                    );\n+                  },\n+                );\n+              },\n+            );\n+          },\n+        ),\n+      );\n+    }\n \n-  //   void _replyToPostmaker(BuildContext context, String postmakerId,\n-  //       String postmaker, String postId) {\n-  //     TextEditingController messageController = TextEditingController();\n+    void _replyToPostmaker(BuildContext context, String postmakerId,\n+        String postmaker, String postId) {\n+      TextEditingController messageController = TextEditingController();\n \n-  //     showDialog(\n-  //       context: context,\n-  //       builder: (BuildContext context) {\n-  //         return AlertDialog(\n-  //           title: const Text('Send a Reply'),\n-  //           content: Column(\n-  //             mainAxisSize: MainAxisSize.min,\n-  //             children: [\n-  //               Row(\n-  //                 children: [\n-  //                   const Text('Reply to'),\n-  //                   TextButton(\n-  //                       onPressed: () {\n-  //                         Navigator.push(\n-  //                             context,\n-  //                             MaterialPageRoute(\n-  //                                 builder: (_) =>\n-  //                                     ProfilePage2(uid: postmakerId)));\n-  //                       },\n-  //                       child: Text(postmaker))\n-  //                 ],\n-  //               ),\n-  //               const SizedBox(height: 10),\n-  //               TextField(\n-  //                 controller: messageController,\n-  //                 decoration: const InputDecoration(\n-  //                   labelText: 'Your message',\n-  //                   alignLabelWithHint: true,\n-  //                   border: OutlineInputBorder(),\n-  //                 ),\n-  //                 maxLines: 3,\n-  //               ),\n-  //             ],\n-  //           ),\n-  //           actions: [\n-  //             TextButton(\n-  //               onPressed: () {\n-  //                 Navigator.of(context).pop(); // Close the dialog without sending\n-  //               },\n-  //               child: const Text('Cancel'),\n-  //             ),\n-  //             TextButton(\n-  //               onPressed: () {\n-  //                 String message = messageController.text.trim();\n-  //                 if (message.isNotEmpty) {\n-  //                   _sendMessageToPostmaker(\n-  //                       context, postmakerId, message, postId);\n-  //                 }\n-  //                 ScaffoldMessenger.of(context).showSnackBar(\n-  //                   const SnackBar(\n-  //                     content: Text('Message sent successfully'),\n-  //                     behavior: SnackBarBehavior.floating,\n-  //                     margin: EdgeInsets.all(16.0),\n-  //                   ),\n-  //                 );\n-  //                 Navigator.of(context).pop(); // Close the dialog after sending\n-  //               },\n-  //               child: const Text('Send'),\n-  //             ),\n-  //           ],\n-  //         );\n-  //       },\n-  //     );\n-  //   }\n+      showDialog(\n+        context: context,\n+        builder: (BuildContext context) {\n+          return AlertDialog(\n+            title: const Text('Send a Reply'),\n+            content: Column(\n+              mainAxisSize: MainAxisSize.min,\n+              children: [\n+                Row(\n+                  children: [\n+                    const Text('Reply to'),\n+                    TextButton(\n+                        onPressed: () {\n+                          Navigator.push(\n+                              context,\n+                              MaterialPageRoute(\n+                                  builder: (_) =>\n+                                      ProfilePage2(uid: postmakerId)));\n+                        },\n+                        child: Text(postmaker))\n+                  ],\n+                ),\n+                const SizedBox(height: 10),\n+                TextField(\n+                  controller: messageController,\n+                  decoration: const InputDecoration(\n+                    labelText: 'Your message',\n+                    alignLabelWithHint: true,\n+                    border: OutlineInputBorder(),\n+                  ),\n+                  maxLines: 3,\n+                ),\n+              ],\n+            ),\n+            actions: [\n+              TextButton(\n+                onPressed: () {\n+                  Navigator.of(context).pop(); // Close the dialog without sending\n+                },\n+                child: const Text('Cancel'),\n+              ),\n+              TextButton(\n+                onPressed: () {\n+                  String message = messageController.text.trim();\n+                  if (message.isNotEmpty) {\n+                    _sendMessageToPostmaker(\n+                        context, postmakerId, message, postId);\n+                  }\n+                  ScaffoldMessenger.of(context).showSnackBar(\n+                    const SnackBar(\n+                      content: Text('Message sent successfully'),\n+                      behavior: SnackBarBehavior.floating,\n+                      margin: EdgeInsets.all(16.0),\n+                    ),\n+                  );\n+                  Navigator.of(context).pop(); // Close the dialog after sending\n+                },\n+                child: const Text('Send'),\n+              ),\n+            ],\n+          );\n+        },\n+      );\n+    }\n \n-  //   Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n-  //       String message, String postId) async {\n-  //     try {\n-  //       // Add a chat message to Firestore\n-  //       await FirebaseFirestore.instance.collection('chats').add({\n-  //         'senderId': user!.uid,\n-  //         'receiverId': postmakerId,\n-  //         'participants': [user!.uid, postmakerId],\n-  //         'message': message,\n-  //         'postId': postId,\n-  //         'timestamp': Timestamp.now(),\n-  //       });\n+    Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n+        String message, String postId) async {\n+      try {\n+        // Add a chat message to Firestore\n+        await FirebaseFirestore.instance.collection('chats').add({\n+          'senderId': user!.uid,\n+          'receiverId': postmakerId,\n+          'participants': [user!.uid, postmakerId],\n+          'message': message,\n+          'postId': postId,\n+          'timestamp': Timestamp.now(),\n+        });\n \n-  //       ScaffoldMessenger.of(context).showSnackBar(\n-  //         const SnackBar(\n-  //           content: Text('Message sent successfully'),\n-  //           behavior: SnackBarBehavior.floating,\n-  //           margin: EdgeInsets.all(16.0),\n-  //         ),\n-  //       );\n-  //     } catch (e) {\n-  //       ScaffoldMessenger.of(context).showSnackBar(\n-  //         SnackBar(\n-  //           content: Text('Failed to send message: $e'),\n-  //           backgroundColor: Colors.red,\n-  //         ),\n-  //       );\n-  //     }\n-  //   }\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          const SnackBar(\n+            content: Text('Message sent successfully'),\n+            behavior: SnackBarBehavior.floating,\n+            margin: EdgeInsets.all(16.0),\n+          ),\n+        );\n+      } catch (e) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(\n+            content: Text('Failed to send message: $e'),\n+            backgroundColor: Colors.red,\n+          ),\n+        );\n+      }\n+    }\n \n-  //   void _claimPost(BuildContext context, String postmakerId, String postTitle,\n-  //       String postQuestion, String postdescription, String postId) {\n-  //     TextEditingController answerController = TextEditingController();\n-  //     showDialog(\n-  //       context: context,\n-  //       builder: (BuildContext context) {\n-  //         return AlertDialog(\n-  //           title: const Text('Claim Item'),\n-  //           content: Column(\n-  //             mainAxisSize: MainAxisSize.min,\n-  //             children: [\n-  //               const Text('Question from the post owner:'),\n-  //               const SizedBox(height: 10),\n-  //               Text(postQuestion,\n-  //                   style: const TextStyle(fontWeight: FontWeight.bold)),\n-  //               const SizedBox(height: 20),\n-  //               TextField(\n-  //                 controller: answerController,\n-  //                 decoration: const InputDecoration(\n-  //                   labelText: 'Your answer',\n-  //                   alignLabelWithHint: true,\n-  //                   border: OutlineInputBorder(),\n-  //                 ),\n-  //                 maxLines: 3,\n-  //               ),\n-  //             ],\n-  //           ),\n-  //           actions: [\n-  //             TextButton(\n-  //               onPressed: () {\n-  //                 Navigator.of(context).pop();\n-  //               },\n-  //               child: const Text('Cancel'),\n-  //             ),\n-  //             TextButton(\n-  //               onPressed: () {\n-  //                 String answer = answerController.text.trim();\n-  //                 if (answer.isNotEmpty) {\n-  //                   _sendAnswerToPostmaker(\n-  //                       context, answer, postId, postmakerId, 'requested');\n-  //                 }\n-  //                 ScaffoldMessenger.of(context).showSnackBar(\n-  //                   const SnackBar(\n-  //                     content: Text('Request sent successfully'),\n-  //                     behavior: SnackBarBehavior.floating,\n-  //                     margin: EdgeInsets.all(16.0),\n-  //                   ),\n-  //                 );\n-  //                 Navigator.of(context).pop();\n-  //               },\n-  //               child: const Text('Send'),\n-  //             ),\n-  //           ],\n-  //         );\n-  //       },\n-  //     );\n-  //   }\n+    void _claimPost(BuildContext context, String postmakerId, String postTitle,\n+        String postQuestion, String postdescription, String postId) {\n+      TextEditingController answerController = TextEditingController();\n+      showDialog(\n+        context: context,\n+        builder: (BuildContext context) {\n+          return AlertDialog(\n+            title: const Text('Claim Item'),\n+            content: Column(\n+              mainAxisSize: MainAxisSize.min,\n+              children: [\n+                const Text('Question from the post owner:'),\n+                const SizedBox(height: 10),\n+                Text(postQuestion,\n+                    style: const TextStyle(fontWeight: FontWeight.bold)),\n+                const SizedBox(height: 20),\n+                TextField(\n+                  controller: answerController,\n+                  decoration: const InputDecoration(\n+                    labelText: 'Your answer',\n+                    alignLabelWithHint: true,\n+                    border: OutlineInputBorder(),\n+                  ),\n+                  maxLines: 3,\n+                ),\n+              ],\n+            ),\n+            actions: [\n+              TextButton(\n+                onPressed: () {\n+                  Navigator.of(context).pop();\n+                },\n+                child: const Text('Cancel'),\n+              ),\n+              TextButton(\n+                onPressed: () {\n+                  String answer = answerController.text.trim();\n+                  if (answer.isNotEmpty) {\n+                    _sendAnswerToPostmaker(\n+                        context, answer, postId, postmakerId, 'requested');\n+                  }\n+                  ScaffoldMessenger.of(context).showSnackBar(\n+                    const SnackBar(\n+                      content: Text('Request sent successfully'),\n+                      behavior: SnackBarBehavior.floating,\n+                      margin: EdgeInsets.all(16.0),\n+                    ),\n+                  );\n+                  Navigator.of(context).pop();\n+                },\n+                child: const Text('Send'),\n+              ),\n+            ],\n+          );\n+        },\n+      );\n+    }\n \n-  //   void _claimedPost(BuildContext context, String postclaimerId,\n-  //       String postTitle, String claimername, String postId) {\n-  //     showDialog(\n-  //       context: context,\n-  //       builder: (BuildContext context) {\n-  //         return AlertDialog(\n-  //           title: Text('Claimed Item : $postTitle',\n-  //               style:\n-  //                   const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n-  //           content: Column(\n-  //             mainAxisSize: MainAxisSize.min,\n-  //             children: [\n-  //               Row(\n-  //                 children: [\n-  //                   const Text('Already claimed by :',\n-  //                       style: TextStyle(fontWeight: FontWeight.bold)),\n-  //                   TextButton(\n-  //                       onPressed: () {\n-  //                         Navigator.push(\n-  //                             context,\n-  //                             MaterialPageRoute(\n-  //                                 builder: (_) =>\n-  //                                     ProfilePage2(uid: postclaimerId)));\n-  //                       },\n-  //                       child: Text(\n-  //                           user!.uid == postclaimerId ? 'You' : claimername,\n-  //                           style: const TextStyle(fontWeight: FontWeight.bold))),\n-  //                 ],\n-  //               ),\n-  //               const SizedBox(height: 10),\n-  //             ],\n-  //           ),\n-  //           actions: [\n-  //             TextButton(\n-  //               onPressed: () {\n-  //                 Navigator.of(context).pop();\n-  //               },\n-  //               child: const Text('Cancel'),\n-  //             ),\n-  //           ],\n-  //         );\n-  //       },\n-  //     );\n-  //   }\n+    void _claimedPost(BuildContext context, String postclaimerId,\n+        String postTitle, String claimername, String postId) {\n+      showDialog(\n+        context: context,\n+        builder: (BuildContext context) {\n+          return AlertDialog(\n+            title: Text('Claimed Item : $postTitle',\n+                style:\n+                    const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n+            content: Column(\n+              mainAxisSize: MainAxisSize.min,\n+              children: [\n+                Row(\n+                  children: [\n+                    const Text('Already claimed by :',\n+                        style: TextStyle(fontWeight: FontWeight.bold)),\n+                    TextButton(\n+                        onPressed: () {\n+                          Navigator.push(\n+                              context,\n+                              MaterialPageRoute(\n+                                  builder: (_) =>\n+                                      ProfilePage2(uid: postclaimerId)));\n+                        },\n+                        child: Text(\n+                            user!.uid == postclaimerId ? 'You' : claimername,\n+                            style: const TextStyle(fontWeight: FontWeight.bold))),\n+                  ],\n+                ),\n+                const SizedBox(height: 10),\n+              ],\n+            ),\n+            actions: [\n+              TextButton(\n+                onPressed: () {\n+                  Navigator.of(context).pop();\n+                },\n+                child: const Text('Cancel'),\n+              ),\n+            ],\n+          );\n+        },\n+      );\n+    }\n \n-  //   Future<void> _sendAnswerToPostmaker(\n-  //     BuildContext context,\n-  //     String answer,\n-  //     String postId,\n-  //     String postmakerId,\n-  //     String statusofRequest,\n-  //   ) async {\n-  //     try {\n-  //       // Reference to the specific post's claims subcollection\n-  //       CollectionReference claimsRef = FirebaseFirestore.instance\n-  //           .collection('posts')\n-  //           .doc(postId) // Get the post document using its ID\n-  //           .collection('claims'); // Access the subcollection\n+    Future<void> _sendAnswerToPostmaker(\n+      BuildContext context,\n+      String answer,\n+      String postId,\n+      String postmakerId,\n+      String statusofRequest,\n+    ) async {\n+      try {\n+        // Reference to the specific post's claims subcollection\n+        CollectionReference claimsRef = FirebaseFirestore.instance\n+            .collection('posts')\n+            .doc(postId) // Get the post document using its ID\n+            .collection('claims'); // Access the subcollection\n \n-  //       // Add a new claim document\n-  //       await claimsRef.add({\n-  //         'senderId': user!.uid,\n-  //         'answer': answer,\n-  //         'claimStatusC': statusofRequest,\n-  //         'timestamp': Timestamp.now(),\n-  //         'isClaimed': false,\n-  //         'receiverId': postmakerId,\n-  //       });\n+        // Add a new claim document\n+        await claimsRef.add({\n+          'senderId': user!.uid,\n+          'answer': answer,\n+          'claimStatusC': statusofRequest,\n+          'timestamp': Timestamp.now(),\n+          'isClaimed': false,\n+          'receiverId': postmakerId,\n+        });\n \n-  //       ScaffoldMessenger.of(context).showSnackBar(\n-  //         const SnackBar(\n-  //           content: Text('Your answer has been sent to the post maker'),\n-  //           behavior: SnackBarBehavior.floating,\n-  //           margin: EdgeInsets.all(16.0),\n-  //         ),\n-  //       );\n-  //     } catch (e) {\n-  //       ScaffoldMessenger.of(context).showSnackBar(\n-  //         SnackBar(\n-  //           content: Text('Failed to send answer: $e'),\n-  //           backgroundColor: Colors.red,\n-  //         ),\n-  //       );\n-  //     }\n-  //   }\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          const SnackBar(\n+            content: Text('Your answer has been sent to the post maker'),\n+            behavior: SnackBarBehavior.floating,\n+            margin: EdgeInsets.all(16.0),\n+          ),\n+        );\n+      } catch (e) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(\n+            content: Text('Failed to send answer: $e'),\n+            backgroundColor: Colors.red,\n+          ),\n+        );\n+      }\n+    }\n \n-  //   void _sharePost(BuildContext context, String title, String description) {\n-  //     final content = 'Check out this post: $title\\nDescription: $description';\n-  //     final snackBar = SnackBar(content: Text('Shared! $content'));\n-  //     ScaffoldMessenger.of(context).showSnackBar(snackBar);\n-  //   }\n+    void _sharePost(BuildContext context, String title, String description) {\n+      final content = 'Check out this post: $title\\nDescription: $description';\n+      final snackBar = SnackBar(content: Text('Shared! $content'));\n+      ScaffoldMessenger.of(context).showSnackBar(snackBar);\n+    }\n \n-  //   void _showDeleteConfirmation(BuildContext context, PostModel post) {\n-  //     showDialog(\n-  //       context: context,\n-  //       builder: (BuildContext context) {\n-  //         return AlertDialog(\n-  //           title: const Text('Delete Post'),\n-  //           content: const Text('Are you sure you want to delete this post?'),\n-  //           actions: <Widget>[\n-  //             TextButton(\n-  //               child: const Text('Cancel'),\n-  //               onPressed: () {\n-  //                 Navigator.of(context).pop();\n-  //               },\n-  //             ),\n-  //             TextButton(\n-  //               child: const Text('Delete'),\n-  //               onPressed: () {\n-  //                 FirebaseFirestore.instance\n-  //                     .collection('posts')\n-  //                     .doc(post.postId)\n-  //                     .delete();\n-  //                 Navigator.of(context).pop();\n-  //               },\n-  //             ),\n-  //           ],\n-  //         );\n-  //       },\n-  //     );\n-  //   }\n+    void _showDeleteConfirmation(BuildContext context, PostModel post) {\n+      showDialog(\n+        context: context,\n+        builder: (BuildContext context) {\n+          return AlertDialog(\n+            title: const Text('Delete Post'),\n+            content: const Text('Are you sure you want to delete this post?'),\n+            actions: <Widget>[\n+              TextButton(\n+                child: const Text('Cancel'),\n+                onPressed: () {\n+                  Navigator.of(context).pop();\n+                },\n+              ),\n+              TextButton(\n+                child: const Text('Delete'),\n+                onPressed: () {\n+                  FirebaseFirestore.instance\n+                      .collection('posts')\n+                      .doc(post.postId)\n+                      .delete();\n+                  Navigator.of(context).pop();\n+                },\n+              ),\n+            ],\n+          );\n+        },\n+      );\n+    }\n \n-  //   void _showFullImageDialog(BuildContext context, String imageUrl) {\n-  //     showDialog(\n-  //       context: context,\n-  //       builder: (BuildContext context) {\n-  //         return Dialog(\n-  //           child: Container(\n-  //             padding: const EdgeInsets.all(10),\n-  //             child: Image.network(\n-  //               imageUrl,\n-  //               fit: BoxFit.cover,\n-  //               width: double.infinity,\n-  //               height: double.infinity,\n-  //             ),\n-  //           ),\n-  //         );\n-  //       },\n-  //     );\n-  //   }\n-  // }\n+    void _showFullImageDialog(BuildContext context, String imageUrl) {\n+      showDialog(\n+        context: context,\n+        builder: (BuildContext context) {\n+          return Dialog(\n+            child: Container(\n+              padding: const EdgeInsets.all(10),\n+              child: Image.network(\n+                imageUrl,\n+                fit: BoxFit.cover,\n+                width: double.infinity,\n+                height: double.infinity,\n+              ),\n+            ),\n+          );\n+        },\n+      );\n+    }\n+  }\n"
                }
            ],
            "date": 1756118752288,
            "name": "Commit-0",
            "content": "// import 'package:carousel_slider/carousel_slider.dart';\n// import 'package:cloud_firestore/cloud_firestore.dart';\n// import 'package:firebase_auth/firebase_auth.dart';\n// import 'package:flutter/material.dart';\n// import 'package:intl/intl.dart';\n// import 'package:l_f/Frontend/Home/Post/post_model.dart';\n// import 'package:l_f/Frontend/Profile/user_see_page.dart';\n\n// class PostDetailsPage extends StatefulWidget {\n//   final String postId;\n//   const PostDetailsPage({super.key, required this.postId});\n\n//   @override\n//   State<PostDetailsPage> createState() => _PostDetailsPageState();\n// }\n\n// class _PostDetailsPageState extends State<PostDetailsPage> {\n//   final Map<String, Map<String, String>> _userCache = {};\n//   User? user = FirebaseAuth.instance.currentUser;\n\n//   String _formatDate(Timestamp? timestamp) {\n//     if (timestamp == null) return 'Not available';\n//     DateTime date = timestamp.toDate();\n//     return DateFormat('dd MMMM yyyy').format(date);\n//   }\n\n//   Future<Map<String, String>> fetchUserNameAndProfilePic(String uid) async {\n//     if (_userCache.containsKey(uid)) {\n//       return _userCache[uid]!;\n//     }\n\n//     try {\n//       DocumentSnapshot userDoc =\n//           await FirebaseFirestore.instance.collection('users').doc(uid).get();\n\n//       if (!userDoc.exists) {\n//         throw Exception(\"User not found.\");\n//       }\n\n//       Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n\n//       String name = userData['name'] ?? 'NITH User';\n//       String profileImage = userData['profileImage'] ?? '';\n\n//       _userCache[uid] = {\n//         'name': name,\n//         'profileImage': profileImage,\n//       };\n\n//       return _userCache[uid]!;\n//     } catch (e) {\n//       print(\"Error fetching user profile: $e\");\n//       throw Exception(\"Error fetching user profile.\");\n//     }\n//   }\n\n//   @override\n//   Widget build(BuildContext context) {\n//     bool isMobile = MediaQuery.of(context).size.width < 830;\n//     return Scaffold(\n//       appBar: AppBar(\n//         backgroundColor: Colors.deepOrange,\n//         foregroundColor: Colors.white,\n//         title: const Text('Post Detail'),\n//       ),\n//       body: StreamBuilder<QuerySnapshot>(\n//         stream: FirebaseFirestore.instance\n//             .collection('posts')\n//             .where('postId', isEqualTo: widget.postId)\n//             .snapshots(),\n//         builder: (context, snapshot) {\n//           if (snapshot.connectionState == ConnectionState.waiting) {\n//             return const Center(child: CircularProgressIndicator());\n//           }\n//           if (snapshot.hasError) {\n//             return const Center(child: Text('Error loading posts'));\n//           }\n\n//           if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n//             return const Center(child: Text('No posts available'));\n//           }\n\n//           final posts = snapshot.data!.docs.map((doc) {\n//             final data = doc.data() as Map<String, dynamic>;\n//             final String uid = data['postmakerId'];\n//             final bool isClaimed = data['isClaimed'] ?? false;\n//             final String? claimerUid = data['postClaimer'];\n//             print(\"post claimerasss: : $claimerUid\");\n//             print(\"POST IDDDDDDDD : ${data['postId']}\");\n//             print(\"Is Post Claimed: $isClaimed\");\n\n//             return fetchUserNameAndProfilePic(uid).then((userDetails) async {\n//               String postClaimerName = '';\n//               String postClaimerProfilePic = '';\n\n//               if (isClaimed && claimerUid != null) {\n//                 final claimerDetails =\n//                     await fetchUserNameAndProfilePic(claimerUid);\n//                 postClaimerName = claimerDetails['name'] ?? 'NITH User';\n//                 postClaimerProfilePic = claimerDetails['profileImage'] ?? '';\n//               }\n\n//               return PostModel(\n//                 userName: userDetails['name'] ?? 'NITH User',\n//                 profileImageUrl: userDetails['profileImage'] ?? '',\n//                 postTime: _formatDate(data['timestamp']),\n//                 itemImages: List<String>.from(\n//                     data['imageUrls'] ?? ['']),\n//                 status: data['status'] ?? '',\n//                 title: data['item'] ?? '',\n//                 location: data['location'] ?? '',\n//                 description: data['description'] ?? '',\n//                 postmakerId: data['postmakerId'],\n//                 question: data['question'],\n//                 postId: data['postId'],\n//                 claimStatus: data['claimStatus'],\n//                 isClaimed: isClaimed,\n//                 postclaimerId: data['postClaimer'],\n//                 postClaimer:\n//                     postClaimerName.isNotEmpty ? postClaimerName : null,\n//                 postClaimerPic: postClaimerProfilePic.isNotEmpty\n//                     ? postClaimerProfilePic\n//                     : null,\n//               );\n//             });\n//           });\n\n//           return FutureBuilder<List<PostModel>>(\n//             future: Future.wait(posts.toList()),\n//             builder: (context, futureSnapshot) {\n//               if (futureSnapshot.connectionState == ConnectionState.waiting) {\n//                 return const Center(child: CircularProgressIndicator());\n//               }\n\n//               if (futureSnapshot.hasError) {\n//                 print(\"Error : ${futureSnapshot.error}\");\n//                 return const Center(child: Text('Error loading posts'));\n//               }\n\n//               final postsList = futureSnapshot.data ?? [];\n\n//               return ListView.builder(\n//                 itemCount: postsList.length,\n//                 itemBuilder: (context, index) {\n//                   final post = postsList[index];\n//                   return Padding(\n//                     padding: const EdgeInsets.all(2.0),\n//                     child: Center(\n//                       child: SizedBox(\n//                         width:\n//                             isMobile ? MediaQuery.of(context).size.width : 600,\n//                         child: Card(\n//                           elevation: 5,\n//                           shape: RoundedRectangleBorder(\n//                             borderRadius: BorderRadius.circular(10),\n//                           ),\n//                           child: Column(\n//                             crossAxisAlignment: CrossAxisAlignment.start,\n//                             children: [\n//                               // Header  of the POST (profiel,name.location,delete)\n//                               GestureDetector(\n//                                 onTap: () {\n//                                   Navigator.push(\n//                                       context,\n//                                       MaterialPageRoute(\n//                                           builder: (_) => ProfilePage2(\n//                                               uid: post.postmakerId)));\n//                                 },\n//                                 child: ListTile(\n//                                   leading: CircleAvatar(\n//                                     radius: 30,\n//                                     backgroundImage:\n//                                         NetworkImage(post.profileImageUrl),\n//                                   ),\n//                                   title: Text(post.userName,\n//                                       style: const TextStyle(\n//                                           fontWeight: FontWeight.bold)),\n//                                   subtitle: Text(\n//                                       \"Location : ${post.location} , NITH\"),\n//                                   trailing: PopupMenuButton<String>(\n//                                     onSelected: (value) {\n//                                       if (value == 'Delete') {\n//                                         if (user!.uid == post.postmakerId) {\n//                                           _showDeleteConfirmation(\n//                                               context, post);\n//                                         } else {\n//                                           ScaffoldMessenger.of(context)\n//                                               .showSnackBar(\n//                                             const SnackBar(\n//                                                 backgroundColor: Colors.red,\n//                                                 content: Text(\n//                                                     \"You can't delete this post\")),\n//                                           );\n//                                         }\n//                                       }\n//                                     },\n//                                     itemBuilder: (BuildContext context) {\n//                                       return {'Delete'}.map((String choice) {\n//                                         return PopupMenuItem<String>(\n//                                           value: choice,\n//                                           child: Text(choice),\n//                                         );\n//                                       }).toList();\n//                                     },\n//                                   ),\n//                                 ),\n//                               ),\n\n//                               // LOST OR FOUND\n//                               Stack(\n//                                 children: [\n//                                   CarouselSlider(\n//                                     options: CarouselOptions(\n//                                       autoPlay: true,\n//                                       height: 500.0,\n//                                       enlargeCenterPage: true,\n//                                     ),\n//                                     items:\n//                                         post.itemImages.map<Widget>((imageUrl) {\n//                                       return GestureDetector(\n//                                         onTap: () {\n//                                           showDialog(\n//                                             context: context,\n//                                             builder: (BuildContext context) {\n//                                               return Dialog(\n//                                                 child: Stack(\n//                                                   children: [\n//                                                     Image.network(imageUrl),\n//                                                     Positioned(\n//                                                       right: 10,\n//                                                       top: 10,\n//                                                       child: IconButton(\n//                                                         icon: const Icon(\n//                                                             Icons.cancel,\n//                                                             color: Colors.red),\n//                                                         onPressed: () {\n//                                                           Navigator.of(context)\n//                                                               .pop();\n//                                                         },\n//                                                       ),\n//                                                     ),\n//                                                   ],\n//                                                 ),\n//                                               );\n//                                             },\n//                                           );\n//                                         },\n//                                         child: ClipRRect(\n//                                           borderRadius:\n//                                               BorderRadius.circular(10),\n//                                           child: Image.network(\n//                                             imageUrl,\n//                                             fit: BoxFit.cover,\n//                                             width: MediaQuery.of(context)\n//                                                 .size\n//                                                 .width,\n//                                             errorBuilder:\n//                                                 (context, error, stackTrace) {\n//                                               return const Icon(Icons.error);\n//                                             },\n//                                           ),\n//                                         ),\n//                                       );\n//                                     }).toList(),\n//                                   ),\n//                                   Positioned(\n//                                     top: isMobile ? 16 : 6,\n//                                     left: 50,\n//                                     child: Container(\n//                                       padding: const EdgeInsets.symmetric(\n//                                           horizontal: 10, vertical: 5),\n//                                       decoration: BoxDecoration(\n//                                         color: post.status == 'Lost'\n//                                             ? Colors.red\n//                                             : Colors.green,\n//                                         borderRadius: BorderRadius.circular(5),\n//                                       ),\n//                                       child: Text(\n//                                         post.status,\n//                                         style: const TextStyle(\n//                                           color: Colors.white,\n//                                           fontWeight: FontWeight.bold,\n//                                         ),\n//                                       ),\n//                                     ),\n//                                   ),\n//                                 ],\n//                               ),\n\n//                               Padding(\n//                                 padding: const EdgeInsets.symmetric(\n//                                     horizontal: 18.0, vertical: 10),\n//                                 child: Column(\n//                                   crossAxisAlignment: CrossAxisAlignment.start,\n//                                   children: [\n//                                     // ITEM item,date\n//                                     Row(\n//                                       mainAxisAlignment:\n//                                           MainAxisAlignment.spaceBetween,\n//                                       children: [\n//                                         Text(\n//                                           post.title == 'Other'\n//                                               ? '${post.status} Item'\n//                                               : post.title,\n//                                           overflow: TextOverflow.clip,\n//                                           softWrap: true,\n//                                           style: const TextStyle(\n//                                               fontSize: 18,\n//                                               fontWeight: FontWeight.bold),\n//                                         ),\n//                                         const SizedBox(width: 5),\n//                                         Row(\n//                                           children: [\n//                                             Text(\"${post.status} On : \",\n//                                                 overflow: TextOverflow.clip,\n//                                                 softWrap: true,\n//                                                 style: const TextStyle(\n//                                                     color: Colors.red,\n//                                                     fontWeight:\n//                                                         FontWeight.bold)),\n//                                             Text(post.postTime,\n//                                                 style: const TextStyle(\n//                                                     fontWeight:\n//                                                         FontWeight.bold)),\n//                                           ],\n//                                         ),\n//                                       ],\n//                                     ),\n//                                     const SizedBox(height: 5),\n\n//                                     //DESCRIPTION\n//                                     Row(\n//                                       crossAxisAlignment: CrossAxisAlignment\n//                                           .start, // Align text to the top\n//                                       children: [\n//                                         const Text(\n//                                           \"Description : \",\n//                                           style: TextStyle(\n//                                             fontWeight: FontWeight.bold,\n//                                           ),\n//                                         ),\n//                                         const SizedBox(width: 4),\n//                                         Expanded(\n//                                           child: Text(\n//                                             post.description,\n//                                             overflow: TextOverflow.clip,\n//                                             softWrap: true,\n//                                             style: const TextStyle(\n//                                               fontSize: 14,\n//                                             ),\n//                                           ),\n//                                         ),\n//                                       ],\n//                                     ),\n//                                     const SizedBox(height: 10),\n\n//                                     //BUTTONNS\n//                                     StreamBuilder<QuerySnapshot>(\n//                                         stream: FirebaseFirestore.instance\n//                                             .collection('posts')\n//                                             .doc(post.postId)\n//                                             .collection('claims')\n//                                             .where('senderId',\n//                                                 isEqualTo: user!.uid)\n//                                             .snapshots(),\n//                                         builder: (context, claimSnapshot) {\n//                                           if (claimSnapshot.connectionState ==\n//                                               ConnectionState.waiting) {\n//                                             return const Center(\n//                                                 child:\n//                                                     CircularProgressIndicator());\n//                                           }\n\n//                                           bool userHasRequestedClaim = false;\n\n//                                           if (claimSnapshot.hasData &&\n//                                               claimSnapshot\n//                                                   .data!.docs.isNotEmpty) {\n//                                             final claimData = claimSnapshot\n//                                                 .data!.docs.first\n//                                                 .data() as Map<String, dynamic>;\n\n//                                             if (claimData['claimStatusC'] ==\n//                                                 'requested') {\n//                                               userHasRequestedClaim = true;\n//                                             }\n//                                             if (claimData['claimStatusC'] ==\n//                                                     'accepted' ||\n//                                                 claimData['claimStatusC'] ==\n//                                                     'declined') {\n//                                               userHasRequestedClaim = false;\n//                                             }\n//                                           }\n\n//                                           return Row(\n//                                               mainAxisAlignment:\n//                                                   MainAxisAlignment.spaceAround,\n//                                               children: [\n//                                                 GestureDetector(\n//                                                   onTap: () {\n//                                                     _sharePost(\n//                                                         context,\n//                                                         post.title,\n//                                                         post.description);\n//                                                   },\n//                                                   child: const Row(\n//                                                     children: [\n//                                                       Icon(Icons.share_rounded),\n//                                                       SizedBox(width: 3),\n//                                                       Text('Share'),\n//                                                     ],\n//                                                   ),\n//                                                 ),\n\n//                                                 if (post.postmakerId !=\n//                                                     user!.uid)\n//                                                   ElevatedButton(\n//                                                     onPressed: () {\n//                                                       _replyToPostmaker(\n//                                                           context,\n//                                                           post.postmakerId,\n//                                                           post.userName,\n//                                                           post.postId);\n//                                                     },\n//                                                     style: ElevatedButton\n//                                                         .styleFrom(\n//                                                       backgroundColor:\n//                                                           Colors.green.shade600,\n//                                                       shape:\n//                                                           RoundedRectangleBorder(\n//                                                         borderRadius:\n//                                                             BorderRadius\n//                                                                 .circular(10),\n//                                                       ),\n//                                                     ),\n//                                                     child: const Row(\n//                                                       mainAxisAlignment:\n//                                                           MainAxisAlignment\n//                                                               .center,\n//                                                       children: [\n//                                                         Icon(Icons.reply,\n//                                                             color:\n//                                                                 Colors.white),\n//                                                         SizedBox(width: 3),\n//                                                         Text(\n//                                                           'Reply',\n//                                                           style: TextStyle(\n//                                                               fontSize: 16,\n//                                                               color:\n//                                                                   Colors.white),\n//                                                         ),\n//                                                       ],\n//                                                     ),\n//                                                   ),\n\n//                                                 //Claimed Button\n//                                                 if (post.status != 'Lost' &&\n//                                                     post.isClaimed == true)\n//                                                   ElevatedButton(\n//                                                     onPressed: () {\n//                                                       _claimedPost(\n//                                                           context,\n//                                                           post.postclaimerId!,\n//                                                           post.title,\n//                                                           post.postClaimer!,\n//                                                           post.postId);\n//                                                     },\n//                                                     style: ElevatedButton\n//                                                         .styleFrom(\n//                                                       backgroundColor: Colors\n//                                                           .deepOrange.shade600,\n//                                                       shape:\n//                                                           RoundedRectangleBorder(\n//                                                         borderRadius:\n//                                                             BorderRadius\n//                                                                 .circular(10),\n//                                                       ),\n//                                                     ),\n//                                                     child: const Row(\n//                                                       mainAxisAlignment:\n//                                                           MainAxisAlignment\n//                                                               .center,\n//                                                       children: [\n//                                                         Icon(Icons.back_hand,\n//                                                             color:\n//                                                                 Colors.white),\n//                                                         SizedBox(width: 3),\n//                                                         Text(\n//                                                           'Claimed',\n//                                                           style: TextStyle(\n//                                                               fontSize: 16,\n//                                                               color:\n//                                                                   Colors.white),\n//                                                         ),\n//                                                       ],\n//                                                     ),\n//                                                   ),\n\n//                                                 // Claim Buttton\n//                                                 if (post.postmakerId !=\n//                                                         user!.uid &&\n//                                                     post.status == 'Found' &&\n//                                                     post.isClaimed == false &&\n//                                                     !userHasRequestedClaim)\n//                                                   ElevatedButton(\n//                                                     onPressed: () {\n//                                                       _claimPost(\n//                                                           context,\n//                                                           post.postmakerId,\n//                                                           post.title,\n//                                                           post.question!,\n//                                                           post.description,\n//                                                           post.postId);\n//                                                     },\n//                                                     style: ElevatedButton\n//                                                         .styleFrom(\n//                                                       backgroundColor: Colors\n//                                                           .deepOrange.shade600,\n//                                                       shape:\n//                                                           RoundedRectangleBorder(\n//                                                         borderRadius:\n//                                                             BorderRadius\n//                                                                 .circular(10),\n//                                                       ),\n//                                                     ),\n//                                                     child: const Row(\n//                                                       mainAxisAlignment:\n//                                                           MainAxisAlignment\n//                                                               .center,\n//                                                       children: [\n//                                                         Icon(Icons.back_hand,\n//                                                             color:\n//                                                                 Colors.white),\n//                                                         SizedBox(width: 6),\n//                                                         Text(\n//                                                           'Claim',\n//                                                           style: TextStyle(\n//                                                               fontSize: 16,\n//                                                               color:\n//                                                                   Colors.white),\n//                                                         ),\n//                                                       ],\n//                                                     ),\n//                                                   ),\n\n//                                                 // Request Button\n//                                                 if (post.postmakerId !=\n//                                                         user!.uid &&\n//                                                     post.status == 'Found' &&\n//                                                     post.isClaimed == false &&\n//                                                     userHasRequestedClaim)\n//                                                   ElevatedButton(\n//                                                     onPressed: () {},\n//                                                     style: ElevatedButton\n//                                                         .styleFrom(\n//                                                       backgroundColor: Colors\n//                                                           .deepOrange.shade600,\n//                                                       shape:\n//                                                           RoundedRectangleBorder(\n//                                                         borderRadius:\n//                                                             BorderRadius\n//                                                                 .circular(10),\n//                                                       ),\n//                                                     ),\n//                                                     child: const Row(\n//                                                       mainAxisAlignment:\n//                                                           MainAxisAlignment\n//                                                               .center,\n//                                                       children: [\n//                                                         Icon(Icons.back_hand,\n//                                                             color:\n//                                                                 Colors.white),\n//                                                         SizedBox(width: 3),\n//                                                         Text(\n//                                                           'Requested',\n//                                                           style: TextStyle(\n//                                                               fontSize: 16,\n//                                                               color:\n//                                                                   Colors.white),\n//                                                         ),\n//                                                       ],\n//                                                     ),\n//                                                   )\n//                                               ]);\n//                                         })\n//                                   ],\n//                                 ),\n//                               ),\n//                             ],\n//                           ),\n//                         ),\n//                       ),\n//                     ),\n//                   );\n//                 },\n//               );\n//             },\n//           );\n//         },\n//       ),\n//     );\n//   }\n\n//   void _replyToPostmaker(BuildContext context, String postmakerId,\n//       String postmaker, String postId) {\n//     TextEditingController messageController = TextEditingController();\n\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return AlertDialog(\n//           title: const Text('Send a Reply'),\n//           content: Column(\n//             mainAxisSize: MainAxisSize.min,\n//             children: [\n//               Row(\n//                 children: [\n//                   const Text('Reply to'),\n//                   TextButton(\n//                       onPressed: () {\n//                         Navigator.push(\n//                             context,\n//                             MaterialPageRoute(\n//                                 builder: (_) =>\n//                                     ProfilePage2(uid: postmakerId)));\n//                       },\n//                       child: Text(postmaker))\n//                 ],\n//               ),\n//               const SizedBox(height: 10),\n//               TextField(\n//                 controller: messageController,\n//                 decoration: const InputDecoration(\n//                   labelText: 'Your message',\n//                   alignLabelWithHint: true,\n//                   border: OutlineInputBorder(),\n//                 ),\n//                 maxLines: 3,\n//               ),\n//             ],\n//           ),\n//           actions: [\n//             TextButton(\n//               onPressed: () {\n//                 Navigator.of(context).pop(); // Close the dialog without sending\n//               },\n//               child: const Text('Cancel'),\n//             ),\n//             TextButton(\n//               onPressed: () {\n//                 String message = messageController.text.trim();\n//                 if (message.isNotEmpty) {\n//                   _sendMessageToPostmaker(\n//                       context, postmakerId, message, postId);\n//                 }\n//                 ScaffoldMessenger.of(context).showSnackBar(\n//                   const SnackBar(\n//                     content: Text('Message sent successfully'),\n//                     behavior: SnackBarBehavior.floating,\n//                     margin: EdgeInsets.all(16.0),\n//                   ),\n//                 );\n//                 Navigator.of(context).pop(); // Close the dialog after sending\n//               },\n//               child: const Text('Send'),\n//             ),\n//           ],\n//         );\n//       },\n//     );\n//   }\n\n//   Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n//       String message, String postId) async {\n//     try {\n//       // Add a chat message to Firestore\n//       await FirebaseFirestore.instance.collection('chats').add({\n//         'senderId': user!.uid,\n//         'receiverId': postmakerId,\n//         'participants': [user!.uid, postmakerId],\n//         'message': message,\n//         'postId': postId,\n//         'timestamp': Timestamp.now(),\n//       });\n\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         const SnackBar(\n//           content: Text('Message sent successfully'),\n//           behavior: SnackBarBehavior.floating,\n//           margin: EdgeInsets.all(16.0),\n//         ),\n//       );\n//     } catch (e) {\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         SnackBar(\n//           content: Text('Failed to send message: $e'),\n//           backgroundColor: Colors.red,\n//         ),\n//       );\n//     }\n//   }\n\n//   void _claimPost(BuildContext context, String postmakerId, String postTitle,\n//       String postQuestion, String postdescription, String postId) {\n//     TextEditingController answerController = TextEditingController();\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return AlertDialog(\n//           title: const Text('Claim Item'),\n//           content: Column(\n//             mainAxisSize: MainAxisSize.min,\n//             children: [\n//               const Text('Question from the post owner:'),\n//               const SizedBox(height: 10),\n//               Text(postQuestion,\n//                   style: const TextStyle(fontWeight: FontWeight.bold)),\n//               const SizedBox(height: 20),\n//               TextField(\n//                 controller: answerController,\n//                 decoration: const InputDecoration(\n//                   labelText: 'Your answer',\n//                   alignLabelWithHint: true,\n//                   border: OutlineInputBorder(),\n//                 ),\n//                 maxLines: 3,\n//               ),\n//             ],\n//           ),\n//           actions: [\n//             TextButton(\n//               onPressed: () {\n//                 Navigator.of(context).pop();\n//               },\n//               child: const Text('Cancel'),\n//             ),\n//             TextButton(\n//               onPressed: () {\n//                 String answer = answerController.text.trim();\n//                 if (answer.isNotEmpty) {\n//                   _sendAnswerToPostmaker(\n//                       context, answer, postId, postmakerId, 'requested');\n//                 }\n//                 ScaffoldMessenger.of(context).showSnackBar(\n//                   const SnackBar(\n//                     content: Text('Request sent successfully'),\n//                     behavior: SnackBarBehavior.floating,\n//                     margin: EdgeInsets.all(16.0),\n//                   ),\n//                 );\n//                 Navigator.of(context).pop();\n//               },\n//               child: const Text('Send'),\n//             ),\n//           ],\n//         );\n//       },\n//     );\n//   }\n\n//   void _claimedPost(BuildContext context, String postclaimerId,\n//       String postTitle, String claimername, String postId) {\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return AlertDialog(\n//           title: Text('Claimed Item : $postTitle',\n//               style:\n//                   const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n//           content: Column(\n//             mainAxisSize: MainAxisSize.min,\n//             children: [\n//               Row(\n//                 children: [\n//                   const Text('Already claimed by :',\n//                       style: TextStyle(fontWeight: FontWeight.bold)),\n//                   TextButton(\n//                       onPressed: () {\n//                         Navigator.push(\n//                             context,\n//                             MaterialPageRoute(\n//                                 builder: (_) =>\n//                                     ProfilePage2(uid: postclaimerId)));\n//                       },\n//                       child: Text(\n//                           user!.uid == postclaimerId ? 'You' : claimername,\n//                           style: const TextStyle(fontWeight: FontWeight.bold))),\n//                 ],\n//               ),\n//               const SizedBox(height: 10),\n//             ],\n//           ),\n//           actions: [\n//             TextButton(\n//               onPressed: () {\n//                 Navigator.of(context).pop();\n//               },\n//               child: const Text('Cancel'),\n//             ),\n//           ],\n//         );\n//       },\n//     );\n//   }\n\n//   Future<void> _sendAnswerToPostmaker(\n//     BuildContext context,\n//     String answer,\n//     String postId,\n//     String postmakerId,\n//     String statusofRequest,\n//   ) async {\n//     try {\n//       // Reference to the specific post's claims subcollection\n//       CollectionReference claimsRef = FirebaseFirestore.instance\n//           .collection('posts')\n//           .doc(postId) // Get the post document using its ID\n//           .collection('claims'); // Access the subcollection\n\n//       // Add a new claim document\n//       await claimsRef.add({\n//         'senderId': user!.uid,\n//         'answer': answer,\n//         'claimStatusC': statusofRequest,\n//         'timestamp': Timestamp.now(),\n//         'isClaimed': false,\n//         'receiverId': postmakerId,\n//       });\n\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         const SnackBar(\n//           content: Text('Your answer has been sent to the post maker'),\n//           behavior: SnackBarBehavior.floating,\n//           margin: EdgeInsets.all(16.0),\n//         ),\n//       );\n//     } catch (e) {\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         SnackBar(\n//           content: Text('Failed to send answer: $e'),\n//           backgroundColor: Colors.red,\n//         ),\n//       );\n//     }\n//   }\n\n//   void _sharePost(BuildContext context, String title, String description) {\n//     final content = 'Check out this post: $title\\nDescription: $description';\n//     final snackBar = SnackBar(content: Text('Shared! $content'));\n//     ScaffoldMessenger.of(context).showSnackBar(snackBar);\n//   }\n\n//   void _showDeleteConfirmation(BuildContext context, PostModel post) {\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return AlertDialog(\n//           title: const Text('Delete Post'),\n//           content: const Text('Are you sure you want to delete this post?'),\n//           actions: <Widget>[\n//             TextButton(\n//               child: const Text('Cancel'),\n//               onPressed: () {\n//                 Navigator.of(context).pop();\n//               },\n//             ),\n//             TextButton(\n//               child: const Text('Delete'),\n//               onPressed: () {\n//                 FirebaseFirestore.instance\n//                     .collection('posts')\n//                     .doc(post.postId)\n//                     .delete();\n//                 Navigator.of(context).pop();\n//               },\n//             ),\n//           ],\n//         );\n//       },\n//     );\n//   }\n\n//   void _showFullImageDialog(BuildContext context, String imageUrl) {\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return Dialog(\n//           child: Container(\n//             padding: const EdgeInsets.all(10),\n//             child: Image.network(\n//               imageUrl,\n//               fit: BoxFit.cover,\n//               width: double.infinity,\n//               height: double.infinity,\n//             ),\n//           ),\n//         );\n//       },\n//     );\n//   }\n// }\n"
        }
    ]
}