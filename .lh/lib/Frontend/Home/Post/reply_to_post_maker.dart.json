{
    "sourceFile": "lib/Frontend/Home/Post/reply_to_post_maker.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1756119039693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756122879905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,250 +1,250 @@\n-// import 'package:cloud_firestore/cloud_firestore.dart';\n-// import 'package:firebase_auth/firebase_auth.dart';\n-// import 'package:flutter/material.dart';\n-// import 'package:l_f/Frontend/Profile/user_see_page.dart';\n+import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:flutter/material.dart';\n+import 'package:l_f/Frontend/Profile/user_see_page.dart';\n \n-// class ReplyToPostMaker {\n-//   Future<void> sendAnswerToPostmaker(\n-//       BuildContext context,\n-//       String answer,\n-//       String postId,\n-//       String postmakerId,\n-//       String statusofRequest,\n-//       User? user) async {\n-//     try {\n-//       // Reference to the specific post's claims subcollection\n-//       CollectionReference claimsRef = FirebaseFirestore.instance\n-//           .collection('posts')\n-//           .doc(postId) // Get the post document using its ID\n-//           .collection('claims'); // Access the subcollection\n+class ReplyToPostMaker {\n+  Future<void> sendAnswerToPostmaker(\n+      BuildContext context,\n+      String answer,\n+      String postId,\n+      String postmakerId,\n+      String statusofRequest,\n+      User? user) async {\n+    try {\n+      // Reference to the specific post's claims subcollection\n+      CollectionReference claimsRef = FirebaseFirestore.instance\n+          .collection('posts')\n+          .doc(postId) // Get the post document using its ID\n+          .collection('claims'); // Access the subcollection\n \n-//       // Add a new claim document\n-//       await claimsRef.add({\n-//         'senderId': user!.uid,\n-//         'answer': answer,\n-//         'claimStatusC': statusofRequest,\n-//         'timestamp': Timestamp.now(),\n-//         'isClaimed': false,\n-//         'receiverId': postmakerId,\n-//       });\n+      // Add a new claim document\n+      await claimsRef.add({\n+        'senderId': user!.uid,\n+        'answer': answer,\n+        'claimStatusC': statusofRequest,\n+        'timestamp': Timestamp.now(),\n+        'isClaimed': false,\n+        'receiverId': postmakerId,\n+      });\n \n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         const SnackBar(\n-//           content: Text('Your answer has been sent to the post maker'),\n-//           behavior: SnackBarBehavior.floating,\n-//           margin: EdgeInsets.all(16.0),\n-//         ),\n-//       );\n-//     } catch (e) {\n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         SnackBar(\n-//           content: Text('Failed to send answer: $e'),\n-//           backgroundColor: Colors.red,\n-//         ),\n-//       );\n-//     }\n-//   }\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Your answer has been sent to the post maker'),\n+          behavior: SnackBarBehavior.floating,\n+          margin: EdgeInsets.all(16.0),\n+        ),\n+      );\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          content: Text('Failed to send answer: $e'),\n+          backgroundColor: Colors.red,\n+        ),\n+      );\n+    }\n+  }\n \n-//   void claimedPost(BuildContext context, String postclaimerId, String postTitle,\n-//       String claimername, String postId, User? user) {\n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: Text('Claimed Item : $postTitle',\n-//               style:\n-//                   const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n-//           content: Column(\n-//             mainAxisSize: MainAxisSize.min,\n-//             children: [\n-//               Row(\n-//                 children: [\n-//                   const Text('Already claimed by :',\n-//                       style: TextStyle(fontWeight: FontWeight.bold)),\n-//                   TextButton(\n-//                       onPressed: () {\n-//                         Navigator.push(\n-//                             context,\n-//                             MaterialPageRoute(\n-//                                 builder: (_) =>\n-//                                     ProfilePage2(uid: postclaimerId)));\n-//                       },\n-//                       child: Text(\n-//                           user!.uid == postclaimerId ? 'You' : claimername,\n-//                           style: const TextStyle(fontWeight: FontWeight.bold))),\n-//                 ],\n-//               ),\n-//               const SizedBox(height: 10),\n-//             ],\n-//           ),\n-//           actions: [\n-//             TextButton(\n-//               onPressed: () {\n-//                 Navigator.of(context).pop();\n-//               },\n-//               child: const Text('Cancel'),\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+  void claimedPost(BuildContext context, String postclaimerId, String postTitle,\n+      String claimername, String postId, User? user) {\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: Text('Claimed Item : $postTitle',\n+              style:\n+                  const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              Row(\n+                children: [\n+                  const Text('Already claimed by :',\n+                      style: TextStyle(fontWeight: FontWeight.bold)),\n+                  TextButton(\n+                      onPressed: () {\n+                        Navigator.push(\n+                            context,\n+                            MaterialPageRoute(\n+                                builder: (_) =>\n+                                    ProfilePage2(uid: postclaimerId)));\n+                      },\n+                      child: Text(\n+                          user!.uid == postclaimerId ? 'You' : claimername,\n+                          style: const TextStyle(fontWeight: FontWeight.bold))),\n+                ],\n+              ),\n+              const SizedBox(height: 10),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Cancel'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   void replyToPostmaker(BuildContext context, String postmakerId,\n-//       String postmaker, String postId, User? user) {\n-//     TextEditingController messageController = TextEditingController();\n+  void replyToPostmaker(BuildContext context, String postmakerId,\n+      String postmaker, String postId, User? user) {\n+    TextEditingController messageController = TextEditingController();\n \n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: const Text('Send a Reply'),\n-//           content: Column(\n-//             mainAxisSize: MainAxisSize.min,\n-//             children: [\n-//               Row(\n-//                 children: [\n-//                   const Text('Reply to'),\n-//                   TextButton(\n-//                       onPressed: () {\n-//                         Navigator.push(\n-//                             context,\n-//                             MaterialPageRoute(\n-//                                 builder: (_) =>\n-//                                     ProfilePage2(uid: postmakerId)));\n-//                       },\n-//                       child: Text(postmaker))\n-//                 ],\n-//               ),\n-//               const SizedBox(height: 10),\n-//               TextField(\n-//                 controller: messageController,\n-//                 decoration: const InputDecoration(\n-//                   labelText: 'Your message',\n-//                   alignLabelWithHint: true,\n-//                   border: OutlineInputBorder(),\n-//                 ),\n-//                 maxLines: 3,\n-//               ),\n-//             ],\n-//           ),\n-//           actions: [\n-//             TextButton(\n-//               onPressed: () {\n-//                 Navigator.of(context).pop(); // Close the dialog without sending\n-//               },\n-//               child: const Text('Cancel'),\n-//             ),\n-//             TextButton(\n-//               onPressed: () {\n-//                 String message = messageController.text.trim();\n-//                 if (message.isNotEmpty) {\n-//                   ReplyToPostMaker().sendMessageToPostmaker(\n-//                       context, postmakerId, message, postId, user!);\n-//                 }\n-//                 ScaffoldMessenger.of(context).showSnackBar(\n-//                   const SnackBar(\n-//                     content: Text('Message sent successfully'),\n-//                     behavior: SnackBarBehavior.floating,\n-//                     margin: EdgeInsets.all(16.0),\n-//                   ),\n-//                 );\n-//                 Navigator.of(context).pop(); // Close the dialog after sending\n-//               },\n-//               child: const Text('Send'),\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Send a Reply'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              Row(\n+                children: [\n+                  const Text('Reply to'),\n+                  TextButton(\n+                      onPressed: () {\n+                        Navigator.push(\n+                            context,\n+                            MaterialPageRoute(\n+                                builder: (_) =>\n+                                    ProfilePage2(uid: postmakerId)));\n+                      },\n+                      child: Text(postmaker))\n+                ],\n+              ),\n+              const SizedBox(height: 10),\n+              TextField(\n+                controller: messageController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your message',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop(); // Close the dialog without sending\n+              },\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String message = messageController.text.trim();\n+                if (message.isNotEmpty) {\n+                  ReplyToPostMaker().sendMessageToPostmaker(\n+                      context, postmakerId, message, postId, user!);\n+                }\n+                ScaffoldMessenger.of(context).showSnackBar(\n+                  const SnackBar(\n+                    content: Text('Message sent successfully'),\n+                    behavior: SnackBarBehavior.floating,\n+                    margin: EdgeInsets.all(16.0),\n+                  ),\n+                );\n+                Navigator.of(context).pop(); // Close the dialog after sending\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   void claimPost(BuildContext context, String postmakerId, String postTitle,\n-//       String postQuestion, String postdescription, String postId, User? user) {\n-//     TextEditingController answerController = TextEditingController();\n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: const Text('Claim Item'),\n-//           content: Column(\n-//             mainAxisSize: MainAxisSize.min,\n-//             children: [\n-//               const Text('Question from the post owner:'),\n-//               const SizedBox(height: 10),\n-//               Text(postQuestion,\n-//                   style: const TextStyle(fontWeight: FontWeight.bold)),\n-//               const SizedBox(height: 20),\n-//               TextField(\n-//                 controller: answerController,\n-//                 decoration: const InputDecoration(\n-//                   labelText: 'Your answer',\n-//                   alignLabelWithHint: true,\n-//                   border: OutlineInputBorder(),\n-//                 ),\n-//                 maxLines: 3,\n-//               ),\n-//             ],\n-//           ),\n-//           actions: [\n-//             TextButton(\n-//               onPressed: () {\n-//                 Navigator.of(context).pop();\n-//               },\n-//               child: const Text('Cancel'),\n-//             ),\n-//             TextButton(\n-//               onPressed: () {\n-//                 String answer = answerController.text.trim();\n-//                 if (answer.isNotEmpty) {\n-//                   ReplyToPostMaker().sendAnswerToPostmaker(\n-//                       context, answer, postId, postmakerId, 'requested', user);\n-//                   print('SENT DATATATAT : $answer, \" \", $postId, \"__\" , $postmakerId');\n-//                 }\n-//                 ScaffoldMessenger.of(context).showSnackBar(\n-//                   const SnackBar(\n-//                     content: Text('Request sent successfully'),\n-//                     behavior: SnackBarBehavior.floating,\n-//                     margin: EdgeInsets.all(16.0),\n-//                   ),\n-//                 );\n-//                 Navigator.of(context).pop();\n-//               },\n-//               child: const Text('Send'),\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+  void claimPost(BuildContext context, String postmakerId, String postTitle,\n+      String postQuestion, String postdescription, String postId, User? user) {\n+    TextEditingController answerController = TextEditingController();\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Claim Item'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              const Text('Question from the post owner:'),\n+              const SizedBox(height: 10),\n+              Text(postQuestion,\n+                  style: const TextStyle(fontWeight: FontWeight.bold)),\n+              const SizedBox(height: 20),\n+              TextField(\n+                controller: answerController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your answer',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String answer = answerController.text.trim();\n+                if (answer.isNotEmpty) {\n+                  ReplyToPostMaker().sendAnswerToPostmaker(\n+                      context, answer, postId, postmakerId, 'requested', user);\n+                  print('SENT DATATATAT : $answer, \" \", $postId, \"__\" , $postmakerId');\n+                }\n+                ScaffoldMessenger.of(context).showSnackBar(\n+                  const SnackBar(\n+                    content: Text('Request sent successfully'),\n+                    behavior: SnackBarBehavior.floating,\n+                    margin: EdgeInsets.all(16.0),\n+                  ),\n+                );\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   Future<void> sendMessageToPostmaker(BuildContext context, String postmakerId,\n-//       String message, String postId, User user) async {\n-//     try {\n-//       // Add a chat message to Firestore\n-//       await FirebaseFirestore.instance.collection('chats').add({\n-//         'senderId': user.uid,\n-//         'receiverId': postmakerId,\n-//         'participants': [user.uid, postmakerId],\n-//         'message': message,\n-//         'postId': postId,\n-//         'timestamp': Timestamp.now(),\n-//       });\n+  Future<void> sendMessageToPostmaker(BuildContext context, String postmakerId,\n+      String message, String postId, User user) async {\n+    try {\n+      // Add a chat message to Firestore\n+      await FirebaseFirestore.instance.collection('chats').add({\n+        'senderId': user.uid,\n+        'receiverId': postmakerId,\n+        'participants': [user.uid, postmakerId],\n+        'message': message,\n+        'postId': postId,\n+        'timestamp': Timestamp.now(),\n+      });\n \n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         const SnackBar(\n-//           content: Text('Message sent successfully'),\n-//           behavior: SnackBarBehavior.floating,\n-//           margin: EdgeInsets.all(16.0),\n-//         ),\n-//       );\n-//     } catch (e) {\n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         SnackBar(\n-//           content: Text('Failed to send message: $e'),\n-//           backgroundColor: Colors.red,\n-//         ),\n-//       );\n-//     }\n-//   }\n-// }\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Message sent successfully'),\n+          behavior: SnackBarBehavior.floating,\n+          margin: EdgeInsets.all(16.0),\n+        ),\n+      );\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          content: Text('Failed to send message: $e'),\n+          backgroundColor: Colors.red,\n+        ),\n+      );\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1756123458869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,13 +62,9 @@\n                   const Text('Already claimed by :',\n                       style: TextStyle(fontWeight: FontWeight.bold)),\n                   TextButton(\n                       onPressed: () {\n-                        Navigator.push(\n-                            context,\n-                            MaterialPageRoute(\n-                                builder: (_) =>\n-                                    ProfilePage2(uid: postclaimerId)));\n+                     \n                       },\n                       child: Text(\n                           user!.uid == postclaimerId ? 'You' : claimername,\n                           style: const TextStyle(fontWeight: FontWeight.bold))),\n"
                },
                {
                    "date": 1756123464174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,21 @@\n                   const Text('Already claimed by :',\n                       style: TextStyle(fontWeight: FontWeight.bold)),\n                   TextButton(\n                       onPressed: () {\n-                     \n+                       Navigator.push(\n+                        context,\n+                        PageRouteBuilder(\n+                          transitionDuration: const Duration(milliseconds: 500),\n+                          pageBuilder: (_, __, ___) => ProfilePage2(uid: uid),\n+                          transitionsBuilder: (context, animation, secondaryAnimation, child) {\n+                            return FadeTransition(\n+                              opacity: animation,\n+                              child: child,\n+                            );\n+                          },\n+                        ),\n+                      );\n                       },\n                       child: Text(\n                           user!.uid == postclaimerId ? 'You' : claimername,\n                           style: const TextStyle(fontWeight: FontWeight.bold))),\n"
                },
                {
                    "date": 1756123470033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n                        Navigator.push(\n                         context,\n                         PageRouteBuilder(\n                           transitionDuration: const Duration(milliseconds: 500),\n-                          pageBuilder: (_, __, ___) => ProfilePage2(uid: uid),\n+                          pageBuilder: (_, __, ___) => ProfilePage2(uid: postclaimerId),\n                           transitionsBuilder: (context, animation, secondaryAnimation, child) {\n                             return FadeTransition(\n                               opacity: animation,\n                               child: child,\n"
                },
                {
                    "date": 1756123476456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,21 +62,24 @@\n                   const Text('Already claimed by :',\n                       style: TextStyle(fontWeight: FontWeight.bold)),\n                   TextButton(\n                       onPressed: () {\n-                       Navigator.push(\n-                        context,\n-                        PageRouteBuilder(\n-                          transitionDuration: const Duration(milliseconds: 500),\n-                          pageBuilder: (_, __, ___) => ProfilePage2(uid: postclaimerId),\n-                          transitionsBuilder: (context, animation, secondaryAnimation, child) {\n-                            return FadeTransition(\n-                              opacity: animation,\n-                              child: child,\n-                            );\n-                          },\n-                        ),\n-                      );\n+                        Navigator.push(\n+                          context,\n+                          PageRouteBuilder(\n+                            transitionDuration:\n+                                const Duration(milliseconds: 500),\n+                            pageBuilder: (_, __, ___) =>\n+                                ProfilePage2(uid: postclaimerId),\n+                            transitionsBuilder: (context, animation,\n+                                secondaryAnimation, child) {\n+                              return FadeTransition(\n+                                opacity: animation,\n+                                child: child,\n+                              );\n+                            },\n+                          ),\n+                        );\n                       },\n                       child: Text(\n                           user!.uid == postclaimerId ? 'You' : claimername,\n                           style: const TextStyle(fontWeight: FontWeight.bold))),\n@@ -206,9 +209,10 @@\n                 String answer = answerController.text.trim();\n                 if (answer.isNotEmpty) {\n                   ReplyToPostMaker().sendAnswerToPostmaker(\n                       context, answer, postId, postmakerId, 'requested', user);\n-                  print('SENT DATATATAT : $answer, \" \", $postId, \"__\" , $postmakerId');\n+                  print(\n+                      'SENT DATATATAT : $answer, \" \", $postId, \"__\" , $postmakerId');\n                 }\n                 ScaffoldMessenger.of(context).showSnackBar(\n                   const SnackBar(\n                     content: Text('Request sent successfully'),\n"
                },
                {
                    "date": 1756123491043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,13 +117,9 @@\n                 children: [\n                   const Text('Reply to'),\n                   TextButton(\n                       onPressed: () {\n-                        Navigator.push(\n-                            context,\n-                            MaterialPageRoute(\n-                                builder: (_) =>\n-                                    ProfilePage2(uid: postmakerId)));\n+                      \n                       },\n                       child: Text(postmaker))\n                 ],\n               ),\n"
                },
                {
                    "date": 1756123499956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,21 @@\n                 children: [\n                   const Text('Reply to'),\n                   TextButton(\n                       onPressed: () {\n-                      \n+                        Navigator.push(\n+                        context,\n+                        PageRouteBuilder(\n+                          transitionDuration: const Duration(milliseconds: 500),\n+                          pageBuilder: (_, __, ___) =>),\n+                          transitionsBuilder: (context, animation, secondaryAnimation, child) {\n+                            return FadeTransition(\n+                              opacity: animation,\n+                              child: child,\n+                            );\n+                          },\n+                        ),\n+                      );\n                       },\n                       child: Text(postmaker))\n                 ],\n               ),\n"
                },
                {
                    "date": 1756123508122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n                         Navigator.push(\n                         context,\n                         PageRouteBuilder(\n                           transitionDuration: const Duration(milliseconds: 500),\n-                          pageBuilder: (_, __, ___) =>),\n+                          pageBuilder: (_, __, ___) =>ProfilePage2(uid: postmakerId  ),\n                           transitionsBuilder: (context, animation, secondaryAnimation, child) {\n                             return FadeTransition(\n                               opacity: animation,\n                               child: child,\n"
                }
            ],
            "date": 1756119039693,
            "name": "Commit-0",
            "content": "// import 'package:cloud_firestore/cloud_firestore.dart';\n// import 'package:firebase_auth/firebase_auth.dart';\n// import 'package:flutter/material.dart';\n// import 'package:l_f/Frontend/Profile/user_see_page.dart';\n\n// class ReplyToPostMaker {\n//   Future<void> sendAnswerToPostmaker(\n//       BuildContext context,\n//       String answer,\n//       String postId,\n//       String postmakerId,\n//       String statusofRequest,\n//       User? user) async {\n//     try {\n//       // Reference to the specific post's claims subcollection\n//       CollectionReference claimsRef = FirebaseFirestore.instance\n//           .collection('posts')\n//           .doc(postId) // Get the post document using its ID\n//           .collection('claims'); // Access the subcollection\n\n//       // Add a new claim document\n//       await claimsRef.add({\n//         'senderId': user!.uid,\n//         'answer': answer,\n//         'claimStatusC': statusofRequest,\n//         'timestamp': Timestamp.now(),\n//         'isClaimed': false,\n//         'receiverId': postmakerId,\n//       });\n\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         const SnackBar(\n//           content: Text('Your answer has been sent to the post maker'),\n//           behavior: SnackBarBehavior.floating,\n//           margin: EdgeInsets.all(16.0),\n//         ),\n//       );\n//     } catch (e) {\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         SnackBar(\n//           content: Text('Failed to send answer: $e'),\n//           backgroundColor: Colors.red,\n//         ),\n//       );\n//     }\n//   }\n\n//   void claimedPost(BuildContext context, String postclaimerId, String postTitle,\n//       String claimername, String postId, User? user) {\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return AlertDialog(\n//           title: Text('Claimed Item : $postTitle',\n//               style:\n//                   const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n//           content: Column(\n//             mainAxisSize: MainAxisSize.min,\n//             children: [\n//               Row(\n//                 children: [\n//                   const Text('Already claimed by :',\n//                       style: TextStyle(fontWeight: FontWeight.bold)),\n//                   TextButton(\n//                       onPressed: () {\n//                         Navigator.push(\n//                             context,\n//                             MaterialPageRoute(\n//                                 builder: (_) =>\n//                                     ProfilePage2(uid: postclaimerId)));\n//                       },\n//                       child: Text(\n//                           user!.uid == postclaimerId ? 'You' : claimername,\n//                           style: const TextStyle(fontWeight: FontWeight.bold))),\n//                 ],\n//               ),\n//               const SizedBox(height: 10),\n//             ],\n//           ),\n//           actions: [\n//             TextButton(\n//               onPressed: () {\n//                 Navigator.of(context).pop();\n//               },\n//               child: const Text('Cancel'),\n//             ),\n//           ],\n//         );\n//       },\n//     );\n//   }\n\n//   void replyToPostmaker(BuildContext context, String postmakerId,\n//       String postmaker, String postId, User? user) {\n//     TextEditingController messageController = TextEditingController();\n\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return AlertDialog(\n//           title: const Text('Send a Reply'),\n//           content: Column(\n//             mainAxisSize: MainAxisSize.min,\n//             children: [\n//               Row(\n//                 children: [\n//                   const Text('Reply to'),\n//                   TextButton(\n//                       onPressed: () {\n//                         Navigator.push(\n//                             context,\n//                             MaterialPageRoute(\n//                                 builder: (_) =>\n//                                     ProfilePage2(uid: postmakerId)));\n//                       },\n//                       child: Text(postmaker))\n//                 ],\n//               ),\n//               const SizedBox(height: 10),\n//               TextField(\n//                 controller: messageController,\n//                 decoration: const InputDecoration(\n//                   labelText: 'Your message',\n//                   alignLabelWithHint: true,\n//                   border: OutlineInputBorder(),\n//                 ),\n//                 maxLines: 3,\n//               ),\n//             ],\n//           ),\n//           actions: [\n//             TextButton(\n//               onPressed: () {\n//                 Navigator.of(context).pop(); // Close the dialog without sending\n//               },\n//               child: const Text('Cancel'),\n//             ),\n//             TextButton(\n//               onPressed: () {\n//                 String message = messageController.text.trim();\n//                 if (message.isNotEmpty) {\n//                   ReplyToPostMaker().sendMessageToPostmaker(\n//                       context, postmakerId, message, postId, user!);\n//                 }\n//                 ScaffoldMessenger.of(context).showSnackBar(\n//                   const SnackBar(\n//                     content: Text('Message sent successfully'),\n//                     behavior: SnackBarBehavior.floating,\n//                     margin: EdgeInsets.all(16.0),\n//                   ),\n//                 );\n//                 Navigator.of(context).pop(); // Close the dialog after sending\n//               },\n//               child: const Text('Send'),\n//             ),\n//           ],\n//         );\n//       },\n//     );\n//   }\n\n//   void claimPost(BuildContext context, String postmakerId, String postTitle,\n//       String postQuestion, String postdescription, String postId, User? user) {\n//     TextEditingController answerController = TextEditingController();\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return AlertDialog(\n//           title: const Text('Claim Item'),\n//           content: Column(\n//             mainAxisSize: MainAxisSize.min,\n//             children: [\n//               const Text('Question from the post owner:'),\n//               const SizedBox(height: 10),\n//               Text(postQuestion,\n//                   style: const TextStyle(fontWeight: FontWeight.bold)),\n//               const SizedBox(height: 20),\n//               TextField(\n//                 controller: answerController,\n//                 decoration: const InputDecoration(\n//                   labelText: 'Your answer',\n//                   alignLabelWithHint: true,\n//                   border: OutlineInputBorder(),\n//                 ),\n//                 maxLines: 3,\n//               ),\n//             ],\n//           ),\n//           actions: [\n//             TextButton(\n//               onPressed: () {\n//                 Navigator.of(context).pop();\n//               },\n//               child: const Text('Cancel'),\n//             ),\n//             TextButton(\n//               onPressed: () {\n//                 String answer = answerController.text.trim();\n//                 if (answer.isNotEmpty) {\n//                   ReplyToPostMaker().sendAnswerToPostmaker(\n//                       context, answer, postId, postmakerId, 'requested', user);\n//                   print('SENT DATATATAT : $answer, \" \", $postId, \"__\" , $postmakerId');\n//                 }\n//                 ScaffoldMessenger.of(context).showSnackBar(\n//                   const SnackBar(\n//                     content: Text('Request sent successfully'),\n//                     behavior: SnackBarBehavior.floating,\n//                     margin: EdgeInsets.all(16.0),\n//                   ),\n//                 );\n//                 Navigator.of(context).pop();\n//               },\n//               child: const Text('Send'),\n//             ),\n//           ],\n//         );\n//       },\n//     );\n//   }\n\n//   Future<void> sendMessageToPostmaker(BuildContext context, String postmakerId,\n//       String message, String postId, User user) async {\n//     try {\n//       // Add a chat message to Firestore\n//       await FirebaseFirestore.instance.collection('chats').add({\n//         'senderId': user.uid,\n//         'receiverId': postmakerId,\n//         'participants': [user.uid, postmakerId],\n//         'message': message,\n//         'postId': postId,\n//         'timestamp': Timestamp.now(),\n//       });\n\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         const SnackBar(\n//           content: Text('Message sent successfully'),\n//           behavior: SnackBarBehavior.floating,\n//           margin: EdgeInsets.all(16.0),\n//         ),\n//       );\n//     } catch (e) {\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         SnackBar(\n//           content: Text('Failed to send message: $e'),\n//           backgroundColor: Colors.red,\n//         ),\n//       );\n//     }\n//   }\n// }\n"
        }
    ]
}