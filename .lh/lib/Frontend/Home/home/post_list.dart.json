{
    "sourceFile": "lib/Frontend/Home/home/post_list.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1756124282181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756124442916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import 'package:flutter/material.dart';\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:l_f/Frontend/Home/Post/post_model.dart';\n import '../models/post_model.dart';\n import 'post_card.dart';\n import 'post_shimmer.dart';\n \n"
                },
                {
                    "date": 1756124699145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import 'package:flutter/material.dart';\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:l_f/Frontend/Home/Post/post_model.dart';\n import '../models/post_model.dart';\n import 'post_card.dart';\n import 'post_shimmer.dart';\n \n@@ -24,33 +23,70 @@\n \n     return StreamBuilder<QuerySnapshot>(\n       stream: stream,\n       builder: (context, snapshot) {\n+        // 1. Waiting for the initial stream of post documents\n         if (snapshot.connectionState == ConnectionState.waiting) {\n+          print(\"PostList: Stream is waiting for data...\");\n           return _buildShimmer(context);\n         }\n+\n+        // 2. Stream has an error (e.g., permission denied)\n         if (snapshot.hasError) {\n-          return Center(child: Text('Error: ${snapshot.error}'));\n+          print(\"PostList: Stream error! ${snapshot.error}\");\n+          return Center(child: Text('Error loading posts: ${snapshot.error}'));\n         }\n+\n+        // 3. Stream is empty\n         if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+          print(\"PostList: Stream has no documents.\");\n           return const Center(child: Text('No posts found. ü§∑‚Äç‚ôÇÔ∏è'));\n         }\n+        \n+        print(\"PostList: Stream has ${snapshot.data!.docs.length} documents. Fetching details...\");\n \n+        // 4. Stream has data, now use FutureBuilder to fetch user details for each post\n         return FutureBuilder<List<PostModel>>(\n           future: mapDocsFunction(snapshot.data!.docs),\n           builder: (context, futureSnapshot) {\n-            if (!futureSnapshot.hasData) {\n+            // --- FIX IS HERE ---\n+            // Added explicit checks for connection state and errors\n+\n+            // 5. Future is running (fetching user details)\n+            if (futureSnapshot.connectionState == ConnectionState.waiting) {\n+              print(\"PostList: Future is waiting for post details...\");\n               return _buildShimmer(context);\n             }\n+\n+            // 6. Future has an error (e.g., a user document was not found)\n+            if (futureSnapshot.hasError) {\n+              print(\"PostList: Future error! ${futureSnapshot.error}\");\n+              return Center(\n+                child: Padding(\n+                  padding: const EdgeInsets.all(16.0),\n+                  child: Text(\n+                    \"Failed to load post details.\\nError: ${futureSnapshot.error}\",\n+                    textAlign: TextAlign.center,\n+                  ),\n+                ),\n+              );\n+            }\n+            \n+            // 7. Future completed, but with no data\n+            if (!futureSnapshot.hasData || futureSnapshot.data!.isEmpty) {\n+               print(\"PostList: Future completed but has no data.\");\n+               return const Center(child: Text('Could not load post details.'));\n+            }\n+\n+            // 8. Future completed successfully with data\n+            print(\"PostList: Future completed successfully. Building UI.\");\n             final posts = futureSnapshot.data!;\n \n             return LayoutBuilder(\n               builder: (context, constraints) {\n-                // Determine number of columns based on width\n                 double maxCrossAxisExtent = 450;\n                 int crossAxisCount = (constraints.maxWidth / maxCrossAxisExtent).floor().clamp(1, 4);\n \n-                // If only one column, use a ListView for better performance and feel\n                 if (crossAxisCount == 1) {\n                   return ListView.builder(\n                     padding: const EdgeInsets.all(8.0),\n                     itemCount: posts.length,\n@@ -66,9 +102,8 @@\n                     ),\n                   );\n                 }\n \n-                // Otherwise, use a GridView\n                 return GridView.builder(\n                   padding: const EdgeInsets.all(16),\n                   gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(\n                     maxCrossAxisExtent: maxCrossAxisExtent,\n"
                },
                {
                    "date": 1756124704712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import 'package:flutter/material.dart';\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:l_f/Frontend/Home/Post/post_model.dart';\n import '../models/post_model.dart';\n import 'post_card.dart';\n import 'post_shimmer.dart';\n \n"
                }
            ],
            "date": 1756124282181,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport '../models/post_model.dart';\nimport 'post_card.dart';\nimport 'post_shimmer.dart';\n\nclass PostList extends StatelessWidget {\n  final Stream<QuerySnapshot> stream;\n  final Future<List<PostModel>> Function(List<QueryDocumentSnapshot>) mapDocsFunction;\n  final Function(PostModel) onDelete;\n\n  const PostList({\n    super.key,\n    required this.stream,\n    required this.mapDocsFunction,\n    required this.onDelete,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final currentUser = FirebaseAuth.instance.currentUser;\n\n    return StreamBuilder<QuerySnapshot>(\n      stream: stream,\n      builder: (context, snapshot) {\n        if (snapshot.connectionState == ConnectionState.waiting) {\n          return _buildShimmer(context);\n        }\n        if (snapshot.hasError) {\n          return Center(child: Text('Error: ${snapshot.error}'));\n        }\n        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n          return const Center(child: Text('No posts found. ü§∑‚Äç‚ôÇÔ∏è'));\n        }\n\n        return FutureBuilder<List<PostModel>>(\n          future: mapDocsFunction(snapshot.data!.docs),\n          builder: (context, futureSnapshot) {\n            if (!futureSnapshot.hasData) {\n              return _buildShimmer(context);\n            }\n            final posts = futureSnapshot.data!;\n\n            return LayoutBuilder(\n              builder: (context, constraints) {\n                // Determine number of columns based on width\n                double maxCrossAxisExtent = 450;\n                int crossAxisCount = (constraints.maxWidth / maxCrossAxisExtent).floor().clamp(1, 4);\n\n                // If only one column, use a ListView for better performance and feel\n                if (crossAxisCount == 1) {\n                  return ListView.builder(\n                    padding: const EdgeInsets.all(8.0),\n                    itemCount: posts.length,\n                    itemBuilder: (context, index) => Center(\n                      child: ConstrainedBox(\n                        constraints: const BoxConstraints(maxWidth: 600),\n                        child: PostCard(\n                          post: posts[index],\n                          isOwner: currentUser?.uid == posts[index].postmakerId,\n                          onDelete: () => onDelete(posts[index]),\n                        ),\n                      ),\n                    ),\n                  );\n                }\n\n                // Otherwise, use a GridView\n                return GridView.builder(\n                  padding: const EdgeInsets.all(16),\n                  gridDelegate: SliverGridDelegateWithMaxCrossAxisExtent(\n                    maxCrossAxisExtent: maxCrossAxisExtent,\n                    childAspectRatio: 0.8,\n                    crossAxisSpacing: 16,\n                    mainAxisSpacing: 16,\n                  ),\n                  itemCount: posts.length,\n                  itemBuilder: (context, index) => PostCard(\n                    post: posts[index],\n                    isOwner: currentUser?.uid == posts[index].postmakerId,\n                    onDelete: () => onDelete(posts[index]),\n                  ),\n                );\n              },\n            );\n          },\n        );\n      },\n    );\n  }\n\n  Widget _buildShimmer(BuildContext context) {\n    return LayoutBuilder(builder: (context, constraints) {\n      if (constraints.maxWidth < 600) {\n        return ListView.builder(\n          padding: const EdgeInsets.all(8.0),\n          itemCount: 3,\n          itemBuilder: (context, index) => const PostShimmerCard(),\n        );\n      }\n      int crossAxisCount = (constraints.maxWidth / 450).floor().clamp(1, 4);\n      return GridView.builder(\n        padding: const EdgeInsets.all(16),\n        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n          crossAxisCount: crossAxisCount,\n          childAspectRatio: 0.8,\n          crossAxisSpacing: 16,\n          mainAxisSpacing: 16,\n        ),\n        itemCount: crossAxisCount * 2,\n        itemBuilder: (context, index) => const PostShimmerCard(),\n      );\n    });\n  }\n}\n"
        }
    ]
}