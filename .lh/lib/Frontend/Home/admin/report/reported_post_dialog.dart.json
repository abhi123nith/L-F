{
    "sourceFile": "lib/Frontend/Home/admin/report/reported_post_dialog.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1756125677852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756125692593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import 'package:flutter/material.dart';\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:l_f/Frontend/Home/Post/post_model.dart'; // Adjust this import\n-import 'package:l_f/Frontend/Home/home/post_card.dart'; // Adjust this import\n \n class ReportedPostDialog extends StatefulWidget {\n   final String reportId;\n   final String postId;\n"
                },
                {
                    "date": 1756125878230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import 'package:flutter/material.dart';\n import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:l_f/Frontend/Home/Post/post_model.dart'; // Adjust this import\n+import 'package:l_f/Frontend/Home/Post/post_model.dart';\n+import 'package:l_f/Frontend/Home/admin/report/pst_card.dart'; // Adjust this import\n \n class ReportedPostDialog extends StatefulWidget {\n   final String reportId;\n   final String postId;\n"
                },
                {
                    "date": 1756125884990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n+import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:flutter/material.dart';\n-import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:l_f/Frontend/Home/Post/post_model.dart';\n import 'package:l_f/Frontend/Home/admin/report/pst_card.dart'; // Adjust this import\n \n class ReportedPostDialog extends StatefulWidget {\n@@ -34,9 +34,10 @@\n       // 1. Delete the post\n       batch.delete(_db.collection('posts').doc(widget.postId));\n \n       // 2. Update the report status to \"approved\"\n-      batch.update(_db.collection('reports').doc(widget.reportId), {'status': 'approved'});\n+      batch.update(_db.collection('reports').doc(widget.reportId),\n+          {'status': 'approved'});\n \n       await batch.commit();\n \n       navigator.pop(); // Close the dialog\n@@ -63,13 +64,17 @@\n         'userId': widget.postOwnerId,\n         'postId': widget.postId,\n         'reportId': widget.reportId,\n         'timestamp': FieldValue.serverTimestamp(),\n-        'message': 'Your post (ID: ${widget.postId}) was reported and has been reviewed. Please ensure your content follows community guidelines.',\n+        'message':\n+            'Your post (ID: ${widget.postId}) was reported and has been reviewed. Please ensure your content follows community guidelines.',\n       });\n-      \n+\n       // Also update the report status\n-      await _db.collection('reports').doc(widget.reportId).update({'status': 'warning_sent'});\n+      await _db\n+          .collection('reports')\n+          .doc(widget.reportId)\n+          .update({'status': 'warning_sent'});\n \n       navigator.pop();\n       messenger.showSnackBar(const SnackBar(\n         content: Text(\"Warning sent to the user.\"),\n@@ -88,9 +93,12 @@\n     final navigator = Navigator.of(context);\n     final messenger = ScaffoldMessenger.of(context);\n \n     try {\n-      await _db.collection('reports').doc(widget.reportId).update({'status': 'dismissed'});\n+      await _db\n+          .collection('reports')\n+          .doc(widget.reportId)\n+          .update({'status': 'dismissed'});\n       navigator.pop();\n       messenger.showSnackBar(const SnackBar(\n         content: Text(\"Report has been dismissed.\"),\n         backgroundColor: Colors.grey,\n@@ -119,35 +127,38 @@\n               return const Center(\n                 child: Text(\"This post may have already been deleted.\"),\n               );\n             }\n-            \n+\n             // We need to fetch the user details to build the PostModel\n             final postData = snapshot.data!.data() as Map<String, dynamic>;\n-            \n+\n             return FutureBuilder<DocumentSnapshot>(\n-              future: _db.collection('users').doc(postData['postmakerId']).get(),\n+              future:\n+                  _db.collection('users').doc(postData['postmakerId']).get(),\n               builder: (context, userSnapshot) {\n-                 if (!userSnapshot.hasData) {\n-                    return const Center(child: CircularProgressIndicator());\n-                 }\n-                 \n-                 final userData = userSnapshot.data?.data() as Map<String, dynamic>? ?? {};\n+                if (!userSnapshot.hasData) {\n+                  return const Center(child: CircularProgressIndicator());\n+                }\n \n-                 final postModel = PostModel.fromJson({\n-                    ...postData,\n-                    'userName': userData['name'] ?? 'Unknown User',\n-                    'profileImageUrl': userData['profileImageUrl'] ?? '',\n-                    'postTime': 'N/A', // Not needed for display here\n-                 });\n+                final userData =\n+                    userSnapshot.data?.data() as Map<String, dynamic>? ?? {};\n \n-                 return SingleChildScrollView(\n-                   child: PostCard(\n-                     post: postModel,\n-                     isOwner: false, // Admin is never the owner\n-                     onDelete: () {}, // Disable delete from here\n-                   ),\n-                 );\n+                final postModel = PostModel.fromJson({\n+                  ...postData,\n+                  'userName': userData['name'] ?? 'Unknown User',\n+                  'profileImageUrl': userData['profileImageUrl'] ?? '',\n+                  'postTime': 'N/A', // Not needed for display here\n+                });\n+\n+                return SingleChildScrollView(\n+                  child: PostCard(\n+                    post: postModel,\n+                    isOwner: false, // Admin is never the owner\n+                    onDelete: () {},\n+                    onReport: () {}, // Disable delete from here\n+                  ),\n+                );\n               },\n             );\n           },\n         ),\n@@ -157,9 +168,10 @@\n           child: const Text('Close'),\n           onPressed: () => Navigator.of(context).pop(),\n         ),\n         TextButton(\n-          child: const Text('Dismiss Report', style: TextStyle(color: Colors.grey)),\n+          child: const Text('Dismiss Report',\n+              style: TextStyle(color: Colors.grey)),\n           onPressed: _dismissReport,\n         ),\n         ElevatedButton(\n           style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),\n"
                },
                {
                    "date": 1756125895247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,21 +168,21 @@\n           child: const Text('Close'),\n           onPressed: () => Navigator.of(context).pop(),\n         ),\n         TextButton(\n+          onPressed: _dismissReport,\n           child: const Text('Dismiss Report',\n               style: TextStyle(color: Colors.grey)),\n-          onPressed: _dismissReport,\n         ),\n         ElevatedButton(\n           style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),\n+          onPressed: _sendWarning,\n           child: const Text('Send Warning'),\n-          onPressed: _sendWarning,\n         ),\n         ElevatedButton(\n           style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n+          onPressed: _approveAndDelelePost,\n           child: const Text('Delete Post'),\n-          onPressed: _approveAndDelelePost,\n         ),\n       ],\n     );\n   }\n"
                },
                {
                    "date": 1756126792887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,21 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:flutter/material.dart';\n-import 'package:l_f/Frontend/Home/Post/post_model.dart';\n-import 'package:l_f/Frontend/Home/admin/report/pst_card.dart'; // Adjust this import\n+import 'package:l_f/Frontend/Home/Post/post_model.dart'; // Adjust this import\n+import 'package:l_f/Frontend/Home/admin/report/pst_card.dart';\n \n class ReportedPostDialog extends StatefulWidget {\n   final String reportId;\n   final String postId;\n   final String postOwnerId;\n+  final String reporterId; // Added reporterId\n \n   const ReportedPostDialog({\n     super.key,\n     required this.reportId,\n     required this.postId,\n     required this.postOwnerId,\n+    required this.reporterId, // Added reporterId\n   });\n \n   @override\n   State<ReportedPostDialog> createState() => _ReportedPostDialogState();\n@@ -52,33 +54,39 @@\n       ));\n     }\n   }\n \n-  // --- ADMIN ACTION 2: Send a warning to the user ---\n-  Future<void> _sendWarning() async {\n+  // --- ADMIN ACTION 2: Send a warning to the post owner ---\n+  Future<void> _sendWarningToPostOwner() async {\n     final navigator = Navigator.of(context);\n     final messenger = ScaffoldMessenger.of(context);\n \n     try {\n-      // Create a new document in a 'warnings' collection\n-      await _db.collection('warnings').add({\n+      WriteBatch batch = _db.batch();\n+\n+      // 1. Create a warning document\n+      batch.set(_db.collection('warnings').doc(), {\n         'userId': widget.postOwnerId,\n         'postId': widget.postId,\n         'reportId': widget.reportId,\n         'timestamp': FieldValue.serverTimestamp(),\n         'message':\n-            'Your post (ID: ${widget.postId}) was reported and has been reviewed. Please ensure your content follows community guidelines.',\n+            'Your post (ID: ${widget.postId}) was reported and found to violate community guidelines. This serves as a formal warning.',\n       });\n \n-      // Also update the report status\n-      await _db\n-          .collection('reports')\n-          .doc(widget.reportId)\n-          .update({'status': 'warning_sent'});\n+      // 2. Update the user's warning count\n+      batch.update(_db.collection('users').doc(widget.postOwnerId),\n+          {'warningCount': FieldValue.increment(1)});\n \n+      // 3. Update the report status\n+      batch.update(_db.collection('reports').doc(widget.reportId),\n+          {'status': 'warning_sent'});\n+\n+      await batch.commit();\n+\n       navigator.pop();\n       messenger.showSnackBar(const SnackBar(\n-        content: Text(\"Warning sent to the user.\"),\n+        content: Text(\"Warning sent to the post owner.\"),\n         backgroundColor: Colors.orange,\n       ));\n     } catch (e) {\n       messenger.showSnackBar(SnackBar(\n@@ -87,21 +95,39 @@\n       ));\n     }\n   }\n \n-  // --- ADMIN ACTION 3: Dismiss the report ---\n-  Future<void> _dismissReport() async {\n+  // --- ADMIN ACTION 3: Dismiss the report and warn the reporter ---\n+  Future<void> _dismissReportAndWarnReporter() async {\n     final navigator = Navigator.of(context);\n     final messenger = ScaffoldMessenger.of(context);\n \n     try {\n-      await _db\n-          .collection('reports')\n-          .doc(widget.reportId)\n-          .update({'status': 'dismissed'});\n+      WriteBatch batch = _db.batch();\n+\n+      // 1. Update the report status to \"dismissed\"\n+      batch.update(_db.collection('reports').doc(widget.reportId),\n+          {'status': 'dismissed'});\n+\n+      // 2. Create a warning for the reporter about false reporting\n+      batch.set(_db.collection('warnings').doc(), {\n+        'userId': widget.reporterId,\n+        'postId': widget.postId,\n+        'reportId': widget.reportId,\n+        'timestamp': FieldValue.serverTimestamp(),\n+        'message':\n+            'Your report on post (ID: ${widget.postId}) was reviewed and found to be invalid. Please only report content that violates guidelines. This serves as a warning against false reporting.',\n+      });\n+\n+      // 3. Update the reporter's false report count\n+      batch.update(_db.collection('users').doc(widget.reporterId),\n+          {'falseReportCount': FieldValue.increment(1)});\n+\n+      await batch.commit();\n+\n       navigator.pop();\n       messenger.showSnackBar(const SnackBar(\n-        content: Text(\"Report has been dismissed.\"),\n+        content: Text(\"Report dismissed and reporter has been warned.\"),\n         backgroundColor: Colors.grey,\n       ));\n     } catch (e) {\n       messenger.showSnackBar(SnackBar(\n@@ -128,9 +154,8 @@\n                 child: Text(\"This post may have already been deleted.\"),\n               );\n             }\n \n-            // We need to fetch the user details to build the PostModel\n             final postData = snapshot.data!.data() as Map<String, dynamic>;\n \n             return FutureBuilder<DocumentSnapshot>(\n               future:\n@@ -146,17 +171,17 @@\n                 final postModel = PostModel.fromJson({\n                   ...postData,\n                   'userName': userData['name'] ?? 'Unknown User',\n                   'profileImageUrl': userData['profileImageUrl'] ?? '',\n-                  'postTime': 'N/A', // Not needed for display here\n+                  'postTime': 'N/A',\n                 });\n \n                 return SingleChildScrollView(\n                   child: PostCard(\n                     post: postModel,\n-                    isOwner: false, // Admin is never the owner\n+                    isOwner: false,\n                     onDelete: () {},\n-                    onReport: () {}, // Disable delete from here\n+                    onReport: () {},\n                   ),\n                 );\n               },\n             );\n@@ -168,21 +193,21 @@\n           child: const Text('Close'),\n           onPressed: () => Navigator.of(context).pop(),\n         ),\n         TextButton(\n-          onPressed: _dismissReport,\n           child: const Text('Dismiss Report',\n               style: TextStyle(color: Colors.grey)),\n+          onPressed: _dismissReportAndWarnReporter,\n         ),\n         ElevatedButton(\n           style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),\n-          onPressed: _sendWarning,\n           child: const Text('Send Warning'),\n+          onPressed: _sendWarningToPostOwner,\n         ),\n         ElevatedButton(\n           style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n+          child: const Text('Delete Post'),\n           onPressed: _approveAndDelelePost,\n-          child: const Text('Delete Post'),\n         ),\n       ],\n     );\n   }\n"
                }
            ],
            "date": 1756125677852,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:l_f/Frontend/Home/Post/post_model.dart'; // Adjust this import\nimport 'package:l_f/Frontend/Home/home/post_card.dart'; // Adjust this import\n\nclass ReportedPostDialog extends StatefulWidget {\n  final String reportId;\n  final String postId;\n  final String postOwnerId;\n\n  const ReportedPostDialog({\n    super.key,\n    required this.reportId,\n    required this.postId,\n    required this.postOwnerId,\n  });\n\n  @override\n  State<ReportedPostDialog> createState() => _ReportedPostDialogState();\n}\n\nclass _ReportedPostDialogState extends State<ReportedPostDialog> {\n  final FirebaseFirestore _db = FirebaseFirestore.instance;\n\n  // --- ADMIN ACTION 1: Approve report and delete the post ---\n  Future<void> _approveAndDelelePost() async {\n    final navigator = Navigator.of(context);\n    final messenger = ScaffoldMessenger.of(context);\n\n    try {\n      // Use a batch write to perform multiple operations atomically\n      WriteBatch batch = _db.batch();\n\n      // 1. Delete the post\n      batch.delete(_db.collection('posts').doc(widget.postId));\n\n      // 2. Update the report status to \"approved\"\n      batch.update(_db.collection('reports').doc(widget.reportId), {'status': 'approved'});\n\n      await batch.commit();\n\n      navigator.pop(); // Close the dialog\n      messenger.showSnackBar(const SnackBar(\n        content: Text(\"Report approved and post deleted.\"),\n        backgroundColor: Colors.green,\n      ));\n    } catch (e) {\n      messenger.showSnackBar(SnackBar(\n        content: Text(\"Error deleting post: $e\"),\n        backgroundColor: Colors.red,\n      ));\n    }\n  }\n\n  // --- ADMIN ACTION 2: Send a warning to the user ---\n  Future<void> _sendWarning() async {\n    final navigator = Navigator.of(context);\n    final messenger = ScaffoldMessenger.of(context);\n\n    try {\n      // Create a new document in a 'warnings' collection\n      await _db.collection('warnings').add({\n        'userId': widget.postOwnerId,\n        'postId': widget.postId,\n        'reportId': widget.reportId,\n        'timestamp': FieldValue.serverTimestamp(),\n        'message': 'Your post (ID: ${widget.postId}) was reported and has been reviewed. Please ensure your content follows community guidelines.',\n      });\n      \n      // Also update the report status\n      await _db.collection('reports').doc(widget.reportId).update({'status': 'warning_sent'});\n\n      navigator.pop();\n      messenger.showSnackBar(const SnackBar(\n        content: Text(\"Warning sent to the user.\"),\n        backgroundColor: Colors.orange,\n      ));\n    } catch (e) {\n      messenger.showSnackBar(SnackBar(\n        content: Text(\"Error sending warning: $e\"),\n        backgroundColor: Colors.red,\n      ));\n    }\n  }\n\n  // --- ADMIN ACTION 3: Dismiss the report ---\n  Future<void> _dismissReport() async {\n    final navigator = Navigator.of(context);\n    final messenger = ScaffoldMessenger.of(context);\n\n    try {\n      await _db.collection('reports').doc(widget.reportId).update({'status': 'dismissed'});\n      navigator.pop();\n      messenger.showSnackBar(const SnackBar(\n        content: Text(\"Report has been dismissed.\"),\n        backgroundColor: Colors.grey,\n      ));\n    } catch (e) {\n      messenger.showSnackBar(SnackBar(\n        content: Text(\"Error dismissing report: $e\"),\n        backgroundColor: Colors.red,\n      ));\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AlertDialog(\n      title: const Text(\"Review Reported Post\"),\n      content: SizedBox(\n        width: double.maxFinite,\n        child: FutureBuilder<DocumentSnapshot>(\n          future: _db.collection('posts').doc(widget.postId).get(),\n          builder: (context, snapshot) {\n            if (snapshot.connectionState == ConnectionState.waiting) {\n              return const Center(child: CircularProgressIndicator());\n            }\n            if (!snapshot.hasData || !snapshot.data!.exists) {\n              return const Center(\n                child: Text(\"This post may have already been deleted.\"),\n              );\n            }\n            \n            // We need to fetch the user details to build the PostModel\n            final postData = snapshot.data!.data() as Map<String, dynamic>;\n            \n            return FutureBuilder<DocumentSnapshot>(\n              future: _db.collection('users').doc(postData['postmakerId']).get(),\n              builder: (context, userSnapshot) {\n                 if (!userSnapshot.hasData) {\n                    return const Center(child: CircularProgressIndicator());\n                 }\n                 \n                 final userData = userSnapshot.data?.data() as Map<String, dynamic>? ?? {};\n\n                 final postModel = PostModel.fromJson({\n                    ...postData,\n                    'userName': userData['name'] ?? 'Unknown User',\n                    'profileImageUrl': userData['profileImageUrl'] ?? '',\n                    'postTime': 'N/A', // Not needed for display here\n                 });\n\n                 return SingleChildScrollView(\n                   child: PostCard(\n                     post: postModel,\n                     isOwner: false, // Admin is never the owner\n                     onDelete: () {}, // Disable delete from here\n                   ),\n                 );\n              },\n            );\n          },\n        ),\n      ),\n      actions: <Widget>[\n        TextButton(\n          child: const Text('Close'),\n          onPressed: () => Navigator.of(context).pop(),\n        ),\n        TextButton(\n          child: const Text('Dismiss Report', style: TextStyle(color: Colors.grey)),\n          onPressed: _dismissReport,\n        ),\n        ElevatedButton(\n          style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),\n          child: const Text('Send Warning'),\n          onPressed: _sendWarning,\n        ),\n        ElevatedButton(\n          style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n          child: const Text('Delete Post'),\n          onPressed: _approveAndDelelePost,\n        ),\n      ],\n    );\n  }\n}\n"
        }
    ]
}