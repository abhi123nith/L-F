{
    "sourceFile": "lib/Frontend/Home/admin/report/admin_reports_page.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1756125660807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756125697826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import 'package:flutter/material.dart';\n import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:l_f/Frontend/Home/admin/report/reported_post_dialog.dart';\n import '../widgets/report_card.dart';\n import '../widgets/reported_post_dialog.dart';\n \n class AdminReportsPage extends StatelessWidget {\n"
                },
                {
                    "date": 1756125703498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,7 @@\n import 'package:flutter/material.dart';\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:l_f/Frontend/Home/admin/report/reported_post_dialog.dart';\n-import '../widgets/report_card.dart';\n-import '../widgets/reported_post_dialog.dart';\n \n class AdminReportsPage extends StatelessWidget {\n   const AdminReportsPage({super.key});\n \n"
                },
                {
                    "date": 1756126169042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import 'package:flutter/material.dart';\n import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:l_f/Frontend/Home/admin/report/report_card.dart';\n import 'package:l_f/Frontend/Home/admin/report/reported_post_dialog.dart';\n \n class AdminReportsPage extends StatelessWidget {\n   const AdminReportsPage({super.key});\n@@ -9,9 +10,9 @@\n   Widget build(BuildContext context) {\n     return Scaffold(\n       appBar: AppBar(\n         title: const Text(\"Admin - Post Reports\"),\n-        backgroundColor: Colors.indigo,\n+        backgroundColor: Colors.,\n       ),\n       body: StreamBuilder<QuerySnapshot>(\n         stream: FirebaseFirestore.instance\n             .collection('reports')\n"
                },
                {
                    "date": 1756126174927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,10 @@\n   Widget build(BuildContext context) {\n     return Scaffold(\n       appBar: AppBar(\n         title: const Text(\"Admin - Post Reports\"),\n-        backgroundColor: Colors.,\n+        backgroundColor: Colors.deepOrange,\n+        foregroundColor: ,\n       ),\n       body: StreamBuilder<QuerySnapshot>(\n         stream: FirebaseFirestore.instance\n             .collection('reports')\n"
                },
                {
                    "date": 1756126215420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,63 +1,304 @@\n+import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:l_f/Frontend/Home/admin/report/report_card.dart';\n-import 'package:l_f/Frontend/Home/admin/report/reported_post_dialog.dart';\n+import 'package:l_f/Frontend/Home/Post/create_post.dart';\n+import 'package:l_f/Frontend/Home/Post/new.dart';\n+import 'package:l_f/Frontend/Home/admin/report/admin_reports_page.dart';\n+import 'package:l_f/Frontend/Home/home.dart';\n+import 'package:l_f/Frontend/Profile/profile_page.dart';\n \n-class AdminReportsPage extends StatelessWidget {\n-  const AdminReportsPage({super.key});\n+class HomePage extends StatelessWidget {\n+  const HomePage({super.key});\n \n+  // --- NEW: Reusable method for smooth page transitions ---\n+  Route _createSmoothRoute(Widget page) {\n+    return PageRouteBuilder(\n+      pageBuilder: (context, animation, secondaryAnimation) => page,\n+      transitionsBuilder: (context, animation, secondaryAnimation, child) {\n+        // Combines a fade with a slight slide-up animation\n+        const begin = Offset(0.0, 0.1);\n+        const end = Offset.zero;\n+        const curve = Curves.easeOut;\n+\n+        var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));\n+        var slideAnimation = animation.drive(tween);\n+\n+        return FadeTransition(\n+          opacity: animation,\n+          child: SlideTransition(\n+            position: slideAnimation,\n+            child: child,\n+          ),\n+        );\n+      },\n+      transitionDuration: const Duration(milliseconds: 400),\n+    );\n+  }\n+\n   @override\n   Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        title: const Text(\"Admin - Post Reports\"),\n-        backgroundColor: Colors.deepOrange,\n-        foregroundColor: ,\n-      ),\n-      body: StreamBuilder<QuerySnapshot>(\n-        stream: FirebaseFirestore.instance\n-            .collection('reports')\n-            .orderBy('timestamp', descending: true)\n-            .snapshots(),\n-        builder: (context, snapshot) {\n-          if (snapshot.connectionState == ConnectionState.waiting) {\n-            return const Center(child: CircularProgressIndicator());\n-          }\n-          if (snapshot.hasError) {\n-            return Center(child: Text(\"Error: ${snapshot.error}\"));\n-          }\n-          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-            return const Center(\n-              child: Text(\n-                \"No reports found. All clear! üëç\",\n-                style: TextStyle(fontSize: 18, color: Colors.grey),\n-              ),\n-            );\n-          }\n+    return LayoutBuilder(\n+      builder: (context, constraints) {\n+        bool isMobile = constraints.maxWidth < 700;\n \n-          final reports = snapshot.data!.docs;\n+        return Scaffold(\n+          appBar: AppBar(\n+            backgroundColor: Colors.deepOrange,\n+            foregroundColor: Colors.white,\n+            title: isMobile\n+                ? Row(\n+                    children: [\n+                      Image.asset('assets/lg.png', height: 75, width: 75),\n+                      const SizedBox(width: 6),\n+                    ],\n+                  )\n+                : const Row(\n+                    children: [\n+                      SizedBox(width: 16),\n+                      Image.asset('assets/lg.png', height: 75, width: 75),\n+                      SizedBox(width: 16),\n+                      Text(\"CampusTracker\"),\n+                    ],\n+                  ),\n+            actions: isMobile\n+                ? [\n+                    GestureDetector(\n+                      child: Card(\n+                        shape: RoundedRectangleBorder(\n+                            borderRadius: BorderRadius.circular(7),\n+                            side: const BorderSide(width: 2, color: Colors.white)),\n+                        color: Colors.deepOrange,\n+                        child: const Padding(\n+                          padding: EdgeInsets.all(1.0),\n+                          child: Icon(Icons.add, size: 22),\n+                        ),\n+                      ),\n+                      onTap: () {\n+                        Navigator.push(context, _createSmoothRoute(const CreatePostPage()));\n+                      },\n+                    ),\n+                    const SizedBox(width: 10),\n+                    IconButton(\n+                        onPressed: () {\n+                          Navigator.push(context, _createSmoothRoute(MessagesPage()));\n+                        },\n+                        icon: const Icon(Icons.messenger_outline_rounded)),\n+                    const SizedBox(width: 10),\n+                  ]\n+                : [\n+                    ResponsiveButton(\n+                      label: \"Home\",\n+                      onPressed: () {\n+                        // Navigating to the same page is unusual, but kept as per original code\n+                        Navigator.push(context, _createSmoothRoute(const HomePage()));\n+                      },\n+                    ),\n+                    ResponsiveButton(\n+                      label: \"New Post\",\n+                      onPressed: () {\n+                        Navigator.push(context, _createSmoothRoute(const CreatePostPage()));\n+                      },\n+                    ),\n+                    ResponsiveButton(\n+                      label: \"My List\",\n+                      onPressed: () {\n+                        Navigator.push(context, _createSmoothRoute(MessagesPage()));\n+                      },\n+                    ),\n+                    ResponsiveButton(\n+                      label: \"My Chats\",\n+                      onPressed: () {\n+                        Navigator.push(context, _createSmoothRoute(MessagesPage()));\n+                      },\n+                    ),\n+                    ResponsiveButton(\n+                      label: \"Profile\",\n+                      onPressed: () {\n+                        Navigator.push(context, _createSmoothRoute(const ProfilePage()));\n+                      },\n+                    ),\n+                    ResponsiveButton(\n+                      label: \"Report\",\n+                      onPressed: () {\n+                        Navigator.push(context, _createSmoothRoute(const AdminReportsPage()));\n+                      },\n+                    ),\n+                    IconButton(\n+                      icon: const Icon(Icons.logout, color: Colors.white, size: 21),\n+                      onPressed: () {\n+                        _showLogoutDialog(context);\n+                      },\n+                    ),\n+                  ],\n+          ),\n+          drawer: isMobile ? _buildDrawer(context) : null,\n+          body: isMobile\n+              ? const Center(child: LostFoundPage())\n+              : const Column(\n+                  children: [\n+                    Expanded(\n+                      flex: 5,\n+                      child: Center(\n+                        child: LostFoundPage(),\n+                      ),\n+                    ),\n+                  ],\n+                ),\n+        );\n+      },\n+    );\n+  }\n \n-          return ListView.builder(\n-            itemCount: reports.length,\n-            itemBuilder: (context, index) {\n-              final report = reports[index];\n-              return ReportCard(\n-                report: report,\n-                onTap: () {\n-                  showDialog(\n-                    context: context,\n-                    builder: (dialogContext) => ReportedPostDialog(\n-                      reportId: report.id,\n-                      postId: report['postId'],\n-                      postOwnerId: report['postOwnerId'],\n+  Widget _buildDrawer(BuildContext context) {\n+    return MediaQuery(\n+      data: MediaQuery.of(context).copyWith(textScaler: const TextScaler.linear(1.0)),\n+      child: Drawer(\n+        child: Column(\n+          children: [\n+            Container(\n+              height: 120, // Provide a fixed height for the header\n+              width: double.infinity,\n+              color: Colors.deepOrange,\n+              child: Padding(\n+                padding: const EdgeInsets.only(top: 40.0, left: 16.0),\n+                child: Row(\n+                  children: [\n+                    Image.asset('assets/logo2.png', height: 60.0, width: 60.0),\n+                    const SizedBox(width: 16),\n+                    const Text(\n+                      'CampusTracker',\n+                      style: TextStyle(\n+                        fontSize: 24.0,\n+                        fontWeight: FontWeight.bold,\n+                        color: Colors.white,\n+                      ),\n                     ),\n-                  );\n-                },\n-              );\n-            },\n-          );\n-        },\n+                  ],\n+                ),\n+              ),\n+            ),\n+            Expanded(\n+              child: ListView(\n+                padding: EdgeInsets.zero, // Remove top padding from ListView\n+                children: [\n+                  ListTile(\n+                    title: const Text(\"Home\"),\n+                    onTap: () {\n+                      Navigator.pop(context);\n+                    },\n+                  ),\n+                  ListTile(\n+                    title: const Text(\"New Post\"),\n+                    onTap: () {\n+                      Navigator.pop(context);\n+                      Navigator.push(context, _createSmoothRoute(const CreatePostPage()));\n+                    },\n+                  ),\n+                  ListTile(\n+                    title: const Text(\"My List\"),\n+                    onTap: () {\n+                      Navigator.pop(context);\n+                      Navigator.push(context, _createSmoothRoute(MessagesPage()));\n+                    },\n+                  ),\n+                  ListTile(\n+                    title: const Text(\"Profile\"),\n+                    onTap: () {\n+                      Navigator.pop(context);\n+                      Navigator.push(context, _createSmoothRoute(const ProfilePage()));\n+                    },\n+                  ),\n+                ],\n+              ),\n+            ),\n+            GestureDetector(\n+              child: Container(\n+                color: Colors.deepOrange,\n+                padding: const EdgeInsets.all(16),\n+                child: const Row(\n+                  mainAxisAlignment: MainAxisAlignment.center,\n+                  children: [\n+                    Text(\n+                      \"Logout\",\n+                      style: TextStyle(fontSize: 20, fontWeight: FontWeight.w600, color: Colors.white),\n+                    ),\n+                    SizedBox(width: 10),\n+                    Icon(Icons.logout, color: Colors.white),\n+                  ],\n+                ),\n+              ),\n+              onTap: () {\n+                Navigator.pop(context);\n+                _showLogoutDialog(context);\n+              },\n+            ),\n+          ],\n+        ),\n       ),\n     );\n   }\n+\n+  Future<void> _handleLogout(BuildContext context) async {\n+    try {\n+      await FirebaseAuth.instance.signOut();\n+      // Use pushNamedAndRemoveUntil to clear the navigation stack\n+      Navigator.pushNamedAndRemoveUntil(context, '/login', (route) => false);\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(backgroundColor: Colors.grey, content: Text('Error signing out: $e')),\n+      );\n+    }\n+  }\n+\n+  void _showLogoutDialog(BuildContext context) {\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text(\"Logout\"),\n+          content: const Text(\"Are you sure you want to logout?\", style: TextStyle(fontWeight: FontWeight.w700)),\n+          actions: <Widget>[\n+            TextButton(\n+              child: const Text(\"Cancel\", style: TextStyle(fontWeight: FontWeight.bold)),\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n+            ),\n+            TextButton(\n+              child: const Text(\"Logout\", style: TextStyle(fontWeight: FontWeight.bold)),\n+              onPressed: () {\n+                Navigator.of(context).pop(); // Close the dialog first\n+                _handleLogout(context);\n+              },\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n }\n+\n+class ResponsiveButton extends StatelessWidget {\n+  final String label;\n+  final VoidCallback onPressed;\n+\n+  const ResponsiveButton({\n+    super.key,\n+    required this.label,\n+    required this.onPressed,\n+  });\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return TextButton(\n+      onPressed: onPressed,\n+      child: Text(\n+        label,\n+        style: const TextStyle(\n+          color: Colors.white,\n+          fontSize: 16,\n+          fontWeight: FontWeight.w600,\n+        ),\n+      ),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1756126226225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n                     ),\n                     ResponsiveButton(\n                       label: \"Report\",\n                       onPressed: () {\n-                        Navigator.push(context, _createSmoothRoute(const AdminReportsPage()));\n+                        Navigator.push(context, _createSmoothRoute( AdminReportsPage()));\n                       },\n                     ),\n                     IconButton(\n                       icon: const Icon(Icons.logout, color: Colors.white, size: 21),\n"
                },
                {
                    "date": 1756126232153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,9 @@\n                     ),\n                     ResponsiveButton(\n                       label: \"Report\",\n                       onPressed: () {\n-                        Navigator.push(context, _createSmoothRoute( AdminReportsPage()));\n+                        Navigator.push(context, _createSmoothRoute( AdminR()));\n                       },\n                     ),\n                     IconButton(\n                       icon: const Icon(Icons.logout, color: Colors.white, size: 21),\n"
                },
                {
                    "date": 1756126237839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,304 +1,63 @@\n-import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n-import 'package:l_f/Frontend/Home/Post/create_post.dart';\n-import 'package:l_f/Frontend/Home/Post/new.dart';\n-import 'package:l_f/Frontend/Home/admin/report/admin_reports_page.dart';\n-import 'package:l_f/Frontend/Home/home.dart';\n-import 'package:l_f/Frontend/Profile/profile_page.dart';\n+import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:l_f/Frontend/Home/admin/report/report_card.dart';\n+import 'package:l_f/Frontend/Home/admin/report/reported_post_dialog.dart';\n \n-class HomePage extends StatelessWidget {\n-  const HomePage({super.key});\n+class AdminReportsPage extends StatelessWidget {\n+  const AdminReportsPage({super.key});\n \n-  // --- NEW: Reusable method for smooth page transitions ---\n-  Route _createSmoothRoute(Widget page) {\n-    return PageRouteBuilder(\n-      pageBuilder: (context, animation, secondaryAnimation) => page,\n-      transitionsBuilder: (context, animation, secondaryAnimation, child) {\n-        // Combines a fade with a slight slide-up animation\n-        const begin = Offset(0.0, 0.1);\n-        const end = Offset.zero;\n-        const curve = Curves.easeOut;\n-\n-        var tween = Tween(begin: begin, end: end).chain(CurveTween(curve: curve));\n-        var slideAnimation = animation.drive(tween);\n-\n-        return FadeTransition(\n-          opacity: animation,\n-          child: SlideTransition(\n-            position: slideAnimation,\n-            child: child,\n-          ),\n-        );\n-      },\n-      transitionDuration: const Duration(milliseconds: 400),\n-    );\n-  }\n-\n   @override\n   Widget build(BuildContext context) {\n-    return LayoutBuilder(\n-      builder: (context, constraints) {\n-        bool isMobile = constraints.maxWidth < 700;\n+    return Scaffold(\n+      appBar: AppBar(\n+        title: const Text(\"Admin - Post Reports\"),\n+        backgroundColor: Colors.deepOrange,\n+        foregroundColor: Colors.white,\n+      ),\n+      body: StreamBuilder<QuerySnapshot>(\n+        stream: FirebaseFirestore.instance\n+            .collection('reports')\n+            .orderBy('timestamp', descending: true)\n+            .snapshots(),\n+        builder: (context, snapshot) {\n+          if (snapshot.connectionState == ConnectionState.waiting) {\n+            return const Center(child: CircularProgressIndicator());\n+          }\n+          if (snapshot.hasError) {\n+            return Center(child: Text(\"Error: ${snapshot.error}\"));\n+          }\n+          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+            return const Center(\n+              child: Text(\n+                \"No reports found. All clear! üëç\",\n+                style: TextStyle(fontSize: 18, color: Colors.grey),\n+              ),\n+            );\n+          }\n \n-        return Scaffold(\n-          appBar: AppBar(\n-            backgroundColor: Colors.deepOrange,\n-            foregroundColor: Colors.white,\n-            title: isMobile\n-                ? Row(\n-                    children: [\n-                      Image.asset('assets/lg.png', height: 75, width: 75),\n-                      const SizedBox(width: 6),\n-                    ],\n-                  )\n-                : const Row(\n-                    children: [\n-                      SizedBox(width: 16),\n-                      Image.asset('assets/lg.png', height: 75, width: 75),\n-                      SizedBox(width: 16),\n-                      Text(\"CampusTracker\"),\n-                    ],\n-                  ),\n-            actions: isMobile\n-                ? [\n-                    GestureDetector(\n-                      child: Card(\n-                        shape: RoundedRectangleBorder(\n-                            borderRadius: BorderRadius.circular(7),\n-                            side: const BorderSide(width: 2, color: Colors.white)),\n-                        color: Colors.deepOrange,\n-                        child: const Padding(\n-                          padding: EdgeInsets.all(1.0),\n-                          child: Icon(Icons.add, size: 22),\n-                        ),\n-                      ),\n-                      onTap: () {\n-                        Navigator.push(context, _createSmoothRoute(const CreatePostPage()));\n-                      },\n-                    ),\n-                    const SizedBox(width: 10),\n-                    IconButton(\n-                        onPressed: () {\n-                          Navigator.push(context, _createSmoothRoute(MessagesPage()));\n-                        },\n-                        icon: const Icon(Icons.messenger_outline_rounded)),\n-                    const SizedBox(width: 10),\n-                  ]\n-                : [\n-                    ResponsiveButton(\n-                      label: \"Home\",\n-                      onPressed: () {\n-                        // Navigating to the same page is unusual, but kept as per original code\n-                        Navigator.push(context, _createSmoothRoute(const HomePage()));\n-                      },\n-                    ),\n-                    ResponsiveButton(\n-                      label: \"New Post\",\n-                      onPressed: () {\n-                        Navigator.push(context, _createSmoothRoute(const CreatePostPage()));\n-                      },\n-                    ),\n-                    ResponsiveButton(\n-                      label: \"My List\",\n-                      onPressed: () {\n-                        Navigator.push(context, _createSmoothRoute(MessagesPage()));\n-                      },\n-                    ),\n-                    ResponsiveButton(\n-                      label: \"My Chats\",\n-                      onPressed: () {\n-                        Navigator.push(context, _createSmoothRoute(MessagesPage()));\n-                      },\n-                    ),\n-                    ResponsiveButton(\n-                      label: \"Profile\",\n-                      onPressed: () {\n-                        Navigator.push(context, _createSmoothRoute(const ProfilePage()));\n-                      },\n-                    ),\n-                    ResponsiveButton(\n-                      label: \"Report\",\n-                      onPressed: () {\n-                        Navigator.push(context, _createSmoothRoute( AdminR()));\n-                      },\n-                    ),\n-                    IconButton(\n-                      icon: const Icon(Icons.logout, color: Colors.white, size: 21),\n-                      onPressed: () {\n-                        _showLogoutDialog(context);\n-                      },\n-                    ),\n-                  ],\n-          ),\n-          drawer: isMobile ? _buildDrawer(context) : null,\n-          body: isMobile\n-              ? const Center(child: LostFoundPage())\n-              : const Column(\n-                  children: [\n-                    Expanded(\n-                      flex: 5,\n-                      child: Center(\n-                        child: LostFoundPage(),\n-                      ),\n-                    ),\n-                  ],\n-                ),\n-        );\n-      },\n-    );\n-  }\n+          final reports = snapshot.data!.docs;\n \n-  Widget _buildDrawer(BuildContext context) {\n-    return MediaQuery(\n-      data: MediaQuery.of(context).copyWith(textScaler: const TextScaler.linear(1.0)),\n-      child: Drawer(\n-        child: Column(\n-          children: [\n-            Container(\n-              height: 120, // Provide a fixed height for the header\n-              width: double.infinity,\n-              color: Colors.deepOrange,\n-              child: Padding(\n-                padding: const EdgeInsets.only(top: 40.0, left: 16.0),\n-                child: Row(\n-                  children: [\n-                    Image.asset('assets/logo2.png', height: 60.0, width: 60.0),\n-                    const SizedBox(width: 16),\n-                    const Text(\n-                      'CampusTracker',\n-                      style: TextStyle(\n-                        fontSize: 24.0,\n-                        fontWeight: FontWeight.bold,\n-                        color: Colors.white,\n-                      ),\n+          return ListView.builder(\n+            itemCount: reports.length,\n+            itemBuilder: (context, index) {\n+              final report = reports[index];\n+              return ReportCard(\n+                report: report,\n+                onTap: () {\n+                  showDialog(\n+                    context: context,\n+                    builder: (dialogContext) => ReportedPostDialog(\n+                      reportId: report.id,\n+                      postId: report['postId'],\n+                      postOwnerId: report['postOwnerId'],\n                     ),\n-                  ],\n-                ),\n-              ),\n-            ),\n-            Expanded(\n-              child: ListView(\n-                padding: EdgeInsets.zero, // Remove top padding from ListView\n-                children: [\n-                  ListTile(\n-                    title: const Text(\"Home\"),\n-                    onTap: () {\n-                      Navigator.pop(context);\n-                    },\n-                  ),\n-                  ListTile(\n-                    title: const Text(\"New Post\"),\n-                    onTap: () {\n-                      Navigator.pop(context);\n-                      Navigator.push(context, _createSmoothRoute(const CreatePostPage()));\n-                    },\n-                  ),\n-                  ListTile(\n-                    title: const Text(\"My List\"),\n-                    onTap: () {\n-                      Navigator.pop(context);\n-                      Navigator.push(context, _createSmoothRoute(MessagesPage()));\n-                    },\n-                  ),\n-                  ListTile(\n-                    title: const Text(\"Profile\"),\n-                    onTap: () {\n-                      Navigator.pop(context);\n-                      Navigator.push(context, _createSmoothRoute(const ProfilePage()));\n-                    },\n-                  ),\n-                ],\n-              ),\n-            ),\n-            GestureDetector(\n-              child: Container(\n-                color: Colors.deepOrange,\n-                padding: const EdgeInsets.all(16),\n-                child: const Row(\n-                  mainAxisAlignment: MainAxisAlignment.center,\n-                  children: [\n-                    Text(\n-                      \"Logout\",\n-                      style: TextStyle(fontSize: 20, fontWeight: FontWeight.w600, color: Colors.white),\n-                    ),\n-                    SizedBox(width: 10),\n-                    Icon(Icons.logout, color: Colors.white),\n-                  ],\n-                ),\n-              ),\n-              onTap: () {\n-                Navigator.pop(context);\n-                _showLogoutDialog(context);\n-              },\n-            ),\n-          ],\n-        ),\n+                  );\n+                },\n+              );\n+            },\n+          );\n+        },\n       ),\n     );\n   }\n-\n-  Future<void> _handleLogout(BuildContext context) async {\n-    try {\n-      await FirebaseAuth.instance.signOut();\n-      // Use pushNamedAndRemoveUntil to clear the navigation stack\n-      Navigator.pushNamedAndRemoveUntil(context, '/login', (route) => false);\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(backgroundColor: Colors.grey, content: Text('Error signing out: $e')),\n-      );\n-    }\n-  }\n-\n-  void _showLogoutDialog(BuildContext context) {\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text(\"Logout\"),\n-          content: const Text(\"Are you sure you want to logout?\", style: TextStyle(fontWeight: FontWeight.w700)),\n-          actions: <Widget>[\n-            TextButton(\n-              child: const Text(\"Cancel\", style: TextStyle(fontWeight: FontWeight.bold)),\n-              onPressed: () {\n-                Navigator.of(context).pop();\n-              },\n-            ),\n-            TextButton(\n-              child: const Text(\"Logout\", style: TextStyle(fontWeight: FontWeight.bold)),\n-              onPressed: () {\n-                Navigator.of(context).pop(); // Close the dialog first\n-                _handleLogout(context);\n-              },\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n }\n-\n-class ResponsiveButton extends StatelessWidget {\n-  final String label;\n-  final VoidCallback onPressed;\n-\n-  const ResponsiveButton({\n-    super.key,\n-    required this.label,\n-    required this.onPressed,\n-  });\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return TextButton(\n-      onPressed: onPressed,\n-      child: Text(\n-        label,\n-        style: const TextStyle(\n-          color: Colors.white,\n-          fontSize: 16,\n-          fontWeight: FontWeight.w600,\n-        ),\n-      ),\n-    );\n-  }\n-}\n"
                },
                {
                    "date": 1756126684269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import 'package:flutter/material.dart';\n import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:l_f/Frontend/Home/admin/report/report_card.dart';\n-import 'package:l_f/Frontend/Home/admin/report/reported_post_dialog.dart';\n+import '../widgets/report_card.dart';\n+import '../widgets/reported_post_dialog.dart';\n \n class AdminReportsPage extends StatelessWidget {\n   const AdminReportsPage({super.key});\n \n@@ -40,17 +40,20 @@\n           return ListView.builder(\n             itemCount: reports.length,\n             itemBuilder: (context, index) {\n               final report = reports[index];\n+              final reportData = report.data() as Map<String, dynamic>;\n               return ReportCard(\n                 report: report,\n                 onTap: () {\n                   showDialog(\n                     context: context,\n                     builder: (dialogContext) => ReportedPostDialog(\n                       reportId: report.id,\n-                      postId: report['postId'],\n-                      postOwnerId: report['postOwnerId'],\n+                      postId: reportData['postId'],\n+                      postOwnerId: reportData['postOwnerId'],\n+                      // --- CHANGE IS HERE: Pass the reporter's ID ---\n+                      reporterId: reportData['reporterId'],\n                     ),\n                   );\n                 },\n               );\n"
                },
                {
                    "date": 1756126736616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,208 @@\n import 'package:flutter/material.dart';\n import 'package:cloud_firestore/cloud_firestore.dart';\n-import '../widgets/report_card.dart';\n-import '../widgets/reported_post_dialog.dart';\n+import 'package:l_f/Frontend/Home/Post/post_model.dart'; // Adjust this import\n+import 'package:l_f/Frontend/Home/home/post_card.dart'; // Adjust this import\n \n-class AdminReportsPage extends StatelessWidget {\n-  const AdminReportsPage({super.key});\n+class ReportedPostDialog extends StatefulWidget {\n+  final String reportId;\n+  final String postId;\n+  final String postOwnerId;\n+  final String reporterId; // Added reporterId\n \n+  const ReportedPostDialog({\n+    super.key,\n+    required this.reportId,\n+    required this.postId,\n+    required this.postOwnerId,\n+    required this.reporterId, // Added reporterId\n+  });\n+\n   @override\n+  State<ReportedPostDialog> createState() => _ReportedPostDialogState();\n+}\n+\n+class _ReportedPostDialogState extends State<ReportedPostDialog> {\n+  final FirebaseFirestore _db = FirebaseFirestore.instance;\n+\n+  // --- ADMIN ACTION 1: Approve report and delete the post ---\n+  Future<void> _approveAndDelelePost() async {\n+    final navigator = Navigator.of(context);\n+    final messenger = ScaffoldMessenger.of(context);\n+\n+    try {\n+      // Use a batch write to perform multiple operations atomically\n+      WriteBatch batch = _db.batch();\n+\n+      // 1. Delete the post\n+      batch.delete(_db.collection('posts').doc(widget.postId));\n+\n+      // 2. Update the report status to \"approved\"\n+      batch.update(_db.collection('reports').doc(widget.reportId), {'status': 'approved'});\n+\n+      await batch.commit();\n+\n+      navigator.pop(); // Close the dialog\n+      messenger.showSnackBar(const SnackBar(\n+        content: Text(\"Report approved and post deleted.\"),\n+        backgroundColor: Colors.green,\n+      ));\n+    } catch (e) {\n+      messenger.showSnackBar(SnackBar(\n+        content: Text(\"Error deleting post: $e\"),\n+        backgroundColor: Colors.red,\n+      ));\n+    }\n+  }\n+\n+  // --- ADMIN ACTION 2: Send a warning to the post owner ---\n+  Future<void> _sendWarningToPostOwner() async {\n+    final navigator = Navigator.of(context);\n+    final messenger = ScaffoldMessenger.of(context);\n+\n+    try {\n+      WriteBatch batch = _db.batch();\n+      \n+      // 1. Create a warning document\n+      batch.set(_db.collection('warnings').doc(), {\n+        'userId': widget.postOwnerId,\n+        'postId': widget.postId,\n+        'reportId': widget.reportId,\n+        'timestamp': FieldValue.serverTimestamp(),\n+        'message': 'Your post (ID: ${widget.postId}) was reported and found to violate community guidelines. This serves as a formal warning.',\n+      });\n+      \n+      // 2. Update the user's warning count\n+      batch.update(_db.collection('users').doc(widget.postOwnerId), {\n+        'warningCount': FieldValue.increment(1)\n+      });\n+      \n+      // 3. Update the report status\n+      batch.update(_db.collection('reports').doc(widget.reportId), {'status': 'warning_sent'});\n+\n+      await batch.commit();\n+\n+      navigator.pop();\n+      messenger.showSnackBar(const SnackBar(\n+        content: Text(\"Warning sent to the post owner.\"),\n+        backgroundColor: Colors.orange,\n+      ));\n+    } catch (e) {\n+      messenger.showSnackBar(SnackBar(\n+        content: Text(\"Error sending warning: $e\"),\n+        backgroundColor: Colors.red,\n+      ));\n+    }\n+  }\n+\n+  // --- ADMIN ACTION 3: Dismiss the report and warn the reporter ---\n+  Future<void> _dismissReportAndWarnReporter() async {\n+    final navigator = Navigator.of(context);\n+    final messenger = ScaffoldMessenger.of(context);\n+\n+    try {\n+      WriteBatch batch = _db.batch();\n+\n+      // 1. Update the report status to \"dismissed\"\n+      batch.update(_db.collection('reports').doc(widget.reportId), {'status': 'dismissed'});\n+\n+      // 2. Create a warning for the reporter about false reporting\n+      batch.set(_db.collection('warnings').doc(), {\n+        'userId': widget.reporterId,\n+        'postId': widget.postId,\n+        'reportId': widget.reportId,\n+        'timestamp': FieldValue.serverTimestamp(),\n+        'message': 'Your report on post (ID: ${widget.postId}) was reviewed and found to be invalid. Please only report content that violates guidelines. This serves as a warning against false reporting.',\n+      });\n+\n+      // 3. Update the reporter's false report count\n+      batch.update(_db.collection('users').doc(widget.reporterId), {\n+        'falseReportCount': FieldValue.increment(1)\n+      });\n+\n+      await batch.commit();\n+\n+      navigator.pop();\n+      messenger.showSnackBar(const SnackBar(\n+        content: Text(\"Report dismissed and reporter has been warned.\"),\n+        backgroundColor: Colors.grey,\n+      ));\n+    } catch (e) {\n+      messenger.showSnackBar(SnackBar(\n+        content: Text(\"Error dismissing report: $e\"),\n+        backgroundColor: Colors.red,\n+      ));\n+    }\n+  }\n+\n+  @override\n   Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        title: const Text(\"Admin - Post Reports\"),\n-        backgroundColor: Colors.deepOrange,\n-        foregroundColor: Colors.white,\n-      ),\n-      body: StreamBuilder<QuerySnapshot>(\n-        stream: FirebaseFirestore.instance\n-            .collection('reports')\n-            .orderBy('timestamp', descending: true)\n-            .snapshots(),\n-        builder: (context, snapshot) {\n-          if (snapshot.connectionState == ConnectionState.waiting) {\n-            return const Center(child: CircularProgressIndicator());\n-          }\n-          if (snapshot.hasError) {\n-            return Center(child: Text(\"Error: ${snapshot.error}\"));\n-          }\n-          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-            return const Center(\n-              child: Text(\n-                \"No reports found. All clear! üëç\",\n-                style: TextStyle(fontSize: 18, color: Colors.grey),\n-              ),\n-            );\n-          }\n+    return AlertDialog(\n+      title: const Text(\"Review Reported Post\"),\n+      content: SizedBox(\n+        width: double.maxFinite,\n+        child: FutureBuilder<DocumentSnapshot>(\n+          future: _db.collection('posts').doc(widget.postId).get(),\n+          builder: (context, snapshot) {\n+            if (snapshot.connectionState == ConnectionState.waiting) {\n+              return const Center(child: CircularProgressIndicator());\n+            }\n+            if (!snapshot.hasData || !snapshot.data!.exists) {\n+              return const Center(\n+                child: Text(\"This post may have already been deleted.\"),\n+              );\n+            }\n+            \n+            final postData = snapshot.data!.data() as Map<String, dynamic>;\n+            \n+            return FutureBuilder<DocumentSnapshot>(\n+              future: _db.collection('users').doc(postData['postmakerId']).get(),\n+              builder: (context, userSnapshot) {\n+                 if (!userSnapshot.hasData) {\n+                    return const Center(child: CircularProgressIndicator());\n+                 }\n+                 \n+                 final userData = userSnapshot.data?.data() as Map<String, dynamic>? ?? {};\n \n-          final reports = snapshot.data!.docs;\n+                 final postModel = PostModel.fromJson({\n+                    ...postData,\n+                    'userName': userData['name'] ?? 'Unknown User',\n+                    'profileImageUrl': userData['profileImageUrl'] ?? '',\n+                    'postTime': 'N/A',\n+                 });\n \n-          return ListView.builder(\n-            itemCount: reports.length,\n-            itemBuilder: (context, index) {\n-              final report = reports[index];\n-              final reportData = report.data() as Map<String, dynamic>;\n-              return ReportCard(\n-                report: report,\n-                onTap: () {\n-                  showDialog(\n-                    context: context,\n-                    builder: (dialogContext) => ReportedPostDialog(\n-                      reportId: report.id,\n-                      postId: reportData['postId'],\n-                      postOwnerId: reportData['postOwnerId'],\n-                      // --- CHANGE IS HERE: Pass the reporter's ID ---\n-                      reporterId: reportData['reporterId'],\n-                    ),\n-                  );\n-                },\n-              );\n-            },\n-          );\n-        },\n+                 return SingleChildScrollView(\n+                   child: PostCard(\n+                     post: postModel,\n+                     isOwner: false,\n+                     onDelete: () {},\n+                     onReport: () {},\n+                   ),\n+                 );\n+              },\n+            );\n+          },\n+        ),\n       ),\n+      actions: <Widget>[\n+        TextButton(\n+          child: const Text('Close'),\n+          onPressed: () => Navigator.of(context).pop(),\n+        ),\n+        TextButton(\n+          child: const Text('Dismiss Report', style: TextStyle(color: Colors.grey)),\n+          onPressed: _dismissReportAndWarnReporter,\n+        ),\n+        ElevatedButton(\n+          style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),\n+          child: const Text('Send Warning'),\n+          onPressed: _sendWarningToPostOwner,\n+        ),\n+        ElevatedButton(\n+          style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n+          child: const Text('Delete Post'),\n+          onPressed: _approveAndDelelePost,\n+        ),\n+      ],\n     );\n   }\n }\n"
                },
                {
                    "date": 1756126743560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import 'package:flutter/material.dart';\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:l_f/Frontend/Home/Post/post_model.dart'; // Adjust this import\n+import 'package:l_f/Frontend/Home/admin/report/pst_card.dart';\n import 'package:l_f/Frontend/Home/home/post_card.dart'; // Adjust this import\n \n class ReportedPostDialog extends StatefulWidget {\n   final String reportId;\n"
                },
                {
                    "date": 1756126772420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n+import 'package:flutter/material.dart';\n import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:flutter/material.dart';\n import 'package:l_f/Frontend/Home/Post/post_model.dart'; // Adjust this import\n import 'package:l_f/Frontend/Home/admin/report/pst_card.dart';\n \n class ReportedPostDialog extends StatefulWidget {\n"
                },
                {
                    "date": 1756126778330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import 'package:flutter/material.dart';\n+import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:l_f/Frontend/Home/Post/post_model.dart'; // Adjust this import\n+import 'package:l_f/Frontend/Home/admin/report/pst_card.dart';\n+import 'package:l_f/Frontend/Home/home/post_card.dart'; // Adjust this import\n+\n+class ReportedPostDialog extends StatefulWidget {\n+  final String reportId;\n+  final String postId;\n+  final String postOwnerId;\n+  final String reporterId; // Added reporterId\n+\n+  const ReportedPostDialog({\n+    super.key,\n+    required this.reportId,\n+    required this.postId,\n+    required this.postOwnerId,\n+    required this.reporterId, // Added reporterId\n+  });\n+\n+  @override\n+  State<ReportedPostDialog> createState() => _ReportedPostDialogState();\n+}\n+\n+class _ReportedPostDialogState extends State<ReportedPostDialog> {\n+  final FirebaseFirestore _db = FirebaseFirestore.instance;\n+\n+  // --- ADMIN ACTION 1: Approve report and delete the post ---\n+  Future<void> _approveAndDelelePost() async {\n+    final navigator = Navigator.of(context);\n+    final messenger = ScaffoldMessenger.of(context);\n+\n+    try {\n+      // Use a batch write to perform multiple operations atomically\n+      WriteBatch batch = _db.batch();\n+\n+      // 1. Delete the post\n+      batch.delete(_db.collection('posts').doc(widget.postId));\n+\n+      // 2. Update the report status to \"approved\"\n+      batch.update(_db.collection('reports').doc(widget.reportId), {'status': 'approved'});\n+\n+      await batch.commit();\n+\n+      navigator.pop(); // Close the dialog\n+      messenger.showSnackBar(const SnackBar(\n+        content: Text(\"Report approved and post deleted.\"),\n+        backgroundColor: Colors.green,\n+      ));\n+    } catch (e) {\n+      messenger.showSnackBar(SnackBar(\n+        content: Text(\"Error deleting post: $e\"),\n+        backgroundColor: Colors.red,\n+      ));\n+    }\n+  }\n+\n+  // --- ADMIN ACTION 2: Send a warning to the post owner ---\n+  Future<void> _sendWarningToPostOwner() async {\n+    final navigator = Navigator.of(context);\n+    final messenger = ScaffoldMessenger.of(context);\n+\n+    try {\n+      WriteBatch batch = _db.batch();\n+      \n+      // 1. Create a warning document\n+      batch.set(_db.collection('warnings').doc(), {\n+        'userId': widget.postOwnerId,\n+        'postId': widget.postId,\n+        'reportId': widget.reportId,\n+        'timestamp': FieldValue.serverTimestamp(),\n+        'message': 'Your post (ID: ${widget.postId}) was reported and found to violate community guidelines. This serves as a formal warning.',\n+      });\n+      \n+      // 2. Update the user's warning count\n+      batch.update(_db.collection('users').doc(widget.postOwnerId), {\n+        'warningCount': FieldValue.increment(1)\n+      });\n+      \n+      // 3. Update the report status\n+      batch.update(_db.collection('reports').doc(widget.reportId), {'status': 'warning_sent'});\n+\n+      await batch.commit();\n+\n+      navigator.pop();\n+      messenger.showSnackBar(const SnackBar(\n+        content: Text(\"Warning sent to the post owner.\"),\n+        backgroundColor: Colors.orange,\n+      ));\n+    } catch (e) {\n+      messenger.showSnackBar(SnackBar(\n+        content: Text(\"Error sending warning: $e\"),\n+        backgroundColor: Colors.red,\n+      ));\n+    }\n+  }\n+\n+  // --- ADMIN ACTION 3: Dismiss the report and warn the reporter ---\n+  Future<void> _dismissReportAndWarnReporter() async {\n+    final navigator = Navigator.of(context);\n+    final messenger = ScaffoldMessenger.of(context);\n+\n+    try {\n+      WriteBatch batch = _db.batch();\n+\n+      // 1. Update the report status to \"dismissed\"\n+      batch.update(_db.collection('reports').doc(widget.reportId), {'status': 'dismissed'});\n+\n+      // 2. Create a warning for the reporter about false reporting\n+      batch.set(_db.collection('warnings').doc(), {\n+        'userId': widget.reporterId,\n+        'postId': widget.postId,\n+        'reportId': widget.reportId,\n+        'timestamp': FieldValue.serverTimestamp(),\n+        'message': 'Your report on post (ID: ${widget.postId}) was reviewed and found to be invalid. Please only report content that violates guidelines. This serves as a warning against false reporting.',\n+      });\n+\n+      // 3. Update the reporter's false report count\n+      batch.update(_db.collection('users').doc(widget.reporterId), {\n+        'falseReportCount': FieldValue.increment(1)\n+      });\n+\n+      await batch.commit();\n+\n+      navigator.pop();\n+      messenger.showSnackBar(const SnackBar(\n+        content: Text(\"Report dismissed and reporter has been warned.\"),\n+        backgroundColor: Colors.grey,\n+      ));\n+    } catch (e) {\n+      messenger.showSnackBar(SnackBar(\n+        content: Text(\"Error dismissing report: $e\"),\n+        backgroundColor: Colors.red,\n+      ));\n+    }\n+  }\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return AlertDialog(\n+      title: const Text(\"Review Reported Post\"),\n+      content: SizedBox(\n+        width: double.maxFinite,\n+        child: FutureBuilder<DocumentSnapshot>(\n+          future: _db.collection('posts').doc(widget.postId).get(),\n+          builder: (context, snapshot) {\n+            if (snapshot.connectionState == ConnectionState.waiting) {\n+              return const Center(child: CircularProgressIndicator());\n+            }\n+            if (!snapshot.hasData || !snapshot.data!.exists) {\n+              return const Center(\n+                child: Text(\"This post may have already been deleted.\"),\n+              );\n+            }\n+            \n+            final postData = snapshot.data!.data() as Map<String, dynamic>;\n+            \n+            return FutureBuilder<DocumentSnapshot>(\n+              future: _db.collection('users').doc(postData['postmakerId']).get(),\n+              builder: (context, userSnapshot) {\n+                 if (!userSnapshot.hasData) {\n+                    return const Center(child: CircularProgressIndicator());\n+                 }\n+                 \n+                 final userData = userSnapshot.data?.data() as Map<String, dynamic>? ?? {};\n+\n+                 final postModel = PostModel.fromJson({\n+                    ...postData,\n+                    'userName': userData['name'] ?? 'Unknown User',\n+                    'profileImageUrl': userData['profileImageUrl'] ?? '',\n+                    'postTime': 'N/A',\n+                 });\n+\n+                 return SingleChildScrollView(\n+                   child: PostCard(\n+                     post: postModel,\n+                     isOwner: false,\n+                     onDelete: () {},\n+                     onReport: () {},\n+                   ),\n+                 );\n+              },\n+            );\n+          },\n+        ),\n+      ),\n+      actions: <Widget>[\n+        TextButton(\n+          child: const Text('Close'),\n+          onPressed: () => Navigator.of(context).pop(),\n+        ),\n+        TextButton(\n+          child: const Text('Dismiss Report', style: TextStyle(color: Colors.grey)),\n+          onPressed: _dismissReportAndWarnReporter,\n+        ),\n+        ElevatedButton(\n+          style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),\n+          child: const Text('Send Warning'),\n+          onPressed: _sendWarningToPostOwner,\n+        ),\n+        ElevatedButton(\n+          style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n+          child: const Text('Delete Post'),\n+          onPressed: _approveAndDelelePost,\n+        ),\n+      ],\n+    );\n+  }\n+}\n"
                }
            ],
            "date": 1756125660807,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport '../widgets/report_card.dart';\nimport '../widgets/reported_post_dialog.dart';\n\nclass AdminReportsPage extends StatelessWidget {\n  const AdminReportsPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text(\"Admin - Post Reports\"),\n        backgroundColor: Colors.indigo,\n      ),\n      body: StreamBuilder<QuerySnapshot>(\n        stream: FirebaseFirestore.instance\n            .collection('reports')\n            .orderBy('timestamp', descending: true)\n            .snapshots(),\n        builder: (context, snapshot) {\n          if (snapshot.connectionState == ConnectionState.waiting) {\n            return const Center(child: CircularProgressIndicator());\n          }\n          if (snapshot.hasError) {\n            return Center(child: Text(\"Error: ${snapshot.error}\"));\n          }\n          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n            return const Center(\n              child: Text(\n                \"No reports found. All clear! üëç\",\n                style: TextStyle(fontSize: 18, color: Colors.grey),\n              ),\n            );\n          }\n\n          final reports = snapshot.data!.docs;\n\n          return ListView.builder(\n            itemCount: reports.length,\n            itemBuilder: (context, index) {\n              final report = reports[index];\n              return ReportCard(\n                report: report,\n                onTap: () {\n                  showDialog(\n                    context: context,\n                    builder: (dialogContext) => ReportedPostDialog(\n                      reportId: report.id,\n                      postId: report['postId'],\n                      postOwnerId: report['postOwnerId'],\n                    ),\n                  );\n                },\n              );\n            },\n          );\n        },\n      ),\n    );\n  }\n}\n"
        }
    ]
}