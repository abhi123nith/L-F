{
    "sourceFile": "lib/Frontend/Home/ChatPage/userchatpage.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 35,
            "patches": [
                {
                    "date": 1747556372708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747556472386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n           ),\n           title:\n               Text(name, style: const TextStyle(fontWeight: FontWeight.bold)),\n           subtitle: const Text(\n-              'Online'), // You can fetch and display actual online status if available\n+              ''), // You can fetch and display actual online status if available\n         ),\n       ),\n     );\n   }\n@@ -133,8 +133,80 @@\n             var messageText = message['message'];\n             var timestamp = (message['timestamp'] as Timestamp).toDate();\n \n             // Check if postId exists\n+            if (postId != null && postId.isNotEmpty) {\n+              return FutureBuilder<DocumentSnapshot>(\n+                future: FirebaseFirestore.instance\n+                    .collection('posts')\n+                    .doc(postId)\n+                    .get(),\n+                builder: (context, postSnapshot) {\n+                  if (postSnapshot.connectionState == ConnectionState.waiting) {\n+                    return const Center(child: CircularProgressIndicator());\n+                  }\n+\n+                  if (!postSnapshot.hasData || !postSnapshot.data!.exists) {\n+                    return const Text('Post not found.');\n+                  }\n+\n+                  var postData = postSnapshot.data!;\n+                  var itemName = postData['item'] ?? 'Unknown';\n+                  var description = postData['description'] ?? 'No description';\n+                  var type = postData['location'] ?? 'Unknown';\n+\n+                  return GestureDetector(\n+                    onTap: () {\n+                      Navigator.push(\n+                        context,\n+                        MaterialPageRoute(\n+                          builder: (_) => PostDetailsPage(postId: postId),\n+                        ),\n+                      );\n+                    },\n+                    child: Card(\n+                      color: isSentByUser ? Colors.blue[100] : Colors.grey[300],\n+                      margin: const EdgeInsets.symmetric(\n+                          vertical: 5, horizontal: 10),\n+                      child: Padding(\n+                        padding: const EdgeInsets.all(10.0),\n+                        child: Column(\n+                          crossAxisAlignment: CrossAxisAlignment.start,\n+                          children: [\n+                            Text(\n+                              'Item: $itemName',\n+                              style: const TextStyle(\n+                                fontWeight: FontWeight.bold,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                            const SizedBox(height: 5),\n+                            Text('Description: $description'),\n+                            const SizedBox(height: 5),\n+                            Text('Location: $type'),\n+                            const SizedBox(height: 10),\n+                            Align(\n+                              alignment: isSentByUser\n+                                  ? Alignment.centerLeft\n+                                  : Alignment.centerRight,\n+                              child: Text(\n+                                '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n+                                style: const TextStyle(\n+                                  fontSize: 12,\n+                                  color: Colors.grey,\n+                                ),\n+                              ),\n+                            ),\n+                            Text('Reply: $messageText'),\n+                          ],\n+                        ),\n+                      ),\n+                    ),\n+                  );\n+                },\n+              );\n+            }\n+\n             // if (postId != null && postId.isNotEmpty) {\n             //   return FutureBuilder<DocumentSnapshot>(\n             //     future: FirebaseFirestore.instance\n             //         .collection('posts')\n"
                },
                {
                    "date": 1747556633137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,13 +23,13 @@\n \n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n-      appBar: AppBar(\n-        title: const Text(\"Chat\"),\n-        backgroundColor: Colors.deepOrange,\n-        foregroundColor: Colors.white,\n-      ),\n+      // appBar: AppBar(\n+      //   title: const Text(\"Chat\"),\n+      //   backgroundColor: Colors.deepOrange,\n+      //   foregroundColor: Colors.white,\n+      // ),\n       body: FutureBuilder<DocumentSnapshot>(\n         future: FirebaseFirestore.instance\n             .collection('users')\n             .doc(widget.otherUserId)\n@@ -84,9 +84,9 @@\n           ),\n           title:\n               Text(name, style: const TextStyle(fontWeight: FontWeight.bold)),\n           subtitle: const Text(\n-              ''), // You can fetch and display actual online status if available\n+              '....'), // You can fetch and display actual online status if available\n         ),\n       ),\n     );\n   }\n"
                },
                {
                    "date": 1747556643888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,13 +23,13 @@\n \n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n-      // appBar: AppBar(\n-      //   title: const Text(\"Chat\"),\n-      //   backgroundColor: Colors.deepOrange,\n-      //   foregroundColor: Colors.white,\n-      // ),\n+      appBar: AppBar(\n+        title: const Text(\"Chat\"),\n+        backgroundColor: Colors.deepOrange,\n+        foregroundColor: Colors.white,\n+      ),\n       body: FutureBuilder<DocumentSnapshot>(\n         future: FirebaseFirestore.instance\n             .collection('users')\n             .doc(widget.otherUserId)\n@@ -84,9 +84,9 @@\n           ),\n           title:\n               Text(name, style: const TextStyle(fontWeight: FontWeight.bold)),\n           subtitle: const Text(\n-              '....'), // You can fetch and display actual online status if available\n+              '...'), // You can fetch and display actual online status if available\n         ),\n       ),\n     );\n   }\n"
                },
                {
                    "date": 1747556855696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,8 +302,9 @@\n                   ),\n                 ),\n               ),\n             );\n+        \n           },\n         );\n       },\n     );\n"
                },
                {
                    "date": 1747556861205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,39 +272,71 @@\n             //       );\n             //     },\n             //   );\n             // }\n+            var imageUrl = message['imageUrl'];\n+            var messageType = message['type'] ?? 'text';\n \n-            // If postId is null, show regular message\n-            return ListTile(\n-              title: Align(\n-                alignment:\n-                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-                child: Container(\n-                  padding: const EdgeInsets.all(10),\n-                  decoration: BoxDecoration(\n-                    color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n-                    borderRadius: BorderRadius.circular(8),\n+            if (messageType == 'image' && imageUrl != null) {\n+              return ListTile(\n+                title: Align(\n+                  alignment: isSentByUser\n+                      ? Alignment.centerRight\n+                      : Alignment.centerLeft,\n+                  child: Container(\n+                    constraints: const BoxConstraints(maxWidth: 200),\n+                    child: ClipRRect(\n+                      borderRadius: BorderRadius.circular(10),\n+                      child: Image.network(\n+                        imageUrl,\n+                        fit: BoxFit.cover,\n+                        errorBuilder: (context, error, stackTrace) =>\n+                            const Text('Image not available'),\n+                      ),\n+                    ),\n                   ),\n-                  child: Text(\n-                    messageText,\n-                    style: const TextStyle(fontSize: 16),\n-                  ),\n                 ),\n-              ),\n-              subtitle: Align(\n-                alignment:\n-                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-                child: Padding(\n-                  padding: const EdgeInsets.only(top: 5),\n+                subtitle: Align(\n+                  alignment: isSentByUser\n+                      ? Alignment.centerRight\n+                      : Alignment.centerLeft,\n                   child: Text(\n                     '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n                     style: const TextStyle(fontSize: 12, color: Colors.grey),\n                   ),\n                 ),\n-              ),\n-            );\n-        \n+              );\n+            }\n+\n+            // If postId is null, show regular message\n+            // return ListTile(\n+            //   title: Align(\n+            //     alignment:\n+            //         isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+            //     child: Container(\n+            //       padding: const EdgeInsets.all(10),\n+            //       decoration: BoxDecoration(\n+            //         color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n+            //         borderRadius: BorderRadius.circular(8),\n+            //       ),\n+            //       child: Text(\n+            //         messageText,\n+            //         style: const TextStyle(fontSize: 16),\n+            //       ),\n+            //     ),\n+            //   ),\n+            //   subtitle: Align(\n+            //     alignment:\n+            //         isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+            //     child: Padding(\n+            //       padding: const EdgeInsets.only(top: 5),\n+            //       child: Text(\n+            //         '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n+            //         style: const TextStyle(fontSize: 12, color: Colors.grey),\n+            //       ),\n+            //     ),\n+            //   ),\n+            // );\n           },\n         );\n       },\n     );\n"
                },
                {
                    "date": 1747556874224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -273,41 +273,38 @@\n             //     },\n             //   );\n             // }\n             var imageUrl = message['imageUrl'];\n-            var messageType = message['type'] ?? 'text';\n+var messageType = message['type'] ?? 'text';\n \n-            if (messageType == 'image' && imageUrl != null) {\n-              return ListTile(\n-                title: Align(\n-                  alignment: isSentByUser\n-                      ? Alignment.centerRight\n-                      : Alignment.centerLeft,\n-                  child: Container(\n-                    constraints: const BoxConstraints(maxWidth: 200),\n-                    child: ClipRRect(\n-                      borderRadius: BorderRadius.circular(10),\n-                      child: Image.network(\n-                        imageUrl,\n-                        fit: BoxFit.cover,\n-                        errorBuilder: (context, error, stackTrace) =>\n-                            const Text('Image not available'),\n-                      ),\n-                    ),\n-                  ),\n-                ),\n-                subtitle: Align(\n-                  alignment: isSentByUser\n-                      ? Alignment.centerRight\n-                      : Alignment.centerLeft,\n-                  child: Text(\n-                    '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n-                    style: const TextStyle(fontSize: 12, color: Colors.grey),\n-                  ),\n-                ),\n-              );\n-            }\n+if (messageType == 'image' && imageUrl != null) {\n+  return ListTile(\n+    title: Align(\n+      alignment: isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+      child: Container(\n+        constraints: const BoxConstraints(maxWidth: 200),\n+        child: ClipRRect(\n+          borderRadius: BorderRadius.circular(10),\n+          child: Image.network(\n+            imageUrl,\n+            fit: BoxFit.cover,\n+            errorBuilder: (context, error, stackTrace) =>\n+                const Text('Image not available'),\n+          ),\n+        ),\n+      ),\n+    ),\n+    subtitle: Align(\n+      alignment: isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+      child: Text(\n+        '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n+        style: const TextStyle(fontSize: 12, color: Colors.grey),\n+      ),\n+    ),\n+  );\n+}\n \n+\n             // If postId is null, show regular message\n             // return ListTile(\n             //   title: Align(\n             //     alignment:\n@@ -335,8 +332,9 @@\n             //       ),\n             //     ),\n             //   ),\n             // );\n+        \n           },\n         );\n       },\n     );\n"
                },
                {
                    "date": 1747556887747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,135 +205,38 @@\n                 },\n               );\n             }\n \n-            // if (postId != null && postId.isNotEmpty) {\n-            //   return FutureBuilder<DocumentSnapshot>(\n-            //     future: FirebaseFirestore.instance\n-            //         .collection('posts')\n-            //         .doc(postId)\n-            //         .get(),\n-            //     builder: (context, postSnapshot) {\n-            //       if (!postSnapshot.hasData) {\n-            //         return const Center(child: CircularProgressIndicator());\n-            //       }\n-\n-            //       var postData = postSnapshot.data!;\n-            //       var itemName = postData['item'] ?? 'Unknown';\n-            //       var description = postData['description'] ?? 'No description';\n-            //       var type = postData['location'] ?? 'Unknown';\n-\n-            //       return GestureDetector(\n-            //         onTap: () {\n-            //           Navigator.push(\n-            //             context,\n-            //             MaterialPageRoute(\n-            //               builder: (_) => PostDetailsPage(postId: postId),\n-            //             ),\n-            //           );\n-            //         },\n-            //         child: Card(\n-            //           color: isSentByUser ? Colors.blue[100] : Colors.grey[300],\n-            //           margin: const EdgeInsets.symmetric(\n-            //               vertical: 5, horizontal: 10),\n-            //           child: Padding(\n-            //             padding: const EdgeInsets.all(10.0),\n-            //             child: Column(\n-            //               crossAxisAlignment: CrossAxisAlignment.start,\n-            //               children: [\n-            //                 Text(\n-            //                   'Item: $itemName',\n-            //                   style: const TextStyle(\n-            //                     fontWeight: FontWeight.bold,\n-            //                     fontSize: 16,\n-            //                   ),\n-            //                 ),\n-            //                 const SizedBox(height: 5),\n-            //                 Text('Description: $description'),\n-            //                 const SizedBox(height: 5),\n-            //                 Text('Location: $type'),\n-            //                 const SizedBox(height: 10),\n-            //                 Align(\n-            //                   alignment: isSentByUser\n-            //                       ? Alignment.centerLeft\n-            //                       : Alignment.centerRight,\n-            //                   child: Text(\n-            //                     '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n-            //                     style: const TextStyle(\n-            //                       fontSize: 12,\n-            //                       color: Colors.grey,\n-            //                     ),\n-            //                   ),\n-            //                 ),\n-            //                 Text('Reply: $messageText'),\n-            //               ],\n-            //             ),\n-            //           ),\n-            //         ),\n-            //       );\n-            //     },\n-            //   );\n-            // }\n-            var imageUrl = message['imageUrl'];\n-var messageType = message['type'] ?? 'text';\n-\n-if (messageType == 'image' && imageUrl != null) {\n-  return ListTile(\n-    title: Align(\n-      alignment: isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-      child: Container(\n-        constraints: const BoxConstraints(maxWidth: 200),\n-        child: ClipRRect(\n-          borderRadius: BorderRadius.circular(10),\n-          child: Image.network(\n-            imageUrl,\n-            fit: BoxFit.cover,\n-            errorBuilder: (context, error, stackTrace) =>\n-                const Text('Image not available'),\n-          ),\n-        ),\n-      ),\n-    ),\n-    subtitle: Align(\n-      alignment: isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-      child: Text(\n-        '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n-        style: const TextStyle(fontSize: 12, color: Colors.grey),\n-      ),\n-    ),\n-  );\n-}\n-\n-\n+       \n             // If postId is null, show regular message\n-            // return ListTile(\n-            //   title: Align(\n-            //     alignment:\n-            //         isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-            //     child: Container(\n-            //       padding: const EdgeInsets.all(10),\n-            //       decoration: BoxDecoration(\n-            //         color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n-            //         borderRadius: BorderRadius.circular(8),\n-            //       ),\n-            //       child: Text(\n-            //         messageText,\n-            //         style: const TextStyle(fontSize: 16),\n-            //       ),\n-            //     ),\n-            //   ),\n-            //   subtitle: Align(\n-            //     alignment:\n-            //         isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-            //     child: Padding(\n-            //       padding: const EdgeInsets.only(top: 5),\n-            //       child: Text(\n-            //         '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n-            //         style: const TextStyle(fontSize: 12, color: Colors.grey),\n-            //       ),\n-            //     ),\n-            //   ),\n-            // );\n+            return ListTile(\n+              title: Align(\n+                alignment:\n+                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+                child: Container(\n+                  padding: const EdgeInsets.all(10),\n+                  decoration: BoxDecoration(\n+                    color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n+                    borderRadius: BorderRadius.circular(8),\n+                  ),\n+                  child: Text(\n+                    messageText,\n+                    style: const TextStyle(fontSize: 16),\n+                  ),\n+                ),\n+              ),\n+              subtitle: Align(\n+                alignment:\n+                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+                child: Padding(\n+                  padding: const EdgeInsets.only(top: 5),\n+                  child: Text(\n+                    '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n+                    style: const TextStyle(fontSize: 12, color: Colors.grey),\n+                  ),\n+                ),\n+              ),\n+            );\n         \n           },\n         );\n       },\n"
                },
                {
                    "date": 1747557017762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n           ),\n           IconButton(\n             icon: const Icon(Icons.send),\n             onPressed: () {\n-              _sendMessage(_messageController.toString());\n+              _sendMessage(_messageController.());\n             },\n           ),\n         ],\n       ),\n"
                },
                {
                    "date": 1747557023836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n           ),\n           IconButton(\n             icon: const Icon(Icons.send),\n             onPressed: () {\n-              _sendMessage(_messageController.());\n+              _sendMessage(_messageController.text.tr());\n             },\n           ),\n         ],\n       ),\n"
                },
                {
                    "date": 1747557045569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,363 @@\n+import 'dart:io';\n+\n+import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:firebase_storage/firebase_storage.dart';\n+import 'package:flutter/material.dart';\n+import 'package:image_picker/image_picker.dart';\n+import 'package:l_f/Frontend/Home/Post/Utils/full_post.dart';\n+import 'package:l_f/Frontend/Profile/user_see_page.dart';\n+\n+class ChatDetailPage extends StatefulWidget {\n+  final String otherUserId;\n+\n+  const ChatDetailPage({required this.otherUserId, super.key});\n+\n+  @override\n+  _ChatDetailPageState createState() => _ChatDetailPageState();\n+}\n+\n+class _ChatDetailPageState extends State<ChatDetailPage> {\n+  final TextEditingController _messageController = TextEditingController();\n+  final User? currentUser = FirebaseAuth.instance.currentUser;\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      appBar: AppBar(\n+        title: const Text(\"Chat\"),\n+        backgroundColor: Colors.deepOrange,\n+        foregroundColor: Colors.white,\n+      ),\n+      body: FutureBuilder<DocumentSnapshot>(\n+        future: FirebaseFirestore.instance\n+            .collection('users')\n+            .doc(widget.otherUserId)\n+            .get(),\n+        builder: (context, snapshot) {\n+          if (snapshot.connectionState == ConnectionState.waiting) {\n+            return const Center(child: CircularProgressIndicator());\n+          }\n+\n+          if (snapshot.hasError) {\n+            return Center(child: Text('Error: ${snapshot.error}'));\n+          }\n+\n+          if (!snapshot.hasData || !snapshot.data!.exists) {\n+            return const Center(child: Text('User not found'));\n+          }\n+\n+          var userData = snapshot.data!.data() as Map<String, dynamic>;\n+          String name = userData['name'] ?? 'Unknown User';\n+          String profileImage = userData['profileImage'] ?? '';\n+\n+          return Column(\n+            children: [\n+              _buildUserProfileSection(name, profileImage),\n+              Expanded(child: _buildChatSection()),\n+              _buildMessageInputSection(),\n+            ],\n+          );\n+        },\n+      ),\n+    );\n+  }\n+\n+  Widget _buildUserProfileSection(String name, String profileImage) {\n+    return GestureDetector(\n+      onTap: () {\n+        Navigator.push(\n+            context,\n+            MaterialPageRoute(\n+                builder: (_) => ProfilePage2(uid: widget.otherUserId)));\n+      },\n+      child: Card(\n+        elevation: 2,\n+        child: ListTile(\n+          leading: CircleAvatar(\n+            radius: 30,\n+            backgroundImage: profileImage.isNotEmpty\n+                ? NetworkImage(profileImage)\n+                : const NetworkImage(\n+                        'https://firebasestorage.googleapis.com/v0/b/lostfound-fe03f.appspot.com/o/images%2F1728657135536_0.jpg?alt=media&token=179c07c7-bf27-4d65-b762-618f0a4e660e')\n+                    as ImageProvider,\n+          ),\n+          title:\n+              Text(name, style: const TextStyle(fontWeight: FontWeight.bold)),\n+          subtitle: const Text(\n+              '...'), // You can fetch and display actual online status if available\n+        ),\n+      ),\n+    );\n+  }\n+\n+  Widget _buildChatSection() {\n+    return StreamBuilder<QuerySnapshot>(\n+      stream: FirebaseFirestore.instance\n+          .collection('chats')\n+          .where('participants', arrayContains: currentUser!.uid)\n+          .orderBy('timestamp', descending: true)\n+          .snapshots(),\n+      builder: (context, snapshot) {\n+        if (snapshot.connectionState == ConnectionState.waiting) {\n+          return const Center(child: CircularProgressIndicator());\n+        }\n+\n+        if (snapshot.hasError) {\n+          return Center(child: Text('Error: ${snapshot.error}'));\n+        }\n+\n+        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+          return const Center(child: Text('No messages yet'));\n+        }\n+\n+        var messages = snapshot.data!.docs.where((doc) {\n+          var data = doc.data() as Map<String, dynamic>;\n+          return (data['senderId'] == currentUser!.uid &&\n+                  data['receiverId'] == widget.otherUserId) ||\n+              (data['senderId'] == widget.otherUserId &&\n+                  data['receiverId'] == currentUser!.uid);\n+        }).toList();\n+\n+        if (messages.isEmpty) {\n+          return const Center(child: Text('No messages yet'));\n+        }\n+\n+        return ListView.builder(\n+          reverse: true,\n+          itemCount: messages.length,\n+          itemBuilder: (context, index) {\n+            var message = messages[index];\n+            var postId = message['postId'];\n+            var isSentByUser = message['senderId'] == currentUser!.uid;\n+            var messageText = message['message'];\n+            var timestamp = (message['timestamp'] as Timestamp).toDate();\n+\n+            // Check if postId exists\n+            if (postId != null && postId.isNotEmpty) {\n+              return FutureBuilder<DocumentSnapshot>(\n+                future: FirebaseFirestore.instance\n+                    .collection('posts')\n+                    .doc(postId)\n+                    .get(),\n+                builder: (context, postSnapshot) {\n+                  if (postSnapshot.connectionState == ConnectionState.waiting) {\n+                    return const Center(child: CircularProgressIndicator());\n+                  }\n+\n+                  if (!postSnapshot.hasData || !postSnapshot.data!.exists) {\n+                    return const Text('Post not found.');\n+                  }\n+\n+                  var postData = postSnapshot.data!;\n+                  var itemName = postData['item'] ?? 'Unknown';\n+                  var description = postData['description'] ?? 'No description';\n+                  var type = postData['location'] ?? 'Unknown';\n+\n+                  return GestureDetector(\n+                    onTap: () {\n+                      Navigator.push(\n+                        context,\n+                        MaterialPageRoute(\n+                          builder: (_) => PostDetailsPage(postId: postId),\n+                        ),\n+                      );\n+                    },\n+                    child: Card(\n+                      color: isSentByUser ? Colors.blue[100] : Colors.grey[300],\n+                      margin: const EdgeInsets.symmetric(\n+                          vertical: 5, horizontal: 10),\n+                      child: Padding(\n+                        padding: const EdgeInsets.all(10.0),\n+                        child: Column(\n+                          crossAxisAlignment: CrossAxisAlignment.start,\n+                          children: [\n+                            Text(\n+                              'Item: $itemName',\n+                              style: const TextStyle(\n+                                fontWeight: FontWeight.bold,\n+                                fontSize: 16,\n+                              ),\n+                            ),\n+                            const SizedBox(height: 5),\n+                            Text('Description: $description'),\n+                            const SizedBox(height: 5),\n+                            Text('Location: $type'),\n+                            const SizedBox(height: 10),\n+                            Align(\n+                              alignment: isSentByUser\n+                                  ? Alignment.centerLeft\n+                                  : Alignment.centerRight,\n+                              child: Text(\n+                                '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n+                                style: const TextStyle(\n+                                  fontSize: 12,\n+                                  color: Colors.grey,\n+                                ),\n+                              ),\n+                            ),\n+                            Text('Reply: $messageText'),\n+                          ],\n+                        ),\n+                      ),\n+                    ),\n+                  );\n+                },\n+              );\n+            }\n+\n+       \n+            // If postId is null, show regular message\n+            return ListTile(\n+              title: Align(\n+                alignment:\n+                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+                child: Container(\n+                  padding: const EdgeInsets.all(10),\n+                  decoration: BoxDecoration(\n+                    color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n+                    borderRadius: BorderRadius.circular(8),\n+                  ),\n+                  child: Text(\n+                    messageText,\n+                    style: const TextStyle(fontSize: 16),\n+                  ),\n+                ),\n+              ),\n+              subtitle: Align(\n+                alignment:\n+                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+                child: Padding(\n+                  padding: const EdgeInsets.only(top: 5),\n+                  child: Text(\n+                    '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n+                    style: const TextStyle(fontSize: 12, color: Colors.grey),\n+                  ),\n+                ),\n+              ),\n+            );\n+        \n+          },\n+        );  \n+      },\n+    );\n+  }\n+\n+  Widget _buildMessageInputSection() {\n+    return Padding(\n+      padding: const EdgeInsets.all(8.0),\n+      child: Row(\n+        children: [\n+          // Button to pick image or video\n+          IconButton(\n+            icon: const Icon(Icons.photo),\n+            onPressed: _pickImageOrVideo,\n+          ),\n+          Expanded(\n+            child: TextFormField(\n+              controller: _messageController,\n+              decoration: const InputDecoration(\n+                labelText: 'Type your message...',\n+                border: OutlineInputBorder(),\n+              ),\n+              maxLines: null,\n+            ),\n+          ),\n+          IconButton(\n+            icon: const Icon(Icons.send),\n+            onPressed: () {\n+              _sendMessage(_messageController.text.trim());\n+            },\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  Future<void> _pickImageOrVideo() async {\n+    final picker = ImagePicker();\n+    final XFile? pickedFile = await picker.pickImage(\n+      source: ImageSource.gallery,\n+      // for video, you can use picker.pickVideo() or pick from both\n+    );\n+\n+    if (pickedFile != null) {\n+      File file = File(pickedFile.path);\n+      String fileUrl = await _uploadFile(file);\n+\n+      // Send the message with media URL\n+      _sendMessageWithMedia(fileUrl, 'image'); // 'image' or 'video'\n+    }\n+  }\n+\n+  Future<String> _uploadFile(File file) async {\n+    try {\n+      // Upload the selected image or video to Firebase Storage\n+      String fileName = DateTime.now().millisecondsSinceEpoch.toString();\n+      Reference storageRef =\n+          FirebaseStorage.instance.ref().child('chats/$fileName');\n+\n+      UploadTask uploadTask = storageRef.putFile(file);\n+      TaskSnapshot taskSnapshot = await uploadTask;\n+\n+      String fileUrl = await taskSnapshot.ref.getDownloadURL();\n+      return fileUrl;\n+    } catch (e) {\n+      print(\"Error uploading file: $e\");\n+      return '';\n+    }\n+  }\n+\n+  void _sendMessage(String message) async {\n+    message = _messageController.text.trim();\n+    if (message.isNotEmpty) {\n+      try {\n+        await FirebaseFirestore.instance.collection('chats').add({\n+          'senderId': currentUser!.uid,\n+          'receiverId': widget.otherUserId,\n+          'participants': [currentUser!.uid, widget.otherUserId],\n+          'message': message,\n+          'timestamp': Timestamp.now(),\n+          'postId': '',\n+          'mediaUrl': '', // Add a field for media URL\n+          'mediaType': '', // 'image' or 'video' to distinguish media type\n+        });\n+        _messageController.clear();\n+      } catch (e) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(\n+            content: Text('Failed to send message: $e'),\n+            backgroundColor: Colors.red,\n+          ),\n+        );\n+      }\n+    }\n+  }\n+\n+// Send message with media (image/video URL)\n+  void _sendMessageWithMedia(String fileUrl, String mediaType) async {\n+    String message = _messageController.text.trim();\n+    if (message.isNotEmpty || fileUrl.isNotEmpty) {\n+      try {\n+        await FirebaseFirestore.instance.collection('chats').add({\n+          'senderId': currentUser!.uid,\n+          'receiverId': widget.otherUserId,\n+          'participants': [currentUser!.uid, widget.otherUserId],\n+          'message': message,\n+          'timestamp': Timestamp.now(),\n+          'postId': '',\n+          'mediaUrl': fileUrl, // Store media URL\n+          'mediaType': mediaType, // 'image' or 'video'\n+        });\n+        _messageController.clear();\n+      } catch (e) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(\n+            content: Text('Failed to send message: $e'),\n+            backgroundColor: Colors.red,\n+          ),\n+        );\n+      }\n+    }\n+  }\n+}\n"
                },
                {
                    "date": 1747557057368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,9 +235,9 @@\n                   ),\n                 ),\n               ),\n             );\n-        \n+          }\n           },\n         );  \n       },\n     );\n@@ -360,367 +360,4 @@\n       }\n     }\n   }\n }\n-import 'dart:io';\n-\n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:firebase_storage/firebase_storage.dart';\n-import 'package:flutter/material.dart';\n-import 'package:image_picker/image_picker.dart';\n-import 'package:l_f/Frontend/Home/Post/Utils/full_post.dart';\n-import 'package:l_f/Frontend/Profile/user_see_page.dart';\n-\n-class ChatDetailPage extends StatefulWidget {\n-  final String otherUserId;\n-\n-  const ChatDetailPage({required this.otherUserId, super.key});\n-\n-  @override\n-  _ChatDetailPageState createState() => _ChatDetailPageState();\n-}\n-\n-class _ChatDetailPageState extends State<ChatDetailPage> {\n-  final TextEditingController _messageController = TextEditingController();\n-  final User? currentUser = FirebaseAuth.instance.currentUser;\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      appBar: AppBar(\n-        title: const Text(\"Chat\"),\n-        backgroundColor: Colors.deepOrange,\n-        foregroundColor: Colors.white,\n-      ),\n-      body: FutureBuilder<DocumentSnapshot>(\n-        future: FirebaseFirestore.instance\n-            .collection('users')\n-            .doc(widget.otherUserId)\n-            .get(),\n-        builder: (context, snapshot) {\n-          if (snapshot.connectionState == ConnectionState.waiting) {\n-            return const Center(child: CircularProgressIndicator());\n-          }\n-\n-          if (snapshot.hasError) {\n-            return Center(child: Text('Error: ${snapshot.error}'));\n-          }\n-\n-          if (!snapshot.hasData || !snapshot.data!.exists) {\n-            return const Center(child: Text('User not found'));\n-          }\n-\n-          var userData = snapshot.data!.data() as Map<String, dynamic>;\n-          String name = userData['name'] ?? 'Unknown User';\n-          String profileImage = userData['profileImage'] ?? '';\n-\n-          return Column(\n-            children: [\n-              _buildUserProfileSection(name, profileImage),\n-              Expanded(child: _buildChatSection()),\n-              _buildMessageInputSection(),\n-            ],\n-          );\n-        },\n-      ),\n-    );\n-  }\n-\n-  Widget _buildUserProfileSection(String name, String profileImage) {\n-    return GestureDetector(\n-      onTap: () {\n-        Navigator.push(\n-            context,\n-            MaterialPageRoute(\n-                builder: (_) => ProfilePage2(uid: widget.otherUserId)));\n-      },\n-      child: Card(\n-        elevation: 2,\n-        child: ListTile(\n-          leading: CircleAvatar(\n-            radius: 30,\n-            backgroundImage: profileImage.isNotEmpty\n-                ? NetworkImage(profileImage)\n-                : const NetworkImage(\n-                        'https://firebasestorage.googleapis.com/v0/b/lostfound-fe03f.appspot.com/o/images%2F1728657135536_0.jpg?alt=media&token=179c07c7-bf27-4d65-b762-618f0a4e660e')\n-                    as ImageProvider,\n-          ),\n-          title:\n-              Text(name, style: const TextStyle(fontWeight: FontWeight.bold)),\n-          subtitle: const Text(\n-              '...'), // You can fetch and display actual online status if available\n-        ),\n-      ),\n-    );\n-  }\n-\n-  Widget _buildChatSection() {\n-    return StreamBuilder<QuerySnapshot>(\n-      stream: FirebaseFirestore.instance\n-          .collection('chats')\n-          .where('participants', arrayContains: currentUser!.uid)\n-          .orderBy('timestamp', descending: true)\n-          .snapshots(),\n-      builder: (context, snapshot) {\n-        if (snapshot.connectionState == ConnectionState.waiting) {\n-          return const Center(child: CircularProgressIndicator());\n-        }\n-\n-        if (snapshot.hasError) {\n-          return Center(child: Text('Error: ${snapshot.error}'));\n-        }\n-\n-        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-          return const Center(child: Text('No messages yet'));\n-        }\n-\n-        var messages = snapshot.data!.docs.where((doc) {\n-          var data = doc.data() as Map<String, dynamic>;\n-          return (data['senderId'] == currentUser!.uid &&\n-                  data['receiverId'] == widget.otherUserId) ||\n-              (data['senderId'] == widget.otherUserId &&\n-                  data['receiverId'] == currentUser!.uid);\n-        }).toList();\n-\n-        if (messages.isEmpty) {\n-          return const Center(child: Text('No messages yet'));\n-        }\n-\n-        return ListView.builder(\n-          reverse: true,\n-          itemCount: messages.length,\n-          itemBuilder: (context, index) {\n-            var message = messages[index];\n-            var postId = message['postId'];\n-            var isSentByUser = message['senderId'] == currentUser!.uid;\n-            var messageText = message['message'];\n-            var timestamp = (message['timestamp'] as Timestamp).toDate();\n-\n-            // Check if postId exists\n-            if (postId != null && postId.isNotEmpty) {\n-              return FutureBuilder<DocumentSnapshot>(\n-                future: FirebaseFirestore.instance\n-                    .collection('posts')\n-                    .doc(postId)\n-                    .get(),\n-                builder: (context, postSnapshot) {\n-                  if (postSnapshot.connectionState == ConnectionState.waiting) {\n-                    return const Center(child: CircularProgressIndicator());\n-                  }\n-\n-                  if (!postSnapshot.hasData || !postSnapshot.data!.exists) {\n-                    return const Text('Post not found.');\n-                  }\n-\n-                  var postData = postSnapshot.data!;\n-                  var itemName = postData['item'] ?? 'Unknown';\n-                  var description = postData['description'] ?? 'No description';\n-                  var type = postData['location'] ?? 'Unknown';\n-\n-                  return GestureDetector(\n-                    onTap: () {\n-                      Navigator.push(\n-                        context,\n-                        MaterialPageRoute(\n-                          builder: (_) => PostDetailsPage(postId: postId),\n-                        ),\n-                      );\n-                    },\n-                    child: Card(\n-                      color: isSentByUser ? Colors.blue[100] : Colors.grey[300],\n-                      margin: const EdgeInsets.symmetric(\n-                          vertical: 5, horizontal: 10),\n-                      child: Padding(\n-                        padding: const EdgeInsets.all(10.0),\n-                        child: Column(\n-                          crossAxisAlignment: CrossAxisAlignment.start,\n-                          children: [\n-                            Text(\n-                              'Item: $itemName',\n-                              style: const TextStyle(\n-                                fontWeight: FontWeight.bold,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                            const SizedBox(height: 5),\n-                            Text('Description: $description'),\n-                            const SizedBox(height: 5),\n-                            Text('Location: $type'),\n-                            const SizedBox(height: 10),\n-                            Align(\n-                              alignment: isSentByUser\n-                                  ? Alignment.centerLeft\n-                                  : Alignment.centerRight,\n-                              child: Text(\n-                                '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n-                                style: const TextStyle(\n-                                  fontSize: 12,\n-                                  color: Colors.grey,\n-                                ),\n-                              ),\n-                            ),\n-                            Text('Reply: $messageText'),\n-                          ],\n-                        ),\n-                      ),\n-                    ),\n-                  );\n-                },\n-              );\n-            }\n-\n-       \n-            // If postId is null, show regular message\n-            return ListTile(\n-              title: Align(\n-                alignment:\n-                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-                child: Container(\n-                  padding: const EdgeInsets.all(10),\n-                  decoration: BoxDecoration(\n-                    color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n-                    borderRadius: BorderRadius.circular(8),\n-                  ),\n-                  child: Text(\n-                    messageText,\n-                    style: const TextStyle(fontSize: 16),\n-                  ),\n-                ),\n-              ),\n-              subtitle: Align(\n-                alignment:\n-                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-                child: Padding(\n-                  padding: const EdgeInsets.only(top: 5),\n-                  child: Text(\n-                    '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n-                    style: const TextStyle(fontSize: 12, color: Colors.grey),\n-                  ),\n-                ),\n-              ),\n-            );\n-        \n-          },\n-        );\n-      },\n-    );\n-  }\n-\n-  Widget _buildMessageInputSection() {\n-    return Padding(\n-      padding: const EdgeInsets.all(8.0),\n-      child: Row(\n-        children: [\n-          // Button to pick image or video\n-          IconButton(\n-            icon: const Icon(Icons.photo),\n-            onPressed: _pickImageOrVideo,\n-          ),\n-          Expanded(\n-            child: TextFormField(\n-              controller: _messageController,\n-              decoration: const InputDecoration(\n-                labelText: 'Type your message...',\n-                border: OutlineInputBorder(),\n-              ),\n-              maxLines: null,\n-            ),\n-          ),\n-          IconButton(\n-            icon: const Icon(Icons.send),\n-            onPressed: () {\n-              _sendMessage(_messageController.text.tr());\n-            },\n-          ),\n-        ],\n-      ),\n-    );\n-  }\n-\n-  Future<void> _pickImageOrVideo() async {\n-    final picker = ImagePicker();\n-    final XFile? pickedFile = await picker.pickImage(\n-      source: ImageSource.gallery,\n-      // for video, you can use picker.pickVideo() or pick from both\n-    );\n-\n-    if (pickedFile != null) {\n-      File file = File(pickedFile.path);\n-      String fileUrl = await _uploadFile(file);\n-\n-      // Send the message with media URL\n-      _sendMessageWithMedia(fileUrl, 'image'); // 'image' or 'video'\n-    }\n-  }\n-\n-  Future<String> _uploadFile(File file) async {\n-    try {\n-      // Upload the selected image or video to Firebase Storage\n-      String fileName = DateTime.now().millisecondsSinceEpoch.toString();\n-      Reference storageRef =\n-          FirebaseStorage.instance.ref().child('chats/$fileName');\n-\n-      UploadTask uploadTask = storageRef.putFile(file);\n-      TaskSnapshot taskSnapshot = await uploadTask;\n-\n-      String fileUrl = await taskSnapshot.ref.getDownloadURL();\n-      return fileUrl;\n-    } catch (e) {\n-      print(\"Error uploading file: $e\");\n-      return '';\n-    }\n-  }\n-\n-  void _sendMessage(String message) async {\n-    message = _messageController.text.trim();\n-    if (message.isNotEmpty) {\n-      try {\n-        await FirebaseFirestore.instance.collection('chats').add({\n-          'senderId': currentUser!.uid,\n-          'receiverId': widget.otherUserId,\n-          'participants': [currentUser!.uid, widget.otherUserId],\n-          'message': message,\n-          'timestamp': Timestamp.now(),\n-          'postId': '',\n-          'mediaUrl': '', // Add a field for media URL\n-          'mediaType': '', // 'image' or 'video' to distinguish media type\n-        });\n-        _messageController.clear();\n-      } catch (e) {\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(\n-            content: Text('Failed to send message: $e'),\n-            backgroundColor: Colors.red,\n-          ),\n-        );\n-      }\n-    }\n-  }\n-\n-// Send message with media (image/video URL)\n-  void _sendMessageWithMedia(String fileUrl, String mediaType) async {\n-    String message = _messageController.text.trim();\n-    if (message.isNotEmpty || fileUrl.isNotEmpty) {\n-      try {\n-        await FirebaseFirestore.instance.collection('chats').add({\n-          'senderId': currentUser!.uid,\n-          'receiverId': widget.otherUserId,\n-          'participants': [currentUser!.uid, widget.otherUserId],\n-          'message': message,\n-          'timestamp': Timestamp.now(),\n-          'postId': '',\n-          'mediaUrl': fileUrl, // Store media URL\n-          'mediaType': mediaType, // 'image' or 'video'\n-        });\n-        _messageController.clear();\n-      } catch (e) {\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(\n-            content: Text('Failed to send message: $e'),\n-            backgroundColor: Colors.red,\n-          ),\n-        );\n-      }\n-    }\n-  }\n-}\n"
                },
                {
                    "date": 1747557065614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,8 +207,9 @@\n             }\n \n        \n             // If postId is null, show regular message\n+            if (message['mediaUrl'] != null && message['mediaUrl'] != ''){}\n             return ListTile(\n               title: Align(\n                 alignment:\n                     isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n"
                },
                {
                    "date": 1747557129580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,38 +207,38 @@\n             }\n \n        \n             // If postId is null, show regular message\n-            if (message['mediaUrl'] != null && message['mediaUrl'] != ''){}\n-            return ListTile(\n-              title: Align(\n-                alignment:\n-                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-                child: Container(\n-                  padding: const EdgeInsets.all(10),\n-                  decoration: BoxDecoration(\n-                    color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n-                    borderRadius: BorderRadius.circular(8),\n-                  ),\n-                  child: Text(\n-                    messageText,\n-                    style: const TextStyle(fontSize: 16),\n-                  ),\n-                ),\n-              ),\n-              subtitle: Align(\n-                alignment:\n-                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-                child: Padding(\n-                  padding: const EdgeInsets.only(top: 5),\n-                  child: Text(\n-                    '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n-                    style: const TextStyle(fontSize: 12, color: Colors.grey),\n-                  ),\n-                ),\n-              ),\n-            );\n-          }\n+          //   if (message['mediaUrl'] != null && message['mediaUrl'] != ''){\n+          //   return ListTile(\n+          //     title: Align(\n+          //       alignment:\n+          //           isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+          //       child: Container(\n+          //         padding: const EdgeInsets.all(10),\n+          //         decoration: BoxDecoration(\n+          //           color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n+          //           borderRadius: BorderRadius.circular(8),\n+          //         ),\n+          //         child: Text(\n+          //           messageText,\n+          //           style: const TextStyle(fontSize: 16),\n+          //         ),\n+          //       ),\n+          //     ),\n+          //     subtitle: Align(\n+          //       alignment:\n+          //           isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+          //       child: Padding(\n+          //         padding: const EdgeInsets.only(top: 5),\n+          //         child: Text(\n+          //           '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n+          //           style: const TextStyle(fontSize: 12, color: Colors.grey),\n+          //         ),\n+          //       ),\n+          //     ),\n+          //   );\n+          // }\n           },\n         );  \n       },\n     );\n"
                },
                {
                    "date": 1747557135329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,8 +206,53 @@\n               );\n             }\n \n        \n+       if (message['mediaUrl'] != null && message['mediaUrl'] != '') {\n+  return ListTile(\n+    title: Align(\n+      alignment: isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+      child: Column(\n+        crossAxisAlignment:\n+            isSentByUser ? CrossAxisAlignment.end : CrossAxisAlignment.start,\n+        children: [\n+          if (message['mediaType'] == 'image')\n+            Container(\n+              constraints: const BoxConstraints(maxWidth: 250),\n+              margin: const EdgeInsets.only(bottom: 5),\n+              child: ClipRRect(\n+                borderRadius: BorderRadius.circular(10),\n+                child: Image.network(\n+                  message['mediaUrl'],\n+                  fit: BoxFit.cover,\n+                ),\n+              ),\n+            ),\n+          if (messageText.isNotEmpty)\n+            Container(\n+              padding: const EdgeInsets.all(10),\n+              decoration: BoxDecoration(\n+                color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n+                borderRadius: BorderRadius.circular(8),\n+              ),\n+              child: Text(\n+                messageText,\n+                style: const TextStyle(fontSize: 16),\n+              ),\n+            ),\n+          Padding(\n+            padding: const EdgeInsets.only(top: 5),\n+            child: Text(\n+              '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n+              style: const TextStyle(fontSize: 12, color: Colors.grey),\n+            ),\n+          ),\n+        ],\n+      ),\n+    ),\n+  );\n+}\n+\n             // If postId is null, show regular message\n           //   if (message['mediaUrl'] != null && message['mediaUrl'] != ''){\n           //   return ListTile(\n           //     title: Align(\n"
                },
                {
                    "date": 1747557177039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n           ),\n           IconButton(\n             icon: const Icon(Icons.send),\n             onPressed: () {\n-              _sendMessage(_messageController.text.trim());\n+              _sendMessage(_messageController.texttrim());\n             },\n           ),\n         ],\n       ),\n"
                },
                {
                    "date": 1747557282683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,9 @@\n           ),\n           IconButton(\n             icon: const Icon(Icons.send),\n             onPressed: () {\n-              _sendMessage(_messageController.texttrim());\n+              _sendMessage(_messageController.toString());\n             },\n           ),\n         ],\n       ),\n@@ -353,33 +353,33 @@\n       return '';\n     }\n   }\n \n-  void _sendMessage(String message) async {\n-    message = _messageController.text.trim();\n-    if (message.isNotEmpty) {\n-      try {\n-        await FirebaseFirestore.instance.collection('chats').add({\n-          'senderId': currentUser!.uid,\n-          'receiverId': widget.otherUserId,\n-          'participants': [currentUser!.uid, widget.otherUserId],\n-          'message': message,\n-          'timestamp': Timestamp.now(),\n-          'postId': '',\n-          'mediaUrl': '', // Add a field for media URL\n-          'mediaType': '', // 'image' or 'video' to distinguish media type\n-        });\n-        _messageController.clear();\n-      } catch (e) {\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(\n-            content: Text('Failed to send message: $e'),\n-            backgroundColor: Colors.red,\n-          ),\n-        );\n-      }\n-    }\n-  }\n+  // void _sendMessage(String message) async {\n+  //   message = _messageController.text.trim();\n+  //   if (message.isNotEmpty) {\n+  //     try {\n+  //       await FirebaseFirestore.instance.collection('chats').add({\n+  //         'senderId': currentUser!.uid,\n+  //         'receiverId': widget.otherUserId,\n+  //         'participants': [currentUser!.uid, widget.otherUserId],\n+  //         'message': message,\n+  //         'timestamp': Timestamp.now(),\n+  //         'postId': '',\n+  //         'mediaUrl': '', // Add a field for media URL\n+  //         'mediaType': '', // 'image' or 'video' to distinguish media type\n+  //       });\n+  //       _messageController.clear();\n+  //     } catch (e) {\n+  //       ScaffoldMessenger.of(context).showSnackBar(\n+  //         SnackBar(\n+  //           content: Text('Failed to send message: $e'),\n+  //           backgroundColor: Colors.red,\n+  //         ),\n+  //       );\n+  //     }\n+  //   }\n+  // }\n \n // Send message with media (image/video URL)\n   void _sendMessageWithMedia(String fileUrl, String mediaType) async {\n     String message = _messageController.text.trim();\n"
                },
                {
                    "date": 1747557311637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -353,33 +353,33 @@\n       return '';\n     }\n   }\n \n-  // void _sendMessage(String message) async {\n-  //   message = _messageController.text.trim();\n-  //   if (message.isNotEmpty) {\n-  //     try {\n-  //       await FirebaseFirestore.instance.collection('chats').add({\n-  //         'senderId': currentUser!.uid,\n-  //         'receiverId': widget.otherUserId,\n-  //         'participants': [currentUser!.uid, widget.otherUserId],\n-  //         'message': message,\n-  //         'timestamp': Timestamp.now(),\n-  //         'postId': '',\n-  //         'mediaUrl': '', // Add a field for media URL\n-  //         'mediaType': '', // 'image' or 'video' to distinguish media type\n-  //       });\n-  //       _messageController.clear();\n-  //     } catch (e) {\n-  //       ScaffoldMessenger.of(context).showSnackBar(\n-  //         SnackBar(\n-  //           content: Text('Failed to send message: $e'),\n-  //           backgroundColor: Colors.red,\n-  //         ),\n-  //       );\n-  //     }\n-  //   }\n-  // }\n+  void _sendMessage(String message) async {\n+    message = _messageController.text.trim();\n+    if (message.isNotEmpty) {\n+      try {\n+        await FirebaseFirestore.instance.collection('chats').add({\n+          'senderId': currentUser!.uid,\n+          'receiverId': widget.otherUserId,\n+          'participants': [currentUser!.uid, widget.otherUserId],\n+          'message': message,\n+          'timestamp': Timestamp.now(),\n+          'postId': '',\n+          'mediaUrl': '', // Add a field for media URL\n+          'mediaType': '', // 'image' or 'video' to distinguish media type\n+        });\n+        _messageController.clear();\n+      } catch (e) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(\n+            content: Text('Failed to send message: $e'),\n+            backgroundColor: Colors.red,\n+          ),\n+        );\n+      }\n+    }\n+  }\n \n // Send message with media (image/video URL)\n   void _sendMessageWithMedia(String fileUrl, String mediaType) async {\n     String message = _messageController.text.trim();\n"
                },
                {
                    "date": 1747557317386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,84 +206,39 @@\n               );\n             }\n \n        \n-       if (message['mediaUrl'] != null && message['mediaUrl'] != '') {\n-  return ListTile(\n-    title: Align(\n-      alignment: isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-      child: Column(\n-        crossAxisAlignment:\n-            isSentByUser ? CrossAxisAlignment.end : CrossAxisAlignment.start,\n-        children: [\n-          if (message['mediaType'] == 'image')\n-            Container(\n-              constraints: const BoxConstraints(maxWidth: 250),\n-              margin: const EdgeInsets.only(bottom: 5),\n-              child: ClipRRect(\n-                borderRadius: BorderRadius.circular(10),\n-                child: Image.network(\n-                  message['mediaUrl'],\n-                  fit: BoxFit.cover,\n+            // If postId is null, show regular message\n+            \n+            return ListTile(\n+              title: Align(\n+                alignment:\n+                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+                child: Container(\n+                  padding: const EdgeInsets.all(10),\n+                  decoration: BoxDecoration(\n+                    color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n+                    borderRadius: BorderRadius.circular(8),\n+                  ),\n+                  child: Text(\n+                    messageText,\n+                    style: const TextStyle(fontSize: 16),\n+                  ),\n                 ),\n               ),\n-            ),\n-          if (messageText.isNotEmpty)\n-            Container(\n-              padding: const EdgeInsets.all(10),\n-              decoration: BoxDecoration(\n-                color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n-                borderRadius: BorderRadius.circular(8),\n+              subtitle: Align(\n+                alignment:\n+                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+                child: Padding(\n+                  padding: const EdgeInsets.only(top: 5),\n+                  child: Text(\n+                    '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n+                    style: const TextStyle(fontSize: 12, color: Colors.grey),\n+                  ),\n+                ),\n               ),\n-              child: Text(\n-                messageText,\n-                style: const TextStyle(fontSize: 16),\n-              ),\n-            ),\n-          Padding(\n-            padding: const EdgeInsets.only(top: 5),\n-            child: Text(\n-              '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n-              style: const TextStyle(fontSize: 12, color: Colors.grey),\n-            ),\n-          ),\n-        ],\n-      ),\n-    ),\n-  );\n-}\n-\n-            // If postId is null, show regular message\n-          //   if (message['mediaUrl'] != null && message['mediaUrl'] != ''){\n-          //   return ListTile(\n-          //     title: Align(\n-          //       alignment:\n-          //           isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-          //       child: Container(\n-          //         padding: const EdgeInsets.all(10),\n-          //         decoration: BoxDecoration(\n-          //           color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n-          //           borderRadius: BorderRadius.circular(8),\n-          //         ),\n-          //         child: Text(\n-          //           messageText,\n-          //           style: const TextStyle(fontSize: 16),\n-          //         ),\n-          //       ),\n-          //     ),\n-          //     subtitle: Align(\n-          //       alignment:\n-          //           isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-          //       child: Padding(\n-          //         padding: const EdgeInsets.only(top: 5),\n-          //         child: Text(\n-          //           '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n-          //           style: const TextStyle(fontSize: 12, color: Colors.grey),\n-          //         ),\n-          //       ),\n-          //     ),\n-          //   );\n-          // }\n+            );\n+          }\n           },\n         );  \n       },\n     );\n@@ -311,9 +266,9 @@\n           ),\n           IconButton(\n             icon: const Icon(Icons.send),\n             onPressed: () {\n-              _sendMessage(_messageController.toString());\n+              _sendMessage(_messageController.text.trim());\n             },\n           ),\n         ],\n       ),\n"
                },
                {
                    "date": 1747557338488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n           ),\n           title:\n               Text(name, style: const TextStyle(fontWeight: FontWeight.bold)),\n           subtitle: const Text(\n-              '...'), // You can fetch and display actual online status if available\n+              ''), // You can fetch and display actual online status if available\n         ),\n       ),\n     );\n   }\n@@ -140,16 +140,12 @@\n                     .collection('posts')\n                     .doc(postId)\n                     .get(),\n                 builder: (context, postSnapshot) {\n-                  if (postSnapshot.connectionState == ConnectionState.waiting) {\n+                  if (!postSnapshot.hasData) {\n                     return const Center(child: CircularProgressIndicator());\n                   }\n \n-                  if (!postSnapshot.hasData || !postSnapshot.data!.exists) {\n-                    return const Text('Post not found.');\n-                  }\n-\n                   var postData = postSnapshot.data!;\n                   var itemName = postData['item'] ?? 'Unknown';\n                   var description = postData['description'] ?? 'No description';\n                   var type = postData['location'] ?? 'Unknown';\n@@ -205,11 +201,9 @@\n                 },\n               );\n             }\n \n-       \n             // If postId is null, show regular message\n-            \n             return ListTile(\n               title: Align(\n                 alignment:\n                     isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n@@ -236,11 +230,10 @@\n                   ),\n                 ),\n               ),\n             );\n-          }\n           },\n-        );  \n+        );\n       },\n     );\n   }\n \n@@ -266,9 +259,9 @@\n           ),\n           IconButton(\n             icon: const Icon(Icons.send),\n             onPressed: () {\n-              _sendMessage(_messageController.text.trim());\n+              _sendMessage(_messageController.toString());\n             },\n           ),\n         ],\n       ),\n"
                },
                {
                    "date": 1747557461994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n           ),\n           title:\n               Text(name, style: const TextStyle(fontWeight: FontWeight.bold)),\n           subtitle: const Text(\n-              ''), // You can fetch and display actual online status if available\n+              '...'), // You can fetch and display actual online status if available\n         ),\n       ),\n     );\n   }\n@@ -259,9 +259,9 @@\n           ),\n           IconButton(\n             icon: const Icon(Icons.send),\n             onPressed: () {\n-              _sendMessage(_messageController.toString());\n+              // _sendMessage(_messageController.toString());\n             },\n           ),\n         ],\n       ),\n"
                },
                {
                    "date": 1747557467280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -259,8 +259,10 @@\n           ),\n           IconButton(\n             icon: const Icon(Icons.send),\n             onPressed: () {\n+              _sendMessage(_messageController.text.trim());\n+\n               // _sendMessage(_messageController.toString());\n             },\n           ),\n         ],\n"
                },
                {
                    "date": 1747557486357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,33 +303,33 @@\n       return '';\n     }\n   }\n \n-  void _sendMessage(String message) async {\n-    message = _messageController.text.trim();\n-    if (message.isNotEmpty) {\n-      try {\n-        await FirebaseFirestore.instance.collection('chats').add({\n-          'senderId': currentUser!.uid,\n-          'receiverId': widget.otherUserId,\n-          'participants': [currentUser!.uid, widget.otherUserId],\n-          'message': message,\n-          'timestamp': Timestamp.now(),\n-          'postId': '',\n-          'mediaUrl': '', // Add a field for media URL\n-          'mediaType': '', // 'image' or 'video' to distinguish media type\n-        });\n-        _messageController.clear();\n-      } catch (e) {\n-        ScaffoldMessenger.of(context).showSnackBar(\n-          SnackBar(\n-            content: Text('Failed to send message: $e'),\n-            backgroundColor: Colors.red,\n-          ),\n-        );\n-      }\n-    }\n-  }\n+  // void _sendMessage(String message) async {\n+  //   message = _messageController.text.trim();\n+  //   if (message.isNotEmpty) {\n+  //     try {\n+  //       await FirebaseFirestore.instance.collection('chats').add({\n+  //         'senderId': currentUser!.uid,\n+  //         'receiverId': widget.otherUserId,\n+  //         'participants': [currentUser!.uid, widget.otherUserId],\n+  //         'message': message,\n+  //         'timestamp': Timestamp.now(),\n+  //         'postId': '',\n+  //         'mediaUrl': '', // Add a field for media URL\n+  //         'mediaType': '', // 'image' or 'video' to distinguish media type\n+  //       });\n+  //       _messageController.clear();\n+  //     } catch (e) {\n+  //       ScaffoldMessenger.of(context).showSnackBar(\n+  //         SnackBar(\n+  //           content: Text('Failed to send message: $e'),\n+  //           backgroundColor: Colors.red,\n+  //         ),\n+  //       );\n+  //     }\n+  //   }\n+  // }\n \n // Send message with media (image/video URL)\n   void _sendMessageWithMedia(String fileUrl, String mediaType) async {\n     String message = _messageController.text.trim();\n"
                },
                {
                    "date": 1747557516482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,8 +131,9 @@\n             var postId = message['postId'];\n             var isSentByUser = message['senderId'] == currentUser!.uid;\n             var messageText = message['message'];\n             var timestamp = (message['timestamp'] as Timestamp).toDate();\n+            \n \n             // Check if postId exists\n             if (postId != null && postId.isNotEmpty) {\n               return FutureBuilder<DocumentSnapshot>(\n@@ -302,9 +303,34 @@\n       print(\"Error uploading file: $e\");\n       return '';\n     }\n   }\n+  void _sendMessage(String message) async {\n+  if (message.isNotEmpty) {\n+    try {\n+      await FirebaseFirestore.instance.collection('chats').add({\n+        'senderId': currentUser!.uid,\n+        'receiverId': widget.otherUserId,\n+        'participants': [currentUser!.uid, widget.otherUserId],\n+        'message': message,\n+        'timestamp': Timestamp.now(),\n+        'postId': '',\n+        'mediaUrl': '',\n+        'mediaType': '',\n+      });\n+      _messageController.clear();\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          content: Text('Failed to send message: $e'),\n+          backgroundColor: Colors.red,\n+        ),\n+      );\n+    }\n+  }\n+}\n \n+\n   // void _sendMessage(String message) async {\n   //   message = _messageController.text.trim();\n   //   if (message.isNotEmpty) {\n   //     try {\n"
                },
                {
                    "date": 1747557584002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,10 @@\n             var postId = message['postId'];\n             var isSentByUser = message['senderId'] == currentUser!.uid;\n             var messageText = message['message'];\n             var timestamp = (message['timestamp'] as Timestamp).toDate();\n-            \n+            var mediaUrl = message['mediaUrl'] ?? '';\n+            var mediaType = message['mediaType'] ?? '';\n \n             // Check if postId exists\n             if (postId != null && postId.isNotEmpty) {\n               return FutureBuilder<DocumentSnapshot>(\n@@ -231,8 +232,9 @@\n                   ),\n                 ),\n               ),\n             );\n+        \n           },\n         );\n       },\n     );\n@@ -303,34 +305,34 @@\n       print(\"Error uploading file: $e\");\n       return '';\n     }\n   }\n+\n   void _sendMessage(String message) async {\n-  if (message.isNotEmpty) {\n-    try {\n-      await FirebaseFirestore.instance.collection('chats').add({\n-        'senderId': currentUser!.uid,\n-        'receiverId': widget.otherUserId,\n-        'participants': [currentUser!.uid, widget.otherUserId],\n-        'message': message,\n-        'timestamp': Timestamp.now(),\n-        'postId': '',\n-        'mediaUrl': '',\n-        'mediaType': '',\n-      });\n-      _messageController.clear();\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-          content: Text('Failed to send message: $e'),\n-          backgroundColor: Colors.red,\n-        ),\n-      );\n+    if (message.isNotEmpty) {\n+      try {\n+        await FirebaseFirestore.instance.collection('chats').add({\n+          'senderId': currentUser!.uid,\n+          'receiverId': widget.otherUserId,\n+          'participants': [currentUser!.uid, widget.otherUserId],\n+          'message': message,\n+          'timestamp': Timestamp.now(),\n+          'postId': '',\n+          'mediaUrl': '',\n+          'mediaType': '',\n+        });\n+        _messageController.clear();\n+      } catch (e) {\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          SnackBar(\n+            content: Text('Failed to send message: $e'),\n+            backgroundColor: Colors.red,\n+          ),\n+        );\n+      }\n     }\n   }\n-}\n \n-\n   // void _sendMessage(String message) async {\n   //   message = _messageController.text.trim();\n   //   if (message.isNotEmpty) {\n   //     try {\n"
                },
                {
                    "date": 1747557599859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,9 +232,36 @@\n                   ),\n                 ),\n               ),\n             );\n-        \n+        // Media messages\n+if (mediaUrl.isNotEmpty) {\n+  return Align(\n+    alignment: isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+    child: Column(\n+      crossAxisAlignment:\n+          isSentByUser ? CrossAxisAlignment.end : CrossAxisAlignment.start,\n+      children: [\n+        Card(\n+          margin: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),\n+          child: mediaType == 'image'\n+              ? Image.network(mediaUrl)\n+              : mediaType == 'video'\n+                  ? Text('📹 Video: $mediaUrl') // Replace with video widget\n+                  : Text('Unsupported media'),\n+        ),\n+        Padding(\n+          padding: const EdgeInsets.only(right: 10, left: 10),\n+          child: Text(\n+            '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n+            style: const TextStyle(fontSize: 12, color: Colors.grey),\n+          ),\n+        ),\n+      ],\n+    ),\n+  );\n+}\n+\n           },\n         );\n       },\n     );\n"
                },
                {
                    "date": 1747557729069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,184 +90,157 @@\n       ),\n     );\n   }\n \n-  Widget _buildChatSection() {\n-    return StreamBuilder<QuerySnapshot>(\n-      stream: FirebaseFirestore.instance\n-          .collection('chats')\n-          .where('participants', arrayContains: currentUser!.uid)\n-          .orderBy('timestamp', descending: true)\n-          .snapshots(),\n-      builder: (context, snapshot) {\n-        if (snapshot.connectionState == ConnectionState.waiting) {\n-          return const Center(child: CircularProgressIndicator());\n-        }\n+  // Widget _buildChatSection() {\n+  //   return StreamBuilder<QuerySnapshot>(\n+  //     stream: FirebaseFirestore.instance\n+  //         .collection('chats')\n+  //         .where('participants', arrayContains: currentUser!.uid)\n+  //         .orderBy('timestamp', descending: true)\n+  //         .snapshots(),\n+  //     builder: (context, snapshot) {\n+  //       if (snapshot.connectionState == ConnectionState.waiting) {\n+  //         return const Center(child: CircularProgressIndicator());\n+  //       }\n \n-        if (snapshot.hasError) {\n-          return Center(child: Text('Error: ${snapshot.error}'));\n-        }\n+  //       if (snapshot.hasError) {\n+  //         return Center(child: Text('Error: ${snapshot.error}'));\n+  //       }\n \n-        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-          return const Center(child: Text('No messages yet'));\n-        }\n+  //       if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+  //         return const Center(child: Text('No messages yet'));\n+  //       }\n \n-        var messages = snapshot.data!.docs.where((doc) {\n-          var data = doc.data() as Map<String, dynamic>;\n-          return (data['senderId'] == currentUser!.uid &&\n-                  data['receiverId'] == widget.otherUserId) ||\n-              (data['senderId'] == widget.otherUserId &&\n-                  data['receiverId'] == currentUser!.uid);\n-        }).toList();\n+  //       var messages = snapshot.data!.docs.where((doc) {\n+  //         var data = doc.data() as Map<String, dynamic>;\n+  //         return (data['senderId'] == currentUser!.uid &&\n+  //                 data['receiverId'] == widget.otherUserId) ||\n+  //             (data['senderId'] == widget.otherUserId &&\n+  //                 data['receiverId'] == currentUser!.uid);\n+  //       }).toList();\n \n-        if (messages.isEmpty) {\n-          return const Center(child: Text('No messages yet'));\n-        }\n+  //       if (messages.isEmpty) {\n+  //         return const Center(child: Text('No messages yet'));\n+  //       }\n \n-        return ListView.builder(\n-          reverse: true,\n-          itemCount: messages.length,\n-          itemBuilder: (context, index) {\n-            var message = messages[index];\n-            var postId = message['postId'];\n-            var isSentByUser = message['senderId'] == currentUser!.uid;\n-            var messageText = message['message'];\n-            var timestamp = (message['timestamp'] as Timestamp).toDate();\n-            var mediaUrl = message['mediaUrl'] ?? '';\n-            var mediaType = message['mediaType'] ?? '';\n+  //       return ListView.builder(\n+  //         reverse: true,\n+  //         itemCount: messages.length,\n+  //         itemBuilder: (context, index) {\n+  //           var message = messages[index];\n+  //           var postId = message['postId'];\n+  //           var isSentByUser = message['senderId'] == currentUser!.uid;\n+  //           var messageText = message['message'];\n+  //           var timestamp = (message['timestamp'] as Timestamp).toDate();\n+  //           var mediaUrl = message['mediaUrl'] ?? '';\n+  //           var mediaType = message['mediaType'] ?? '';\n \n-            // Check if postId exists\n-            if (postId != null && postId.isNotEmpty) {\n-              return FutureBuilder<DocumentSnapshot>(\n-                future: FirebaseFirestore.instance\n-                    .collection('posts')\n-                    .doc(postId)\n-                    .get(),\n-                builder: (context, postSnapshot) {\n-                  if (!postSnapshot.hasData) {\n-                    return const Center(child: CircularProgressIndicator());\n-                  }\n+  //           // Check if postId exists\n+  //           if (postId != null && postId.isNotEmpty) {\n+  //             return FutureBuilder<DocumentSnapshot>(\n+  //               future: FirebaseFirestore.instance\n+  //                   .collection('posts')\n+  //                   .doc(postId)\n+  //                   .get(),\n+  //               builder: (context, postSnapshot) {\n+  //                 if (!postSnapshot.hasData) {\n+  //                   return const Center(child: CircularProgressIndicator());\n+  //                 }\n \n-                  var postData = postSnapshot.data!;\n-                  var itemName = postData['item'] ?? 'Unknown';\n-                  var description = postData['description'] ?? 'No description';\n-                  var type = postData['location'] ?? 'Unknown';\n+  //                 var postData = postSnapshot.data!;\n+  //                 var itemName = postData['item'] ?? 'Unknown';\n+  //                 var description = postData['description'] ?? 'No description';\n+  //                 var type = postData['location'] ?? 'Unknown';\n \n-                  return GestureDetector(\n-                    onTap: () {\n-                      Navigator.push(\n-                        context,\n-                        MaterialPageRoute(\n-                          builder: (_) => PostDetailsPage(postId: postId),\n-                        ),\n-                      );\n-                    },\n-                    child: Card(\n-                      color: isSentByUser ? Colors.blue[100] : Colors.grey[300],\n-                      margin: const EdgeInsets.symmetric(\n-                          vertical: 5, horizontal: 10),\n-                      child: Padding(\n-                        padding: const EdgeInsets.all(10.0),\n-                        child: Column(\n-                          crossAxisAlignment: CrossAxisAlignment.start,\n-                          children: [\n-                            Text(\n-                              'Item: $itemName',\n-                              style: const TextStyle(\n-                                fontWeight: FontWeight.bold,\n-                                fontSize: 16,\n-                              ),\n-                            ),\n-                            const SizedBox(height: 5),\n-                            Text('Description: $description'),\n-                            const SizedBox(height: 5),\n-                            Text('Location: $type'),\n-                            const SizedBox(height: 10),\n-                            Align(\n-                              alignment: isSentByUser\n-                                  ? Alignment.centerLeft\n-                                  : Alignment.centerRight,\n-                              child: Text(\n-                                '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n-                                style: const TextStyle(\n-                                  fontSize: 12,\n-                                  color: Colors.grey,\n-                                ),\n-                              ),\n-                            ),\n-                            Text('Reply: $messageText'),\n-                          ],\n-                        ),\n-                      ),\n-                    ),\n-                  );\n-                },\n-              );\n-            }\n+  //                 return GestureDetector(\n+  //                   onTap: () {\n+  //                     Navigator.push(\n+  //                       context,\n+  //                       MaterialPageRoute(\n+  //                         builder: (_) => PostDetailsPage(postId: postId),\n+  //                       ),\n+  //                     );\n+  //                   },\n+  //                   child: Card(\n+  //                     color: isSentByUser ? Colors.blue[100] : Colors.grey[300],\n+  //                     margin: const EdgeInsets.symmetric(\n+  //                         vertical: 5, horizontal: 10),\n+  //                     child: Padding(\n+  //                       padding: const EdgeInsets.all(10.0),\n+  //                       child: Column(\n+  //                         crossAxisAlignment: CrossAxisAlignment.start,\n+  //                         children: [\n+  //                           Text(\n+  //                             'Item: $itemName',\n+  //                             style: const TextStyle(\n+  //                               fontWeight: FontWeight.bold,\n+  //                               fontSize: 16,\n+  //                             ),\n+  //                           ),\n+  //                           const SizedBox(height: 5),\n+  //                           Text('Description: $description'),\n+  //                           const SizedBox(height: 5),\n+  //                           Text('Location: $type'),\n+  //                           const SizedBox(height: 10),\n+  //                           Align(\n+  //                             alignment: isSentByUser\n+  //                                 ? Alignment.centerLeft\n+  //                                 : Alignment.centerRight,\n+  //                             child: Text(\n+  //                               '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n+  //                               style: const TextStyle(\n+  //                                 fontSize: 12,\n+  //                                 color: Colors.grey,\n+  //                               ),\n+  //                             ),\n+  //                           ),\n+  //                           Text('Reply: $messageText'),\n+  //                         ],\n+  //                       ),\n+  //                     ),\n+  //                   ),\n+  //                 );\n+  //               },\n+  //             );\n+  //           }\n \n-            // If postId is null, show regular message\n-            return ListTile(\n-              title: Align(\n-                alignment:\n-                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-                child: Container(\n-                  padding: const EdgeInsets.all(10),\n-                  decoration: BoxDecoration(\n-                    color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n-                    borderRadius: BorderRadius.circular(8),\n-                  ),\n-                  child: Text(\n-                    messageText,\n-                    style: const TextStyle(fontSize: 16),\n-                  ),\n-                ),\n-              ),\n-              subtitle: Align(\n-                alignment:\n-                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-                child: Padding(\n-                  padding: const EdgeInsets.only(top: 5),\n-                  child: Text(\n-                    '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n-                    style: const TextStyle(fontSize: 12, color: Colors.grey),\n-                  ),\n-                ),\n-              ),\n-            );\n-        // Media messages\n-if (mediaUrl.isNotEmpty) {\n-  return Align(\n-    alignment: isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-    child: Column(\n-      crossAxisAlignment:\n-          isSentByUser ? CrossAxisAlignment.end : CrossAxisAlignment.start,\n-      children: [\n-        Card(\n-          margin: const EdgeInsets.symmetric(vertical: 5, horizontal: 10),\n-          child: mediaType == 'image'\n-              ? Image.network(mediaUrl)\n-              : mediaType == 'video'\n-                  ? Text('📹 Video: $mediaUrl') // Replace with video widget\n-                  : Text('Unsupported media'),\n-        ),\n-        Padding(\n-          padding: const EdgeInsets.only(right: 10, left: 10),\n-          child: Text(\n-            '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n-            style: const TextStyle(fontSize: 12, color: Colors.grey),\n-          ),\n-        ),\n-      ],\n-    ),\n-  );\n-}\n+  //           // If postId is null, show regular message\n+  //           return ListTile(\n+  //             title: Align(\n+  //               alignment:\n+  //                   isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+  //               child: Container(\n+  //                 padding: const EdgeInsets.all(10),\n+  //                 decoration: BoxDecoration(\n+  //                   color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n+  //                   borderRadius: BorderRadius.circular(8),\n+  //                 ),\n+  //                 child: Text(\n+  //                   messageText,\n+  //                   style: const TextStyle(fontSize: 16),\n+  //                 ),\n+  //               ),\n+  //             ),\n+  //             subtitle: Align(\n+  //               alignment:\n+  //                   isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+  //               child: Padding(\n+  //                 padding: const EdgeInsets.only(top: 5),\n+  //                 child: Text(\n+  //                   '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n+  //                   style: const TextStyle(fontSize: 12, color: Colors.grey),\n+  //                 ),\n+  //               ),\n+  //             ),\n+  //           );\n+        \n+  //         },\n+  //       );\n+  //     },\n+  //   );\n+  // }\n \n-          },\n-        );\n-      },\n-    );\n-  }\n-\n   Widget _buildMessageInputSection() {\n     return Padding(\n       padding: const EdgeInsets.all(8.0),\n       child: Row(\n"
                },
                {
                    "date": 1747557811133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,157 +90,181 @@\n       ),\n     );\n   }\n \n-  // Widget _buildChatSection() {\n-  //   return StreamBuilder<QuerySnapshot>(\n-  //     stream: FirebaseFirestore.instance\n-  //         .collection('chats')\n-  //         .where('participants', arrayContains: currentUser!.uid)\n-  //         .orderBy('timestamp', descending: true)\n-  //         .snapshots(),\n-  //     builder: (context, snapshot) {\n-  //       if (snapshot.connectionState == ConnectionState.waiting) {\n-  //         return const Center(child: CircularProgressIndicator());\n-  //       }\n+Widget _buildChatSection() {\n+  return StreamBuilder<QuerySnapshot>(\n+    stream: FirebaseFirestore.instance\n+        .collection('chats')\n+        .where('participants', arrayContains: currentUser!.uid)\n+        .orderBy('timestamp', descending: true)\n+        .snapshots(),\n+    builder: (context, snapshot) {\n+      if (snapshot.connectionState == ConnectionState.waiting) {\n+        return const Center(child: CircularProgressIndicator());\n+      }\n \n-  //       if (snapshot.hasError) {\n-  //         return Center(child: Text('Error: ${snapshot.error}'));\n-  //       }\n+      if (snapshot.hasError) {\n+        return Center(child: Text('Error: ${snapshot.error}'));\n+      }\n \n-  //       if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-  //         return const Center(child: Text('No messages yet'));\n-  //       }\n+      if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+        return const Center(child: Text('No messages yet'));\n+      }\n \n-  //       var messages = snapshot.data!.docs.where((doc) {\n-  //         var data = doc.data() as Map<String, dynamic>;\n-  //         return (data['senderId'] == currentUser!.uid &&\n-  //                 data['receiverId'] == widget.otherUserId) ||\n-  //             (data['senderId'] == widget.otherUserId &&\n-  //                 data['receiverId'] == currentUser!.uid);\n-  //       }).toList();\n+      var messages = snapshot.data!.docs.where((doc) {\n+        var data = doc.data() as Map<String, dynamic>;\n+        return (data['senderId'] == currentUser!.uid &&\n+                data['receiverId'] == widget.otherUserId) ||\n+            (data['senderId'] == widget.otherUserId &&\n+                data['receiverId'] == currentUser!.uid);\n+      }).toList();\n \n-  //       if (messages.isEmpty) {\n-  //         return const Center(child: Text('No messages yet'));\n-  //       }\n+      if (messages.isEmpty) {\n+        return const Center(child: Text('No messages yet'));\n+      }\n \n-  //       return ListView.builder(\n-  //         reverse: true,\n-  //         itemCount: messages.length,\n-  //         itemBuilder: (context, index) {\n-  //           var message = messages[index];\n-  //           var postId = message['postId'];\n-  //           var isSentByUser = message['senderId'] == currentUser!.uid;\n-  //           var messageText = message['message'];\n-  //           var timestamp = (message['timestamp'] as Timestamp).toDate();\n-  //           var mediaUrl = message['mediaUrl'] ?? '';\n-  //           var mediaType = message['mediaType'] ?? '';\n+      return ListView.builder(\n+        reverse: true,\n+        itemCount: messages.length,\n+        itemBuilder: (context, index) {\n+          var message = messages[index];\n+          var data = message.data() as Map<String, dynamic>;\n \n-  //           // Check if postId exists\n-  //           if (postId != null && postId.isNotEmpty) {\n-  //             return FutureBuilder<DocumentSnapshot>(\n-  //               future: FirebaseFirestore.instance\n-  //                   .collection('posts')\n-  //                   .doc(postId)\n-  //                   .get(),\n-  //               builder: (context, postSnapshot) {\n-  //                 if (!postSnapshot.hasData) {\n-  //                   return const Center(child: CircularProgressIndicator());\n-  //                 }\n+          final postId = data['postId'] ?? '';\n+          final isSentByUser = data['senderId'] == currentUser!.uid;\n+          final messageText = data['message'] ?? '';\n+          final timestamp = (data['timestamp'] as Timestamp).toDate();\n+          final mediaUrl = data['mediaUrl'] ?? '';\n+          final mediaType = data['mediaType'] ?? '';\n \n-  //                 var postData = postSnapshot.data!;\n-  //                 var itemName = postData['item'] ?? 'Unknown';\n-  //                 var description = postData['description'] ?? 'No description';\n-  //                 var type = postData['location'] ?? 'Unknown';\n+          // Timestamp string\n+          final formattedTime =\n+              '${timestamp.hour.toString().padLeft(2, '0')}:${timestamp.minute.toString().padLeft(2, '0')} - ${timestamp.day}/${timestamp.month}/${timestamp.year}';\n \n-  //                 return GestureDetector(\n-  //                   onTap: () {\n-  //                     Navigator.push(\n-  //                       context,\n-  //                       MaterialPageRoute(\n-  //                         builder: (_) => PostDetailsPage(postId: postId),\n-  //                       ),\n-  //                     );\n-  //                   },\n-  //                   child: Card(\n-  //                     color: isSentByUser ? Colors.blue[100] : Colors.grey[300],\n-  //                     margin: const EdgeInsets.symmetric(\n-  //                         vertical: 5, horizontal: 10),\n-  //                     child: Padding(\n-  //                       padding: const EdgeInsets.all(10.0),\n-  //                       child: Column(\n-  //                         crossAxisAlignment: CrossAxisAlignment.start,\n-  //                         children: [\n-  //                           Text(\n-  //                             'Item: $itemName',\n-  //                             style: const TextStyle(\n-  //                               fontWeight: FontWeight.bold,\n-  //                               fontSize: 16,\n-  //                             ),\n-  //                           ),\n-  //                           const SizedBox(height: 5),\n-  //                           Text('Description: $description'),\n-  //                           const SizedBox(height: 5),\n-  //                           Text('Location: $type'),\n-  //                           const SizedBox(height: 10),\n-  //                           Align(\n-  //                             alignment: isSentByUser\n-  //                                 ? Alignment.centerLeft\n-  //                                 : Alignment.centerRight,\n-  //                             child: Text(\n-  //                               '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n-  //                               style: const TextStyle(\n-  //                                 fontSize: 12,\n-  //                                 color: Colors.grey,\n-  //                               ),\n-  //                             ),\n-  //                           ),\n-  //                           Text('Reply: $messageText'),\n-  //                         ],\n-  //                       ),\n-  //                     ),\n-  //                   ),\n-  //                 );\n-  //               },\n-  //             );\n-  //           }\n+          // Show message with associated post\n+          if (postId.isNotEmpty) {\n+            return FutureBuilder<DocumentSnapshot>(\n+              future: FirebaseFirestore.instance.collection('posts').doc(postId).get(),\n+              builder: (context, postSnapshot) {\n+                if (postSnapshot.connectionState == ConnectionState.waiting) {\n+                  return const Center(child: CircularProgressIndicator());\n+                }\n \n-  //           // If postId is null, show regular message\n-  //           return ListTile(\n-  //             title: Align(\n-  //               alignment:\n-  //                   isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-  //               child: Container(\n-  //                 padding: const EdgeInsets.all(10),\n-  //                 decoration: BoxDecoration(\n-  //                   color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n-  //                   borderRadius: BorderRadius.circular(8),\n-  //                 ),\n-  //                 child: Text(\n-  //                   messageText,\n-  //                   style: const TextStyle(fontSize: 16),\n-  //                 ),\n-  //               ),\n-  //             ),\n-  //             subtitle: Align(\n-  //               alignment:\n-  //                   isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-  //               child: Padding(\n-  //                 padding: const EdgeInsets.only(top: 5),\n-  //                 child: Text(\n-  //                   '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n-  //                   style: const TextStyle(fontSize: 12, color: Colors.grey),\n-  //                 ),\n-  //               ),\n-  //             ),\n-  //           );\n-        \n-  //         },\n-  //       );\n-  //     },\n-  //   );\n-  // }\n+                if (!postSnapshot.hasData || !postSnapshot.data!.exists) {\n+                  return const SizedBox.shrink(); // Hide if post doesn't exist\n+                }\n \n+                final postData = postSnapshot.data!;\n+                final itemName = postData['item'] ?? 'Unknown';\n+                final description = postData['description'] ?? 'No description';\n+                final location = postData['location'] ?? 'Unknown';\n+\n+                return GestureDetector(\n+                  onTap: () {\n+                    Navigator.push(\n+                      context,\n+                      MaterialPageRoute(\n+                        builder: (_) => PostDetailsPage(postId: postId),\n+                      ),\n+                    );\n+                  },\n+                  child: Card(\n+                    color: isSentByUser ? Colors.blue[50] : Colors.grey[200],\n+                    margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 12),\n+                    child: Padding(\n+                      padding: const EdgeInsets.all(12),\n+                      child: Column(\n+                        crossAxisAlignment: CrossAxisAlignment.start,\n+                        children: [\n+                          Text('Item: $itemName',\n+                              style: const TextStyle(\n+                                  fontWeight: FontWeight.bold, fontSize: 16)),\n+                          const SizedBox(height: 4),\n+                          Text('Description: $description'),\n+                          const SizedBox(height: 4),\n+                          Text('Location: $location'),\n+                          const SizedBox(height: 10),\n+                          if (mediaUrl.isNotEmpty && mediaType == 'image')\n+                            ClipRRect(\n+                              borderRadius: BorderRadius.circular(8),\n+                              child: Image.network(mediaUrl, height: 150),\n+                            ),\n+                          if (messageText.isNotEmpty) ...[\n+                            const SizedBox(height: 10),\n+                            Text('Reply: $messageText'),\n+                          ],\n+                          const SizedBox(height: 8),\n+                          Align(\n+                            alignment: isSentByUser\n+                                ? Alignment.centerLeft\n+                                : Alignment.centerRight,\n+                            child: Text(\n+                              formattedTime,\n+                              style: const TextStyle(\n+                                fontSize: 12,\n+                                color: Colors.grey,\n+                              ),\n+                            ),\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                  ),\n+                );\n+              },\n+            );\n+          }\n+\n+          // Show normal message (without post)\n+          return ListTile(\n+            contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),\n+            title: Align(\n+              alignment:\n+                  isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+              child: Column(\n+                crossAxisAlignment: isSentByUser\n+                    ? CrossAxisAlignment.end\n+                    : CrossAxisAlignment.start,\n+                children: [\n+                  Container(\n+                    padding: const EdgeInsets.all(10),\n+                    decoration: BoxDecoration(\n+                      color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n+                      borderRadius: BorderRadius.circular(8),\n+                    ),\n+                    child: Column(\n+                      crossAxisAlignment: CrossAxisAlignment.start,\n+                      children: [\n+                        if (mediaUrl.isNotEmpty && mediaType == 'image')\n+                          ClipRRect(\n+                            borderRadius: BorderRadius.circular(8),\n+                            child: Image.network(mediaUrl, height: 150),\n+                          ),\n+                        if (messageText.isNotEmpty)\n+                          Text(\n+                            messageText,\n+                            style: const TextStyle(fontSize: 16),\n+                          ),\n+                      ],\n+                    ),\n+                  ),\n+                  const SizedBox(height: 4),\n+                  Text(\n+                    formattedTime,\n+                    style: const TextStyle(fontSize: 12, color: Colors.grey),\n+                  ),\n+                ],\n+              ),\n+            ),\n+          );\n+        },\n+      );\n+    },\n+  );\n+}\n+\n+\n   Widget _buildMessageInputSection() {\n     return Padding(\n       padding: const EdgeInsets.all(8.0),\n       child: Row(\n"
                },
                {
                    "date": 1747557894714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,34 +355,8 @@\n       }\n     }\n   }\n \n-  // void _sendMessage(String message) async {\n-  //   message = _messageController.text.trim();\n-  //   if (message.isNotEmpty) {\n-  //     try {\n-  //       await FirebaseFirestore.instance.collection('chats').add({\n-  //         'senderId': currentUser!.uid,\n-  //         'receiverId': widget.otherUserId,\n-  //         'participants': [currentUser!.uid, widget.otherUserId],\n-  //         'message': message,\n-  //         'timestamp': Timestamp.now(),\n-  //         'postId': '',\n-  //         'mediaUrl': '', // Add a field for media URL\n-  //         'mediaType': '', // 'image' or 'video' to distinguish media type\n-  //       });\n-  //       _messageController.clear();\n-  //     } catch (e) {\n-  //       ScaffoldMessenger.of(context).showSnackBar(\n-  //         SnackBar(\n-  //           content: Text('Failed to send message: $e'),\n-  //           backgroundColor: Colors.red,\n-  //         ),\n-  //       );\n-  //     }\n-  //   }\n-  // }\n-\n // Send message with media (image/video URL)\n   void _sendMessageWithMedia(String fileUrl, String mediaType) async {\n     String message = _messageController.text.trim();\n     if (message.isNotEmpty || fileUrl.isNotEmpty) {\n"
                },
                {
                    "date": 1747558058261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,46 +215,48 @@\n             );\n           }\n \n           // Show normal message (without post)\n-          return ListTile(\n-            contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),\n-            title: Align(\n-              alignment:\n-                  isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-              child: Column(\n-                crossAxisAlignment: isSentByUser\n-                    ? CrossAxisAlignment.end\n-                    : CrossAxisAlignment.start,\n-                children: [\n-                  Container(\n-                    padding: const EdgeInsets.all(10),\n-                    decoration: BoxDecoration(\n-                      color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n-                      borderRadius: BorderRadius.circular(8),\n+          return widget(\n+            child: ListTile(\n+              contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),\n+              title: Align(\n+                alignment:\n+                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n+                child: Column(\n+                  crossAxisAlignment: isSentByUser\n+                      ? CrossAxisAlignment.end\n+                      : CrossAxisAlignment.start,\n+                  children: [\n+                    Container(\n+                      padding: const EdgeInsets.all(10),\n+                      decoration: BoxDecoration(\n+                        color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n+                        borderRadius: BorderRadius.circular(8),\n+                      ),\n+                      child: Column(\n+                        crossAxisAlignment: CrossAxisAlignment.start,\n+                        children: [\n+                          if (mediaUrl.isNotEmpty && mediaType == 'image')\n+                            ClipRRect(\n+                              borderRadius: BorderRadius.circular(8),\n+                              child: Image.network(mediaUrl, height: 150),\n+                            ),\n+                          if (messageText.isNotEmpty)\n+                            Text(\n+                              messageText,\n+                              style: const TextStyle(fontSize: 16),\n+                            ),\n+                        ],\n+                      ),\n                     ),\n-                    child: Column(\n-                      crossAxisAlignment: CrossAxisAlignment.start,\n-                      children: [\n-                        if (mediaUrl.isNotEmpty && mediaType == 'image')\n-                          ClipRRect(\n-                            borderRadius: BorderRadius.circular(8),\n-                            child: Image.network(mediaUrl, height: 150),\n-                          ),\n-                        if (messageText.isNotEmpty)\n-                          Text(\n-                            messageText,\n-                            style: const TextStyle(fontSize: 16),\n-                          ),\n-                      ],\n+                    const SizedBox(height: 4),\n+                    Text(\n+                      formattedTime,\n+                      style: const TextStyle(fontSize: 12, color: Colors.grey),\n                     ),\n-                  ),\n-                  const SizedBox(height: 4),\n-                  Text(\n-                    formattedTime,\n-                    style: const TextStyle(fontSize: 12, color: Colors.grey),\n-                  ),\n-                ],\n+                  ],\n+                ),\n               ),\n             ),\n           );\n         },\n"
                },
                {
                    "date": 1747558072633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -215,9 +215,37 @@\n             );\n           }\n \n           // Show normal message (without post)\n-          return widget(\n+          return GestureDetector(\n+             onLongPress: isSentByUser\n+      ? () {\n+          showModalBottomSheet(\n+            context: context,\n+            builder: (context) => Column(\n+              mainAxisSize: MainAxisSize.min,\n+              children: [\n+                ListTile(\n+                  leading: const Icon(Icons.edit),\n+                  title: const Text('Edit'),\n+                  onTap: () {\n+                    Navigator.pop(context);\n+                    _showEditMessageDialog(message.id, messageText);\n+                  },\n+                ),\n+                ListTile(\n+                  leading: const Icon(Icons.delete),\n+                  title: const Text('Delete'),\n+                  onTap: () {\n+                    Navigator.pop(context);\n+                    _deleteMessage(message.id, mediaUrl);\n+                  },\n+                ),\n+              ],\n+            ),\n+          );\n+        }\n+      : null,\n             child: ListTile(\n               contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),\n               title: Align(\n                 alignment:\n"
                },
                {
                    "date": 1747558088070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,8 +293,9 @@\n   );\n }\n \n \n+\n   Widget _buildMessageInputSection() {\n     return Padding(\n       padding: const EdgeInsets.all(8.0),\n       child: Row(\n"
                },
                {
                    "date": 1747558094654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -292,10 +292,47 @@\n     },\n   );\n }\n \n+void _showEditMessageDialog(String messageId, String oldText) {\n+  final TextEditingController _editController = TextEditingController(text: oldText);\n \n+  showDialog(\n+    context: context,\n+    builder: (context) {\n+      return AlertDialog(\n+        title: const Text(\"Edit Message\"),\n+        content: TextField(\n+          controller: _editController,\n+          maxLines: null,\n+          decoration: const InputDecoration(hintText: \"Enter new message\"),\n+        ),\n+        actions: [\n+          TextButton(\n+            onPressed: () => Navigator.pop(context),\n+            child: const Text(\"Cancel\"),\n+          ),\n+          TextButton(\n+            onPressed: () async {\n+              String updatedText = _editController.text.trim();\n+              if (updatedText.isNotEmpty) {\n+                await FirebaseFirestore.instance\n+                    .collection('chats')\n+                    .doc(messageId)\n+                    .update({'message': updatedText});\n+              }\n+              Navigator.pop(context);\n+            },\n+            child: const Text(\"Save\"),\n+          ),\n+        ],\n+      );\n+    },\n+  );\n+}\n \n+\n+\n   Widget _buildMessageInputSection() {\n     return Padding(\n       padding: const EdgeInsets.all(8.0),\n       child: Row(\n"
                },
                {
                    "date": 1747558220761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,248 +90,279 @@\n       ),\n     );\n   }\n \n-Widget _buildChatSection() {\n-  return StreamBuilder<QuerySnapshot>(\n-    stream: FirebaseFirestore.instance\n-        .collection('chats')\n-        .where('participants', arrayContains: currentUser!.uid)\n-        .orderBy('timestamp', descending: true)\n-        .snapshots(),\n-    builder: (context, snapshot) {\n-      if (snapshot.connectionState == ConnectionState.waiting) {\n-        return const Center(child: CircularProgressIndicator());\n-      }\n+  Widget _buildChatSection() {\n+    return StreamBuilder<QuerySnapshot>(\n+      stream: FirebaseFirestore.instance\n+          .collection('chats')\n+          .where('participants', arrayContains: currentUser!.uid)\n+          .orderBy('timestamp', descending: true)\n+          .snapshots(),\n+      builder: (context, snapshot) {\n+        if (snapshot.connectionState == ConnectionState.waiting) {\n+          return const Center(child: CircularProgressIndicator());\n+        }\n \n-      if (snapshot.hasError) {\n-        return Center(child: Text('Error: ${snapshot.error}'));\n-      }\n+        if (snapshot.hasError) {\n+          return Center(child: Text('Error: ${snapshot.error}'));\n+        }\n \n-      if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-        return const Center(child: Text('No messages yet'));\n-      }\n+        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+          return const Center(child: Text('No messages yet'));\n+        }\n \n-      var messages = snapshot.data!.docs.where((doc) {\n-        var data = doc.data() as Map<String, dynamic>;\n-        return (data['senderId'] == currentUser!.uid &&\n-                data['receiverId'] == widget.otherUserId) ||\n-            (data['senderId'] == widget.otherUserId &&\n-                data['receiverId'] == currentUser!.uid);\n-      }).toList();\n+        var messages = snapshot.data!.docs.where((doc) {\n+          var data = doc.data() as Map<String, dynamic>;\n+          return (data['senderId'] == currentUser!.uid &&\n+                  data['receiverId'] == widget.otherUserId) ||\n+              (data['senderId'] == widget.otherUserId &&\n+                  data['receiverId'] == currentUser!.uid);\n+        }).toList();\n \n-      if (messages.isEmpty) {\n-        return const Center(child: Text('No messages yet'));\n-      }\n+        if (messages.isEmpty) {\n+          return const Center(child: Text('No messages yet'));\n+        }\n \n-      return ListView.builder(\n-        reverse: true,\n-        itemCount: messages.length,\n-        itemBuilder: (context, index) {\n-          var message = messages[index];\n-          var data = message.data() as Map<String, dynamic>;\n+        return ListView.builder(\n+          reverse: true,\n+          itemCount: messages.length,\n+          itemBuilder: (context, index) {\n+            var message = messages[index];\n+            var data = message.data() as Map<String, dynamic>;\n \n-          final postId = data['postId'] ?? '';\n-          final isSentByUser = data['senderId'] == currentUser!.uid;\n-          final messageText = data['message'] ?? '';\n-          final timestamp = (data['timestamp'] as Timestamp).toDate();\n-          final mediaUrl = data['mediaUrl'] ?? '';\n-          final mediaType = data['mediaType'] ?? '';\n+            final postId = data['postId'] ?? '';\n+            final isSentByUser = data['senderId'] == currentUser!.uid;\n+            final messageText = data['message'] ?? '';\n+            final timestamp = (data['timestamp'] as Timestamp).toDate();\n+            final mediaUrl = data['mediaUrl'] ?? '';\n+            final mediaType = data['mediaType'] ?? '';\n \n-          // Timestamp string\n-          final formattedTime =\n-              '${timestamp.hour.toString().padLeft(2, '0')}:${timestamp.minute.toString().padLeft(2, '0')} - ${timestamp.day}/${timestamp.month}/${timestamp.year}';\n+            // Timestamp string\n+            final formattedTime =\n+                '${timestamp.hour.toString().padLeft(2, '0')}:${timestamp.minute.toString().padLeft(2, '0')} - ${timestamp.day}/${timestamp.month}/${timestamp.year}';\n \n-          // Show message with associated post\n-          if (postId.isNotEmpty) {\n-            return FutureBuilder<DocumentSnapshot>(\n-              future: FirebaseFirestore.instance.collection('posts').doc(postId).get(),\n-              builder: (context, postSnapshot) {\n-                if (postSnapshot.connectionState == ConnectionState.waiting) {\n-                  return const Center(child: CircularProgressIndicator());\n-                }\n+            // Show message with associated post\n+            if (postId.isNotEmpty) {\n+              return FutureBuilder<DocumentSnapshot>(\n+                future: FirebaseFirestore.instance\n+                    .collection('posts')\n+                    .doc(postId)\n+                    .get(),\n+                builder: (context, postSnapshot) {\n+                  if (postSnapshot.connectionState == ConnectionState.waiting) {\n+                    return const Center(child: CircularProgressIndicator());\n+                  }\n \n-                if (!postSnapshot.hasData || !postSnapshot.data!.exists) {\n-                  return const SizedBox.shrink(); // Hide if post doesn't exist\n-                }\n+                  if (!postSnapshot.hasData || !postSnapshot.data!.exists) {\n+                    return const SizedBox\n+                        .shrink(); // Hide if post doesn't exist\n+                  }\n \n-                final postData = postSnapshot.data!;\n-                final itemName = postData['item'] ?? 'Unknown';\n-                final description = postData['description'] ?? 'No description';\n-                final location = postData['location'] ?? 'Unknown';\n+                  final postData = postSnapshot.data!;\n+                  final itemName = postData['item'] ?? 'Unknown';\n+                  final description =\n+                      postData['description'] ?? 'No description';\n+                  final location = postData['location'] ?? 'Unknown';\n \n-                return GestureDetector(\n-                  onTap: () {\n-                    Navigator.push(\n-                      context,\n-                      MaterialPageRoute(\n-                        builder: (_) => PostDetailsPage(postId: postId),\n-                      ),\n-                    );\n-                  },\n-                  child: Card(\n-                    color: isSentByUser ? Colors.blue[50] : Colors.grey[200],\n-                    margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 12),\n-                    child: Padding(\n-                      padding: const EdgeInsets.all(12),\n-                      child: Column(\n-                        crossAxisAlignment: CrossAxisAlignment.start,\n-                        children: [\n-                          Text('Item: $itemName',\n-                              style: const TextStyle(\n-                                  fontWeight: FontWeight.bold, fontSize: 16)),\n-                          const SizedBox(height: 4),\n-                          Text('Description: $description'),\n-                          const SizedBox(height: 4),\n-                          Text('Location: $location'),\n-                          const SizedBox(height: 10),\n-                          if (mediaUrl.isNotEmpty && mediaType == 'image')\n-                            ClipRRect(\n-                              borderRadius: BorderRadius.circular(8),\n-                              child: Image.network(mediaUrl, height: 150),\n-                            ),\n-                          if (messageText.isNotEmpty) ...[\n+                  return GestureDetector(\n+                    onTap: () {\n+                      Navigator.push(\n+                        context,\n+                        MaterialPageRoute(\n+                          builder: (_) => PostDetailsPage(postId: postId),\n+                        ),\n+                      );\n+                    },\n+                    child: Card(\n+                      color: isSentByUser ? Colors.blue[50] : Colors.grey[200],\n+                      margin: const EdgeInsets.symmetric(\n+                          vertical: 6, horizontal: 12),\n+                      child: Padding(\n+                        padding: const EdgeInsets.all(12),\n+                        child: Column(\n+                          crossAxisAlignment: CrossAxisAlignment.start,\n+                          children: [\n+                            Text('Item: $itemName',\n+                                style: const TextStyle(\n+                                    fontWeight: FontWeight.bold, fontSize: 16)),\n+                            const SizedBox(height: 4),\n+                            Text('Description: $description'),\n+                            const SizedBox(height: 4),\n+                            Text('Location: $location'),\n                             const SizedBox(height: 10),\n-                            Text('Reply: $messageText'),\n-                          ],\n-                          const SizedBox(height: 8),\n-                          Align(\n-                            alignment: isSentByUser\n-                                ? Alignment.centerLeft\n-                                : Alignment.centerRight,\n-                            child: Text(\n-                              formattedTime,\n-                              style: const TextStyle(\n-                                fontSize: 12,\n-                                color: Colors.grey,\n+                            if (mediaUrl.isNotEmpty && mediaType == 'image')\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(8),\n+                                child: Image.network(mediaUrl, height: 150),\n                               ),\n+                            if (messageText.isNotEmpty) ...[\n+                              const SizedBox(height: 10),\n+                              Text('Reply: $messageText'),\n+                            ],\n+                            const SizedBox(height: 8),\n+                            Align(\n+                              alignment: isSentByUser\n+                                  ? Alignment.centerLeft\n+                                  : Alignment.centerRight,\n+                              child: Text(\n+                                formattedTime,\n+                                style: const TextStyle(\n+                                  fontSize: 12,\n+                                  color: Colors.grey,\n+                                ),\n+                              ),\n                             ),\n-                          ),\n-                        ],\n+                          ],\n+                        ),\n                       ),\n                     ),\n-                  ),\n-                );\n-              },\n-            );\n-          }\n+                  );\n+                },\n+              );\n+            }\n \n-          // Show normal message (without post)\n-          return GestureDetector(\n-             onLongPress: isSentByUser\n-      ? () {\n-          showModalBottomSheet(\n-            context: context,\n-            builder: (context) => Column(\n-              mainAxisSize: MainAxisSize.min,\n-              children: [\n-                ListTile(\n-                  leading: const Icon(Icons.edit),\n-                  title: const Text('Edit'),\n-                  onTap: () {\n-                    Navigator.pop(context);\n-                    _showEditMessageDialog(message.id, messageText);\n-                  },\n-                ),\n-                ListTile(\n-                  leading: const Icon(Icons.delete),\n-                  title: const Text('Delete'),\n-                  onTap: () {\n-                    Navigator.pop(context);\n-                    _deleteMessage(message.id, mediaUrl);\n-                  },\n-                ),\n-              ],\n-            ),\n-          );\n-        }\n-      : null,\n-            child: ListTile(\n-              contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),\n-              title: Align(\n-                alignment:\n-                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n-                child: Column(\n-                  crossAxisAlignment: isSentByUser\n-                      ? CrossAxisAlignment.end\n-                      : CrossAxisAlignment.start,\n-                  children: [\n-                    Container(\n-                      padding: const EdgeInsets.all(10),\n-                      decoration: BoxDecoration(\n-                        color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n-                        borderRadius: BorderRadius.circular(8),\n-                      ),\n-                      child: Column(\n-                        crossAxisAlignment: CrossAxisAlignment.start,\n-                        children: [\n-                          if (mediaUrl.isNotEmpty && mediaType == 'image')\n-                            ClipRRect(\n-                              borderRadius: BorderRadius.circular(8),\n-                              child: Image.network(mediaUrl, height: 150),\n+            // Show normal message (without post)\n+            return GestureDetector(\n+              onLongPress: isSentByUser\n+                  ? () {\n+                      showModalBottomSheet(\n+                        context: context,\n+                        builder: (context) => Column(\n+                          mainAxisSize: MainAxisSize.min,\n+                          children: [\n+                            ListTile(\n+                              leading: const Icon(Icons.edit),\n+                              title: const Text('Edit'),\n+                              onTap: () {\n+                                Navigator.pop(context);\n+                                _showEditMessageDialog(message.id, messageText);\n+                              },\n                             ),\n-                          if (messageText.isNotEmpty)\n-                            Text(\n-                              messageText,\n-                              style: const TextStyle(fontSize: 16),\n+                            ListTile(\n+                              leading: const Icon(Icons.delete),\n+                              title: const Text('Delete'),\n+                              onTap: () {\n+                                Navigator.pop(context);\n+                                _deleteMessage(message.id, mediaUrl);\n+                              },\n                             ),\n-                        ],\n+                          ],\n+                        ),\n+                      );\n+                    }\n+                  : null,\n+              child: ListTile(\n+                contentPadding:\n+                    const EdgeInsets.symmetric(horizontal: 16, vertical: 4),\n+                title: Align(\n+                  alignment: isSentByUser\n+                      ? Alignment.centerRight\n+                      : Alignment.centerLeft,\n+                  child: Column(\n+                    crossAxisAlignment: isSentByUser\n+                        ? CrossAxisAlignment.end\n+                        : CrossAxisAlignment.start,\n+                    children: [\n+                      Container(\n+                        padding: const EdgeInsets.all(10),\n+                        decoration: BoxDecoration(\n+                          color: isSentByUser\n+                              ? Colors.blue[200]\n+                              : Colors.grey[300],\n+                          borderRadius: BorderRadius.circular(8),\n+                        ),\n+                        child: Column(\n+                          crossAxisAlignment: CrossAxisAlignment.start,\n+                          children: [\n+                            if (mediaUrl.isNotEmpty && mediaType == 'image')\n+                              ClipRRect(\n+                                borderRadius: BorderRadius.circular(8),\n+                                child: Image.network(mediaUrl, height: 150),\n+                              ),\n+                            if (messageText.isNotEmpty)\n+                              Text(\n+                                messageText,\n+                                style: const TextStyle(fontSize: 16),\n+                              ),\n+                          ],\n+                        ),\n                       ),\n-                    ),\n-                    const SizedBox(height: 4),\n-                    Text(\n-                      formattedTime,\n-                      style: const TextStyle(fontSize: 12, color: Colors.grey),\n-                    ),\n-                  ],\n+                      const SizedBox(height: 4),\n+                      Text(\n+                        formattedTime,\n+                        style:\n+                            const TextStyle(fontSize: 12, color: Colors.grey),\n+                      ),\n+                    ],\n+                  ),\n                 ),\n               ),\n-            ),\n-          );\n-        },\n-      );\n-    },\n-  );\n-}\n+            );\n+          },\n+        );\n+      },\n+    );\n+  }\n \n-void _showEditMessageDialog(String messageId, String oldText) {\n-  final TextEditingController _editController = TextEditingController(text: oldText);\n+  void _showEditMessageDialog(String messageId, String oldText) {\n+    final TextEditingController _editController =\n+        TextEditingController(text: oldText);\n \n-  showDialog(\n-    context: context,\n-    builder: (context) {\n-      return AlertDialog(\n-        title: const Text(\"Edit Message\"),\n-        content: TextField(\n-          controller: _editController,\n-          maxLines: null,\n-          decoration: const InputDecoration(hintText: \"Enter new message\"),\n-        ),\n-        actions: [\n-          TextButton(\n-            onPressed: () => Navigator.pop(context),\n-            child: const Text(\"Cancel\"),\n+    showDialog(\n+      context: context,\n+      builder: (context) {\n+        return AlertDialog(\n+          title: const Text(\"Edit Message\"),\n+          content: TextField(\n+            controller: _editController,\n+            maxLines: null,\n+            decoration: const InputDecoration(hintText: \"Enter new message\"),\n           ),\n-          TextButton(\n-            onPressed: () async {\n-              String updatedText = _editController.text.trim();\n-              if (updatedText.isNotEmpty) {\n-                await FirebaseFirestore.instance\n-                    .collection('chats')\n-                    .doc(messageId)\n-                    .update({'message': updatedText});\n-              }\n-              Navigator.pop(context);\n-            },\n-            child: const Text(\"Save\"),\n-          ),\n-        ],\n-      );\n-    },\n-  );\n-}\n+          actions: [\n+            TextButton(\n+              onPressed: () => Navigator.pop(context),\n+              child: const Text(\"Cancel\"),\n+            ),\n+            TextButton(\n+              onPressed: () async {\n+                String updatedText = _editController.text.trim();\n+                if (updatedText.isNotEmpty) {\n+                  await FirebaseFirestore.instance\n+                      .collection('chats')\n+                      .doc(messageId)\n+                      .update({'message': updatedText});\n+                }\n+                Navigator.pop(context);\n+              },\n+              child: const Text(\"Save\"),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n+  void _deleteMessage(String messageId, String mediaUrl) async {\n+    try {\n+      // Delete media from storage if exists\n+      if (mediaUrl.isNotEmpty) {\n+        try {\n+          await FirebaseStorage.instance.refFromURL(mediaUrl).delete();\n+        } catch (e) {\n+          print(\"Error deleting media: $e\");\n+        }\n+      }\n \n+      // Delete Firestore document\n+      await FirebaseFirestore.instance\n+          .collection('chats')\n+          .doc(messageId)\n+          .delete();\n+    } catch (e) {\n+      print(\"Error deleting message: $e\");\n+    }\n+  }\n \n   Widget _buildMessageInputSection() {\n     return Padding(\n       padding: const EdgeInsets.all(8.0),\n"
                },
                {
                    "date": 1747558332525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import 'package:l_f/Frontend/Home/Post/Utils/full_post.dart';\n import 'package:l_f/Frontend/Profile/user_see_page.dart';\n \n \n+\n class ChatDetailPage extends StatefulWidget {\n   final String otherUserId;\n \n   const ChatDetailPage({required this.otherUserId, super.key});\n"
                },
                {
                    "date": 1747558481313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     return Shimmer.fromColors(\n       baseColor: Colors.grey[300]!,\n       highlightColor: Colors.grey[100]!,\n       child: Container(\n-        margin: Ed,\n+        margin: Edg,\n         height: height,\n         width: MediaQuery.of(context).size.width*0.8,\n         decoration: BoxDecoration(\n           color: Colors.grey[300],\n"
                }
            ],
            "date": 1747556372708,
            "name": "Commit-0",
            "content": "import 'dart:io';\n\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:firebase_storage/firebase_storage.dart';\nimport 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:l_f/Frontend/Home/Post/Utils/full_post.dart';\nimport 'package:l_f/Frontend/Profile/user_see_page.dart';\n\nclass ChatDetailPage extends StatefulWidget {\n  final String otherUserId;\n\n  const ChatDetailPage({required this.otherUserId, super.key});\n\n  @override\n  _ChatDetailPageState createState() => _ChatDetailPageState();\n}\n\nclass _ChatDetailPageState extends State<ChatDetailPage> {\n  final TextEditingController _messageController = TextEditingController();\n  final User? currentUser = FirebaseAuth.instance.currentUser;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text(\"Chat\"),\n        backgroundColor: Colors.deepOrange,\n        foregroundColor: Colors.white,\n      ),\n      body: FutureBuilder<DocumentSnapshot>(\n        future: FirebaseFirestore.instance\n            .collection('users')\n            .doc(widget.otherUserId)\n            .get(),\n        builder: (context, snapshot) {\n          if (snapshot.connectionState == ConnectionState.waiting) {\n            return const Center(child: CircularProgressIndicator());\n          }\n\n          if (snapshot.hasError) {\n            return Center(child: Text('Error: ${snapshot.error}'));\n          }\n\n          if (!snapshot.hasData || !snapshot.data!.exists) {\n            return const Center(child: Text('User not found'));\n          }\n\n          var userData = snapshot.data!.data() as Map<String, dynamic>;\n          String name = userData['name'] ?? 'Unknown User';\n          String profileImage = userData['profileImage'] ?? '';\n\n          return Column(\n            children: [\n              _buildUserProfileSection(name, profileImage),\n              Expanded(child: _buildChatSection()),\n              _buildMessageInputSection(),\n            ],\n          );\n        },\n      ),\n    );\n  }\n\n  Widget _buildUserProfileSection(String name, String profileImage) {\n    return GestureDetector(\n      onTap: () {\n        Navigator.push(\n            context,\n            MaterialPageRoute(\n                builder: (_) => ProfilePage2(uid: widget.otherUserId)));\n      },\n      child: Card(\n        elevation: 2,\n        child: ListTile(\n          leading: CircleAvatar(\n            radius: 30,\n            backgroundImage: profileImage.isNotEmpty\n                ? NetworkImage(profileImage)\n                : const NetworkImage(\n                        'https://firebasestorage.googleapis.com/v0/b/lostfound-fe03f.appspot.com/o/images%2F1728657135536_0.jpg?alt=media&token=179c07c7-bf27-4d65-b762-618f0a4e660e')\n                    as ImageProvider,\n          ),\n          title:\n              Text(name, style: const TextStyle(fontWeight: FontWeight.bold)),\n          subtitle: const Text(\n              'Online'), // You can fetch and display actual online status if available\n        ),\n      ),\n    );\n  }\n\n  Widget _buildChatSection() {\n    return StreamBuilder<QuerySnapshot>(\n      stream: FirebaseFirestore.instance\n          .collection('chats')\n          .where('participants', arrayContains: currentUser!.uid)\n          .orderBy('timestamp', descending: true)\n          .snapshots(),\n      builder: (context, snapshot) {\n        if (snapshot.connectionState == ConnectionState.waiting) {\n          return const Center(child: CircularProgressIndicator());\n        }\n\n        if (snapshot.hasError) {\n          return Center(child: Text('Error: ${snapshot.error}'));\n        }\n\n        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n          return const Center(child: Text('No messages yet'));\n        }\n\n        var messages = snapshot.data!.docs.where((doc) {\n          var data = doc.data() as Map<String, dynamic>;\n          return (data['senderId'] == currentUser!.uid &&\n                  data['receiverId'] == widget.otherUserId) ||\n              (data['senderId'] == widget.otherUserId &&\n                  data['receiverId'] == currentUser!.uid);\n        }).toList();\n\n        if (messages.isEmpty) {\n          return const Center(child: Text('No messages yet'));\n        }\n\n        return ListView.builder(\n          reverse: true,\n          itemCount: messages.length,\n          itemBuilder: (context, index) {\n            var message = messages[index];\n            var postId = message['postId'];\n            var isSentByUser = message['senderId'] == currentUser!.uid;\n            var messageText = message['message'];\n            var timestamp = (message['timestamp'] as Timestamp).toDate();\n\n            // Check if postId exists\n            // if (postId != null && postId.isNotEmpty) {\n            //   return FutureBuilder<DocumentSnapshot>(\n            //     future: FirebaseFirestore.instance\n            //         .collection('posts')\n            //         .doc(postId)\n            //         .get(),\n            //     builder: (context, postSnapshot) {\n            //       if (!postSnapshot.hasData) {\n            //         return const Center(child: CircularProgressIndicator());\n            //       }\n\n            //       var postData = postSnapshot.data!;\n            //       var itemName = postData['item'] ?? 'Unknown';\n            //       var description = postData['description'] ?? 'No description';\n            //       var type = postData['location'] ?? 'Unknown';\n\n            //       return GestureDetector(\n            //         onTap: () {\n            //           Navigator.push(\n            //             context,\n            //             MaterialPageRoute(\n            //               builder: (_) => PostDetailsPage(postId: postId),\n            //             ),\n            //           );\n            //         },\n            //         child: Card(\n            //           color: isSentByUser ? Colors.blue[100] : Colors.grey[300],\n            //           margin: const EdgeInsets.symmetric(\n            //               vertical: 5, horizontal: 10),\n            //           child: Padding(\n            //             padding: const EdgeInsets.all(10.0),\n            //             child: Column(\n            //               crossAxisAlignment: CrossAxisAlignment.start,\n            //               children: [\n            //                 Text(\n            //                   'Item: $itemName',\n            //                   style: const TextStyle(\n            //                     fontWeight: FontWeight.bold,\n            //                     fontSize: 16,\n            //                   ),\n            //                 ),\n            //                 const SizedBox(height: 5),\n            //                 Text('Description: $description'),\n            //                 const SizedBox(height: 5),\n            //                 Text('Location: $type'),\n            //                 const SizedBox(height: 10),\n            //                 Align(\n            //                   alignment: isSentByUser\n            //                       ? Alignment.centerLeft\n            //                       : Alignment.centerRight,\n            //                   child: Text(\n            //                     '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n            //                     style: const TextStyle(\n            //                       fontSize: 12,\n            //                       color: Colors.grey,\n            //                     ),\n            //                   ),\n            //                 ),\n            //                 Text('Reply: $messageText'),\n            //               ],\n            //             ),\n            //           ),\n            //         ),\n            //       );\n            //     },\n            //   );\n            // }\n\n            // If postId is null, show regular message\n            return ListTile(\n              title: Align(\n                alignment:\n                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n                child: Container(\n                  padding: const EdgeInsets.all(10),\n                  decoration: BoxDecoration(\n                    color: isSentByUser ? Colors.blue[200] : Colors.grey[300],\n                    borderRadius: BorderRadius.circular(8),\n                  ),\n                  child: Text(\n                    messageText,\n                    style: const TextStyle(fontSize: 16),\n                  ),\n                ),\n              ),\n              subtitle: Align(\n                alignment:\n                    isSentByUser ? Alignment.centerRight : Alignment.centerLeft,\n                child: Padding(\n                  padding: const EdgeInsets.only(top: 5),\n                  child: Text(\n                    '${timestamp.hour}:${timestamp.minute}, ${timestamp.day}/${timestamp.month}/${timestamp.year}',\n                    style: const TextStyle(fontSize: 12, color: Colors.grey),\n                  ),\n                ),\n              ),\n            );\n          },\n        );\n      },\n    );\n  }\n\n  Widget _buildMessageInputSection() {\n    return Padding(\n      padding: const EdgeInsets.all(8.0),\n      child: Row(\n        children: [\n          // Button to pick image or video\n          IconButton(\n            icon: const Icon(Icons.photo),\n            onPressed: _pickImageOrVideo,\n          ),\n          Expanded(\n            child: TextFormField(\n              controller: _messageController,\n              decoration: const InputDecoration(\n                labelText: 'Type your message...',\n                border: OutlineInputBorder(),\n              ),\n              maxLines: null,\n            ),\n          ),\n          IconButton(\n            icon: const Icon(Icons.send),\n            onPressed: () {\n              _sendMessage(_messageController.toString());\n            },\n          ),\n        ],\n      ),\n    );\n  }\n\n  Future<void> _pickImageOrVideo() async {\n    final picker = ImagePicker();\n    final XFile? pickedFile = await picker.pickImage(\n      source: ImageSource.gallery,\n      // for video, you can use picker.pickVideo() or pick from both\n    );\n\n    if (pickedFile != null) {\n      File file = File(pickedFile.path);\n      String fileUrl = await _uploadFile(file);\n\n      // Send the message with media URL\n      _sendMessageWithMedia(fileUrl, 'image'); // 'image' or 'video'\n    }\n  }\n\n  Future<String> _uploadFile(File file) async {\n    try {\n      // Upload the selected image or video to Firebase Storage\n      String fileName = DateTime.now().millisecondsSinceEpoch.toString();\n      Reference storageRef =\n          FirebaseStorage.instance.ref().child('chats/$fileName');\n\n      UploadTask uploadTask = storageRef.putFile(file);\n      TaskSnapshot taskSnapshot = await uploadTask;\n\n      String fileUrl = await taskSnapshot.ref.getDownloadURL();\n      return fileUrl;\n    } catch (e) {\n      print(\"Error uploading file: $e\");\n      return '';\n    }\n  }\n\n  void _sendMessage(String message) async {\n    message = _messageController.text.trim();\n    if (message.isNotEmpty) {\n      try {\n        await FirebaseFirestore.instance.collection('chats').add({\n          'senderId': currentUser!.uid,\n          'receiverId': widget.otherUserId,\n          'participants': [currentUser!.uid, widget.otherUserId],\n          'message': message,\n          'timestamp': Timestamp.now(),\n          'postId': '',\n          'mediaUrl': '', // Add a field for media URL\n          'mediaType': '', // 'image' or 'video' to distinguish media type\n        });\n        _messageController.clear();\n      } catch (e) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Failed to send message: $e'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n// Send message with media (image/video URL)\n  void _sendMessageWithMedia(String fileUrl, String mediaType) async {\n    String message = _messageController.text.trim();\n    if (message.isNotEmpty || fileUrl.isNotEmpty) {\n      try {\n        await FirebaseFirestore.instance.collection('chats').add({\n          'senderId': currentUser!.uid,\n          'receiverId': widget.otherUserId,\n          'participants': [currentUser!.uid, widget.otherUserId],\n          'message': message,\n          'timestamp': Timestamp.now(),\n          'postId': '',\n          'mediaUrl': fileUrl, // Store media URL\n          'mediaType': mediaType, // 'image' or 'video'\n        });\n        _messageController.clear();\n      } catch (e) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          SnackBar(\n            content: Text('Failed to send message: $e'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n}\n"
        }
    ]
}