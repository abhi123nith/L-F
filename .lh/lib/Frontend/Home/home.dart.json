{
    "sourceFile": "lib/Frontend/Home/home.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1756118698350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756122826550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1235 +1,1235 @@\n-// import 'package:carousel_slider/carousel_slider.dart';\n-// import 'package:cloud_firestore/cloud_firestore.dart';\n-// import 'package:firebase_auth/firebase_auth.dart';\n-// import 'package:flutter/material.dart';\n-// import 'package:intl/intl.dart';\n-// import 'package:l_f/Frontend/Contants/lists.dart';\n-// import 'package:l_f/Frontend/Home/Post/post_model.dart';\n-// import 'package:l_f/Frontend/Profile/user_see_page.dart';\n+import 'package:carousel_slider/carousel_slider.dart';\n+import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:flutter/material.dart';\n+import 'package:intl/intl.dart';\n+import 'package:l_f/Frontend/Contants/lists.dart';\n+import 'package:l_f/Frontend/Home/Post/post_model.dart';\n+import 'package:l_f/Frontend/Profile/user_see_page.dart';\n \n-// class LostFoundPage extends StatefulWidget {\n-//   const LostFoundPage({super.key});\n+class LostFoundPage extends StatefulWidget {\n+  const LostFoundPage({super.key});\n \n-//   @override\n-//   State<LostFoundPage> createState() => _LostFoundPageState();\n-// }\n+  @override\n+  State<LostFoundPage> createState() => _LostFoundPageState();\n+}\n \n-// class _LostFoundPageState extends State<LostFoundPage> {\n-//   final Map<String, Map<String, String>> _userCache =\n-//       {}; // Cache to store user data\n-//   User? user = FirebaseAuth.instance.currentUser;\n-//   // String? postId;\n+class _LostFoundPageState extends State<LostFoundPage> {\n+  final Map<String, Map<String, String>> _userCache =\n+      {}; // Cache to store user data\n+  User? user = FirebaseAuth.instance.currentUser;\n+  // String? postId;\n \n-//   List<PostModel> _filteredPosts = [];\n+  List<PostModel> _filteredPosts = [];\n \n-//   // Function to fetch filtered posts from Firestore\n-//   void _filterPosts(\n-//       String status, String location, DateTime? uploadDate, String title) {\n-//     Query query = FirebaseFirestore.instance.collection('posts');\n+  // Function to fetch filtered posts from Firestore\n+  void _filterPosts(\n+      String status, String location, DateTime? uploadDate, String title) {\n+    Query query = FirebaseFirestore.instance.collection('posts');\n \n-//     // Apply filters\n-//     if (status.isNotEmpty) {\n-//       query = query.where('status', isEqualTo: status);\n-//     }\n-//     if (location.isNotEmpty) {\n-//       query = query.where('location', isEqualTo: location);\n-//     }\n-//     if (uploadDate != null) {\n-//       query = query.where('uploadDate', isEqualTo: uploadDate);\n-//     }\n-//     if (title.isNotEmpty) {\n-//       query = query.where('itemTitle', isEqualTo: title);\n-//     }\n+    // Apply filters\n+    if (status.isNotEmpty) {\n+      query = query.where('status', isEqualTo: status);\n+    }\n+    if (location.isNotEmpty) {\n+      query = query.where('location', isEqualTo: location);\n+    }\n+    if (uploadDate != null) {\n+      query = query.where('uploadDate', isEqualTo: uploadDate);\n+    }\n+    if (title.isNotEmpty) {\n+      query = query.where('itemTitle', isEqualTo: title);\n+    }\n \n-//     // Get the results and update the UI\n-//     query.get().then((snapshot) {\n-//       setState(() {\n-//         _filteredPosts = snapshot.docs\n-//             .map((doc) => PostModel.fromJson(doc as Map<String, dynamic>))\n-//             .toList();\n-//       });\n-//     });\n-//   }\n+    // Get the results and update the UI\n+    query.get().then((snapshot) {\n+      setState(() {\n+        _filteredPosts = snapshot.docs\n+            .map((doc) => PostModel.fromJson(doc as Map<String, dynamic>))\n+            .toList();\n+      });\n+    });\n+  }\n \n-//   String _formatDate(Timestamp? timestamp) {\n-//     if (timestamp == null) return 'Not available';\n-//     DateTime date = timestamp.toDate();\n-//     return DateFormat('dd MMMM yyyy').format(date);\n-//   }\n+  String _formatDate(Timestamp? timestamp) {\n+    if (timestamp == null) return 'Not available';\n+    DateTime date = timestamp.toDate();\n+    return DateFormat('dd MMMM yyyy').format(date);\n+  }\n \n-//   Future<void> _deletePost(BuildContext context, String postId) async {\n-//     try {\n-//       await FirebaseFirestore.instance.collection('posts').doc(postId).delete();\n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         const SnackBar(\n-//           backgroundColor: Colors.green,\n-//           content: Text('Post deleted successfully'),\n-//           behavior: SnackBarBehavior.floating,\n-//           margin: EdgeInsets.all(16.0),\n-//           duration: Duration(seconds: 2),\n-//         ),\n-//       );\n-//     } catch (e) {\n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         SnackBar(\n-//             backgroundColor: Colors.red,\n-//             content: Text('Failed to delete post: $e')),\n-//       );\n-//     }\n-//   }\n+  Future<void> _deletePost(BuildContext context, String postId) async {\n+    try {\n+      await FirebaseFirestore.instance.collection('posts').doc(postId).delete();\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          backgroundColor: Colors.green,\n+          content: Text('Post deleted successfully'),\n+          behavior: SnackBarBehavior.floating,\n+          margin: EdgeInsets.all(16.0),\n+          duration: Duration(seconds: 2),\n+        ),\n+      );\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+            backgroundColor: Colors.red,\n+            content: Text('Failed to delete post: $e')),\n+      );\n+    }\n+  }\n \n-//   Future<Map<String, String>> _fetchUserNameAndProfilePic(String uid) async {\n-//     if (_userCache.containsKey(uid)) {\n-//       return _userCache[uid]!; // Return cached data if available\n-//     }\n+  Future<Map<String, String>> _fetchUserNameAndProfilePic(String uid) async {\n+    if (_userCache.containsKey(uid)) {\n+      return _userCache[uid]!; // Return cached data if available\n+    }\n \n-//     try {\n-//       DocumentSnapshot userDoc =\n-//           await FirebaseFirestore.instance.collection('users').doc(uid).get();\n+    try {\n+      DocumentSnapshot userDoc =\n+          await FirebaseFirestore.instance.collection('users').doc(uid).get();\n \n-//       if (!userDoc.exists) {\n-//         throw Exception(\"User not found.\");\n-//       }\n+      if (!userDoc.exists) {\n+        throw Exception(\"User not found.\");\n+      }\n \n-//       Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n+      Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n \n-//       String name = userData['name'] ?? 'NITH User';\n-//       String profileImage = userData['profileImage'] ?? '';\n+      String name = userData['name'] ?? 'NITH User';\n+      String profileImage = userData['profileImage'] ?? '';\n \n-//       // Cache the user data\n-//       _userCache[uid] = {\n-//         'name': name,\n-//         'profileImage': profileImage,\n-//       };\n+      // Cache the user data\n+      _userCache[uid] = {\n+        'name': name,\n+        'profileImage': profileImage,\n+      };\n \n-//       return _userCache[uid]!;\n-//     } catch (e) {\n-//       print(\"Error fetching user profile: $e\");\n-//       throw Exception(\"Error fetching user profile.\");\n-//     }\n-//   }\n+      return _userCache[uid]!;\n+    } catch (e) {\n+      print(\"Error fetching user profile: $e\");\n+      throw Exception(\"Error fetching user profile.\");\n+    }\n+  }\n \n-//   Stream<QuerySnapshot>? _postStream;\n+  Stream<QuerySnapshot>? _postStream;\n \n-//   @override\n-//   void initState() {\n-//     super.initState();\n-//     // Initialize stream without filters\n-//     _postStream = FirebaseFirestore.instance\n-//         .collection('posts')\n-//         .orderBy('timestamp', descending: true)\n-//         .snapshots();\n-//   }\n+  @override\n+  void initState() {\n+    super.initState();\n+    // Initialize stream without filters\n+    _postStream = FirebaseFirestore.instance\n+        .collection('posts')\n+        .orderBy('timestamp', descending: true)\n+        .snapshots();\n+  }\n \n-//   void _applyFilters() {\n-//     // Start with the collection reference\n-//     Query query = FirebaseFirestore.instance.collection('posts');\n+  void _applyFilters() {\n+    // Start with the collection reference\n+    Query query = FirebaseFirestore.instance.collection('posts');\n \n-//     // Apply Type filter (Lost/Found)\n-//     if (selectedType != 'All') {\n-//       query = query.where('status', isEqualTo: selectedType);\n-//     }\n+    // Apply Type filter (Lost/Found)\n+    if (selectedType != 'All') {\n+      query = query.where('status', isEqualTo: selectedType);\n+    }\n \n-//     // Apply Location filter\n-//     if (selectedLocation != 'Campus, NITH') {\n-//       query = query.where('location', isEqualTo: selectedLocation);\n-//     }\n+    // Apply Location filter\n+    if (selectedLocation != 'Campus, NITH') {\n+      query = query.where('location', isEqualTo: selectedLocation);\n+    }\n \n-//     // Apply Item Category filter\n-//     if (selectedCategory != 'All') {\n-//       query = query.where('item', isEqualTo: selectedCategory);\n-//     }\n+    // Apply Item Category filter\n+    if (selectedCategory != 'All') {\n+      query = query.where('item', isEqualTo: selectedCategory);\n+    }\n \n-//     // Apply Date filter (based on upload timestamp)\n-//     DateTime now = DateTime.now();\n-//     DateTime? startDate;\n+    // Apply Date filter (based on upload timestamp)\n+    DateTime now = DateTime.now();\n+    DateTime? startDate;\n \n-//     switch (selectedDateRange) {\n-//       case 'Today':\n-//         startDate = DateTime(now.year, now.month, now.day);\n-//         break;\n-//       case 'This Week':\n-//         startDate = now.subtract(Duration(days: now.weekday - 1));\n-//         break;\n-//       case 'This Month':\n-//         startDate = DateTime(now.year, now.month, 1);\n-//         break;\n-//       case 'This Year':\n-//         startDate = DateTime(now.year, 1, 1);\n-//         break;\n-//       default:\n-//         startDate = null;\n-//     }\n+    switch (selectedDateRange) {\n+      case 'Today':\n+        startDate = DateTime(now.year, now.month, now.day);\n+        break;\n+      case 'This Week':\n+        startDate = now.subtract(Duration(days: now.weekday - 1));\n+        break;\n+      case 'This Month':\n+        startDate = DateTime(now.year, now.month, 1);\n+        break;\n+      case 'This Year':\n+        startDate = DateTime(now.year, 1, 1);\n+        break;\n+      default:\n+        startDate = null;\n+    }\n \n-//     if (startDate != null) {\n-//       query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n-//     }\n+    if (startDate != null) {\n+      query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n+    }\n \n-//     // Update the stream for the StreamBuilder\n-//     setState(() {\n-//       _postStream = query.orderBy('timestamp', descending: true).snapshots();\n-//     });\n-//   }\n+    // Update the stream for the StreamBuilder\n+    setState(() {\n+      _postStream = query.orderBy('timestamp', descending: true).snapshots();\n+    });\n+  }\n \n-//   String selectedType = 'All';\n-//   String selectedLocation = 'Campus, NITH';\n-//   String selectedCategory = 'All';\n-//   String selectedDateRange = 'All Time';\n+  String selectedType = 'All';\n+  String selectedLocation = 'Campus, NITH';\n+  String selectedCategory = 'All';\n+  String selectedDateRange = 'All Time';\n \n-// // Dummy lists for dropdowns (replace with your provided lists)\n-//   List<String> itemTypes = ['All', 'Lost', 'Found'];\n-//   List<String> locations = locationsList;\n-//   List<String> categories = [\n-//     'All',\n-//     'Mobile Phone',\n-//     'Laptop',\n-//     'Charger',\n-//     'Wallet',\n-//     'ID Card',\n-//     'Hoodie',\n-//     'Jacket/Coat',\n-//     'Bat',\n-//     'Electronics Item',\n-//     'Cloth',\n-//     'Belt',\n-//     'Ball',\n-//     'Book',\n-//     'Earphones',\n-//     'Earbuds',\n-//     'Water Bottle',\n-//     'Watch',\n-//     'Specs',\n-//     'Jewellry',\n-//     'Shoes',\n-//     'Keys',\n-//     'Umbrella',\n-//     'Other'\n-//   ];\n-//   List<String> dateRanges = [\n-//     'All Time',\n-//     'Today',\n-//     'This Week',\n-//     'This Month',\n-//     'This Year'\n-//   ];\n+// Dummy lists for dropdowns (replace with your provided lists)\n+  List<String> itemTypes = ['All', 'Lost', 'Found'];\n+  List<String> locations = locationsList;\n+  List<String> categories = [\n+    'All',\n+    'Mobile Phone',\n+    'Laptop',\n+    'Charger',\n+    'Wallet',\n+    'ID Card',\n+    'Hoodie',\n+    'Jacket/Coat',\n+    'Bat',\n+    'Electronics Item',\n+    'Cloth',\n+    'Belt',\n+    'Ball',\n+    'Book',\n+    'Earphones',\n+    'Earbuds',\n+    'Water Bottle',\n+    'Watch',\n+    'Specs',\n+    'Jewellry',\n+    'Shoes',\n+    'Keys',\n+    'Umbrella',\n+    'Other'\n+  ];\n+  List<String> dateRanges = [\n+    'All Time',\n+    'Today',\n+    'This Week',\n+    'This Month',\n+    'This Year'\n+  ];\n \n-// // Filter Dropdowns\n-//   Widget buildDropdowns() {\n-//     return LayoutBuilder(builder: (context, constraints) {\n-//       return Padding(\n-//         padding: const EdgeInsets.symmetric(horizontal: 12.0),\n-//         child: Row(\n-//           mainAxisAlignment: MainAxisAlignment.center,\n-//           mainAxisSize: MainAxisSize.min,\n-//           children: [\n-//             buildDropdown(selectedType, itemTypes, (newValue) {\n-//               setState(() {\n-//                 selectedType = newValue!;\n-//               });\n-//               _applyFilters();\n-//             }),\n-//             const SizedBox(width: 10),\n-//             buildDropdown(selectedLocation, locations, (newValue) {\n-//               setState(() {\n-//                 selectedLocation = newValue!;\n-//               });\n-//               _applyFilters();\n-//             }),\n-//             const SizedBox(width: 10),\n-//             buildDropdown(selectedCategory, categories, (newValue) {\n-//               setState(() {\n-//                 selectedCategory = newValue!;\n-//               });\n-//               _applyFilters();\n-//             }),\n-//             const SizedBox(width: 10),\n-//             buildDropdown(selectedDateRange, dateRanges, (newValue) {\n-//               setState(() {\n-//                 selectedDateRange = newValue!;\n-//               });\n-//               _applyFilters();\n-//             }),\n-//           ],\n-//         ),\n-//       );\n-//     });\n-//   }\n+// Filter Dropdowns\n+  Widget buildDropdowns() {\n+    return LayoutBuilder(builder: (context, constraints) {\n+      return Padding(\n+        padding: const EdgeInsets.symmetric(horizontal: 12.0),\n+        child: Row(\n+          mainAxisAlignment: MainAxisAlignment.center,\n+          mainAxisSize: MainAxisSize.min,\n+          children: [\n+            buildDropdown(selectedType, itemTypes, (newValue) {\n+              setState(() {\n+                selectedType = newValue!;\n+              });\n+              _applyFilters();\n+            }),\n+            const SizedBox(width: 10),\n+            buildDropdown(selectedLocation, locations, (newValue) {\n+              setState(() {\n+                selectedLocation = newValue!;\n+              });\n+              _applyFilters();\n+            }),\n+            const SizedBox(width: 10),\n+            buildDropdown(selectedCategory, categories, (newValue) {\n+              setState(() {\n+                selectedCategory = newValue!;\n+              });\n+              _applyFilters();\n+            }),\n+            const SizedBox(width: 10),\n+            buildDropdown(selectedDateRange, dateRanges, (newValue) {\n+              setState(() {\n+                selectedDateRange = newValue!;\n+              });\n+              _applyFilters();\n+            }),\n+          ],\n+        ),\n+      );\n+    });\n+  }\n \n-// // Helper method to create a DropdownButton\n-//   Widget buildDropdown(String selectedValue, List<String> items,\n-//       ValueChanged<String?> onChanged) {\n-//     return DropdownButton<String>(\n-//       value: selectedValue,\n-//       items: items.map((String value) {\n-//         return DropdownMenuItem<String>(\n-//           value: value,\n-//           child: Text(value),\n-//         );\n-//       }).toList(),\n-//       onChanged: onChanged,\n-//     );\n-//   }\n+// Helper method to create a DropdownButton\n+  Widget buildDropdown(String selectedValue, List<String> items,\n+      ValueChanged<String?> onChanged) {\n+    return DropdownButton<String>(\n+      value: selectedValue,\n+      items: items.map((String value) {\n+        return DropdownMenuItem<String>(\n+          value: value,\n+          child: Text(value),\n+        );\n+      }).toList(),\n+      onChanged: onChanged,\n+    );\n+  }\n \n-//   @override\n-//   Widget build(BuildContext context) {\n-//     bool isMobile = MediaQuery.of(context).size.width < 600;\n-//     return Scaffold(\n-//       body: Column(\n-//         children: [\n-//           SingleChildScrollView(\n-//               scrollDirection: Axis.horizontal, child: buildDropdowns()),\n-//           Expanded(\n-//             child: StreamBuilder<QuerySnapshot>(\n-//               stream: _postStream,\n-//               builder: (context, snapshot) {\n-//                 if (snapshot.connectionState == ConnectionState.waiting) {\n-//                   return const Center(child: CircularProgressIndicator());\n-//                 }\n-//                 if (snapshot.hasError) {\n-//                   print('ERROR ${snapshot.error}');\n-//                   return const Center(child: Text('Error loading posts'));\n-//                 }\n+  @override\n+  Widget build(BuildContext context) {\n+    bool isMobile = MediaQuery.of(context).size.width < 600;\n+    return Scaffold(\n+      body: Column(\n+        children: [\n+          SingleChildScrollView(\n+              scrollDirection: Axis.horizontal, child: buildDropdowns()),\n+          Expanded(\n+            child: StreamBuilder<QuerySnapshot>(\n+              stream: _postStream,\n+              builder: (context, snapshot) {\n+                if (snapshot.connectionState == ConnectionState.waiting) {\n+                  return const Center(child: CircularProgressIndicator());\n+                }\n+                if (snapshot.hasError) {\n+                  print('ERROR ${snapshot.error}');\n+                  return const Center(child: Text('Error loading posts'));\n+                }\n \n-//                 if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-//                   return const Center(\n-//                       child: Center(child: Text('No posts available')));\n-//                 }\n+                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+                  return const Center(\n+                      child: Center(child: Text('No posts available')));\n+                }\n \n-//                 final posts = snapshot.data!.docs.map((doc) {\n-//                   final data = doc.data() as Map<String, dynamic>;\n-//                   final String uid = data['postmakerId'];\n-//                   final bool isClaimed = data['isClaimed'] ?? false;\n-//                   final String? claimerUid = data['postClaimer'];\n-//                   print(\"post claimerasss: : $claimerUid\");\n-//                   print(\"POST IDDDDDDDD : ${data['postId']}\");\n-//                   print(\"Is Post Claimed: $isClaimed\");\n+                final posts = snapshot.data!.docs.map((doc) {\n+                  final data = doc.data() as Map<String, dynamic>;\n+                  final String uid = data['postmakerId'];\n+                  final bool isClaimed = data['isClaimed'] ?? false;\n+                  final String? claimerUid = data['postClaimer'];\n+                  print(\"post claimerasss: : $claimerUid\");\n+                  print(\"POST IDDDDDDDD : ${data['postId']}\");\n+                  print(\"Is Post Claimed: $isClaimed\");\n \n-//                   return _fetchUserNameAndProfilePic(uid)\n-//                       .then((userDetails) async {\n-//                     String postClaimerName = '';\n-//                     String postClaimerProfilePic = '';\n+                  return _fetchUserNameAndProfilePic(uid)\n+                      .then((userDetails) async {\n+                    String postClaimerName = '';\n+                    String postClaimerProfilePic = '';\n \n-//                     if (isClaimed && claimerUid != null) {\n-//                       final claimerDetails =\n-//                           await _fetchUserNameAndProfilePic(claimerUid);\n-//                       postClaimerName = claimerDetails['name'] ?? 'NITH User';\n-//                       postClaimerProfilePic = claimerDetails['profileImage']!;\n-//                     }\n+                    if (isClaimed && claimerUid != null) {\n+                      final claimerDetails =\n+                          await _fetchUserNameAndProfilePic(claimerUid);\n+                      postClaimerName = claimerDetails['name'] ?? 'NITH User';\n+                      postClaimerProfilePic = claimerDetails['profileImage']!;\n+                    }\n \n-//                     return PostModel(\n-//                       userName: userDetails['name'] ?? 'NITH User',\n-//                       profileImageUrl: userDetails['profileImage'] ??\n-//                           'https://static.wikia.nocookie.net/logopedia/images/e/ec/220px-National_Institute_of_Technology,_Hamirpur_Logo.png/revision/latest?cb=20200330143312',\n-//                       postTime: _formatDate(data['timestamp']),\n-//                       itemImages: List<String>.from(data['imageUrls'] ?? ''),\n-//                       status: data['status'] ?? '',\n-//                       title: data['item'] ?? '',\n-//                       location: data['location'] ?? '',\n-//                       description: data['description'] ?? '',\n-//                       postmakerId: data['postmakerId'],\n-//                       question: data['question'],\n-//                       postId: data['postId'],\n-//                       claimStatus: data['claimStatus'],\n-//                       isClaimed: isClaimed,\n-//                       postclaimerId: data['postClaimer'],\n-//                       postClaimer:\n-//                           postClaimerName.isNotEmpty ? postClaimerName : null,\n-//                       postClaimerPic: postClaimerProfilePic.isNotEmpty\n-//                           ? postClaimerProfilePic\n-//                           : null,\n-//                     );\n-//                   });\n-//                 });\n+                    return PostModel(\n+                      userName: userDetails['name'] ?? 'NITH User',\n+                      profileImageUrl: userDetails['profileImage'] ??\n+                          'https://static.wikia.nocookie.net/logopedia/images/e/ec/220px-National_Institute_of_Technology,_Hamirpur_Logo.png/revision/latest?cb=20200330143312',\n+                      postTime: _formatDate(data['timestamp']),\n+                      itemImages: List<String>.from(data['imageUrls'] ?? ''),\n+                      status: data['status'] ?? '',\n+                      title: data['item'] ?? '',\n+                      location: data['location'] ?? '',\n+                      description: data['description'] ?? '',\n+                      postmakerId: data['postmakerId'],\n+                      question: data['question'],\n+                      postId: data['postId'],\n+                      claimStatus: data['claimStatus'],\n+                      isClaimed: isClaimed,\n+                      postclaimerId: data['postClaimer'],\n+                      postClaimer:\n+                          postClaimerName.isNotEmpty ? postClaimerName : null,\n+                      postClaimerPic: postClaimerProfilePic.isNotEmpty\n+                          ? postClaimerProfilePic\n+                          : null,\n+                    );\n+                  });\n+                });\n \n-//                 return FutureBuilder<List<PostModel>>(\n-//                   future: Future.wait(posts.toList()),\n-//                   builder: (context, futureSnapshot) {\n-//                     if (futureSnapshot.connectionState ==\n-//                         ConnectionState.waiting) {\n-//                       return const Center(child: CircularProgressIndicator());\n-//                     }\n+                return FutureBuilder<List<PostModel>>(\n+                  future: Future.wait(posts.toList()),\n+                  builder: (context, futureSnapshot) {\n+                    if (futureSnapshot.connectionState ==\n+                        ConnectionState.waiting) {\n+                      return const Center(child: CircularProgressIndicator());\n+                    }\n \n-//                     if (futureSnapshot.hasError) {\n-//                       print(\"Error : ${futureSnapshot.error}\");\n-//                       return const Center(child: Text('Error loading posts'));\n-//                     }\n+                    if (futureSnapshot.hasError) {\n+                      print(\"Error : ${futureSnapshot.error}\");\n+                      return const Center(child: Text('Error loading posts'));\n+                    }\n \n-//                     final postsList = futureSnapshot.data ?? [];\n+                    final postsList = futureSnapshot.data ?? [];\n \n-//                     return ListView.builder(\n-//                       itemCount: postsList.length,\n-//                       itemBuilder: (context, index) {\n-//                         final post = postsList[index];\n-//                         return Padding(\n-//                           padding: const EdgeInsets.all(2.0),\n-//                           child: Center(\n-//                             child: SizedBox(\n-//                               width: isMobile\n-//                                   ? MediaQuery.of(context).size.width\n-//                                   : 600,\n-//                               child: Card(\n-//                                 elevation: 5,\n-//                                 shape: RoundedRectangleBorder(\n-//                                   borderRadius: BorderRadius.circular(10),\n-//                                 ),\n-//                                 child: Column(\n-//                                   crossAxisAlignment: CrossAxisAlignment.start,\n-//                                   children: [\n-//                                     // Header  of the POST (profiel,name.location,delete)\n-//                                     GestureDetector(\n-//                                       onTap: () {\n-//                                         print(\n-//                                             'EROROR ::: ${post.profileImageUrl}');\n-//                                         Navigator.push(\n-//                                             context,\n-//                                             MaterialPageRoute(\n-//                                                 builder: (_) => ProfilePage2(\n-//                                                     uid: post.postmakerId)));\n-//                                       },\n-//                                       child: ListTile(\n-//                                         leading: CircleAvatar(\n-//                                           radius: 30,\n-//                                           backgroundImage: NetworkImage(\n-//                                               post.profileImageUrl),\n-//                                         ),\n-//                                         title: Text(post.userName,\n-//                                             style: const TextStyle(\n-//                                                 fontWeight: FontWeight.bold)),\n-//                                         subtitle: Text(\n-//                                             \"Location : ${post.location} , NITH\"),\n-//                                         trailing: PopupMenuButton<String>(\n-//                                           onSelected: (value) {\n-//                                             if (value == 'Delete') {\n-//                                               if (user!.uid ==\n-//                                                   post.postmakerId) {\n-//                                                 _showDeleteConfirmation(\n-//                                                     context, post);\n-//                                               } else {\n-//                                                 ScaffoldMessenger.of(context)\n-//                                                     .showSnackBar(\n-//                                                   const SnackBar(\n-//                                                       backgroundColor:\n-//                                                           Colors.red,\n-//                                                       content: Text(\n-//                                                           \"You can't delete this post\")),\n-//                                                 );\n-//                                               }\n-//                                             }\n-//                                           },\n-//                                           itemBuilder: (BuildContext context) {\n-//                                             return {'Delete'}\n-//                                                 .map((String choice) {\n-//                                               return PopupMenuItem<String>(\n-//                                                 value: choice,\n-//                                                 child: Text(choice),\n-//                                               );\n-//                                             }).toList();\n-//                                           },\n-//                                         ),\n-//                                       ),\n-//                                     ),\n+                    return ListView.builder(\n+                      itemCount: postsList.length,\n+                      itemBuilder: (context, index) {\n+                        final post = postsList[index];\n+                        return Padding(\n+                          padding: const EdgeInsets.all(2.0),\n+                          child: Center(\n+                            child: SizedBox(\n+                              width: isMobile\n+                                  ? MediaQuery.of(context).size.width\n+                                  : 600,\n+                              child: Card(\n+                                elevation: 5,\n+                                shape: RoundedRectangleBorder(\n+                                  borderRadius: BorderRadius.circular(10),\n+                                ),\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    // Header  of the POST (profiel,name.location,delete)\n+                                    GestureDetector(\n+                                      onTap: () {\n+                                        print(\n+                                            'EROROR ::: ${post.profileImageUrl}');\n+                                        Navigator.push(\n+                                            context,\n+                                            MaterialPageRoute(\n+                                                builder: (_) => ProfilePage2(\n+                                                    uid: post.postmakerId)));\n+                                      },\n+                                      child: ListTile(\n+                                        leading: CircleAvatar(\n+                                          radius: 30,\n+                                          backgroundImage: NetworkImage(\n+                                              post.profileImageUrl),\n+                                        ),\n+                                        title: Text(post.userName,\n+                                            style: const TextStyle(\n+                                                fontWeight: FontWeight.bold)),\n+                                        subtitle: Text(\n+                                            \"Location : ${post.location} , NITH\"),\n+                                        trailing: PopupMenuButton<String>(\n+                                          onSelected: (value) {\n+                                            if (value == 'Delete') {\n+                                              if (user!.uid ==\n+                                                  post.postmakerId) {\n+                                                _showDeleteConfirmation(\n+                                                    context, post);\n+                                              } else {\n+                                                ScaffoldMessenger.of(context)\n+                                                    .showSnackBar(\n+                                                  const SnackBar(\n+                                                      backgroundColor:\n+                                                          Colors.red,\n+                                                      content: Text(\n+                                                          \"You can't delete this post\")),\n+                                                );\n+                                              }\n+                                            }\n+                                          },\n+                                          itemBuilder: (BuildContext context) {\n+                                            return {'Delete'}\n+                                                .map((String choice) {\n+                                              return PopupMenuItem<String>(\n+                                                value: choice,\n+                                                child: Text(choice),\n+                                              );\n+                                            }).toList();\n+                                          },\n+                                        ),\n+                                      ),\n+                                    ),\n \n-//                                     // LOST OR FOUND\n-//                                     Stack(\n-//                                       children: [\n-//                                         CarouselSlider(\n-//                                           options: CarouselOptions(\n-//                                             autoPlay: true,\n-//                                             height: 450.0,\n-//                                             enlargeCenterPage: true,\n-//                                           ),\n-//                                           items: post.itemImages\n-//                                               .map<Widget>((imageUrl) {\n-//                                             return GestureDetector(\n-//                                               onTap: () {\n-//                                                 // Open image viewer when the image is tapped\n-//                                                 Navigator.push(\n-//                                                   context,\n-//                                                   MaterialPageRoute(\n-//                                                     builder: (context) =>\n-//                                                         FullScreenImageViewer(\n-//                                                             post.itemImages,isMobile),\n-//                                                   ),\n-//                                                 );\n-//                                               },\n-//                                               child: ClipRRect(\n-//                                                 borderRadius:\n-//                                                     BorderRadius.circular(10),\n-//                                                 child: Image.network(\n-//                                                   imageUrl,\n-//                                                   fit: BoxFit.cover,\n-//                                                   width: MediaQuery.of(context)\n-//                                                       .size\n-//                                                       .width,\n-//                                                   errorBuilder: (context, error,\n-//                                                       stackTrace) {\n-//                                                     return const Icon(\n-//                                                         Icons.error);\n-//                                                   },\n-//                                                 ),\n-//                                               ),\n-//                                             );\n-//                                           }).toList(),\n-//                                         ),\n-//                                         Positioned(\n-//                                           top: isMobile ? 16 : 6,\n-//                                           left: 50,\n-//                                           child: Container(\n-//                                             padding: const EdgeInsets.symmetric(\n-//                                                 horizontal: 10, vertical: 5),\n-//                                             decoration: BoxDecoration(\n-//                                               color: post.status == 'Lost'\n-//                                                   ? Colors.red\n-//                                                   : Colors.green,\n-//                                               borderRadius:\n-//                                                   BorderRadius.circular(5),\n-//                                             ),\n-//                                             child: Text(\n-//                                               post.status,\n-//                                               style: const TextStyle(\n-//                                                 color: Colors.white,\n-//                                                 fontWeight: FontWeight.bold,\n-//                                               ),\n-//                                             ),\n-//                                           ),\n-//                                         ),\n-//                                       ],\n-//                                     ),\n+                                    // LOST OR FOUND\n+                                    Stack(\n+                                      children: [\n+                                        CarouselSlider(\n+                                          options: CarouselOptions(\n+                                            autoPlay: true,\n+                                            height: 450.0,\n+                                            enlargeCenterPage: true,\n+                                          ),\n+                                          items: post.itemImages\n+                                              .map<Widget>((imageUrl) {\n+                                            return GestureDetector(\n+                                              onTap: () {\n+                                                // Open image viewer when the image is tapped\n+                                                Navigator.push(\n+                                                  context,\n+                                                  MaterialPageRoute(\n+                                                    builder: (context) =>\n+                                                        FullScreenImageViewer(\n+                                                            post.itemImages,isMobile),\n+                                                  ),\n+                                                );\n+                                              },\n+                                              child: ClipRRect(\n+                                                borderRadius:\n+                                                    BorderRadius.circular(10),\n+                                                child: Image.network(\n+                                                  imageUrl,\n+                                                  fit: BoxFit.cover,\n+                                                  width: MediaQuery.of(context)\n+                                                      .size\n+                                                      .width,\n+                                                  errorBuilder: (context, error,\n+                                                      stackTrace) {\n+                                                    return const Icon(\n+                                                        Icons.error);\n+                                                  },\n+                                                ),\n+                                              ),\n+                                            );\n+                                          }).toList(),\n+                                        ),\n+                                        Positioned(\n+                                          top: isMobile ? 16 : 6,\n+                                          left: 50,\n+                                          child: Container(\n+                                            padding: const EdgeInsets.symmetric(\n+                                                horizontal: 10, vertical: 5),\n+                                            decoration: BoxDecoration(\n+                                              color: post.status == 'Lost'\n+                                                  ? Colors.red\n+                                                  : Colors.green,\n+                                              borderRadius:\n+                                                  BorderRadius.circular(5),\n+                                            ),\n+                                            child: Text(\n+                                              post.status,\n+                                              style: const TextStyle(\n+                                                color: Colors.white,\n+                                                fontWeight: FontWeight.bold,\n+                                              ),\n+                                            ),\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n \n-//                                     Padding(\n-//                                       padding: const EdgeInsets.symmetric(\n-//                                           horizontal: 18.0, vertical: 10),\n-//                                       child: Column(\n-//                                         crossAxisAlignment:\n-//                                             CrossAxisAlignment.start,\n-//                                         children: [\n-//                                           // ITEM item,date\n-//                                           Row(\n-//                                             mainAxisAlignment:\n-//                                                 MainAxisAlignment.spaceBetween,\n-//                                             children: [\n-//                                               Text(\n-//                                                 post.title == 'Other'\n-//                                                     ? '${post.status} Item'\n-//                                                     : post.title,\n-//                                                 overflow: TextOverflow.clip,\n-//                                                 softWrap: true,\n-//                                                 style: const TextStyle(\n-//                                                     fontSize: 18,\n-//                                                     fontWeight:\n-//                                                         FontWeight.bold),\n-//                                               ),\n-//                                               const SizedBox(width: 5),\n-//                                               Row(\n-//                                                 children: [\n-//                                                   Text(\"${post.status} On : \",\n-//                                                       overflow:\n-//                                                           TextOverflow.clip,\n-//                                                       softWrap: true,\n-//                                                       style: const TextStyle(\n-//                                                           color: Colors.red,\n-//                                                           fontWeight:\n-//                                                               FontWeight.bold)),\n-//                                                   Text(post.postTime,\n-//                                                       style: const TextStyle(\n-//                                                           fontWeight:\n-//                                                               FontWeight.bold)),\n-//                                                 ],\n-//                                               ),\n-//                                             ],\n-//                                           ),\n-//                                           const SizedBox(height: 5),\n+                                    Padding(\n+                                      padding: const EdgeInsets.symmetric(\n+                                          horizontal: 18.0, vertical: 10),\n+                                      child: Column(\n+                                        crossAxisAlignment:\n+                                            CrossAxisAlignment.start,\n+                                        children: [\n+                                          // ITEM item,date\n+                                          Row(\n+                                            mainAxisAlignment:\n+                                                MainAxisAlignment.spaceBetween,\n+                                            children: [\n+                                              Text(\n+                                                post.title == 'Other'\n+                                                    ? '${post.status} Item'\n+                                                    : post.title,\n+                                                overflow: TextOverflow.clip,\n+                                                softWrap: true,\n+                                                style: const TextStyle(\n+                                                    fontSize: 18,\n+                                                    fontWeight:\n+                                                        FontWeight.bold),\n+                                              ),\n+                                              const SizedBox(width: 5),\n+                                              Row(\n+                                                children: [\n+                                                  Text(\"${post.status} On : \",\n+                                                      overflow:\n+                                                          TextOverflow.clip,\n+                                                      softWrap: true,\n+                                                      style: const TextStyle(\n+                                                          color: Colors.red,\n+                                                          fontWeight:\n+                                                              FontWeight.bold)),\n+                                                  Text(post.postTime,\n+                                                      style: const TextStyle(\n+                                                          fontWeight:\n+                                                              FontWeight.bold)),\n+                                                ],\n+                                              ),\n+                                            ],\n+                                          ),\n+                                          const SizedBox(height: 5),\n \n-//                                           //DESCRIPTION\n-//                                           Row(\n-//                                             crossAxisAlignment: CrossAxisAlignment\n-//                                                 .start, // Align text to the top\n-//                                             children: [\n-//                                               const Text(\n-//                                                 \"Description : \",\n-//                                                 style: TextStyle(\n-//                                                   fontWeight: FontWeight.bold,\n-//                                                 ),\n-//                                               ),\n-//                                               const SizedBox(width: 4),\n-//                                               Expanded(\n-//                                                 child: Text(\n-//                                                   post.description,\n-//                                                   overflow: TextOverflow.clip,\n-//                                                   softWrap: true,\n-//                                                   style: const TextStyle(\n-//                                                     fontSize: 14,\n-//                                                   ),\n-//                                                 ),\n-//                                               ),\n-//                                             ],\n-//                                           ),\n-//                                           const SizedBox(height: 10),\n+                                          //DESCRIPTION\n+                                          Row(\n+                                            crossAxisAlignment: CrossAxisAlignment\n+                                                .start, // Align text to the top\n+                                            children: [\n+                                              const Text(\n+                                                \"Description : \",\n+                                                style: TextStyle(\n+                                                  fontWeight: FontWeight.bold,\n+                                                ),\n+                                              ),\n+                                              const SizedBox(width: 4),\n+                                              Expanded(\n+                                                child: Text(\n+                                                  post.description,\n+                                                  overflow: TextOverflow.clip,\n+                                                  softWrap: true,\n+                                                  style: const TextStyle(\n+                                                    fontSize: 14,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                            ],\n+                                          ),\n+                                          const SizedBox(height: 10),\n \n-//                                           //BUTTONNS\n-//                                           StreamBuilder<QuerySnapshot>(\n-//                                               stream: FirebaseFirestore.instance\n-//                                                   .collection('posts')\n-//                                                   .doc(post.postId)\n-//                                                   .collection('claims')\n-//                                                   .where('senderId',\n-//                                                       isEqualTo: user!.uid)\n-//                                                   .snapshots(),\n-//                                               builder:\n-//                                                   (context, claimSnapshot) {\n-//                                                 if (claimSnapshot\n-//                                                         .connectionState ==\n-//                                                     ConnectionState.waiting) {\n-//                                                   return const Center(\n-//                                                       child:\n-//                                                           CircularProgressIndicator());\n-//                                                 }\n+                                          //BUTTONNS\n+                                          StreamBuilder<QuerySnapshot>(\n+                                              stream: FirebaseFirestore.instance\n+                                                  .collection('posts')\n+                                                  .doc(post.postId)\n+                                                  .collection('claims')\n+                                                  .where('senderId',\n+                                                      isEqualTo: user!.uid)\n+                                                  .snapshots(),\n+                                              builder:\n+                                                  (context, claimSnapshot) {\n+                                                if (claimSnapshot\n+                                                        .connectionState ==\n+                                                    ConnectionState.waiting) {\n+                                                  return const Center(\n+                                                      child:\n+                                                          CircularProgressIndicator());\n+                                                }\n \n-//                                                 bool userHasRequestedClaim =\n-//                                                     false;\n+                                                bool userHasRequestedClaim =\n+                                                    false;\n \n-//                                                 if (claimSnapshot.hasData &&\n-//                                                     claimSnapshot.data!.docs\n-//                                                         .isNotEmpty) {\n-//                                                   final claimData =\n-//                                                       claimSnapshot\n-//                                                               .data!.docs.first\n-//                                                               .data()\n-//                                                           as Map<String,\n-//                                                               dynamic>;\n+                                                if (claimSnapshot.hasData &&\n+                                                    claimSnapshot.data!.docs\n+                                                        .isNotEmpty) {\n+                                                  final claimData =\n+                                                      claimSnapshot\n+                                                              .data!.docs.first\n+                                                              .data()\n+                                                          as Map<String,\n+                                                              dynamic>;\n \n-//                                                   if (claimData[\n-//                                                           'claimStatusC'] ==\n-//                                                       'requested') {\n-//                                                     userHasRequestedClaim =\n-//                                                         true;\n-//                                                   }\n-//                                                   if (claimData[\n-//                                                               'claimStatusC'] ==\n-//                                                           'accepted' ||\n-//                                                       claimData[\n-//                                                               'claimStatusC'] ==\n-//                                                           'declined') {\n-//                                                     userHasRequestedClaim =\n-//                                                         false;\n-//                                                   }\n-//                                                 }\n+                                                  if (claimData[\n+                                                          'claimStatusC'] ==\n+                                                      'requested') {\n+                                                    userHasRequestedClaim =\n+                                                        true;\n+                                                  }\n+                                                  if (claimData[\n+                                                              'claimStatusC'] ==\n+                                                          'accepted' ||\n+                                                      claimData[\n+                                                              'claimStatusC'] ==\n+                                                          'declined') {\n+                                                    userHasRequestedClaim =\n+                                                        false;\n+                                                  }\n+                                                }\n \n-//                                                 return Row(\n-//                                                     mainAxisAlignment:\n-//                                                         MainAxisAlignment\n-//                                                             .spaceAround,\n-//                                                     children: [\n-//                                                       GestureDetector(\n-//                                                         onTap: () {\n-//                                                           _sharePost(\n-//                                                               context,\n-//                                                               post.title,\n-//                                                               post.description);\n-//                                                         },\n-//                                                         child: const Row(\n-//                                                           children: [\n-//                                                             Icon(Icons\n-//                                                                 .share_rounded),\n-//                                                             SizedBox(width: 3),\n-//                                                             Text('Share'),\n-//                                                           ],\n-//                                                         ),\n-//                                                       ),\n-//                                                       if (post.postmakerId !=\n-//                                                           user!.uid)\n-//                                                         ElevatedButton(\n-//                                                           onPressed: () {\n-//                                                             _replyToPostmaker(\n-//                                                                 context,\n-//                                                                 post.postmakerId,\n-//                                                                 post.userName,\n-//                                                                 post.postId);\n-//                                                           },\n-//                                                           style: ElevatedButton\n-//                                                               .styleFrom(\n-//                                                             backgroundColor:\n-//                                                                 Colors.green\n-//                                                                     .shade600,\n-//                                                             shape:\n-//                                                                 RoundedRectangleBorder(\n-//                                                               borderRadius:\n-//                                                                   BorderRadius\n-//                                                                       .circular(\n-//                                                                           10),\n-//                                                             ),\n-//                                                           ),\n-//                                                           child: const Row(\n-//                                                             mainAxisAlignment:\n-//                                                                 MainAxisAlignment\n-//                                                                     .center,\n-//                                                             children: [\n-//                                                               Icon(Icons.reply,\n-//                                                                   color: Colors\n-//                                                                       .white),\n-//                                                               SizedBox(\n-//                                                                   width: 3),\n-//                                                               Text(\n-//                                                                 'Reply',\n-//                                                                 style: TextStyle(\n-//                                                                     fontSize:\n-//                                                                         16,\n-//                                                                     color: Colors\n-//                                                                         .white),\n-//                                                               ),\n-//                                                             ],\n-//                                                           ),\n-//                                                         ),\n+                                                return Row(\n+                                                    mainAxisAlignment:\n+                                                        MainAxisAlignment\n+                                                            .spaceAround,\n+                                                    children: [\n+                                                      GestureDetector(\n+                                                        onTap: () {\n+                                                          _sharePost(\n+                                                              context,\n+                                                              post.title,\n+                                                              post.description);\n+                                                        },\n+                                                        child: const Row(\n+                                                          children: [\n+                                                            Icon(Icons\n+                                                                .share_rounded),\n+                                                            SizedBox(width: 3),\n+                                                            Text('Share'),\n+                                                          ],\n+                                                        ),\n+                                                      ),\n+                                                      if (post.postmakerId !=\n+                                                          user!.uid)\n+                                                        ElevatedButton(\n+                                                          onPressed: () {\n+                                                            _replyToPostmaker(\n+                                                                context,\n+                                                                post.postmakerId,\n+                                                                post.userName,\n+                                                                post.postId);\n+                                                          },\n+                                                          style: ElevatedButton\n+                                                              .styleFrom(\n+                                                            backgroundColor:\n+                                                                Colors.green\n+                                                                    .shade600,\n+                                                            shape:\n+                                                                RoundedRectangleBorder(\n+                                                              borderRadius:\n+                                                                  BorderRadius\n+                                                                      .circular(\n+                                                                          10),\n+                                                            ),\n+                                                          ),\n+                                                          child: const Row(\n+                                                            mainAxisAlignment:\n+                                                                MainAxisAlignment\n+                                                                    .center,\n+                                                            children: [\n+                                                              Icon(Icons.reply,\n+                                                                  color: Colors\n+                                                                      .white),\n+                                                              SizedBox(\n+                                                                  width: 3),\n+                                                              Text(\n+                                                                'Reply',\n+                                                                style: TextStyle(\n+                                                                    fontSize:\n+                                                                        16,\n+                                                                    color: Colors\n+                                                                        .white),\n+                                                              ),\n+                                                            ],\n+                                                          ),\n+                                                        ),\n \n-//                                                       //Claimed Button\n-//                                                       if (post.status !=\n-//                                                               'Lost' &&\n-//                                                           post.isClaimed ==\n-//                                                               true)\n-//                                                         ElevatedButton(\n-//                                                           onPressed: () {\n-//                                                             _claimedPost(\n-//                                                                 context,\n-//                                                                 post.postclaimerId!,\n-//                                                                 post.title,\n-//                                                                 post.postClaimer!,\n-//                                                                 post.postId);\n-//                                                           },\n-//                                                           style: ElevatedButton\n-//                                                               .styleFrom(\n-//                                                             backgroundColor:\n-//                                                                 Colors\n-//                                                                     .deepOrange\n-//                                                                     .shade600,\n-//                                                             shape:\n-//                                                                 RoundedRectangleBorder(\n-//                                                               borderRadius:\n-//                                                                   BorderRadius\n-//                                                                       .circular(\n-//                                                                           10),\n-//                                                             ),\n-//                                                           ),\n-//                                                           child: const Row(\n-//                                                             mainAxisAlignment:\n-//                                                                 MainAxisAlignment\n-//                                                                     .center,\n-//                                                             children: [\n-//                                                               Icon(\n-//                                                                   Icons\n-//                                                                       .back_hand,\n-//                                                                   color: Colors\n-//                                                                       .white),\n-//                                                               SizedBox(\n-//                                                                   width: 3),\n-//                                                               Text(\n-//                                                                 'Claimed',\n-//                                                                 style: TextStyle(\n-//                                                                     fontSize:\n-//                                                                         16,\n-//                                                                     color: Colors\n-//                                                                         .white),\n-//                                                               ),\n-//                                                             ],\n-//                                                           ),\n-//                                                         ),\n+                                                      //Claimed Button\n+                                                      if (post.status !=\n+                                                              'Lost' &&\n+                                                          post.isClaimed ==\n+                                                              true)\n+                                                        ElevatedButton(\n+                                                          onPressed: () {\n+                                                            _claimedPost(\n+                                                                context,\n+                                                                post.postclaimerId!,\n+                                                                post.title,\n+                                                                post.postClaimer!,\n+                                                                post.postId);\n+                                                          },\n+                                                          style: ElevatedButton\n+                                                              .styleFrom(\n+                                                            backgroundColor:\n+                                                                Colors\n+                                                                    .deepOrange\n+                                                                    .shade600,\n+                                                            shape:\n+                                                                RoundedRectangleBorder(\n+                                                              borderRadius:\n+                                                                  BorderRadius\n+                                                                      .circular(\n+                                                                          10),\n+                                                            ),\n+                                                          ),\n+                                                          child: const Row(\n+                                                            mainAxisAlignment:\n+                                                                MainAxisAlignment\n+                                                                    .center,\n+                                                            children: [\n+                                                              Icon(\n+                                                                  Icons\n+                                                                      .back_hand,\n+                                                                  color: Colors\n+                                                                      .white),\n+                                                              SizedBox(\n+                                                                  width: 3),\n+                                                              Text(\n+                                                                'Claimed',\n+                                                                style: TextStyle(\n+                                                                    fontSize:\n+                                                                        16,\n+                                                                    color: Colors\n+                                                                        .white),\n+                                                              ),\n+                                                            ],\n+                                                          ),\n+                                                        ),\n \n-//                                                       // Claim Buttton\n-//                                                       if (post.postmakerId !=\n-//                                                               user!.uid &&\n-//                                                           post.status ==\n-//                                                               'Found' &&\n-//                                                           post.isClaimed ==\n-//                                                               false &&\n-//                                                           !userHasRequestedClaim)\n-//                                                         ElevatedButton(\n-//                                                           onPressed: () {\n-//                                                             _claimPost(\n-//                                                                 context,\n-//                                                                 post.postmakerId,\n-//                                                                 post.title,\n-//                                                                 post.question!,\n-//                                                                 post.description,\n-//                                                                 post.postId);\n-//                                                           },\n-//                                                           style: ElevatedButton\n-//                                                               .styleFrom(\n-//                                                             backgroundColor:\n-//                                                                 Colors\n-//                                                                     .deepOrange\n-//                                                                     .shade600,\n-//                                                             shape:\n-//                                                                 RoundedRectangleBorder(\n-//                                                               borderRadius:\n-//                                                                   BorderRadius\n-//                                                                       .circular(\n-//                                                                           10),\n-//                                                             ),\n-//                                                           ),\n-//                                                           child: const Row(\n-//                                                             mainAxisAlignment:\n-//                                                                 MainAxisAlignment\n-//                                                                     .center,\n-//                                                             children: [\n-//                                                               Icon(\n-//                                                                   Icons\n-//                                                                       .back_hand,\n-//                                                                   color: Colors\n-//                                                                       .white),\n-//                                                               SizedBox(\n-//                                                                   width: 6),\n-//                                                               Text(\n-//                                                                 'Claim',\n-//                                                                 style: TextStyle(\n-//                                                                     fontSize:\n-//                                                                         16,\n-//                                                                     color: Colors\n-//                                                                         .white),\n-//                                                               ),\n-//                                                             ],\n-//                                                           ),\n-//                                                         ),\n+                                                      // Claim Buttton\n+                                                      if (post.postmakerId !=\n+                                                              user!.uid &&\n+                                                          post.status ==\n+                                                              'Found' &&\n+                                                          post.isClaimed ==\n+                                                              false &&\n+                                                          !userHasRequestedClaim)\n+                                                        ElevatedButton(\n+                                                          onPressed: () {\n+                                                            _claimPost(\n+                                                                context,\n+                                                                post.postmakerId,\n+                                                                post.title,\n+                                                                post.question!,\n+                                                                post.description,\n+                                                                post.postId);\n+                                                          },\n+                                                          style: ElevatedButton\n+                                                              .styleFrom(\n+                                                            backgroundColor:\n+                                                                Colors\n+                                                                    .deepOrange\n+                                                                    .shade600,\n+                                                            shape:\n+                                                                RoundedRectangleBorder(\n+                                                              borderRadius:\n+                                                                  BorderRadius\n+                                                                      .circular(\n+                                                                          10),\n+                                                            ),\n+                                                          ),\n+                                                          child: const Row(\n+                                                            mainAxisAlignment:\n+                                                                MainAxisAlignment\n+                                                                    .center,\n+                                                            children: [\n+                                                              Icon(\n+                                                                  Icons\n+                                                                      .back_hand,\n+                                                                  color: Colors\n+                                                                      .white),\n+                                                              SizedBox(\n+                                                                  width: 6),\n+                                                              Text(\n+                                                                'Claim',\n+                                                                style: TextStyle(\n+                                                                    fontSize:\n+                                                                        16,\n+                                                                    color: Colors\n+                                                                        .white),\n+                                                              ),\n+                                                            ],\n+                                                          ),\n+                                                        ),\n \n-//                                                       // Request Button\n-//                                                       if (post.postmakerId !=\n-//                                                               user!.uid &&\n-//                                                           post.status ==\n-//                                                               'Found' &&\n-//                                                           post.isClaimed ==\n-//                                                               false &&\n-//                                                           userHasRequestedClaim)\n-//                                                         ElevatedButton(\n-//                                                           onPressed: () {},\n-//                                                           style: ElevatedButton\n-//                                                               .styleFrom(\n-//                                                             backgroundColor:\n-//                                                                 Colors\n-//                                                                     .deepOrange\n-//                                                                     .shade600,\n-//                                                             shape:\n-//                                                                 RoundedRectangleBorder(\n-//                                                               borderRadius:\n-//                                                                   BorderRadius\n-//                                                                       .circular(\n-//                                                                           10),\n-//                                                             ),\n-//                                                           ),\n-//                                                           child: const Row(\n-//                                                             mainAxisAlignment:\n-//                                                                 MainAxisAlignment\n-//                                                                     .center,\n-//                                                             children: [\n-//                                                               Icon(\n-//                                                                   Icons\n-//                                                                       .back_hand,\n-//                                                                   color: Colors\n-//                                                                       .white),\n-//                                                               SizedBox(\n-//                                                                   width: 3),\n-//                                                               Text(\n-//                                                                 'Requested',\n-//                                                                 style: TextStyle(\n-//                                                                     fontSize:\n-//                                                                         16,\n-//                                                                     color: Colors\n-//                                                                         .white),\n-//                                                               ),\n-//                                                             ],\n-//                                                           ),\n-//                                                         )\n-//                                                     ]);\n-//                                               })\n-//                                         ],\n-//                                       ),\n-//                                     ),\n-//                                   ],\n-//                                 ),\n-//                               ),\n-//                             ),\n-//                           ),\n-//                         );\n-//                       },\n-//                     );\n-//                   },\n-//                 );\n-//               },\n-//             ),\n-//           ),\n-//         ],\n-//       ),\n-//     );\n-//   }\n+                                                      // Request Button\n+                                                      if (post.postmakerId !=\n+                                                              user!.uid &&\n+                                                          post.status ==\n+                                                              'Found' &&\n+                                                          post.isClaimed ==\n+                                                              false &&\n+                                                          userHasRequestedClaim)\n+                                                        ElevatedButton(\n+                                                          onPressed: () {},\n+                                                          style: ElevatedButton\n+                                                              .styleFrom(\n+                                                            backgroundColor:\n+                                                                Colors\n+                                                                    .deepOrange\n+                                                                    .shade600,\n+                                                            shape:\n+                                                                RoundedRectangleBorder(\n+                                                              borderRadius:\n+                                                                  BorderRadius\n+                                                                      .circular(\n+                                                                          10),\n+                                                            ),\n+                                                          ),\n+                                                          child: const Row(\n+                                                            mainAxisAlignment:\n+                                                                MainAxisAlignment\n+                                                                    .center,\n+                                                            children: [\n+                                                              Icon(\n+                                                                  Icons\n+                                                                      .back_hand,\n+                                                                  color: Colors\n+                                                                      .white),\n+                                                              SizedBox(\n+                                                                  width: 3),\n+                                                              Text(\n+                                                                'Requested',\n+                                                                style: TextStyle(\n+                                                                    fontSize:\n+                                                                        16,\n+                                                                    color: Colors\n+                                                                        .white),\n+                                                              ),\n+                                                            ],\n+                                                          ),\n+                                                        )\n+                                                    ]);\n+                                              })\n+                                        ],\n+                                      ),\n+                                    ),\n+                                  ],\n+                                ),\n+                              ),\n+                            ),\n+                          ),\n+                        );\n+                      },\n+                    );\n+                  },\n+                );\n+              },\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n \n-//   void _replyToPostmaker(BuildContext context, String postmakerId,\n-//       String postmaker, String postId) {\n-//     TextEditingController messageController = TextEditingController();\n+  void _replyToPostmaker(BuildContext context, String postmakerId,\n+      String postmaker, String postId) {\n+    TextEditingController messageController = TextEditingController();\n \n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: const Text('Send a Reply'),\n-//           content: Column(\n-//             mainAxisSize: MainAxisSize.min,\n-//             children: [\n-//               Row(\n-//                 children: [\n-//                   const Text('Reply to'),\n-//                   TextButton(\n-//                       onPressed: () {\n-//                         Navigator.push(\n-//                             context,\n-//                             MaterialPageRoute(\n-//                                 builder: (_) =>\n-//                                     ProfilePage2(uid: postmakerId)));\n-//                       },\n-//                       child: Text(postmaker))\n-//                 ],\n-//               ),\n-//               const SizedBox(height: 10),\n-//               TextField(\n-//                 controller: messageController,\n-//                 decoration: const InputDecoration(\n-//                   labelText: 'Your message',\n-//                   alignLabelWithHint: true,\n-//                   border: OutlineInputBorder(),\n-//                 ),\n-//                 maxLines: 3,\n-//               ),\n-//             ],\n-//           ),\n-//           actions: [\n-//             TextButton(\n-//               onPressed: () {\n-//                 Navigator.of(context).pop(); // Close the dialog without sending\n-//               },\n-//               child: const Text('Cancel'),\n-//             ),\n-//             TextButton(\n-//               onPressed: () {\n-//                 String message = messageController.text.trim();\n-//                 if (message.isNotEmpty) {\n-//                   _sendMessageToPostmaker(\n-//                       context, postmakerId, message, postId);\n-//                 }\n-//                 ScaffoldMessenger.of(context).showSnackBar(\n-//                   const SnackBar(\n-//                     content: Text('Message sent successfully'),\n-//                     behavior: SnackBarBehavior.floating,\n-//                     margin: EdgeInsets.all(16.0),\n-//                   ),\n-//                 );\n-//                 Navigator.of(context).pop(); // Close the dialog after sending\n-//               },\n-//               child: const Text('Send'),\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Send a Reply'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              Row(\n+                children: [\n+                  const Text('Reply to'),\n+                  TextButton(\n+                      onPressed: () {\n+                        Navigator.push(\n+                            context,\n+                            MaterialPageRoute(\n+                                builder: (_) =>\n+                                    ProfilePage2(uid: postmakerId)));\n+                      },\n+                      child: Text(postmaker))\n+                ],\n+              ),\n+              const SizedBox(height: 10),\n+              TextField(\n+                controller: messageController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your message',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop(); // Close the dialog without sending\n+              },\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String message = messageController.text.trim();\n+                if (message.isNotEmpty) {\n+                  _sendMessageToPostmaker(\n+                      context, postmakerId, message, postId);\n+                }\n+                ScaffoldMessenger.of(context).showSnackBar(\n+                  const SnackBar(\n+                    content: Text('Message sent successfully'),\n+                    behavior: SnackBarBehavior.floating,\n+                    margin: EdgeInsets.all(16.0),\n+                  ),\n+                );\n+                Navigator.of(context).pop(); // Close the dialog after sending\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n-//       String message, String postId) async {\n-//     try {\n-//       // Add a chat message to Firestore\n-//       await FirebaseFirestore.instance.collection('chats').add({\n-//         'senderId': user!.uid,\n-//         'receiverId': postmakerId,\n-//         'participants': [user!.uid, postmakerId],\n-//         'message': message,\n-//         'postId': postId,\n-//         'timestamp': Timestamp.now(),\n-//       });\n+  Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n+      String message, String postId) async {\n+    try {\n+      // Add a chat message to Firestore\n+      await FirebaseFirestore.instance.collection('chats').add({\n+        'senderId': user!.uid,\n+        'receiverId': postmakerId,\n+        'participants': [user!.uid, postmakerId],\n+        'message': message,\n+        'postId': postId,\n+        'timestamp': Timestamp.now(),\n+      });\n \n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         const SnackBar(\n-//           content: Text('Message sent successfully'),\n-//           behavior: SnackBarBehavior.floating,\n-//           margin: EdgeInsets.all(16.0),\n-//         ),\n-//       );\n-//     } catch (e) {\n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         SnackBar(\n-//           content: Text('Failed to send message: $e'),\n-//           backgroundColor: Colors.red,\n-//         ),\n-//       );\n-//     }\n-//   }\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Message sent successfully'),\n+          behavior: SnackBarBehavior.floating,\n+          margin: EdgeInsets.all(16.0),\n+        ),\n+      );\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          content: Text('Failed to send message: $e'),\n+          backgroundColor: Colors.red,\n+        ),\n+      );\n+    }\n+  }\n \n-//   void _claimPost(BuildContext context, String postmakerId, String postTitle,\n-//       String postQuestion, String postdescription, String postId) {\n-//     TextEditingController answerController = TextEditingController();\n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: const Text('Claim Item'),\n-//           content: Column(\n-//             mainAxisSize: MainAxisSize.min,\n-//             children: [\n-//               const Text('Question from the post owner:'),\n-//               const SizedBox(height: 10),\n-//               Text(postQuestion,\n-//                   style: const TextStyle(fontWeight: FontWeight.bold)),\n-//               const SizedBox(height: 20),\n-//               TextField(\n-//                 controller: answerController,\n-//                 decoration: const InputDecoration(\n-//                   labelText: 'Your answer',\n-//                   alignLabelWithHint: true,\n-//                   border: OutlineInputBorder(),\n-//                 ),\n-//                 maxLines: 3,\n-//               ),\n-//             ],\n-//           ),\n-//           actions: [\n-//             TextButton(\n-//               onPressed: () {\n-//                 Navigator.of(context).pop();\n-//               },\n-//               child: const Text('Cancel'),\n-//             ),\n-//             TextButton(\n-//               onPressed: () {\n-//                 String answer = answerController.text.trim();\n-//                 if (answer.isNotEmpty) {\n-//                   _sendAnswerToPostmaker(\n-//                       context, answer, postId, postmakerId, 'requested');\n-//                 }\n-//                 ScaffoldMessenger.of(context).showSnackBar(\n-//                   const SnackBar(\n-//                     content: Text('Request sent successfully'),\n-//                     behavior: SnackBarBehavior.floating,\n-//                     margin: EdgeInsets.all(16.0),\n-//                   ),\n-//                 );\n-//                 Navigator.of(context).pop();\n-//               },\n-//               child: const Text('Send'),\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+  void _claimPost(BuildContext context, String postmakerId, String postTitle,\n+      String postQuestion, String postdescription, String postId) {\n+    TextEditingController answerController = TextEditingController();\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Claim Item'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              const Text('Question from the post owner:'),\n+              const SizedBox(height: 10),\n+              Text(postQuestion,\n+                  style: const TextStyle(fontWeight: FontWeight.bold)),\n+              const SizedBox(height: 20),\n+              TextField(\n+                controller: answerController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your answer',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String answer = answerController.text.trim();\n+                if (answer.isNotEmpty) {\n+                  _sendAnswerToPostmaker(\n+                      context, answer, postId, postmakerId, 'requested');\n+                }\n+                ScaffoldMessenger.of(context).showSnackBar(\n+                  const SnackBar(\n+                    content: Text('Request sent successfully'),\n+                    behavior: SnackBarBehavior.floating,\n+                    margin: EdgeInsets.all(16.0),\n+                  ),\n+                );\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   void _claimedPost(BuildContext context, String postclaimerId,\n-//       String postTitle, String claimername, String postId) {\n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: Text('Claimed Item : $postTitle',\n-//               style:\n-//                   const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n-//           content: Column(\n-//             mainAxisSize: MainAxisSize.min,\n-//             children: [\n-//               Row(\n-//                 children: [\n-//                   const Text('Already claimed by :',\n-//                       style: TextStyle(fontWeight: FontWeight.bold)),\n-//                   TextButton(\n-//                       onPressed: () {\n-//                         Navigator.push(\n-//                             context,\n-//                             MaterialPageRoute(\n-//                                 builder: (_) =>\n-//                                     ProfilePage2(uid: postclaimerId)));\n-//                       },\n-//                       child: Text(\n-//                           user!.uid == postclaimerId ? 'You' : claimername,\n-//                           style: const TextStyle(fontWeight: FontWeight.bold))),\n-//                 ],\n-//               ),\n-//               const SizedBox(height: 10),\n-//             ],\n-//           ),\n-//           actions: [\n-//             TextButton(\n-//               onPressed: () {\n-//                 Navigator.of(context).pop();\n-//               },\n-//               child: const Text('Cancel'),\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+  void _claimedPost(BuildContext context, String postclaimerId,\n+      String postTitle, String claimername, String postId) {\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: Text('Claimed Item : $postTitle',\n+              style:\n+                  const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              Row(\n+                children: [\n+                  const Text('Already claimed by :',\n+                      style: TextStyle(fontWeight: FontWeight.bold)),\n+                  TextButton(\n+                      onPressed: () {\n+                        Navigator.push(\n+                            context,\n+                            MaterialPageRoute(\n+                                builder: (_) =>\n+                                    ProfilePage2(uid: postclaimerId)));\n+                      },\n+                      child: Text(\n+                          user!.uid == postclaimerId ? 'You' : claimername,\n+                          style: const TextStyle(fontWeight: FontWeight.bold))),\n+                ],\n+              ),\n+              const SizedBox(height: 10),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Cancel'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   Future<void> _sendAnswerToPostmaker(\n-//     BuildContext context,\n-//     String answer,\n-//     String postId,\n-//     String postmakerId,\n-//     String statusofRequest,\n-//   ) async {\n-//     try {\n-//       // Reference to the specific post's claims subcollection\n-//       CollectionReference claimsRef = FirebaseFirestore.instance\n-//           .collection('posts')\n-//           .doc(postId) // Get the post document using its ID\n-//           .collection('claims'); // Access the subcollection\n+  Future<void> _sendAnswerToPostmaker(\n+    BuildContext context,\n+    String answer,\n+    String postId,\n+    String postmakerId,\n+    String statusofRequest,\n+  ) async {\n+    try {\n+      // Reference to the specific post's claims subcollection\n+      CollectionReference claimsRef = FirebaseFirestore.instance\n+          .collection('posts')\n+          .doc(postId) // Get the post document using its ID\n+          .collection('claims'); // Access the subcollection\n \n-//       // Add a new claim document\n-//       await claimsRef.add({\n-//         'senderId': user!.uid,\n-//         'answer': answer,\n-//         'claimStatusC': statusofRequest,\n-//         'timestamp': Timestamp.now(),\n-//         'isClaimed': false,\n-//         'receiverId': postmakerId,\n-//       });\n+      // Add a new claim document\n+      await claimsRef.add({\n+        'senderId': user!.uid,\n+        'answer': answer,\n+        'claimStatusC': statusofRequest,\n+        'timestamp': Timestamp.now(),\n+        'isClaimed': false,\n+        'receiverId': postmakerId,\n+      });\n \n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         const SnackBar(\n-//           content: Text('Your answer has been sent to the post maker'),\n-//           behavior: SnackBarBehavior.floating,\n-//           margin: EdgeInsets.all(16.0),\n-//         ),\n-//       );\n-//     } catch (e) {\n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         SnackBar(\n-//           content: Text('Failed to send answer: $e'),\n-//           backgroundColor: Colors.red,\n-//         ),\n-//       );\n-//     }\n-//   }\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Your answer has been sent to the post maker'),\n+          behavior: SnackBarBehavior.floating,\n+          margin: EdgeInsets.all(16.0),\n+        ),\n+      );\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          content: Text('Failed to send answer: $e'),\n+          backgroundColor: Colors.red,\n+        ),\n+      );\n+    }\n+  }\n \n-//   void _sharePost(BuildContext context, String title, String description) {\n-//     final content = 'Check out this post: $title\\nDescription: $description';\n-//     final snackBar = SnackBar(content: Text('Shared! $content'));\n-//     ScaffoldMessenger.of(context).showSnackBar(snackBar);\n-//   }\n+  void _sharePost(BuildContext context, String title, String description) {\n+    final content = 'Check out this post: $title\\nDescription: $description';\n+    final snackBar = SnackBar(content: Text('Shared! $content'));\n+    ScaffoldMessenger.of(context).showSnackBar(snackBar);\n+  }\n \n-//   void _showDeleteConfirmation(BuildContext context, PostModel post) {\n-//     // postId = post.postId;\n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: const Text('Delete Post'),\n-//           content: const Text(\n-//             'Are you sure you want to delete this post?',\n-//             style: TextStyle(fontWeight: FontWeight.w700),\n-//           ),\n-//           actions: [\n-//             TextButton(\n-//               onPressed: () async {\n-//                 // Call your delete functionality here\n-//                 ScaffoldMessenger.of(context).showSnackBar(\n-//                   const SnackBar(\n-//                       backgroundColor: Colors.deepOrange,\n-//                       content: Text('Post deleted successfully')),\n-//                 );\n+  void _showDeleteConfirmation(BuildContext context, PostModel post) {\n+    // postId = post.postId;\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Delete Post'),\n+          content: const Text(\n+            'Are you sure you want to delete this post?',\n+            style: TextStyle(fontWeight: FontWeight.w700),\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () async {\n+                // Call your delete functionality here\n+                ScaffoldMessenger.of(context).showSnackBar(\n+                  const SnackBar(\n+                      backgroundColor: Colors.deepOrange,\n+                      content: Text('Post deleted successfully')),\n+                );\n \n-//                 await _deletePost(context, post.postId);\n+                await _deletePost(context, post.postId);\n \n-//                 Navigator.of(context).pop();\n-//               },\n-//               child: const Text(\n-//                 'Yes',\n-//                 style: TextStyle(fontWeight: FontWeight.bold),\n-//               ),\n-//             ),\n-//             TextButton(\n-//               onPressed: () => Navigator.of(context).pop(),\n-//               child: const Text(\n-//                 'No',\n-//                 style: TextStyle(fontWeight: FontWeight.bold),\n-//               ),\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text(\n+                'Yes',\n+                style: TextStyle(fontWeight: FontWeight.bold),\n+              ),\n+            ),\n+            TextButton(\n+              onPressed: () => Navigator.of(context).pop(),\n+              child: const Text(\n+                'No',\n+                style: TextStyle(fontWeight: FontWeight.bold),\n+              ),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   void _showFullImageDialog(BuildContext context, String imageUrl) {\n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return Dialog(\n-//           child: Stack(\n-//             children: [\n-//               Image.network(imageUrl),\n-//               Positioned(\n-//                 right: 10,\n-//                 top: 10,\n-//                 child: IconButton(\n-//                   icon: const Icon(Icons.cancel, color: Colors.red),\n-//                   onPressed: () {\n-//                     Navigator.of(context).pop();\n-//                   },\n-//                 ),\n-//               ),\n-//             ],\n-//           ),\n-//         );\n-//       },\n-//     );\n-//   }\n-// }\n+  void _showFullImageDialog(BuildContext context, String imageUrl) {\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return Dialog(\n+          child: Stack(\n+            children: [\n+              Image.network(imageUrl),\n+              Positioned(\n+                right: 10,\n+                top: 10,\n+                child: IconButton(\n+                  icon: const Icon(Icons.cancel, color: Colors.red),\n+                  onPressed: () {\n+                    Navigator.of(context).pop();\n+                  },\n+                ),\n+              ),\n+            ],\n+          ),\n+        );\n+      },\n+    );\n+  }\n+}\n \n-// class FullScreenImageViewer extends StatefulWidget {\n-//   final List<String> images;\n-//   bool isMobile;\n-//    FullScreenImageViewer(this.images, this.isMobile,{super.key});\n+class FullScreenImageViewer extends StatefulWidget {\n+  final List<String> images;\n+  bool isMobile;\n+   FullScreenImageViewer(this.images, this.isMobile,{super.key});\n \n-//   @override\n-//   _FullScreenImageViewerState createState() => _FullScreenImageViewerState();\n-// }\n+  @override\n+  _FullScreenImageViewerState createState() => _FullScreenImageViewerState();\n+}\n \n-// class _FullScreenImageViewerState extends State<FullScreenImageViewer> {\n-//   int _currentIndex = 0;\n+class _FullScreenImageViewerState extends State<FullScreenImageViewer> {\n+  int _currentIndex = 0;\n \n-//   @override\n-//   Widget build(BuildContext context) {\n-//     return Scaffold(\n-//       backgroundColor:\n-//           Colors.black.withOpacity(0.8), // Background color for overlay\n-//       body: Stack(\n-//         children: [\n-//           PageView.builder(\n-//             itemCount: widget.images.length,\n-//             controller: PageController(initialPage: _currentIndex),\n-//             onPageChanged: (index) {\n-//               setState(() {\n-//                 _currentIndex = index;\n-//               });\n-//             },\n-//             itemBuilder: (context, index) {\n-//               return Center(\n-//                 child: Image.network(\n-//                   width:widget.isMobile ? MediaQuery.of(context).size.width:MediaQuery.of(context).size.width*0.5,\n-//                   widget.images[index],\n-//                   fit: BoxFit.contain,\n-//                 ),\n-//               );\n-//             },\n-//           ),\n-//           Positioned(\n-//             top: 40,\n-//             right: 20,\n-//             child: IconButton(\n-//               icon: const Icon(\n-//                 Icons.close,\n-//                 color: Colors.white,\n-//                 size: 30,\n-//               ),\n-//               onPressed: () {\n-//                 Navigator.of(context).pop();\n-//               },\n-//             ),\n-//           ),\n-//         ],\n-//       ),\n-//     );\n-//   }\n-// }\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor:\n+          Colors.black.withOpacity(0.8), // Background color for overlay\n+      body: Stack(\n+        children: [\n+          PageView.builder(\n+            itemCount: widget.images.length,\n+            controller: PageController(initialPage: _currentIndex),\n+            onPageChanged: (index) {\n+              setState(() {\n+                _currentIndex = index;\n+              });\n+            },\n+            itemBuilder: (context, index) {\n+              return Center(\n+                child: Image.network(\n+                  width:widget.isMobile ? MediaQuery.of(context).size.width:MediaQuery.of(context).size.width*0.5,\n+                  widget.images[index],\n+                  fit: BoxFit.contain,\n+                ),\n+              );\n+            },\n+          ),\n+          Positioned(\n+            top: 40,\n+            right: 20,\n+            child: IconButton(\n+              icon: const Icon(\n+                Icons.close,\n+                color: Colors.white,\n+                size: 30,\n+              ),\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1756123527413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -379,13 +379,9 @@\n                                     GestureDetector(\n                                       onTap: () {\n                                         print(\n                                             'EROROR ::: ${post.profileImageUrl}');\n-                                        Navigator.push(\n-                                            context,\n-                                            MaterialPageRoute(\n-                                                builder: (_) => ProfilePage2(\n-                                                    uid: post.postmakerId)));\n+                                    \n                                       },\n                                       child: ListTile(\n                                         leading: CircleAvatar(\n                                           radius: 30,\n"
                },
                {
                    "date": 1756123532575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -379,9 +379,21 @@\n                                     GestureDetector(\n                                       onTap: () {\n                                         print(\n                                             'EROROR ::: ${post.profileImageUrl}');\n-                                    \n+                                      Navigator.push(\n+                        context,\n+                        PageRouteBuilder(\n+                          transitionDuration: const Duration(milliseconds: 500),\n+                          pageBuilder: (_, __, ___) =>prof(uid: postmakerId),\n+                          transitionsBuilder: (context, animation, secondaryAnimation, child) {\n+                            return FadeTransition(\n+                              opacity: animation,\n+                              child: child,\n+                            );\n+                          },\n+                        ),\n+                      );\n                                       },\n                                       child: ListTile(\n                                         leading: CircleAvatar(\n                                           radius: 30,\n"
                },
                {
                    "date": 1756123546133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -383,9 +383,9 @@\n                                       Navigator.push(\n                         context,\n                         PageRouteBuilder(\n                           transitionDuration: const Duration(milliseconds: 500),\n-                          pageBuilder: (_, __, ___) =>prof(uid: postmakerId),\n+                          pageBuilder: (_, __, ___) => ProfilePage2(uid: postmakerId),\n                           transitionsBuilder: (context, animation, secondaryAnimation, child) {\n                             return FadeTransition(\n                               opacity: animation,\n                               child: child,\n@@ -450,15 +450,9 @@\n                                               .map<Widget>((imageUrl) {\n                                             return GestureDetector(\n                                               onTap: () {\n                                                 // Open image viewer when the image is tapped\n-                                                Navigator.push(\n-                                                  context,\n-                                                  MaterialPageRoute(\n-                                                    builder: (context) =>\n-                                                        FullScreenImageViewer(\n-                                                            post.itemImages,isMobile),\n-                                                  ),\n+                                             \n                                                 );\n                                               },\n                                               child: ClipRRect(\n                                                 borderRadius:\n"
                },
                {
                    "date": 1756123552249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -450,10 +450,21 @@\n                                               .map<Widget>((imageUrl) {\n                                             return GestureDetector(\n                                               onTap: () {\n                                                 // Open image viewer when the image is tapped\n-                                             \n-                                                );\n+                                               Navigator.push(\n+                        context,\n+                        PageRouteBuilder(\n+                          transitionDuration: const Duration(milliseconds: 500),\n+                          pageBuilder: (_, __, ___) => UserSeePage(uid: postmakerId),\n+                          transitionsBuilder: (context, animation, secondaryAnimation, child) {\n+                            return FadeTransition(\n+                              opacity: animation,\n+                              child: child,\n+                            );\n+                          },\n+                        ),\n+                      );\n                                               },\n                                               child: ClipRRect(\n                                                 borderRadius:\n                                                     BorderRadius.circular(10),\n"
                },
                {
                    "date": 1756123557668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -454,9 +454,9 @@\n                                                Navigator.push(\n                         context,\n                         PageRouteBuilder(\n                           transitionDuration: const Duration(milliseconds: 500),\n-                          pageBuilder: (_, __, ___) => UserSeePage(uid: postmakerId),\n+                          pageBuilder: (_, __, ___) => Ful\n                           transitionsBuilder: (context, animation, secondaryAnimation, child) {\n                             return FadeTransition(\n                               opacity: animation,\n                               child: child,\n"
                },
                {
                    "date": 1756123563292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -454,9 +454,9 @@\n                                                Navigator.push(\n                         context,\n                         PageRouteBuilder(\n                           transitionDuration: const Duration(milliseconds: 500),\n-                          pageBuilder: (_, __, ___) => Ful\n+                          pageBuilder: (_, __, ___) => FullScreenImageViewer(post.itemImages, isMobile),\n                           transitionsBuilder: (context, animation, secondaryAnimation, child) {\n                             return FadeTransition(\n                               opacity: animation,\n                               child: child,\n"
                },
                {
                    "date": 1756123575279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -379,21 +379,26 @@\n                                     GestureDetector(\n                                       onTap: () {\n                                         print(\n                                             'EROROR ::: ${post.profileImageUrl}');\n-                                      Navigator.push(\n-                        context,\n-                        PageRouteBuilder(\n-                          transitionDuration: const Duration(milliseconds: 500),\n-                          pageBuilder: (_, __, ___) => ProfilePage2(uid: postmakerId),\n-                          transitionsBuilder: (context, animation, secondaryAnimation, child) {\n-                            return FadeTransition(\n-                              opacity: animation,\n-                              child: child,\n-                            );\n-                          },\n-                        ),\n-                      );\n+                                        Navigator.push(\n+                                          context,\n+                                          PageRouteBuilder(\n+                                            transitionDuration: const Duration(\n+                                                milliseconds: 500),\n+                                            pageBuilder: (_, __, ___) =>\n+                                                ProfilePage2(uid: d),\n+                                            transitionsBuilder: (context,\n+                                                animation,\n+                                                secondaryAnimation,\n+                                                child) {\n+                                              return FadeTransition(\n+                                                opacity: animation,\n+                                                child: child,\n+                                              );\n+                                            },\n+                                          ),\n+                                        );\n                                       },\n                                       child: ListTile(\n                                         leading: CircleAvatar(\n                                           radius: 30,\n@@ -450,21 +455,30 @@\n                                               .map<Widget>((imageUrl) {\n                                             return GestureDetector(\n                                               onTap: () {\n                                                 // Open image viewer when the image is tapped\n-                                               Navigator.push(\n-                        context,\n-                        PageRouteBuilder(\n-                          transitionDuration: const Duration(milliseconds: 500),\n-                          pageBuilder: (_, __, ___) => FullScreenImageViewer(post.itemImages, isMobile),\n-                          transitionsBuilder: (context, animation, secondaryAnimation, child) {\n-                            return FadeTransition(\n-                              opacity: animation,\n-                              child: child,\n-                            );\n-                          },\n-                        ),\n-                      );\n+                                                Navigator.push(\n+                                                  context,\n+                                                  PageRouteBuilder(\n+                                                    transitionDuration:\n+                                                        const Duration(\n+                                                            milliseconds: 500),\n+                                                    pageBuilder: (_, __, ___) =>\n+                                                        FullScreenImageViewer(\n+                                                            post.itemImages,\n+                                                            isMobile),\n+                                                    transitionsBuilder:\n+                                                        (context,\n+                                                            animation,\n+                                                            secondaryAnimation,\n+                                                            child) {\n+                                                      return FadeTransition(\n+                                                        opacity: animation,\n+                                                        child: child,\n+                                                      );\n+                                                    },\n+                                                  ),\n+                                                );\n                                               },\n                                               child: ClipRRect(\n                                                 borderRadius:\n                                                     BorderRadius.circular(10),\n@@ -1192,9 +1206,9 @@\n \n class FullScreenImageViewer extends StatefulWidget {\n   final List<String> images;\n   bool isMobile;\n-   FullScreenImageViewer(this.images, this.isMobile,{super.key});\n+  FullScreenImageViewer(this.images, this.isMobile, {super.key});\n \n   @override\n   _FullScreenImageViewerState createState() => _FullScreenImageViewerState();\n }\n@@ -1219,9 +1233,11 @@\n             },\n             itemBuilder: (context, index) {\n               return Center(\n                 child: Image.network(\n-                  width:widget.isMobile ? MediaQuery.of(context).size.width:MediaQuery.of(context).size.width*0.5,\n+                  width: widget.isMobile\n+                      ? MediaQuery.of(context).size.width\n+                      : MediaQuery.of(context).size.width * 0.5,\n                   widget.images[index],\n                   fit: BoxFit.contain,\n                 ),\n               );\n"
                },
                {
                    "date": 1756124019660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,1263 +2,598 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n-import 'package:l_f/Frontend/Contants/lists.dart';\n+import 'package:shimmer/shimmer.dart';\n+// Adjust these imports to match your project structure\n+import 'package:l_f/Frontend/Contants/lists.dart'; \n import 'package:l_f/Frontend/Home/Post/post_model.dart';\n import 'package:l_f/Frontend/Profile/user_see_page.dart';\n \n+// ------------------- MAIN PAGE WIDGET ------------------- //\n+\n class LostFoundPage extends StatefulWidget {\n   const LostFoundPage({super.key});\n \n   @override\n   State<LostFoundPage> createState() => _LostFoundPageState();\n }\n \n class _LostFoundPageState extends State<LostFoundPage> {\n-  final Map<String, Map<String, String>> _userCache =\n-      {}; // Cache to store user data\n-  User? user = FirebaseAuth.instance.currentUser;\n-  // String? postId;\n+  late Stream<QuerySnapshot> _postStream;\n+  final Map<String, Map<String, String>> _userCache = {};\n+  final User? _currentUser = FirebaseAuth.instance.currentUser;\n \n-  List<PostModel> _filteredPosts = [];\n+  // State for filters\n+  String _selectedType = 'All';\n+  String _selectedLocation = 'Campus, NITH';\n+  String _selectedCategory = 'All';\n+  String _selectedDateRange = 'All Time';\n \n-  // Function to fetch filtered posts from Firestore\n-  void _filterPosts(\n-      String status, String location, DateTime? uploadDate, String title) {\n-    Query query = FirebaseFirestore.instance.collection('posts');\n+  @override\n+  void initState() {\n+    super.initState();\n+    _updateStream();\n+  }\n \n-    // Apply filters\n-    if (status.isNotEmpty) {\n-      query = query.where('status', isEqualTo: status);\n-    }\n-    if (location.isNotEmpty) {\n-      query = query.where('location', isEqualTo: location);\n-    }\n-    if (uploadDate != null) {\n-      query = query.where('uploadDate', isEqualTo: uploadDate);\n-    }\n-    if (title.isNotEmpty) {\n-      query = query.where('itemTitle', isEqualTo: title);\n-    }\n+  // ------------------- DATA & FIRESTORE LOGIC ------------------- //\n \n-    // Get the results and update the UI\n-    query.get().then((snapshot) {\n-      setState(() {\n-        _filteredPosts = snapshot.docs\n-            .map((doc) => PostModel.fromJson(doc as Map<String, dynamic>))\n-            .toList();\n-      });\n+  void _updateStream() {\n+    setState(() {\n+      _postStream = _getPostsStream(\n+        type: _selectedType,\n+        location: _selectedLocation,\n+        category: _selectedCategory,\n+        dateRange: _selectedDateRange,\n+      );\n     });\n   }\n+  \n+  Stream<QuerySnapshot> _getPostsStream({\n+    String type = 'All',\n+    String location = 'Campus, NITH',\n+    String category = 'All',\n+    String dateRange = 'All Time',\n+  }) {\n+    Query query = FirebaseFirestore.instance.collection('posts');\n \n-  String _formatDate(Timestamp? timestamp) {\n-    if (timestamp == null) return 'Not available';\n-    DateTime date = timestamp.toDate();\n-    return DateFormat('dd MMMM yyyy').format(date);\n+    if (type != 'All') query = query.where('status', isEqualTo: type);\n+    if (location != 'Campus, NITH') query = query.where('location', isEqualTo: location);\n+    if (category != 'All') query = query.where('item', isEqualTo: category);\n+\n+    DateTime? startDate = _getStartDate(dateRange);\n+    if (startDate != null) {\n+      query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n+    }\n+\n+    return query.orderBy('timestamp', descending: true).snapshots();\n   }\n+  \n+  DateTime? _getStartDate(String dateRange) {\n+    final now = DateTime.now();\n+    switch (dateRange) {\n+      case 'Today': return DateTime(now.year, now.month, now.day);\n+      case 'This Week': return now.subtract(Duration(days: now.weekday - 1));\n+      case 'This Month': return DateTime(now.year, now.month, 1);\n+      case 'This Year': return DateTime(now.year, 1, 1);\n+      default: return null;\n+    }\n+  }\n \n   Future<void> _deletePost(BuildContext context, String postId) async {\n     try {\n       await FirebaseFirestore.instance.collection('posts').doc(postId).delete();\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          backgroundColor: Colors.green,\n-          content: Text('Post deleted successfully'),\n-          behavior: SnackBarBehavior.floating,\n-          margin: EdgeInsets.all(16.0),\n-          duration: Duration(seconds: 2),\n-        ),\n-      );\n+      if (!mounted) return;\n+      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(\n+        content: Text('Post deleted successfully'),\n+        backgroundColor: Colors.green,\n+      ));\n     } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-            backgroundColor: Colors.red,\n-            content: Text('Failed to delete post: $e')),\n-      );\n+      if (!mounted) return;\n+      ScaffoldMessenger.of(context).showSnackBar(SnackBar(\n+        content: Text('Failed to delete post: $e'),\n+        backgroundColor: Colors.red,\n+      ));\n     }\n   }\n-\n-  Future<Map<String, String>> _fetchUserNameAndProfilePic(String uid) async {\n-    if (_userCache.containsKey(uid)) {\n-      return _userCache[uid]!; // Return cached data if available\n-    }\n-\n+  \n+  Future<Map<String, String>> _fetchUserDetails(String uid) async {\n+    if (_userCache.containsKey(uid)) return _userCache[uid]!;\n+    \n     try {\n-      DocumentSnapshot userDoc =\n-          await FirebaseFirestore.instance.collection('users').doc(uid).get();\n-\n-      if (!userDoc.exists) {\n-        throw Exception(\"User not found.\");\n+      final userDoc = await FirebaseFirestore.instance.collection('users').doc(uid).get();\n+      if (userDoc.exists) {\n+        final userData = userDoc.data() as Map<String, dynamic>;\n+        final userDetails = {\n+          'name': userData['name'] ?? 'NITH User',\n+          'profileImage': userData['profileImage'] ?? '', // Handle empty URL\n+        };\n+        _userCache[uid] = userDetails;\n+        return userDetails;\n       }\n-\n-      Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n-\n-      String name = userData['name'] ?? 'NITH User';\n-      String profileImage = userData['profileImage'] ?? '';\n-\n-      // Cache the user data\n-      _userCache[uid] = {\n-        'name': name,\n-        'profileImage': profileImage,\n-      };\n-\n-      return _userCache[uid]!;\n     } catch (e) {\n-      print(\"Error fetching user profile: $e\");\n-      throw Exception(\"Error fetching user profile.\");\n+      print(\"Error fetching user details: $e\");\n     }\n+    return {'name': 'NITH User', 'profileImage': ''};\n   }\n-\n-  Stream<QuerySnapshot>? _postStream;\n-\n-  @override\n-  void initState() {\n-    super.initState();\n-    // Initialize stream without filters\n-    _postStream = FirebaseFirestore.instance\n-        .collection('posts')\n-        .orderBy('timestamp', descending: true)\n-        .snapshots();\n+  \n+  Future<List<PostModel>> _mapDocsToPostModels(List<QueryDocumentSnapshot> docs) async {\n+    final futures = docs.map((doc) async {\n+      final data = doc.data() as Map<String, dynamic>;\n+      final userDetails = await _fetchUserDetails(data['postmakerId']);\n+      \n+      String? postClaimerName;\n+      if (data['isClaimed'] == true && data['postClaimer'] != null) {\n+        final claimerDetails = await _fetchUserDetails(data['postClaimer']);\n+        postClaimerName = claimerDetails['name'];\n+      }\n+      \n+      // Merge fetched user data into the model\n+      return PostModel.fromJson({\n+        ...data,\n+        'userName': userDetails['name'],\n+        'profileImageUrl': userDetails['profileImage'],\n+        'postTime': _formatDate(data['timestamp']),\n+        'postClaimerName': postClaimerName,\n+      });\n+    }).toList();\n+    return await Future.wait(futures);\n   }\n \n-  void _applyFilters() {\n-    // Start with the collection reference\n-    Query query = FirebaseFirestore.instance.collection('posts');\n-\n-    // Apply Type filter (Lost/Found)\n-    if (selectedType != 'All') {\n-      query = query.where('status', isEqualTo: selectedType);\n-    }\n-\n-    // Apply Location filter\n-    if (selectedLocation != 'Campus, NITH') {\n-      query = query.where('location', isEqualTo: selectedLocation);\n-    }\n-\n-    // Apply Item Category filter\n-    if (selectedCategory != 'All') {\n-      query = query.where('item', isEqualTo: selectedCategory);\n-    }\n-\n-    // Apply Date filter (based on upload timestamp)\n-    DateTime now = DateTime.now();\n-    DateTime? startDate;\n-\n-    switch (selectedDateRange) {\n-      case 'Today':\n-        startDate = DateTime(now.year, now.month, now.day);\n-        break;\n-      case 'This Week':\n-        startDate = now.subtract(Duration(days: now.weekday - 1));\n-        break;\n-      case 'This Month':\n-        startDate = DateTime(now.year, now.month, 1);\n-        break;\n-      case 'This Year':\n-        startDate = DateTime(now.year, 1, 1);\n-        break;\n-      default:\n-        startDate = null;\n-    }\n-\n-    if (startDate != null) {\n-      query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n-    }\n-\n-    // Update the stream for the StreamBuilder\n-    setState(() {\n-      _postStream = query.orderBy('timestamp', descending: true).snapshots();\n-    });\n+  String _formatDate(Timestamp? timestamp) {\n+    if (timestamp == null) return 'Not available';\n+    return DateFormat('dd MMMM yyyy').format(timestamp.toDate());\n   }\n+  \n+  // ------------------- UI & EVENT HANDLERS ------------------- //\n \n-  String selectedType = 'All';\n-  String selectedLocation = 'Campus, NITH';\n-  String selectedCategory = 'All';\n-  String selectedDateRange = 'All Time';\n-\n-// Dummy lists for dropdowns (replace with your provided lists)\n-  List<String> itemTypes = ['All', 'Lost', 'Found'];\n-  List<String> locations = locationsList;\n-  List<String> categories = [\n-    'All',\n-    'Mobile Phone',\n-    'Laptop',\n-    'Charger',\n-    'Wallet',\n-    'ID Card',\n-    'Hoodie',\n-    'Jacket/Coat',\n-    'Bat',\n-    'Electronics Item',\n-    'Cloth',\n-    'Belt',\n-    'Ball',\n-    'Book',\n-    'Earphones',\n-    'Earbuds',\n-    'Water Bottle',\n-    'Watch',\n-    'Specs',\n-    'Jewellry',\n-    'Shoes',\n-    'Keys',\n-    'Umbrella',\n-    'Other'\n-  ];\n-  List<String> dateRanges = [\n-    'All Time',\n-    'Today',\n-    'This Week',\n-    'This Month',\n-    'This Year'\n-  ];\n-\n-// Filter Dropdowns\n-  Widget buildDropdowns() {\n-    return LayoutBuilder(builder: (context, constraints) {\n-      return Padding(\n-        padding: const EdgeInsets.symmetric(horizontal: 12.0),\n-        child: Row(\n-          mainAxisAlignment: MainAxisAlignment.center,\n-          mainAxisSize: MainAxisSize.min,\n-          children: [\n-            buildDropdown(selectedType, itemTypes, (newValue) {\n-              setState(() {\n-                selectedType = newValue!;\n-              });\n-              _applyFilters();\n-            }),\n-            const SizedBox(width: 10),\n-            buildDropdown(selectedLocation, locations, (newValue) {\n-              setState(() {\n-                selectedLocation = newValue!;\n-              });\n-              _applyFilters();\n-            }),\n-            const SizedBox(width: 10),\n-            buildDropdown(selectedCategory, categories, (newValue) {\n-              setState(() {\n-                selectedCategory = newValue!;\n-              });\n-              _applyFilters();\n-            }),\n-            const SizedBox(width: 10),\n-            buildDropdown(selectedDateRange, dateRanges, (newValue) {\n-              setState(() {\n-                selectedDateRange = newValue!;\n-              });\n-              _applyFilters();\n-            }),\n-          ],\n-        ),\n-      );\n-    });\n+  void _onFilterChanged({ String? type, String? location, String? category, String? dateRange }) {\n+    _selectedType = type ?? _selectedType;\n+    _selectedLocation = location ?? _selectedLocation;\n+    _selectedCategory = category ?? _selectedCategory;\n+    _selectedDateRange = dateRange ?? _selectedDateRange;\n+    _updateStream();\n   }\n \n-// Helper method to create a DropdownButton\n-  Widget buildDropdown(String selectedValue, List<String> items,\n-      ValueChanged<String?> onChanged) {\n-    return DropdownButton<String>(\n-      value: selectedValue,\n-      items: items.map((String value) {\n-        return DropdownMenuItem<String>(\n-          value: value,\n-          child: Text(value),\n-        );\n-      }).toList(),\n-      onChanged: onChanged,\n+  void _showDeleteConfirmation(BuildContext context, PostModel post) {\n+    showDialog(\n+      context: context,\n+      builder: (dialogContext) => AlertDialog(\n+        title: const Text('Delete Post'),\n+        content: const Text('Are you sure you want to delete this post?'),\n+        actions: [\n+          TextButton(onPressed: () => Navigator.of(dialogContext).pop(), child: const Text('No')),\n+          TextButton(\n+            onPressed: () {\n+              Navigator.of(dialogContext).pop();\n+              _deletePost(context, post.postId);\n+            },\n+            child: const Text('Yes'),\n+          ),\n+        ],\n+      ),\n     );\n   }\n \n   @override\n   Widget build(BuildContext context) {\n-    bool isMobile = MediaQuery.of(context).size.width < 600;\n     return Scaffold(\n       body: Column(\n         children: [\n-          SingleChildScrollView(\n-              scrollDirection: Axis.horizontal, child: buildDropdowns()),\n+          FilterBar(onFilterChanged: _onFilterChanged),\n+          const Divider(height: 1, thickness: 1),\n           Expanded(\n-            child: StreamBuilder<QuerySnapshot>(\n+            child: PostListView(\n               stream: _postStream,\n-              builder: (context, snapshot) {\n-                if (snapshot.connectionState == ConnectionState.waiting) {\n-                  return const Center(child: CircularProgressIndicator());\n-                }\n-                if (snapshot.hasError) {\n-                  print('ERROR ${snapshot.error}');\n-                  return const Center(child: Text('Error loading posts'));\n-                }\n+              currentUser: _currentUser,\n+              onDelete: (post) => _showDeleteConfirmation(context, post),\n+              mapDocsFunction: _mapDocsToPostModels,\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+}\n \n-                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-                  return const Center(\n-                      child: Center(child: Text('No posts available')));\n-                }\n+// ------------------- FILTER BAR WIDGET ------------------- //\n \n-                final posts = snapshot.data!.docs.map((doc) {\n-                  final data = doc.data() as Map<String, dynamic>;\n-                  final String uid = data['postmakerId'];\n-                  final bool isClaimed = data['isClaimed'] ?? false;\n-                  final String? claimerUid = data['postClaimer'];\n-                  print(\"post claimerasss: : $claimerUid\");\n-                  print(\"POST IDDDDDDDD : ${data['postId']}\");\n-                  print(\"Is Post Claimed: $isClaimed\");\n+class FilterBar extends StatefulWidget {\n+  final Function({String? type, String? location, String? category, String? dateRange}) onFilterChanged;\n \n-                  return _fetchUserNameAndProfilePic(uid)\n-                      .then((userDetails) async {\n-                    String postClaimerName = '';\n-                    String postClaimerProfilePic = '';\n+  const FilterBar({super.key, required this.onFilterChanged});\n \n-                    if (isClaimed && claimerUid != null) {\n-                      final claimerDetails =\n-                          await _fetchUserNameAndProfilePic(claimerUid);\n-                      postClaimerName = claimerDetails['name'] ?? 'NITH User';\n-                      postClaimerProfilePic = claimerDetails['profileImage']!;\n-                    }\n+  @override\n+  State<FilterBar> createState() => _FilterBarState();\n+}\n \n-                    return PostModel(\n-                      userName: userDetails['name'] ?? 'NITH User',\n-                      profileImageUrl: userDetails['profileImage'] ??\n-                          'https://static.wikia.nocookie.net/logopedia/images/e/ec/220px-National_Institute_of_Technology,_Hamirpur_Logo.png/revision/latest?cb=20200330143312',\n-                      postTime: _formatDate(data['timestamp']),\n-                      itemImages: List<String>.from(data['imageUrls'] ?? ''),\n-                      status: data['status'] ?? '',\n-                      title: data['item'] ?? '',\n-                      location: data['location'] ?? '',\n-                      description: data['description'] ?? '',\n-                      postmakerId: data['postmakerId'],\n-                      question: data['question'],\n-                      postId: data['postId'],\n-                      claimStatus: data['claimStatus'],\n-                      isClaimed: isClaimed,\n-                      postclaimerId: data['postClaimer'],\n-                      postClaimer:\n-                          postClaimerName.isNotEmpty ? postClaimerName : null,\n-                      postClaimerPic: postClaimerProfilePic.isNotEmpty\n-                          ? postClaimerProfilePic\n-                          : null,\n-                    );\n-                  });\n-                });\n+class _FilterBarState extends State<FilterBar> {\n+  String selectedType = 'All';\n+  String selectedLocation = 'Campus, NITH';\n+  String selectedCategory = 'All';\n+  String selectedDateRange = 'All Time';\n \n-                return FutureBuilder<List<PostModel>>(\n-                  future: Future.wait(posts.toList()),\n-                  builder: (context, futureSnapshot) {\n-                    if (futureSnapshot.connectionState ==\n-                        ConnectionState.waiting) {\n-                      return const Center(child: CircularProgressIndicator());\n-                    }\n+  // Your dropdown lists (replace with your actual lists)\n+  final List<String> itemTypes = ['All', 'Lost', 'Found'];\n+  final List<String> locations = locationsList; \n+  final List<String> categories = ['All', 'Mobile Phone', 'Laptop', 'Charger', 'Wallet', 'ID Card', 'Hoodie', 'Jacket/Coat', 'Bat', 'Electronics Item', 'Cloth', 'Belt', 'Ball', 'Book', 'Earphones', 'Earbuds', 'Water Bottle', 'Watch', 'Specs', 'Jewellry', 'Shoes', 'Keys', 'Umbrella', 'Other'];\n+  final List<String> dateRanges = ['All Time', 'Today', 'This Week', 'This Month', 'This Year'];\n \n-                    if (futureSnapshot.hasError) {\n-                      print(\"Error : ${futureSnapshot.error}\");\n-                      return const Center(child: Text('Error loading posts'));\n-                    }\n+  @override\n+  Widget build(BuildContext context) {\n+    return SingleChildScrollView(\n+      scrollDirection: Axis.horizontal,\n+      padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 8.0),\n+      child: Row(\n+        mainAxisAlignment: MainAxisAlignment.center,\n+        children: [\n+          _buildDropdown('Type', selectedType, itemTypes, (newValue) {\n+            setState(() => selectedType = newValue!);\n+            widget.onFilterChanged(type: newValue);\n+          }),\n+          _buildDropdown('Location', selectedLocation, locations, (newValue) {\n+            setState(() => selectedLocation = newValue!);\n+            widget.onFilterChanged(location: newValue);\n+          }),\n+          _buildDropdown('Category', selectedCategory, categories, (newValue) {\n+            setState(() => selectedCategory = newValue!);\n+            widget.onFilterChanged(category: newValue);\n+          }),\n+          _buildDropdown('Date', selectedDateRange, dateRanges, (newValue) {\n+            setState(() => selectedDateRange = newValue!);\n+            widget.onFilterChanged(dateRange: newValue);\n+          }),\n+        ],\n+      ),\n+    );\n+  }\n \n-                    final postsList = futureSnapshot.data ?? [];\n+  Widget _buildDropdown(String hint, String value, List<String> items, ValueChanged<String?> onChanged) {\n+    return Padding(\n+      padding: const EdgeInsets.symmetric(horizontal: 8.0),\n+      child: DropdownButtonHideUnderline(\n+        child: DropdownButton<String>(\n+          value: value,\n+          hint: Text(hint),\n+          items: items.map((String value) {\n+            return DropdownMenuItem<String>(value: value, child: Text(value, overflow: TextOverflow.ellipsis));\n+          }).toList(),\n+          onChanged: onChanged,\n+        ),\n+      ),\n+    );\n+  }\n+}\n \n-                    return ListView.builder(\n-                      itemCount: postsList.length,\n-                      itemBuilder: (context, index) {\n-                        final post = postsList[index];\n-                        return Padding(\n-                          padding: const EdgeInsets.all(2.0),\n-                          child: Center(\n-                            child: SizedBox(\n-                              width: isMobile\n-                                  ? MediaQuery.of(context).size.width\n-                                  : 600,\n-                              child: Card(\n-                                elevation: 5,\n-                                shape: RoundedRectangleBorder(\n-                                  borderRadius: BorderRadius.circular(10),\n-                                ),\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    // Header  of the POST (profiel,name.location,delete)\n-                                    GestureDetector(\n-                                      onTap: () {\n-                                        print(\n-                                            'EROROR ::: ${post.profileImageUrl}');\n-                                        Navigator.push(\n-                                          context,\n-                                          PageRouteBuilder(\n-                                            transitionDuration: const Duration(\n-                                                milliseconds: 500),\n-                                            pageBuilder: (_, __, ___) =>\n-                                                ProfilePage2(uid: d),\n-                                            transitionsBuilder: (context,\n-                                                animation,\n-                                                secondaryAnimation,\n-                                                child) {\n-                                              return FadeTransition(\n-                                                opacity: animation,\n-                                                child: child,\n-                                              );\n-                                            },\n-                                          ),\n-                                        );\n-                                      },\n-                                      child: ListTile(\n-                                        leading: CircleAvatar(\n-                                          radius: 30,\n-                                          backgroundImage: NetworkImage(\n-                                              post.profileImageUrl),\n-                                        ),\n-                                        title: Text(post.userName,\n-                                            style: const TextStyle(\n-                                                fontWeight: FontWeight.bold)),\n-                                        subtitle: Text(\n-                                            \"Location : ${post.location} , NITH\"),\n-                                        trailing: PopupMenuButton<String>(\n-                                          onSelected: (value) {\n-                                            if (value == 'Delete') {\n-                                              if (user!.uid ==\n-                                                  post.postmakerId) {\n-                                                _showDeleteConfirmation(\n-                                                    context, post);\n-                                              } else {\n-                                                ScaffoldMessenger.of(context)\n-                                                    .showSnackBar(\n-                                                  const SnackBar(\n-                                                      backgroundColor:\n-                                                          Colors.red,\n-                                                      content: Text(\n-                                                          \"You can't delete this post\")),\n-                                                );\n-                                              }\n-                                            }\n-                                          },\n-                                          itemBuilder: (BuildContext context) {\n-                                            return {'Delete'}\n-                                                .map((String choice) {\n-                                              return PopupMenuItem<String>(\n-                                                value: choice,\n-                                                child: Text(choice),\n-                                              );\n-                                            }).toList();\n-                                          },\n-                                        ),\n-                                      ),\n-                                    ),\n \n-                                    // LOST OR FOUND\n-                                    Stack(\n-                                      children: [\n-                                        CarouselSlider(\n-                                          options: CarouselOptions(\n-                                            autoPlay: true,\n-                                            height: 450.0,\n-                                            enlargeCenterPage: true,\n-                                          ),\n-                                          items: post.itemImages\n-                                              .map<Widget>((imageUrl) {\n-                                            return GestureDetector(\n-                                              onTap: () {\n-                                                // Open image viewer when the image is tapped\n-                                                Navigator.push(\n-                                                  context,\n-                                                  PageRouteBuilder(\n-                                                    transitionDuration:\n-                                                        const Duration(\n-                                                            milliseconds: 500),\n-                                                    pageBuilder: (_, __, ___) =>\n-                                                        FullScreenImageViewer(\n-                                                            post.itemImages,\n-                                                            isMobile),\n-                                                    transitionsBuilder:\n-                                                        (context,\n-                                                            animation,\n-                                                            secondaryAnimation,\n-                                                            child) {\n-                                                      return FadeTransition(\n-                                                        opacity: animation,\n-                                                        child: child,\n-                                                      );\n-                                                    },\n-                                                  ),\n-                                                );\n-                                              },\n-                                              child: ClipRRect(\n-                                                borderRadius:\n-                                                    BorderRadius.circular(10),\n-                                                child: Image.network(\n-                                                  imageUrl,\n-                                                  fit: BoxFit.cover,\n-                                                  width: MediaQuery.of(context)\n-                                                      .size\n-                                                      .width,\n-                                                  errorBuilder: (context, error,\n-                                                      stackTrace) {\n-                                                    return const Icon(\n-                                                        Icons.error);\n-                                                  },\n-                                                ),\n-                                              ),\n-                                            );\n-                                          }).toList(),\n-                                        ),\n-                                        Positioned(\n-                                          top: isMobile ? 16 : 6,\n-                                          left: 50,\n-                                          child: Container(\n-                                            padding: const EdgeInsets.symmetric(\n-                                                horizontal: 10, vertical: 5),\n-                                            decoration: BoxDecoration(\n-                                              color: post.status == 'Lost'\n-                                                  ? Colors.red\n-                                                  : Colors.green,\n-                                              borderRadius:\n-                                                  BorderRadius.circular(5),\n-                                            ),\n-                                            child: Text(\n-                                              post.status,\n-                                              style: const TextStyle(\n-                                                color: Colors.white,\n-                                                fontWeight: FontWeight.bold,\n-                                              ),\n-                                            ),\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n+// ------------------- RESPONSIVE POST LIST WIDGET ------------------- //\n \n-                                    Padding(\n-                                      padding: const EdgeInsets.symmetric(\n-                                          horizontal: 18.0, vertical: 10),\n-                                      child: Column(\n-                                        crossAxisAlignment:\n-                                            CrossAxisAlignment.start,\n-                                        children: [\n-                                          // ITEM item,date\n-                                          Row(\n-                                            mainAxisAlignment:\n-                                                MainAxisAlignment.spaceBetween,\n-                                            children: [\n-                                              Text(\n-                                                post.title == 'Other'\n-                                                    ? '${post.status} Item'\n-                                                    : post.title,\n-                                                overflow: TextOverflow.clip,\n-                                                softWrap: true,\n-                                                style: const TextStyle(\n-                                                    fontSize: 18,\n-                                                    fontWeight:\n-                                                        FontWeight.bold),\n-                                              ),\n-                                              const SizedBox(width: 5),\n-                                              Row(\n-                                                children: [\n-                                                  Text(\"${post.status} On : \",\n-                                                      overflow:\n-                                                          TextOverflow.clip,\n-                                                      softWrap: true,\n-                                                      style: const TextStyle(\n-                                                          color: Colors.red,\n-                                                          fontWeight:\n-                                                              FontWeight.bold)),\n-                                                  Text(post.postTime,\n-                                                      style: const TextStyle(\n-                                                          fontWeight:\n-                                                              FontWeight.bold)),\n-                                                ],\n-                                              ),\n-                                            ],\n-                                          ),\n-                                          const SizedBox(height: 5),\n+class PostListView extends StatelessWidget {\n+  final Stream<QuerySnapshot> stream;\n+  final User? currentUser;\n+  final Function(PostModel) onDelete;\n+  final Future<List<PostModel>> Function(List<QueryDocumentSnapshot>) mapDocsFunction;\n \n-                                          //DESCRIPTION\n-                                          Row(\n-                                            crossAxisAlignment: CrossAxisAlignment\n-                                                .start, // Align text to the top\n-                                            children: [\n-                                              const Text(\n-                                                \"Description : \",\n-                                                style: TextStyle(\n-                                                  fontWeight: FontWeight.bold,\n-                                                ),\n-                                              ),\n-                                              const SizedBox(width: 4),\n-                                              Expanded(\n-                                                child: Text(\n-                                                  post.description,\n-                                                  overflow: TextOverflow.clip,\n-                                                  softWrap: true,\n-                                                  style: const TextStyle(\n-                                                    fontSize: 14,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                            ],\n-                                          ),\n-                                          const SizedBox(height: 10),\n+  const PostListView({\n+    super.key,\n+    required this.stream,\n+    required this.currentUser,\n+    required this.onDelete,\n+    required this.mapDocsFunction,\n+  });\n \n-                                          //BUTTONNS\n-                                          StreamBuilder<QuerySnapshot>(\n-                                              stream: FirebaseFirestore.instance\n-                                                  .collection('posts')\n-                                                  .doc(post.postId)\n-                                                  .collection('claims')\n-                                                  .where('senderId',\n-                                                      isEqualTo: user!.uid)\n-                                                  .snapshots(),\n-                                              builder:\n-                                                  (context, claimSnapshot) {\n-                                                if (claimSnapshot\n-                                                        .connectionState ==\n-                                                    ConnectionState.waiting) {\n-                                                  return const Center(\n-                                                      child:\n-                                                          CircularProgressIndicator());\n-                                                }\n+  @override\n+  Widget build(BuildContext context) {\n+    return StreamBuilder<QuerySnapshot>(\n+      stream: stream,\n+      builder: (context, snapshot) {\n+        if (snapshot.connectionState == ConnectionState.waiting) {\n+          return _buildShimmer(context);\n+        }\n+        if (snapshot.hasError) {\n+          return Center(child: Text('Error: ${snapshot.error}'));\n+        }\n+        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+          return const Center(child: Text('No posts found. 🤷‍♂️'));\n+        }\n \n-                                                bool userHasRequestedClaim =\n-                                                    false;\n+        return FutureBuilder<List<PostModel>>(\n+          future: mapDocsFunction(snapshot.data!.docs),\n+          builder: (context, futureSnapshot) {\n+            if (futureSnapshot.connectionState == ConnectionState.waiting || !futureSnapshot.hasData) {\n+              return _buildShimmer(context);\n+            }\n+            final posts = futureSnapshot.data!;\n \n-                                                if (claimSnapshot.hasData &&\n-                                                    claimSnapshot.data!.docs\n-                                                        .isNotEmpty) {\n-                                                  final claimData =\n-                                                      claimSnapshot\n-                                                              .data!.docs.first\n-                                                              .data()\n-                                                          as Map<String,\n-                                                              dynamic>;\n-\n-                                                  if (claimData[\n-                                                          'claimStatusC'] ==\n-                                                      'requested') {\n-                                                    userHasRequestedClaim =\n-                                                        true;\n-                                                  }\n-                                                  if (claimData[\n-                                                              'claimStatusC'] ==\n-                                                          'accepted' ||\n-                                                      claimData[\n-                                                              'claimStatusC'] ==\n-                                                          'declined') {\n-                                                    userHasRequestedClaim =\n-                                                        false;\n-                                                  }\n-                                                }\n-\n-                                                return Row(\n-                                                    mainAxisAlignment:\n-                                                        MainAxisAlignment\n-                                                            .spaceAround,\n-                                                    children: [\n-                                                      GestureDetector(\n-                                                        onTap: () {\n-                                                          _sharePost(\n-                                                              context,\n-                                                              post.title,\n-                                                              post.description);\n-                                                        },\n-                                                        child: const Row(\n-                                                          children: [\n-                                                            Icon(Icons\n-                                                                .share_rounded),\n-                                                            SizedBox(width: 3),\n-                                                            Text('Share'),\n-                                                          ],\n-                                                        ),\n-                                                      ),\n-                                                      if (post.postmakerId !=\n-                                                          user!.uid)\n-                                                        ElevatedButton(\n-                                                          onPressed: () {\n-                                                            _replyToPostmaker(\n-                                                                context,\n-                                                                post.postmakerId,\n-                                                                post.userName,\n-                                                                post.postId);\n-                                                          },\n-                                                          style: ElevatedButton\n-                                                              .styleFrom(\n-                                                            backgroundColor:\n-                                                                Colors.green\n-                                                                    .shade600,\n-                                                            shape:\n-                                                                RoundedRectangleBorder(\n-                                                              borderRadius:\n-                                                                  BorderRadius\n-                                                                      .circular(\n-                                                                          10),\n-                                                            ),\n-                                                          ),\n-                                                          child: const Row(\n-                                                            mainAxisAlignment:\n-                                                                MainAxisAlignment\n-                                                                    .center,\n-                                                            children: [\n-                                                              Icon(Icons.reply,\n-                                                                  color: Colors\n-                                                                      .white),\n-                                                              SizedBox(\n-                                                                  width: 3),\n-                                                              Text(\n-                                                                'Reply',\n-                                                                style: TextStyle(\n-                                                                    fontSize:\n-                                                                        16,\n-                                                                    color: Colors\n-                                                                        .white),\n-                                                              ),\n-                                                            ],\n-                                                          ),\n-                                                        ),\n-\n-                                                      //Claimed Button\n-                                                      if (post.status !=\n-                                                              'Lost' &&\n-                                                          post.isClaimed ==\n-                                                              true)\n-                                                        ElevatedButton(\n-                                                          onPressed: () {\n-                                                            _claimedPost(\n-                                                                context,\n-                                                                post.postclaimerId!,\n-                                                                post.title,\n-                                                                post.postClaimer!,\n-                                                                post.postId);\n-                                                          },\n-                                                          style: ElevatedButton\n-                                                              .styleFrom(\n-                                                            backgroundColor:\n-                                                                Colors\n-                                                                    .deepOrange\n-                                                                    .shade600,\n-                                                            shape:\n-                                                                RoundedRectangleBorder(\n-                                                              borderRadius:\n-                                                                  BorderRadius\n-                                                                      .circular(\n-                                                                          10),\n-                                                            ),\n-                                                          ),\n-                                                          child: const Row(\n-                                                            mainAxisAlignment:\n-                                                                MainAxisAlignment\n-                                                                    .center,\n-                                                            children: [\n-                                                              Icon(\n-                                                                  Icons\n-                                                                      .back_hand,\n-                                                                  color: Colors\n-                                                                      .white),\n-                                                              SizedBox(\n-                                                                  width: 3),\n-                                                              Text(\n-                                                                'Claimed',\n-                                                                style: TextStyle(\n-                                                                    fontSize:\n-                                                                        16,\n-                                                                    color: Colors\n-                                                                        .white),\n-                                                              ),\n-                                                            ],\n-                                                          ),\n-                                                        ),\n-\n-                                                      // Claim Buttton\n-                                                      if (post.postmakerId !=\n-                                                              user!.uid &&\n-                                                          post.status ==\n-                                                              'Found' &&\n-                                                          post.isClaimed ==\n-                                                              false &&\n-                                                          !userHasRequestedClaim)\n-                                                        ElevatedButton(\n-                                                          onPressed: () {\n-                                                            _claimPost(\n-                                                                context,\n-                                                                post.postmakerId,\n-                                                                post.title,\n-                                                                post.question!,\n-                                                                post.description,\n-                                                                post.postId);\n-                                                          },\n-                                                          style: ElevatedButton\n-                                                              .styleFrom(\n-                                                            backgroundColor:\n-                                                                Colors\n-                                                                    .deepOrange\n-                                                                    .shade600,\n-                                                            shape:\n-                                                                RoundedRectangleBorder(\n-                                                              borderRadius:\n-                                                                  BorderRadius\n-                                                                      .circular(\n-                                                                          10),\n-                                                            ),\n-                                                          ),\n-                                                          child: const Row(\n-                                                            mainAxisAlignment:\n-                                                                MainAxisAlignment\n-                                                                    .center,\n-                                                            children: [\n-                                                              Icon(\n-                                                                  Icons\n-                                                                      .back_hand,\n-                                                                  color: Colors\n-                                                                      .white),\n-                                                              SizedBox(\n-                                                                  width: 6),\n-                                                              Text(\n-                                                                'Claim',\n-                                                                style: TextStyle(\n-                                                                    fontSize:\n-                                                                        16,\n-                                                                    color: Colors\n-                                                                        .white),\n-                                                              ),\n-                                                            ],\n-                                                          ),\n-                                                        ),\n-\n-                                                      // Request Button\n-                                                      if (post.postmakerId !=\n-                                                              user!.uid &&\n-                                                          post.status ==\n-                                                              'Found' &&\n-                                                          post.isClaimed ==\n-                                                              false &&\n-                                                          userHasRequestedClaim)\n-                                                        ElevatedButton(\n-                                                          onPressed: () {},\n-                                                          style: ElevatedButton\n-                                                              .styleFrom(\n-                                                            backgroundColor:\n-                                                                Colors\n-                                                                    .deepOrange\n-                                                                    .shade600,\n-                                                            shape:\n-                                                                RoundedRectangleBorder(\n-                                                              borderRadius:\n-                                                                  BorderRadius\n-                                                                      .circular(\n-                                                                          10),\n-                                                            ),\n-                                                          ),\n-                                                          child: const Row(\n-                                                            mainAxisAlignment:\n-                                                                MainAxisAlignment\n-                                                                    .center,\n-                                                            children: [\n-                                                              Icon(\n-                                                                  Icons\n-                                                                      .back_hand,\n-                                                                  color: Colors\n-                                                                      .white),\n-                                                              SizedBox(\n-                                                                  width: 3),\n-                                                              Text(\n-                                                                'Requested',\n-                                                                style: TextStyle(\n-                                                                    fontSize:\n-                                                                        16,\n-                                                                    color: Colors\n-                                                                        .white),\n-                                                              ),\n-                                                            ],\n-                                                          ),\n-                                                        )\n-                                                    ]);\n-                                              })\n-                                        ],\n-                                      ),\n-                                    ),\n-                                  ],\n-                                ),\n-                              ),\n-                            ),\n-                          ),\n-                        );\n-                      },\n-                    );\n-                  },\n-                );\n-              },\n-            ),\n-          ),\n-        ],\n-      ),\n-    );\n-  }\n-\n-  void _replyToPostmaker(BuildContext context, String postmakerId,\n-      String postmaker, String postId) {\n-    TextEditingController messageController = TextEditingController();\n-\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Send a Reply'),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              Row(\n-                children: [\n-                  const Text('Reply to'),\n-                  TextButton(\n-                      onPressed: () {\n-                        Navigator.push(\n-                            context,\n-                            MaterialPageRoute(\n-                                builder: (_) =>\n-                                    ProfilePage2(uid: postmakerId)));\n-                      },\n-                      child: Text(postmaker))\n-                ],\n-              ),\n-              const SizedBox(height: 10),\n-              TextField(\n-                controller: messageController,\n-                decoration: const InputDecoration(\n-                  labelText: 'Your message',\n-                  alignLabelWithHint: true,\n-                  border: OutlineInputBorder(),\n-                ),\n-                maxLines: 3,\n-              ),\n-            ],\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () {\n-                Navigator.of(context).pop(); // Close the dialog without sending\n-              },\n-              child: const Text('Cancel'),\n-            ),\n-            TextButton(\n-              onPressed: () {\n-                String message = messageController.text.trim();\n-                if (message.isNotEmpty) {\n-                  _sendMessageToPostmaker(\n-                      context, postmakerId, message, postId);\n+            return LayoutBuilder(\n+              builder: (context, constraints) {\n+                // Use GridView for wider screens\n+                if (constraints.maxWidth > 700) {\n+                  int crossAxisCount = (constraints.maxWidth / 400).floor().clamp(2, 4);\n+                  return GridView.builder(\n+                    padding: const EdgeInsets.all(16),\n+                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n+                      crossAxisCount: crossAxisCount,\n+                      childAspectRatio: 0.8,\n+                      crossAxisSpacing: 16,\n+                      mainAxisSpacing: 16,\n+                    ),\n+                    itemCount: posts.length,\n+                    itemBuilder: (context, index) => _buildPostCard(posts[index]),\n+                  );\n                 }\n-                ScaffoldMessenger.of(context).showSnackBar(\n-                  const SnackBar(\n-                    content: Text('Message sent successfully'),\n-                    behavior: SnackBarBehavior.floating,\n-                    margin: EdgeInsets.all(16.0),\n+                // Use ListView for narrower screens\n+                return ListView.builder(\n+                  padding: const EdgeInsets.all(8.0),\n+                  itemCount: posts.length,\n+                  itemBuilder: (context, index) => Center(\n+                    child: ConstrainedBox(\n+                      constraints: const BoxConstraints(maxWidth: 600),\n+                      child: _buildPostCard(posts[index]),\n+                    ),\n                   ),\n                 );\n-                Navigator.of(context).pop(); // Close the dialog after sending\n               },\n-              child: const Text('Send'),\n-            ),\n-          ],\n+            );\n+          },\n         );\n       },\n     );\n   }\n \n-  Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n-      String message, String postId) async {\n-    try {\n-      // Add a chat message to Firestore\n-      await FirebaseFirestore.instance.collection('chats').add({\n-        'senderId': user!.uid,\n-        'receiverId': postmakerId,\n-        'participants': [user!.uid, postmakerId],\n-        'message': message,\n-        'postId': postId,\n-        'timestamp': Timestamp.now(),\n-      });\n+  Widget _buildPostCard(PostModel post) {\n+    return PostCard(\n+      post: post,\n+      isOwner: currentUser != null && currentUser!.uid == post.postmakerId,\n+      onDelete: () => onDelete(post),\n+    );\n+  }\n \n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          content: Text('Message sent successfully'),\n-          behavior: SnackBarBehavior.floating,\n-          margin: EdgeInsets.all(16.0),\n-        ),\n+  Widget _buildShimmer(BuildContext context) {\n+    return LayoutBuilder(builder: (context, constraints) {\n+      if (constraints.maxWidth > 700) {\n+        int crossAxisCount = (constraints.maxWidth / 400).floor().clamp(2, 4);\n+        return GridView.builder(\n+          padding: const EdgeInsets.all(16),\n+          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n+            crossAxisCount: crossAxisCount,\n+            childAspectRatio: 0.8,\n+            crossAxisSpacing: 16,\n+            mainAxisSpacing: 16,\n+          ),\n+          itemCount: 4,\n+          itemBuilder: (context, index) => const PostShimmerCard(),\n+        );\n+      }\n+      return ListView.builder(\n+        padding: const EdgeInsets.all(8.0),\n+        itemCount: 3,\n+        itemBuilder: (context, index) => const PostShimmerCard(),\n       );\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-          content: Text('Failed to send message: $e'),\n-          backgroundColor: Colors.red,\n-        ),\n-      );\n-    }\n+    });\n   }\n+}\n \n-  void _claimPost(BuildContext context, String postmakerId, String postTitle,\n-      String postQuestion, String postdescription, String postId) {\n-    TextEditingController answerController = TextEditingController();\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Claim Item'),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n+// ------------------- REUSABLE POST CARD WIDGET ------------------- //\n+\n+class PostCard extends StatelessWidget {\n+  final PostModel post;\n+  final bool isOwner;\n+  final VoidCallback onDelete;\n+\n+  const PostCard({super.key, required this.post, required this.isOwner, required this.onDelete});\n+  \n+  // A placeholder image URL\n+  final String _placeholderImage = 'https://static.wikia.nocookie.net/logopedia/images/e/ec/220px-National_Institute_of_Technology,_Hamirpur_Logo.png/revision/latest?cb=20200330143312';\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return Card(\n+      elevation: 4,\n+      margin: const EdgeInsets.symmetric(vertical: 8.0),\n+      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n+      clipBehavior: Clip.antiAlias, // Ensures content respects the border radius\n+      child: Column(\n+        crossAxisAlignment: CrossAxisAlignment.start,\n+        children: [\n+          // Header\n+          ListTile(\n+            onTap: () => Navigator.push(context, MaterialPageRoute(builder: (_) => ProfilePage2(uid: post.postmakerId))),\n+            leading: CircleAvatar(\n+              radius: 25,\n+              backgroundImage: NetworkImage(post.profileImageUrl.isNotEmpty ? post.profileImageUrl : _placeholderImage),\n+              onBackgroundImageError: (_, __) {}, // Handle image loading errors gracefully\n+            ),\n+            title: Text(post.userName, style: const TextStyle(fontWeight: FontWeight.bold)),\n+            subtitle: Text(\"at ${post.location}\"),\n+            trailing: isOwner\n+                ? IconButton(icon: const Icon(Icons.more_vert), onPressed: () => onDelete()) // Simplified to direct delete\n+                : null,\n+          ),\n+          \n+          // Image Carousel with Status Badge\n+          Stack(\n             children: [\n-              const Text('Question from the post owner:'),\n-              const SizedBox(height: 10),\n-              Text(postQuestion,\n-                  style: const TextStyle(fontWeight: FontWeight.bold)),\n-              const SizedBox(height: 20),\n-              TextField(\n-                controller: answerController,\n-                decoration: const InputDecoration(\n-                  labelText: 'Your answer',\n-                  alignLabelWithHint: true,\n-                  border: OutlineInputBorder(),\n+              if (post.itemImages.isNotEmpty)\n+                CarouselSlider(\n+                  options: CarouselOptions(\n+                    aspectRatio: 16 / 10,\n+                    viewportFraction: 1.0,\n+                    autoPlay: post.itemImages.length > 1,\n+                    enlargeCenterPage: false,\n+                  ),\n+                  items: post.itemImages.map((imageUrl) {\n+                    return Image.network(\n+                      imageUrl,\n+                      fit: BoxFit.cover,\n+                      width: double.infinity,\n+                      loadingBuilder: (context, child, progress) => progress == null ? child : const Center(child: CircularProgressIndicator()),\n+                      errorBuilder: (context, error, stackTrace) => const Center(child: Icon(Icons.broken_image, size: 40, color: Colors.grey)),\n+                    );\n+                  }).toList(),\n                 ),\n-                maxLines: 3,\n+              Positioned(\n+                top: 12,\n+                left: 12,\n+                child: Container(\n+                  padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),\n+                  decoration: BoxDecoration(\n+                    color: post.status == 'Lost' ? Colors.red.shade600 : Colors.green.shade600,\n+                    borderRadius: BorderRadius.circular(20),\n+                    boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.3), blurRadius: 4, offset: const Offset(0, 2))],\n+                  ),\n+                  child: Text(post.status, style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),\n+                ),\n               ),\n             ],\n           ),\n-          actions: [\n-            TextButton(\n-              onPressed: () {\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Cancel'),\n+\n+          // Body\n+          Padding(\n+            padding: const EdgeInsets.all(16.0),\n+            child: Column(\n+              crossAxisAlignment: CrossAxisAlignment.start,\n+              children: [\n+                Text(\n+                  post.title,\n+                  style: Theme.of(context).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),\n+                ),\n+                const SizedBox(height: 4),\n+                Text(\"Posted on: ${post.postTime}\", style: Theme.of(context).textTheme.bodySmall?.copyWith(color: Colors.grey.shade600)),\n+                const SizedBox(height: 12),\n+                Text(post.description, maxLines: 3, overflow: TextOverflow.ellipsis),\n+              ],\n             ),\n-            TextButton(\n-              onPressed: () {\n-                String answer = answerController.text.trim();\n-                if (answer.isNotEmpty) {\n-                  _sendAnswerToPostmaker(\n-                      context, answer, postId, postmakerId, 'requested');\n-                }\n-                ScaffoldMessenger.of(context).showSnackBar(\n-                  const SnackBar(\n-                    content: Text('Request sent successfully'),\n-                    behavior: SnackBarBehavior.floating,\n-                    margin: EdgeInsets.all(16.0),\n-                  ),\n-                );\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Send'),\n+          ),\n+          \n+          // Action Buttons\n+          Padding(\n+            padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),\n+            child: Row(\n+              mainAxisAlignment: MainAxisAlignment.spaceAround,\n+              children: [\n+                 TextButton.icon(\n+                    onPressed: () { /* Add your Share logic */ },\n+                    icon: const Icon(Icons.share_outlined),\n+                    label: const Text('Share'),\n+                ),\n+                if (!isOwner)\n+                TextButton.icon(\n+                    onPressed: () { /* Add your Reply logic */ },\n+                    icon: const Icon(Icons.reply_outlined),\n+                    label: const Text('Reply'),\n+                ),\n+                if (!isOwner && post.status == 'Found' && !post.isClaimed)\n+                ElevatedButton.icon(\n+                    onPressed: () { /* Add your Claim logic */ },\n+                    icon: const Icon(Icons.check_circle_outline),\n+                    label: const Text('Claim'),\n+                    style: ElevatedButton.styleFrom(\n+                        backgroundColor: Theme.of(context).primaryColor,\n+                        foregroundColor: Colors.white,\n+                    ),\n+                ),\n+                if (post.isClaimed)\n+                Chip(\n+                    avatar: const Icon(Icons.verified_user_outlined),\n+                    label: const Text('Claimed'),\n+                    backgroundColor: Colors.grey.shade300,\n+                )\n+              ],\n             ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n-\n-  void _claimedPost(BuildContext context, String postclaimerId,\n-      String postTitle, String claimername, String postId) {\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: Text('Claimed Item : $postTitle',\n-              style:\n-                  const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              Row(\n-                children: [\n-                  const Text('Already claimed by :',\n-                      style: TextStyle(fontWeight: FontWeight.bold)),\n-                  TextButton(\n-                      onPressed: () {\n-                        Navigator.push(\n-                            context,\n-                            MaterialPageRoute(\n-                                builder: (_) =>\n-                                    ProfilePage2(uid: postclaimerId)));\n-                      },\n-                      child: Text(\n-                          user!.uid == postclaimerId ? 'You' : claimername,\n-                          style: const TextStyle(fontWeight: FontWeight.bold))),\n-                ],\n-              ),\n-              const SizedBox(height: 10),\n-            ],\n           ),\n-          actions: [\n-            TextButton(\n-              onPressed: () {\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Cancel'),\n-            ),\n-          ],\n-        );\n-      },\n+        ],\n+      ),\n     );\n   }\n+}\n \n-  Future<void> _sendAnswerToPostmaker(\n-    BuildContext context,\n-    String answer,\n-    String postId,\n-    String postmakerId,\n-    String statusofRequest,\n-  ) async {\n-    try {\n-      // Reference to the specific post's claims subcollection\n-      CollectionReference claimsRef = FirebaseFirestore.instance\n-          .collection('posts')\n-          .doc(postId) // Get the post document using its ID\n-          .collection('claims'); // Access the subcollection\n+// ------------------- SHIMMER LOADING CARD WIDGET ------------------- //\n \n-      // Add a new claim document\n-      await claimsRef.add({\n-        'senderId': user!.uid,\n-        'answer': answer,\n-        'claimStatusC': statusofRequest,\n-        'timestamp': Timestamp.now(),\n-        'isClaimed': false,\n-        'receiverId': postmakerId,\n-      });\n+class PostShimmerCard extends StatelessWidget {\n+  const PostShimmerCard({super.key});\n \n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          content: Text('Your answer has been sent to the post maker'),\n-          behavior: SnackBarBehavior.floating,\n-          margin: EdgeInsets.all(16.0),\n-        ),\n-      );\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-          content: Text('Failed to send answer: $e'),\n-          backgroundColor: Colors.red,\n-        ),\n-      );\n-    }\n-  }\n-\n-  void _sharePost(BuildContext context, String title, String description) {\n-    final content = 'Check out this post: $title\\nDescription: $description';\n-    final snackBar = SnackBar(content: Text('Shared! $content'));\n-    ScaffoldMessenger.of(context).showSnackBar(snackBar);\n-  }\n-\n-  void _showDeleteConfirmation(BuildContext context, PostModel post) {\n-    // postId = post.postId;\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Delete Post'),\n-          content: const Text(\n-            'Are you sure you want to delete this post?',\n-            style: TextStyle(fontWeight: FontWeight.w700),\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () async {\n-                // Call your delete functionality here\n-                ScaffoldMessenger.of(context).showSnackBar(\n-                  const SnackBar(\n-                      backgroundColor: Colors.deepOrange,\n-                      content: Text('Post deleted successfully')),\n-                );\n-\n-                await _deletePost(context, post.postId);\n-\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text(\n-                'Yes',\n-                style: TextStyle(fontWeight: FontWeight.bold),\n-              ),\n+  @override\n+  Widget build(BuildContext context) {\n+    return Shimmer.fromColors(\n+      baseColor: Colors.grey[300]!,\n+      highlightColor: Colors.grey[100]!,\n+      child: Card(\n+        elevation: 4,\n+        margin: const EdgeInsets.symmetric(vertical: 8.0),\n+        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n+        child: Column(\n+          crossAxisAlignment: CrossAxisAlignment.start,\n+          children: [\n+            ListTile(\n+              leading: const CircleAvatar(radius: 25, backgroundColor: Colors.white),\n+              title: Container(width: 120.0, height: 16.0, color: Colors.white),\n+              subtitle: Container(width: 200.0, height: 12.0, color: Colors.white, margin: const EdgeInsets.only(top: 4)),\n             ),\n-            TextButton(\n-              onPressed: () => Navigator.of(context).pop(),\n-              child: const Text(\n-                'No',\n-                style: TextStyle(fontWeight: FontWeight.bold),\n+            Container(\n+              height: 200.0, // Approximate height of the image carousel\n+              color: Colors.white,\n+            ),\n+            Padding(\n+              padding: const EdgeInsets.all(16.0),\n+              child: Column(\n+                crossAxisAlignment: CrossAxisAlignment.start,\n+                children: [\n+                  Container(width: double.infinity, height: 20.0, color: Colors.white),\n+                  const SizedBox(height: 8),\n+                  Container(width: 150.0, height: 12.0, color: Colors.white),\n+                  const SizedBox(height: 12),\n+                  Container(width: 250.0, height: 14.0, color: Colors.white),\n+                  const SizedBox(height: 6),\n+                  Container(width: 220.0, height: 14.0, color: Colors.white),\n+                ],\n               ),\n             ),\n           ],\n-        );\n-      },\n+        ),\n+      ),\n     );\n   }\n-\n-  void _showFullImageDialog(BuildContext context, String imageUrl) {\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return Dialog(\n-          child: Stack(\n-            children: [\n-              Image.network(imageUrl),\n-              Positioned(\n-                right: 10,\n-                top: 10,\n-                child: IconButton(\n-                  icon: const Icon(Icons.cancel, color: Colors.red),\n-                  onPressed: () {\n-                    Navigator.of(context).pop();\n-                  },\n-                ),\n-              ),\n-            ],\n-          ),\n-        );\n-      },\n-    );\n-  }\n }\n \n-class FullScreenImageViewer extends StatefulWidget {\n+// ------------------- FULL SCREEN IMAGE VIEWER (from original code) ------------------- //\n+\n+class FullScreenImageViewer extends StatelessWidget {\n   final List<String> images;\n-  bool isMobile;\n-  FullScreenImageViewer(this.images, this.isMobile, {super.key});\n+  final int initialIndex;\n \n-  @override\n-  _FullScreenImageViewerState createState() => _FullScreenImageViewerState();\n-}\n+  const FullScreenImageViewer({\n+    super.key,\n+    required this.images,\n+    this.initialIndex = 0,\n+  });\n \n-class _FullScreenImageViewerState extends State<FullScreenImageViewer> {\n-  int _currentIndex = 0;\n-\n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n-      backgroundColor:\n-          Colors.black.withOpacity(0.8), // Background color for overlay\n+      backgroundColor: Colors.black,\n       body: Stack(\n         children: [\n           PageView.builder(\n-            itemCount: widget.images.length,\n-            controller: PageController(initialPage: _currentIndex),\n-            onPageChanged: (index) {\n-              setState(() {\n-                _currentIndex = index;\n-              });\n-            },\n+            itemCount: images.length,\n+            controller: PageController(initialPage: initialIndex),\n             itemBuilder: (context, index) {\n               return Center(\n-                child: Image.network(\n-                  width: widget.isMobile\n-                      ? MediaQuery.of(context).size.width\n-                      : MediaQuery.of(context).size.width * 0.5,\n-                  widget.images[index],\n-                  fit: BoxFit.contain,\n+                child: InteractiveViewer(\n+                  child: Image.network(images[index]),\n                 ),\n               );\n             },\n           ),\n           Positioned(\n             top: 40,\n             right: 20,\n             child: IconButton(\n-              icon: const Icon(\n-                Icons.close,\n-                color: Colors.white,\n-                size: 30,\n-              ),\n-              onPressed: () {\n-                Navigator.of(context).pop();\n-              },\n+              icon: const Icon(Icons.close, color: Colors.white, size: 30),\n+              onPressed: () => Navigator.of(context).pop(),\n             ),\n           ),\n         ],\n       ),\n     );\n   }\n-}\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1756124030983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,9 +481,9 @@\n                     onPressed: () { /* Add your Reply logic */ },\n                     icon: const Icon(Icons.reply_outlined),\n                     label: const Text('Reply'),\n                 ),\n-                if (!isOwner && post.status == 'Found' && !post.isClaimed)\n+                if (!isOwner && post.status == 'Found' && !post?.isClaimed)\n                 ElevatedButton.icon(\n                     onPressed: () { /* Add your Claim logic */ },\n                     icon: const Icon(Icons.check_circle_outline),\n                     label: const Text('Claim'),\n"
                },
                {
                    "date": 1756124044189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,9 +481,9 @@\n                     onPressed: () { /* Add your Reply logic */ },\n                     icon: const Icon(Icons.reply_outlined),\n                     label: const Text('Reply'),\n                 ),\n-                if (!isOwner && post.status == 'Found' && !post?.isClaimed)\n+                if (!isOwner && post.status == 'Found' && post.isClaimed?)\n                 ElevatedButton.icon(\n                     onPressed: () { /* Add your Claim logic */ },\n                     icon: const Icon(Icons.check_circle_outline),\n                     label: const Text('Claim'),\n"
                },
                {
                    "date": 1756124072288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,9 +481,9 @@\n                     onPressed: () { /* Add your Reply logic */ },\n                     icon: const Icon(Icons.reply_outlined),\n                     label: const Text('Reply'),\n                 ),\n-                if (!isOwner && post.status == 'Found' && post.isClaimed?)\n+                if (!isOwner && post.status == 'Found' && post.isClaimed!=null)\n                 ElevatedButton.icon(\n                     onPressed: () { /* Add your Claim logic */ },\n                     icon: const Icon(Icons.check_circle_outline),\n                     label: const Text('Claim'),\n"
                },
                {
                    "date": 1756124090044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,598 +2,1234 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n-import 'package:shimmer/shimmer.dart';\n-// Adjust these imports to match your project structure\n-import 'package:l_f/Frontend/Contants/lists.dart'; \n+import 'package:l_f/Frontend/Contants/lists.dart';\n import 'package:l_f/Frontend/Home/Post/post_model.dart';\n import 'package:l_f/Frontend/Profile/user_see_page.dart';\n \n-// ------------------- MAIN PAGE WIDGET ------------------- //\n-\n class LostFoundPage extends StatefulWidget {\n   const LostFoundPage({super.key});\n \n   @override\n   State<LostFoundPage> createState() => _LostFoundPageState();\n }\n \n class _LostFoundPageState extends State<LostFoundPage> {\n-  late Stream<QuerySnapshot> _postStream;\n-  final Map<String, Map<String, String>> _userCache = {};\n-  final User? _currentUser = FirebaseAuth.instance.currentUser;\n+  final Map<String, Map<String, String>> _userCache =\n+      {}; // Cache to store user data\n+  User? user = FirebaseAuth.instance.currentUser;\n+  // String? postId;\n \n-  // State for filters\n-  String _selectedType = 'All';\n-  String _selectedLocation = 'Campus, NITH';\n-  String _selectedCategory = 'All';\n-  String _selectedDateRange = 'All Time';\n+  List<PostModel> _filteredPosts = [];\n \n-  @override\n-  void initState() {\n-    super.initState();\n-    _updateStream();\n-  }\n+  // Function to fetch filtered posts from Firestore\n+  void _filterPosts(\n+      String status, String location, DateTime? uploadDate, String title) {\n+    Query query = FirebaseFirestore.instance.collection('posts');\n \n-  // ------------------- DATA & FIRESTORE LOGIC ------------------- //\n+    // Apply filters\n+    if (status.isNotEmpty) {\n+      query = query.where('status', isEqualTo: status);\n+    }\n+    if (location.isNotEmpty) {\n+      query = query.where('location', isEqualTo: location);\n+    }\n+    if (uploadDate != null) {\n+      query = query.where('uploadDate', isEqualTo: uploadDate);\n+    }\n+    if (title.isNotEmpty) {\n+      query = query.where('itemTitle', isEqualTo: title);\n+    }\n \n-  void _updateStream() {\n-    setState(() {\n-      _postStream = _getPostsStream(\n-        type: _selectedType,\n-        location: _selectedLocation,\n-        category: _selectedCategory,\n-        dateRange: _selectedDateRange,\n-      );\n+    // Get the results and update the UI\n+    query.get().then((snapshot) {\n+      setState(() {\n+        _filteredPosts = snapshot.docs\n+            .map((doc) => PostModel.fromJson(doc as Map<String, dynamic>))\n+            .toList();\n+      });\n     });\n   }\n-  \n-  Stream<QuerySnapshot> _getPostsStream({\n-    String type = 'All',\n-    String location = 'Campus, NITH',\n-    String category = 'All',\n-    String dateRange = 'All Time',\n-  }) {\n-    Query query = FirebaseFirestore.instance.collection('posts');\n \n-    if (type != 'All') query = query.where('status', isEqualTo: type);\n-    if (location != 'Campus, NITH') query = query.where('location', isEqualTo: location);\n-    if (category != 'All') query = query.where('item', isEqualTo: category);\n-\n-    DateTime? startDate = _getStartDate(dateRange);\n-    if (startDate != null) {\n-      query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n-    }\n-\n-    return query.orderBy('timestamp', descending: true).snapshots();\n+  String _formatDate(Timestamp? timestamp) {\n+    if (timestamp == null) return 'Not available';\n+    DateTime date = timestamp.toDate();\n+    return DateFormat('dd MMMM yyyy').format(date);\n   }\n-  \n-  DateTime? _getStartDate(String dateRange) {\n-    final now = DateTime.now();\n-    switch (dateRange) {\n-      case 'Today': return DateTime(now.year, now.month, now.day);\n-      case 'This Week': return now.subtract(Duration(days: now.weekday - 1));\n-      case 'This Month': return DateTime(now.year, now.month, 1);\n-      case 'This Year': return DateTime(now.year, 1, 1);\n-      default: return null;\n-    }\n-  }\n \n   Future<void> _deletePost(BuildContext context, String postId) async {\n     try {\n       await FirebaseFirestore.instance.collection('posts').doc(postId).delete();\n-      if (!mounted) return;\n-      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(\n-        content: Text('Post deleted successfully'),\n-        backgroundColor: Colors.green,\n-      ));\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          backgroundColor: Colors.green,\n+          content: Text('Post deleted successfully'),\n+          behavior: SnackBarBehavior.floating,\n+          margin: EdgeInsets.all(16.0),\n+          duration: Duration(seconds: 2),\n+        ),\n+      );\n     } catch (e) {\n-      if (!mounted) return;\n-      ScaffoldMessenger.of(context).showSnackBar(SnackBar(\n-        content: Text('Failed to delete post: $e'),\n-        backgroundColor: Colors.red,\n-      ));\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+            backgroundColor: Colors.red,\n+            content: Text('Failed to delete post: $e')),\n+      );\n     }\n   }\n-  \n-  Future<Map<String, String>> _fetchUserDetails(String uid) async {\n-    if (_userCache.containsKey(uid)) return _userCache[uid]!;\n-    \n+\n+  Future<Map<String, String>> _fetchUserNameAndProfilePic(String uid) async {\n+    if (_userCache.containsKey(uid)) {\n+      return _userCache[uid]!; // Return cached data if available\n+    }\n+\n     try {\n-      final userDoc = await FirebaseFirestore.instance.collection('users').doc(uid).get();\n-      if (userDoc.exists) {\n-        final userData = userDoc.data() as Map<String, dynamic>;\n-        final userDetails = {\n-          'name': userData['name'] ?? 'NITH User',\n-          'profileImage': userData['profileImage'] ?? '', // Handle empty URL\n-        };\n-        _userCache[uid] = userDetails;\n-        return userDetails;\n+      DocumentSnapshot userDoc =\n+          await FirebaseFirestore.instance.collection('users').doc(uid).get();\n+\n+      if (!userDoc.exists) {\n+        throw Exception(\"User not found.\");\n       }\n+\n+      Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n+\n+      String name = userData['name'] ?? 'NITH User';\n+      String profileImage = userData['profileImage'] ?? '';\n+\n+      // Cache the user data\n+      _userCache[uid] = {\n+        'name': name,\n+        'profileImage': profileImage,\n+      };\n+\n+      return _userCache[uid]!;\n     } catch (e) {\n-      print(\"Error fetching user details: $e\");\n+      print(\"Error fetching user profile: $e\");\n+      throw Exception(\"Error fetching user profile.\");\n     }\n-    return {'name': 'NITH User', 'profileImage': ''};\n   }\n-  \n-  Future<List<PostModel>> _mapDocsToPostModels(List<QueryDocumentSnapshot> docs) async {\n-    final futures = docs.map((doc) async {\n-      final data = doc.data() as Map<String, dynamic>;\n-      final userDetails = await _fetchUserDetails(data['postmakerId']);\n-      \n-      String? postClaimerName;\n-      if (data['isClaimed'] == true && data['postClaimer'] != null) {\n-        final claimerDetails = await _fetchUserDetails(data['postClaimer']);\n-        postClaimerName = claimerDetails['name'];\n-      }\n-      \n-      // Merge fetched user data into the model\n-      return PostModel.fromJson({\n-        ...data,\n-        'userName': userDetails['name'],\n-        'profileImageUrl': userDetails['profileImage'],\n-        'postTime': _formatDate(data['timestamp']),\n-        'postClaimerName': postClaimerName,\n-      });\n-    }).toList();\n-    return await Future.wait(futures);\n+\n+  Stream<QuerySnapshot>? _postStream;\n+\n+  @override\n+  void initState() {\n+    super.initState();\n+    // Initialize stream without filters\n+    _postStream = FirebaseFirestore.instance\n+        .collection('posts')\n+        .orderBy('timestamp', descending: true)\n+        .snapshots();\n   }\n \n-  String _formatDate(Timestamp? timestamp) {\n-    if (timestamp == null) return 'Not available';\n-    return DateFormat('dd MMMM yyyy').format(timestamp.toDate());\n+  void _applyFilters() {\n+    // Start with the collection reference\n+    Query query = FirebaseFirestore.instance.collection('posts');\n+\n+    // Apply Type filter (Lost/Found)\n+    if (selectedType != 'All') {\n+      query = query.where('status', isEqualTo: selectedType);\n+    }\n+\n+    // Apply Location filter\n+    if (selectedLocation != 'Campus, NITH') {\n+      query = query.where('location', isEqualTo: selectedLocation);\n+    }\n+\n+    // Apply Item Category filter\n+    if (selectedCategory != 'All') {\n+      query = query.where('item', isEqualTo: selectedCategory);\n+    }\n+\n+    // Apply Date filter (based on upload timestamp)\n+    DateTime now = DateTime.now();\n+    DateTime? startDate;\n+\n+    switch (selectedDateRange) {\n+      case 'Today':\n+        startDate = DateTime(now.year, now.month, now.day);\n+        break;\n+      case 'This Week':\n+        startDate = now.subtract(Duration(days: now.weekday - 1));\n+        break;\n+      case 'This Month':\n+        startDate = DateTime(now.year, now.month, 1);\n+        break;\n+      case 'This Year':\n+        startDate = DateTime(now.year, 1, 1);\n+        break;\n+      default:\n+        startDate = null;\n+    }\n+\n+    if (startDate != null) {\n+      query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n+    }\n+\n+    // Update the stream for the StreamBuilder\n+    setState(() {\n+      _postStream = query.orderBy('timestamp', descending: true).snapshots();\n+    });\n   }\n-  \n-  // ------------------- UI & EVENT HANDLERS ------------------- //\n \n-  void _onFilterChanged({ String? type, String? location, String? category, String? dateRange }) {\n-    _selectedType = type ?? _selectedType;\n-    _selectedLocation = location ?? _selectedLocation;\n-    _selectedCategory = category ?? _selectedCategory;\n-    _selectedDateRange = dateRange ?? _selectedDateRange;\n-    _updateStream();\n+  String selectedType = 'All';\n+  String selectedLocation = 'Campus, NITH';\n+  String selectedCategory = 'All';\n+  String selectedDateRange = 'All Time';\n+\n+// Dummy lists for dropdowns (replace with your provided lists)\n+  List<String> itemTypes = ['All', 'Lost', 'Found'];\n+  List<String> locations = locationsList;\n+  List<String> categories = [\n+    'All',\n+    'Mobile Phone',\n+    'Laptop',\n+    'Charger',\n+    'Wallet',\n+    'ID Card',\n+    'Hoodie',\n+    'Jacket/Coat',\n+    'Bat',\n+    'Electronics Item',\n+    'Cloth',\n+    'Belt',\n+    'Ball',\n+    'Book',\n+    'Earphones',\n+    'Earbuds',\n+    'Water Bottle',\n+    'Watch',\n+    'Specs',\n+    'Jewellry',\n+    'Shoes',\n+    'Keys',\n+    'Umbrella',\n+    'Other'\n+  ];\n+  List<String> dateRanges = [\n+    'All Time',\n+    'Today',\n+    'This Week',\n+    'This Month',\n+    'This Year'\n+  ];\n+\n+// Filter Dropdowns\n+  Widget buildDropdowns() {\n+    return LayoutBuilder(builder: (context, constraints) {\n+      return Padding(\n+        padding: const EdgeInsets.symmetric(horizontal: 12.0),\n+        child: Row(\n+          mainAxisAlignment: MainAxisAlignment.center,\n+          mainAxisSize: MainAxisSize.min,\n+          children: [\n+            buildDropdown(selectedType, itemTypes, (newValue) {\n+              setState(() {\n+                selectedType = newValue!;\n+              });\n+              _applyFilters();\n+            }),\n+            const SizedBox(width: 10),\n+            buildDropdown(selectedLocation, locations, (newValue) {\n+              setState(() {\n+                selectedLocation = newValue!;\n+              });\n+              _applyFilters();\n+            }),\n+            const SizedBox(width: 10),\n+            buildDropdown(selectedCategory, categories, (newValue) {\n+              setState(() {\n+                selectedCategory = newValue!;\n+              });\n+              _applyFilters();\n+            }),\n+            const SizedBox(width: 10),\n+            buildDropdown(selectedDateRange, dateRanges, (newValue) {\n+              setState(() {\n+                selectedDateRange = newValue!;\n+              });\n+              _applyFilters();\n+            }),\n+          ],\n+        ),\n+      );\n+    });\n   }\n \n-  void _showDeleteConfirmation(BuildContext context, PostModel post) {\n-    showDialog(\n-      context: context,\n-      builder: (dialogContext) => AlertDialog(\n-        title: const Text('Delete Post'),\n-        content: const Text('Are you sure you want to delete this post?'),\n-        actions: [\n-          TextButton(onPressed: () => Navigator.of(dialogContext).pop(), child: const Text('No')),\n-          TextButton(\n-            onPressed: () {\n-              Navigator.of(dialogContext).pop();\n-              _deletePost(context, post.postId);\n-            },\n-            child: const Text('Yes'),\n-          ),\n-        ],\n-      ),\n+// Helper method to create a DropdownButton\n+  Widget buildDropdown(String selectedValue, List<String> items,\n+      ValueChanged<String?> onChanged) {\n+    return DropdownButton<String>(\n+      value: selectedValue,\n+      items: items.map((String value) {\n+        return DropdownMenuItem<String>(\n+          value: value,\n+          child: Text(value),\n+        );\n+      }).toList(),\n+      onChanged: onChanged,\n     );\n   }\n \n   @override\n   Widget build(BuildContext context) {\n+    bool isMobile = MediaQuery.of(context).size.width < 600;\n     return Scaffold(\n       body: Column(\n         children: [\n-          FilterBar(onFilterChanged: _onFilterChanged),\n-          const Divider(height: 1, thickness: 1),\n+          SingleChildScrollView(\n+              scrollDirection: Axis.horizontal, child: buildDropdowns()),\n           Expanded(\n-            child: PostListView(\n+            child: StreamBuilder<QuerySnapshot>(\n               stream: _postStream,\n-              currentUser: _currentUser,\n-              onDelete: (post) => _showDeleteConfirmation(context, post),\n-              mapDocsFunction: _mapDocsToPostModels,\n-            ),\n-          ),\n-        ],\n-      ),\n-    );\n-  }\n-}\n+              builder: (context, snapshot) {\n+                if (snapshot.connectionState == ConnectionState.waiting) {\n+                  return const Center(child: CircularProgressIndicator());\n+                }\n+                if (snapshot.hasError) {\n+                  print('ERROR ${snapshot.error}');\n+                  return const Center(child: Text('Error loading posts'));\n+                }\n \n-// ------------------- FILTER BAR WIDGET ------------------- //\n+                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+                  return const Center(\n+                      child: Center(child: Text('No posts available')));\n+                }\n \n-class FilterBar extends StatefulWidget {\n-  final Function({String? type, String? location, String? category, String? dateRange}) onFilterChanged;\n+                final posts = snapshot.data!.docs.map((doc) {\n+                  final data = doc.data() as Map<String, dynamic>;\n+                  final String uid = data['postmakerId'];\n+                  final bool isClaimed = data['isClaimed'] ?? false;\n+                  final String? claimerUid = data['postClaimer'];\n+                  print(\"post claimerasss: : $claimerUid\");\n+                  print(\"POST IDDDDDDDD : ${data['postId']}\");\n+                  print(\"Is Post Claimed: $isClaimed\");\n \n-  const FilterBar({super.key, required this.onFilterChanged});\n+                  return _fetchUserNameAndProfilePic(uid)\n+                      .then((userDetails) async {\n+                    String postClaimerName = '';\n+                    String postClaimerProfilePic = '';\n \n-  @override\n-  State<FilterBar> createState() => _FilterBarState();\n-}\n+                    if (isClaimed && claimerUid != null) {\n+                      final claimerDetails =\n+                          await _fetchUserNameAndProfilePic(claimerUid);\n+                      postClaimerName = claimerDetails['name'] ?? 'NITH User';\n+                      postClaimerProfilePic = claimerDetails['profileImage']!;\n+                    }\n \n-class _FilterBarState extends State<FilterBar> {\n-  String selectedType = 'All';\n-  String selectedLocation = 'Campus, NITH';\n-  String selectedCategory = 'All';\n-  String selectedDateRange = 'All Time';\n+                    return PostModel(\n+                      userName: userDetails['name'] ?? 'NITH User',\n+                      profileImageUrl: userDetails['profileImage'] ??\n+                          'https://static.wikia.nocookie.net/logopedia/images/e/ec/220px-National_Institute_of_Technology,_Hamirpur_Logo.png/revision/latest?cb=20200330143312',\n+                      postTime: _formatDate(data['timestamp']),\n+                      itemImages: List<String>.from(data['imageUrls'] ?? ''),\n+                      status: data['status'] ?? '',\n+                      title: data['item'] ?? '',\n+                      location: data['location'] ?? '',\n+                      description: data['description'] ?? '',\n+                      postmakerId: data['postmakerId'],\n+                      question: data['question'],\n+                      postId: data['postId'],\n+                      claimStatus: data['claimStatus'],\n+                      isClaimed: isClaimed,\n+                      postclaimerId: data['postClaimer'],\n+                      postClaimer:\n+                          postClaimerName.isNotEmpty ? postClaimerName : null,\n+                      postClaimerPic: postClaimerProfilePic.isNotEmpty\n+                          ? postClaimerProfilePic\n+                          : null,\n+                    );\n+                  });\n+                });\n \n-  // Your dropdown lists (replace with your actual lists)\n-  final List<String> itemTypes = ['All', 'Lost', 'Found'];\n-  final List<String> locations = locationsList; \n-  final List<String> categories = ['All', 'Mobile Phone', 'Laptop', 'Charger', 'Wallet', 'ID Card', 'Hoodie', 'Jacket/Coat', 'Bat', 'Electronics Item', 'Cloth', 'Belt', 'Ball', 'Book', 'Earphones', 'Earbuds', 'Water Bottle', 'Watch', 'Specs', 'Jewellry', 'Shoes', 'Keys', 'Umbrella', 'Other'];\n-  final List<String> dateRanges = ['All Time', 'Today', 'This Week', 'This Month', 'This Year'];\n+                return FutureBuilder<List<PostModel>>(\n+                  future: Future.wait(posts.toList()),\n+                  builder: (context, futureSnapshot) {\n+                    if (futureSnapshot.connectionState ==\n+                        ConnectionState.waiting) {\n+                      return const Center(child: CircularProgressIndicator());\n+                    }\n \n-  @override\n-  Widget build(BuildContext context) {\n-    return SingleChildScrollView(\n-      scrollDirection: Axis.horizontal,\n-      padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 8.0),\n-      child: Row(\n-        mainAxisAlignment: MainAxisAlignment.center,\n-        children: [\n-          _buildDropdown('Type', selectedType, itemTypes, (newValue) {\n-            setState(() => selectedType = newValue!);\n-            widget.onFilterChanged(type: newValue);\n-          }),\n-          _buildDropdown('Location', selectedLocation, locations, (newValue) {\n-            setState(() => selectedLocation = newValue!);\n-            widget.onFilterChanged(location: newValue);\n-          }),\n-          _buildDropdown('Category', selectedCategory, categories, (newValue) {\n-            setState(() => selectedCategory = newValue!);\n-            widget.onFilterChanged(category: newValue);\n-          }),\n-          _buildDropdown('Date', selectedDateRange, dateRanges, (newValue) {\n-            setState(() => selectedDateRange = newValue!);\n-            widget.onFilterChanged(dateRange: newValue);\n-          }),\n-        ],\n-      ),\n-    );\n-  }\n+                    if (futureSnapshot.hasError) {\n+                      print(\"Error : ${futureSnapshot.error}\");\n+                      return const Center(child: Text('Error loading posts'));\n+                    }\n \n-  Widget _buildDropdown(String hint, String value, List<String> items, ValueChanged<String?> onChanged) {\n-    return Padding(\n-      padding: const EdgeInsets.symmetric(horizontal: 8.0),\n-      child: DropdownButtonHideUnderline(\n-        child: DropdownButton<String>(\n-          value: value,\n-          hint: Text(hint),\n-          items: items.map((String value) {\n-            return DropdownMenuItem<String>(value: value, child: Text(value, overflow: TextOverflow.ellipsis));\n-          }).toList(),\n-          onChanged: onChanged,\n-        ),\n-      ),\n-    );\n-  }\n-}\n+                    final postsList = futureSnapshot.data ?? [];\n \n+                    return ListView.builder(\n+                      itemCount: postsList.length,\n+                      itemBuilder: (context, index) {\n+                        final post = postsList[index];\n+                        return Padding(\n+                          padding: const EdgeInsets.all(2.0),\n+                          child: Center(\n+                            child: SizedBox(\n+                              width: isMobile\n+                                  ? MediaQuery.of(context).size.width\n+                                  : 600,\n+                              child: Card(\n+                                elevation: 5,\n+                                shape: RoundedRectangleBorder(\n+                                  borderRadius: BorderRadius.circular(10),\n+                                ),\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    // Header  of the POST (profiel,name.location,delete)\n+                                    GestureDetector(\n+                                      onTap: () {\n+                                        print(\n+                                            'EROROR ::: ${post.profileImageUrl}');\n+                                        Navigator.push(\n+                                            context,\n+                                            MaterialPageRoute(\n+                                                builder: (_) => ProfilePage2(\n+                                                    uid: post.postmakerId)));\n+                                      },\n+                                      child: ListTile(\n+                                        leading: CircleAvatar(\n+                                          radius: 30,\n+                                          backgroundImage: NetworkImage(\n+                                              post.profileImageUrl),\n+                                        ),\n\\ No newline at end of file\n+                                        title: Text(post.userName,\n+                                            style: const TextStyle(\n+                                                fontWeight: FontWeight.bold)),\n+                                        subtitle: Text(\n+                                            \"Location : ${post.location} , NITH\"),\n+                                        trailing: PopupMenuButton<String>(\n+                                          onSelected: (value) {\n+                                            if (value == 'Delete') {\n+                                              if (user!.uid ==\n+                                                  post.postmakerId) {\n+                                                _showDeleteConfirmation(\n+                                                    context, post);\n+                                              } else {\n+                                                ScaffoldMessenger.of(context)\n+                                                    .showSnackBar(\n+                                                  const SnackBar(\n+                                                      backgroundColor:\n+                                                          Colors.red,\n+                                                      content: Text(\n+                                                          \"You can't delete this post\")),\n+                                                );\n+                                              }\n+                                            }\n+                                          },\n+                                          itemBuilder: (BuildContext context) {\n+                                            return {'Delete'}\n+                                                .map((String choice) {\n+                                              return PopupMenuItem<String>(\n+                                                value: choice,\n+                                                child: Text(choice),\n+                                              );\n+                                            }).toList();\n+                                          },\n+                                        ),\n+                                      ),\n+                                    ),\n \n-// ------------------- RESPONSIVE POST LIST WIDGET ------------------- //\n+                                    // LOST OR FOUND\n+                                    Stack(\n+                                      children: [\n+                                        CarouselSlider(\n+                                          options: CarouselOptions(\n+                                            autoPlay: true,\n+                                            height: 450.0,\n+                                            enlargeCenterPage: true,\n+                                          ),\n+                                          items: post.itemImages\n+                                              .map<Widget>((imageUrl) {\n+                                            return GestureDetector(\n+                                              onTap: () {\n+                                                // Open image viewer when the image is tapped\n+                                                Navigator.push(\n+                                                  context,\n+                                                  MaterialPageRoute(\n+                                                    builder: (context) =>\n+                                                        FullScreenImageViewer(\n+                                                            post.itemImages,isMobile),\n+                                                  ),\n+                                                );\n+                                              },\n+                                              child: ClipRRect(\n+                                                borderRadius:\n+                                                    BorderRadius.circular(10),\n+                                                child: Image.network(\n+                                                  imageUrl,\n+                                                  fit: BoxFit.cover,\n+                                                  width: MediaQuery.of(context)\n+                                                      .size\n+                                                      .width,\n+                                                  errorBuilder: (context, error,\n+                                                      stackTrace) {\n+                                                    return const Icon(\n+                                                        Icons.error);\n+                                                  },\n+                                                ),\n+                                              ),\n+                                            );\n+                                          }).toList(),\n+                                        ),\n+                                        Positioned(\n+                                          top: isMobile ? 16 : 6,\n+                                          left: 50,\n+                                          child: Container(\n+                                            padding: const EdgeInsets.symmetric(\n+                                                horizontal: 10, vertical: 5),\n+                                            decoration: BoxDecoration(\n+                                              color: post.status == 'Lost'\n+                                                  ? Colors.red\n+                                                  : Colors.green,\n+                                              borderRadius:\n+                                                  BorderRadius.circular(5),\n+                                            ),\n+                                            child: Text(\n+                                              post.status,\n+                                              style: const TextStyle(\n+                                                color: Colors.white,\n+                                                fontWeight: FontWeight.bold,\n+                                              ),\n+                                            ),\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n \n-class PostListView extends StatelessWidget {\n-  final Stream<QuerySnapshot> stream;\n-  final User? currentUser;\n-  final Function(PostModel) onDelete;\n-  final Future<List<PostModel>> Function(List<QueryDocumentSnapshot>) mapDocsFunction;\n+                                    Padding(\n+                                      padding: const EdgeInsets.symmetric(\n+                                          horizontal: 18.0, vertical: 10),\n+                                      child: Column(\n+                                        crossAxisAlignment:\n+                                            CrossAxisAlignment.start,\n+                                        children: [\n+                                          // ITEM item,date\n+                                          Row(\n+                                            mainAxisAlignment:\n+                                                MainAxisAlignment.spaceBetween,\n+                                            children: [\n+                                              Text(\n+                                                post.title == 'Other'\n+                                                    ? '${post.status} Item'\n+                                                    : post.title,\n+                                                overflow: TextOverflow.clip,\n+                                                softWrap: true,\n+                                                style: const TextStyle(\n+                                                    fontSize: 18,\n+                                                    fontWeight:\n+                                                        FontWeight.bold),\n+                                              ),\n+                                              const SizedBox(width: 5),\n+                                              Row(\n+                                                children: [\n+                                                  Text(\"${post.status} On : \",\n+                                                      overflow:\n+                                                          TextOverflow.clip,\n+                                                      softWrap: true,\n+                                                      style: const TextStyle(\n+                                                          color: Colors.red,\n+                                                          fontWeight:\n+                                                              FontWeight.bold)),\n+                                                  Text(post.postTime,\n+                                                      style: const TextStyle(\n+                                                          fontWeight:\n+                                                              FontWeight.bold)),\n+                                                ],\n+                                              ),\n+                                            ],\n+                                          ),\n+                                          const SizedBox(height: 5),\n \n-  const PostListView({\n-    super.key,\n-    required this.stream,\n-    required this.currentUser,\n-    required this.onDelete,\n-    required this.mapDocsFunction,\n-  });\n+                                          //DESCRIPTION\n+                                          Row(\n+                                            crossAxisAlignment: CrossAxisAlignment\n+                                                .start, // Align text to the top\n+                                            children: [\n+                                              const Text(\n+                                                \"Description : \",\n+                                                style: TextStyle(\n+                                                  fontWeight: FontWeight.bold,\n+                                                ),\n+                                              ),\n+                                              const SizedBox(width: 4),\n+                                              Expanded(\n+                                                child: Text(\n+                                                  post.description,\n+                                                  overflow: TextOverflow.clip,\n+                                                  softWrap: true,\n+                                                  style: const TextStyle(\n+                                                    fontSize: 14,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                            ],\n+                                          ),\n+                                          const SizedBox(height: 10),\n \n-  @override\n-  Widget build(BuildContext context) {\n-    return StreamBuilder<QuerySnapshot>(\n-      stream: stream,\n-      builder: (context, snapshot) {\n-        if (snapshot.connectionState == ConnectionState.waiting) {\n-          return _buildShimmer(context);\n-        }\n-        if (snapshot.hasError) {\n-          return Center(child: Text('Error: ${snapshot.error}'));\n-        }\n-        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-          return const Center(child: Text('No posts found. 🤷‍♂️'));\n-        }\n+                                          //BUTTONNS\n+                                          StreamBuilder<QuerySnapshot>(\n+                                              stream: FirebaseFirestore.instance\n+                                                  .collection('posts')\n+                                                  .doc(post.postId)\n+                                                  .collection('claims')\n+                                                  .where('senderId',\n+                                                      isEqualTo: user!.uid)\n+                                                  .snapshots(),\n+                                              builder:\n+                                                  (context, claimSnapshot) {\n+                                                if (claimSnapshot\n+                                                        .connectionState ==\n+                                                    ConnectionState.waiting) {\n+                                                  return const Center(\n+                                                      child:\n+                                                          CircularProgressIndicator());\n+                                                }\n \n-        return FutureBuilder<List<PostModel>>(\n-          future: mapDocsFunction(snapshot.data!.docs),\n-          builder: (context, futureSnapshot) {\n-            if (futureSnapshot.connectionState == ConnectionState.waiting || !futureSnapshot.hasData) {\n-              return _buildShimmer(context);\n-            }\n-            final posts = futureSnapshot.data!;\n+                                                bool userHasRequestedClaim =\n+                                                    false;\n \n-            return LayoutBuilder(\n-              builder: (context, constraints) {\n-                // Use GridView for wider screens\n-                if (constraints.maxWidth > 700) {\n-                  int crossAxisCount = (constraints.maxWidth / 400).floor().clamp(2, 4);\n-                  return GridView.builder(\n-                    padding: const EdgeInsets.all(16),\n-                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n-                      crossAxisCount: crossAxisCount,\n-                      childAspectRatio: 0.8,\n-                      crossAxisSpacing: 16,\n-                      mainAxisSpacing: 16,\n-                    ),\n-                    itemCount: posts.length,\n-                    itemBuilder: (context, index) => _buildPostCard(posts[index]),\n-                  );\n+                                                if (claimSnapshot.hasData &&\n+                                                    claimSnapshot.data!.docs\n+                                                        .isNotEmpty) {\n+                                                  final claimData =\n+                                                      claimSnapshot\n+                                                              .data!.docs.first\n+                                                              .data()\n+                                                          as Map<String,\n+                                                              dynamic>;\n+\n+                                                  if (claimData[\n+                                                          'claimStatusC'] ==\n+                                                      'requested') {\n+                                                    userHasRequestedClaim =\n+                                                        true;\n+                                                  }\n+                                                  if (claimData[\n+                                                              'claimStatusC'] ==\n+                                                          'accepted' ||\n+                                                      claimData[\n+                                                              'claimStatusC'] ==\n+                                                          'declined') {\n+                                                    userHasRequestedClaim =\n+                                                        false;\n+                                                  }\n+                                                }\n+\n+                                                return Row(\n+                                                    mainAxisAlignment:\n+                                                        MainAxisAlignment\n+                                                            .spaceAround,\n+                                                    children: [\n+                                                      GestureDetector(\n+                                                        onTap: () {\n+                                                          _sharePost(\n+                                                              context,\n+                                                              post.title,\n+                                                              post.description);\n+                                                        },\n+                                                        child: const Row(\n+                                                          children: [\n+                                                            Icon(Icons\n+                                                                .share_rounded),\n+                                                            SizedBox(width: 3),\n+                                                            Text('Share'),\n+                                                          ],\n+                                                        ),\n+                                                      ),\n+                                                      if (post.postmakerId !=\n+                                                          user!.uid)\n+                                                        ElevatedButton(\n+                                                          onPressed: () {\n+                                                            _replyToPostmaker(\n+                                                                context,\n+                                                                post.postmakerId,\n+                                                                post.userName,\n+                                                                post.postId);\n+                                                          },\n+                                                          style: ElevatedButton\n+                                                              .styleFrom(\n+                                                            backgroundColor:\n+                                                                Colors.green\n+                                                                    .shade600,\n+                                                            shape:\n+                                                                RoundedRectangleBorder(\n+                                                              borderRadius:\n+                                                                  BorderRadius\n+                                                                      .circular(\n+                                                                          10),\n+                                                            ),\n+                                                          ),\n+                                                          child: const Row(\n+                                                            mainAxisAlignment:\n+                                                                MainAxisAlignment\n+                                                                    .center,\n+                                                            children: [\n+                                                              Icon(Icons.reply,\n+                                                                  color: Colors\n+                                                                      .white),\n+                                                              SizedBox(\n+                                                                  width: 3),\n+                                                              Text(\n+                                                                'Reply',\n+                                                                style: TextStyle(\n+                                                                    fontSize:\n+                                                                        16,\n+                                                                    color: Colors\n+                                                                        .white),\n+                                                              ),\n+                                                            ],\n+                                                          ),\n+                                                        ),\n+\n+                                                      //Claimed Button\n+                                                      if (post.status !=\n+                                                              'Lost' &&\n+                                                          post.isClaimed ==\n+                                                              true)\n+                                                        ElevatedButton(\n+                                                          onPressed: () {\n+                                                            _claimedPost(\n+                                                                context,\n+                                                                post.postclaimerId!,\n+                                                                post.title,\n+                                                                post.postClaimer!,\n+                                                                post.postId);\n+                                                          },\n+                                                          style: ElevatedButton\n+                                                              .styleFrom(\n+                                                            backgroundColor:\n+                                                                Colors\n+                                                                    .deepOrange\n+                                                                    .shade600,\n+                                                            shape:\n+                                                                RoundedRectangleBorder(\n+                                                              borderRadius:\n+                                                                  BorderRadius\n+                                                                      .circular(\n+                                                                          10),\n+                                                            ),\n+                                                          ),\n+                                                          child: const Row(\n+                                                            mainAxisAlignment:\n+                                                                MainAxisAlignment\n+                                                                    .center,\n+                                                            children: [\n+                                                              Icon(\n+                                                                  Icons\n+                                                                      .back_hand,\n+                                                                  color: Colors\n+                                                                      .white),\n+                                                              SizedBox(\n+                                                                  width: 3),\n+                                                              Text(\n+                                                                'Claimed',\n+                                                                style: TextStyle(\n+                                                                    fontSize:\n+                                                                        16,\n+                                                                    color: Colors\n+                                                                        .white),\n+                                                              ),\n+                                                            ],\n+                                                          ),\n+                                                        ),\n+\n+                                                      // Claim Buttton\n+                                                      if (post.postmakerId !=\n+                                                              user!.uid &&\n+                                                          post.status ==\n+                                                              'Found' &&\n+                                                          post.isClaimed ==\n+                                                              false &&\n+                                                          !userHasRequestedClaim)\n+                                                        ElevatedButton(\n+                                                          onPressed: () {\n+                                                            _claimPost(\n+                                                                context,\n+                                                                post.postmakerId,\n+                                                                post.title,\n+                                                                post.question!,\n+                                                                post.description,\n+                                                                post.postId);\n+                                                          },\n+                                                          style: ElevatedButton\n+                                                              .styleFrom(\n+                                                            backgroundColor:\n+                                                                Colors\n+                                                                    .deepOrange\n+                                                                    .shade600,\n+                                                            shape:\n+                                                                RoundedRectangleBorder(\n+                                                              borderRadius:\n+                                                                  BorderRadius\n+                                                                      .circular(\n+                                                                          10),\n+                                                            ),\n+                                                          ),\n+                                                          child: const Row(\n+                                                            mainAxisAlignment:\n+                                                                MainAxisAlignment\n+                                                                    .center,\n+                                                            children: [\n+                                                              Icon(\n+                                                                  Icons\n+                                                                      .back_hand,\n+                                                                  color: Colors\n+                                                                      .white),\n+                                                              SizedBox(\n+                                                                  width: 6),\n+                                                              Text(\n+                                                                'Claim',\n+                                                                style: TextStyle(\n+                                                                    fontSize:\n+                                                                        16,\n+                                                                    color: Colors\n+                                                                        .white),\n+                                                              ),\n+                                                            ],\n+                                                          ),\n+                                                        ),\n+\n+                                                      // Request Button\n+                                                      if (post.postmakerId !=\n+                                                              user!.uid &&\n+                                                          post.status ==\n+                                                              'Found' &&\n+                                                          post.isClaimed ==\n+                                                              false &&\n+                                                          userHasRequestedClaim)\n+                                                        ElevatedButton(\n+                                                          onPressed: () {},\n+                                                          style: ElevatedButton\n+                                                              .styleFrom(\n+                                                            backgroundColor:\n+                                                                Colors\n+                                                                    .deepOrange\n+                                                                    .shade600,\n+                                                            shape:\n+                                                                RoundedRectangleBorder(\n+                                                              borderRadius:\n+                                                                  BorderRadius\n+                                                                      .circular(\n+                                                                          10),\n+                                                            ),\n+                                                          ),\n+                                                          child: const Row(\n+                                                            mainAxisAlignment:\n+                                                                MainAxisAlignment\n+                                                                    .center,\n+                                                            children: [\n+                                                              Icon(\n+                                                                  Icons\n+                                                                      .back_hand,\n+                                                                  color: Colors\n+                                                                      .white),\n+                                                              SizedBox(\n+                                                                  width: 3),\n+                                                              Text(\n+                                                                'Requested',\n+                                                                style: TextStyle(\n+                                                                    fontSize:\n+                                                                        16,\n+                                                                    color: Colors\n+                                                                        .white),\n+                                                              ),\n+                                                            ],\n+                                                          ),\n+                                                        )\n+                                                    ]);\n+                                              })\n+                                        ],\n+                                      ),\n+                                    ),\n+                                  ],\n+                                ),\n+                              ),\n+                            ),\n+                          ),\n+                        );\n+                      },\n+                    );\n+                  },\n+                );\n+              },\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+\n+  void _replyToPostmaker(BuildContext context, String postmakerId,\n+      String postmaker, String postId) {\n+    TextEditingController messageController = TextEditingController();\n+\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Send a Reply'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              Row(\n+                children: [\n+                  const Text('Reply to'),\n+                  TextButton(\n+                      onPressed: () {\n+                        Navigator.push(\n+                            context,\n+                            MaterialPageRoute(\n+                                builder: (_) =>\n+                                    ProfilePage2(uid: postmakerId)));\n+                      },\n+                      child: Text(postmaker))\n+                ],\n+              ),\n+              const SizedBox(height: 10),\n+              TextField(\n+                controller: messageController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your message',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop(); // Close the dialog without sending\n+              },\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String message = messageController.text.trim();\n+                if (message.isNotEmpty) {\n+                  _sendMessageToPostmaker(\n+                      context, postmakerId, message, postId);\n                 }\n-                // Use ListView for narrower screens\n-                return ListView.builder(\n-                  padding: const EdgeInsets.all(8.0),\n-                  itemCount: posts.length,\n-                  itemBuilder: (context, index) => Center(\n-                    child: ConstrainedBox(\n-                      constraints: const BoxConstraints(maxWidth: 600),\n-                      child: _buildPostCard(posts[index]),\n-                    ),\n+                ScaffoldMessenger.of(context).showSnackBar(\n+                  const SnackBar(\n+                    content: Text('Message sent successfully'),\n+                    behavior: SnackBarBehavior.floating,\n+                    margin: EdgeInsets.all(16.0),\n                   ),\n                 );\n+                Navigator.of(context).pop(); // Close the dialog after sending\n               },\n-            );\n-          },\n+              child: const Text('Send'),\n+            ),\n+          ],\n         );\n       },\n     );\n   }\n \n-  Widget _buildPostCard(PostModel post) {\n-    return PostCard(\n-      post: post,\n-      isOwner: currentUser != null && currentUser!.uid == post.postmakerId,\n-      onDelete: () => onDelete(post),\n-    );\n-  }\n+  Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n+      String message, String postId) async {\n+    try {\n+      // Add a chat message to Firestore\n+      await FirebaseFirestore.instance.collection('chats').add({\n+        'senderId': user!.uid,\n+        'receiverId': postmakerId,\n+        'participants': [user!.uid, postmakerId],\n+        'message': message,\n+        'postId': postId,\n+        'timestamp': Timestamp.now(),\n+      });\n \n-  Widget _buildShimmer(BuildContext context) {\n-    return LayoutBuilder(builder: (context, constraints) {\n-      if (constraints.maxWidth > 700) {\n-        int crossAxisCount = (constraints.maxWidth / 400).floor().clamp(2, 4);\n-        return GridView.builder(\n-          padding: const EdgeInsets.all(16),\n-          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n-            crossAxisCount: crossAxisCount,\n-            childAspectRatio: 0.8,\n-            crossAxisSpacing: 16,\n-            mainAxisSpacing: 16,\n-          ),\n-          itemCount: 4,\n-          itemBuilder: (context, index) => const PostShimmerCard(),\n-        );\n-      }\n-      return ListView.builder(\n-        padding: const EdgeInsets.all(8.0),\n-        itemCount: 3,\n-        itemBuilder: (context, index) => const PostShimmerCard(),\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Message sent successfully'),\n+          behavior: SnackBarBehavior.floating,\n+          margin: EdgeInsets.all(16.0),\n+        ),\n       );\n-    });\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          content: Text('Failed to send message: $e'),\n+          backgroundColor: Colors.red,\n+        ),\n+      );\n+    }\n   }\n-}\n \n-// ------------------- REUSABLE POST CARD WIDGET ------------------- //\n-\n-class PostCard extends StatelessWidget {\n-  final PostModel post;\n-  final bool isOwner;\n-  final VoidCallback onDelete;\n-\n-  const PostCard({super.key, required this.post, required this.isOwner, required this.onDelete});\n-  \n-  // A placeholder image URL\n-  final String _placeholderImage = 'https://static.wikia.nocookie.net/logopedia/images/e/ec/220px-National_Institute_of_Technology,_Hamirpur_Logo.png/revision/latest?cb=20200330143312';\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    return Card(\n-      elevation: 4,\n-      margin: const EdgeInsets.symmetric(vertical: 8.0),\n-      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n-      clipBehavior: Clip.antiAlias, // Ensures content respects the border radius\n-      child: Column(\n-        crossAxisAlignment: CrossAxisAlignment.start,\n-        children: [\n-          // Header\n-          ListTile(\n-            onTap: () => Navigator.push(context, MaterialPageRoute(builder: (_) => ProfilePage2(uid: post.postmakerId))),\n-            leading: CircleAvatar(\n-              radius: 25,\n-              backgroundImage: NetworkImage(post.profileImageUrl.isNotEmpty ? post.profileImageUrl : _placeholderImage),\n-              onBackgroundImageError: (_, __) {}, // Handle image loading errors gracefully\n-            ),\n-            title: Text(post.userName, style: const TextStyle(fontWeight: FontWeight.bold)),\n-            subtitle: Text(\"at ${post.location}\"),\n-            trailing: isOwner\n-                ? IconButton(icon: const Icon(Icons.more_vert), onPressed: () => onDelete()) // Simplified to direct delete\n-                : null,\n-          ),\n-          \n-          // Image Carousel with Status Badge\n-          Stack(\n+  void _claimPost(BuildContext context, String postmakerId, String postTitle,\n+      String postQuestion, String postdescription, String postId) {\n+    TextEditingController answerController = TextEditingController();\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Claim Item'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n             children: [\n-              if (post.itemImages.isNotEmpty)\n-                CarouselSlider(\n-                  options: CarouselOptions(\n-                    aspectRatio: 16 / 10,\n-                    viewportFraction: 1.0,\n-                    autoPlay: post.itemImages.length > 1,\n-                    enlargeCenterPage: false,\n-                  ),\n-                  items: post.itemImages.map((imageUrl) {\n-                    return Image.network(\n-                      imageUrl,\n-                      fit: BoxFit.cover,\n-                      width: double.infinity,\n-                      loadingBuilder: (context, child, progress) => progress == null ? child : const Center(child: CircularProgressIndicator()),\n-                      errorBuilder: (context, error, stackTrace) => const Center(child: Icon(Icons.broken_image, size: 40, color: Colors.grey)),\n-                    );\n-                  }).toList(),\n+              const Text('Question from the post owner:'),\n+              const SizedBox(height: 10),\n+              Text(postQuestion,\n+                  style: const TextStyle(fontWeight: FontWeight.bold)),\n+              const SizedBox(height: 20),\n+              TextField(\n+                controller: answerController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your answer',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n                 ),\n-              Positioned(\n-                top: 12,\n-                left: 12,\n-                child: Container(\n-                  padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),\n-                  decoration: BoxDecoration(\n-                    color: post.status == 'Lost' ? Colors.red.shade600 : Colors.green.shade600,\n-                    borderRadius: BorderRadius.circular(20),\n-                    boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.3), blurRadius: 4, offset: const Offset(0, 2))],\n-                  ),\n-                  child: Text(post.status, style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),\n-                ),\n+                maxLines: 3,\n               ),\n             ],\n           ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String answer = answerController.text.trim();\n+                if (answer.isNotEmpty) {\n+                  _sendAnswerToPostmaker(\n+                      context, answer, postId, postmakerId, 'requested');\n+                }\n+                ScaffoldMessenger.of(context).showSnackBar(\n+                  const SnackBar(\n+                    content: Text('Request sent successfully'),\n+                    behavior: SnackBarBehavior.floating,\n+                    margin: EdgeInsets.all(16.0),\n+                  ),\n+                );\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-          // Body\n-          Padding(\n-            padding: const EdgeInsets.all(16.0),\n-            child: Column(\n-              crossAxisAlignment: CrossAxisAlignment.start,\n-              children: [\n-                Text(\n-                  post.title,\n-                  style: Theme.of(context).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),\n-                ),\n-                const SizedBox(height: 4),\n-                Text(\"Posted on: ${post.postTime}\", style: Theme.of(context).textTheme.bodySmall?.copyWith(color: Colors.grey.shade600)),\n-                const SizedBox(height: 12),\n-                Text(post.description, maxLines: 3, overflow: TextOverflow.ellipsis),\n-              ],\n-            ),\n+  void _claimedPost(BuildContext context, String postclaimerId,\n+      String postTitle, String claimername, String postId) {\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: Text('Claimed Item : $postTitle',\n+              style:\n+                  const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              Row(\n+                children: [\n+                  const Text('Already claimed by :',\n+                      style: TextStyle(fontWeight: FontWeight.bold)),\n+                  TextButton(\n+                      onPressed: () {\n+                        Navigator.push(\n+                            context,\n+                            MaterialPageRoute(\n+                                builder: (_) =>\n+                                    ProfilePage2(uid: postclaimerId)));\n+                      },\n+                      child: Text(\n+                          user!.uid == postclaimerId ? 'You' : claimername,\n+                          style: const TextStyle(fontWeight: FontWeight.bold))),\n+                ],\n+              ),\n+              const SizedBox(height: 10),\n+            ],\n           ),\n-          \n-          // Action Buttons\n-          Padding(\n-            padding: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),\n-            child: Row(\n-              mainAxisAlignment: MainAxisAlignment.spaceAround,\n-              children: [\n-                 TextButton.icon(\n-                    onPressed: () { /* Add your Share logic */ },\n-                    icon: const Icon(Icons.share_outlined),\n-                    label: const Text('Share'),\n-                ),\n-                if (!isOwner)\n-                TextButton.icon(\n-                    onPressed: () { /* Add your Reply logic */ },\n-                    icon: const Icon(Icons.reply_outlined),\n-                    label: const Text('Reply'),\n-                ),\n-                if (!isOwner && post.status == 'Found' && post.isClaimed!=null)\n-                ElevatedButton.icon(\n-                    onPressed: () { /* Add your Claim logic */ },\n-                    icon: const Icon(Icons.check_circle_outline),\n-                    label: const Text('Claim'),\n-                    style: ElevatedButton.styleFrom(\n-                        backgroundColor: Theme.of(context).primaryColor,\n-                        foregroundColor: Colors.white,\n-                    ),\n-                ),\n-                if (post.isClaimed)\n-                Chip(\n-                    avatar: const Icon(Icons.verified_user_outlined),\n-                    label: const Text('Claimed'),\n-                    backgroundColor: Colors.grey.shade300,\n-                )\n-              ],\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Cancel'),\n             ),\n-          ),\n-        ],\n-      ),\n+          ],\n+        );\n+      },\n     );\n   }\n-}\n \n-// ------------------- SHIMMER LOADING CARD WIDGET ------------------- //\n+  Future<void> _sendAnswerToPostmaker(\n+    BuildContext context,\n+    String answer,\n+    String postId,\n+    String postmakerId,\n+    String statusofRequest,\n+  ) async {\n+    try {\n+      // Reference to the specific post's claims subcollection\n+      CollectionReference claimsRef = FirebaseFirestore.instance\n+          .collection('posts')\n+          .doc(postId) // Get the post document using its ID\n+          .collection('claims'); // Access the subcollection\n \n-class PostShimmerCard extends StatelessWidget {\n-  const PostShimmerCard({super.key});\n+      // Add a new claim document\n+      await claimsRef.add({\n+        'senderId': user!.uid,\n+        'answer': answer,\n+        'claimStatusC': statusofRequest,\n+        'timestamp': Timestamp.now(),\n+        'isClaimed': false,\n+        'receiverId': postmakerId,\n+      });\n \n-  @override\n-  Widget build(BuildContext context) {\n-    return Shimmer.fromColors(\n-      baseColor: Colors.grey[300]!,\n-      highlightColor: Colors.grey[100]!,\n-      child: Card(\n-        elevation: 4,\n-        margin: const EdgeInsets.symmetric(vertical: 8.0),\n-        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n-        child: Column(\n-          crossAxisAlignment: CrossAxisAlignment.start,\n-          children: [\n-            ListTile(\n-              leading: const CircleAvatar(radius: 25, backgroundColor: Colors.white),\n-              title: Container(width: 120.0, height: 16.0, color: Colors.white),\n-              subtitle: Container(width: 200.0, height: 12.0, color: Colors.white, margin: const EdgeInsets.only(top: 4)),\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Your answer has been sent to the post maker'),\n+          behavior: SnackBarBehavior.floating,\n+          margin: EdgeInsets.all(16.0),\n+        ),\n+      );\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          content: Text('Failed to send answer: $e'),\n+          backgroundColor: Colors.red,\n+        ),\n+      );\n+    }\n+  }\n+\n+  void _sharePost(BuildContext context, String title, String description) {\n+    final content = 'Check out this post: $title\\nDescription: $description';\n+    final snackBar = SnackBar(content: Text('Shared! $content'));\n+    ScaffoldMessenger.of(context).showSnackBar(snackBar);\n+  }\n+\n+  void _showDeleteConfirmation(BuildContext context, PostModel post) {\n+    // postId = post.postId;\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Delete Post'),\n+          content: const Text(\n+            'Are you sure you want to delete this post?',\n+            style: TextStyle(fontWeight: FontWeight.w700),\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () async {\n+                // Call your delete functionality here\n+                ScaffoldMessenger.of(context).showSnackBar(\n+                  const SnackBar(\n+                      backgroundColor: Colors.deepOrange,\n+                      content: Text('Post deleted successfully')),\n+                );\n+\n+                await _deletePost(context, post.postId);\n+\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text(\n+                'Yes',\n+                style: TextStyle(fontWeight: FontWeight.bold),\n+              ),\n             ),\n-            Container(\n-              height: 200.0, // Approximate height of the image carousel\n-              color: Colors.white,\n-            ),\n-            Padding(\n-              padding: const EdgeInsets.all(16.0),\n-              child: Column(\n-                crossAxisAlignment: CrossAxisAlignment.start,\n-                children: [\n-                  Container(width: double.infinity, height: 20.0, color: Colors.white),\n-                  const SizedBox(height: 8),\n-                  Container(width: 150.0, height: 12.0, color: Colors.white),\n-                  const SizedBox(height: 12),\n-                  Container(width: 250.0, height: 14.0, color: Colors.white),\n-                  const SizedBox(height: 6),\n-                  Container(width: 220.0, height: 14.0, color: Colors.white),\n-                ],\n+            TextButton(\n+              onPressed: () => Navigator.of(context).pop(),\n+              child: const Text(\n+                'No',\n+                style: TextStyle(fontWeight: FontWeight.bold),\n               ),\n             ),\n           ],\n-        ),\n-      ),\n+        );\n+      },\n     );\n   }\n+\n+  void _showFullImageDialog(BuildContext context, String imageUrl) {\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return Dialog(\n+          child: Stack(\n+            children: [\n+              Image.network(imageUrl),\n+              Positioned(\n+                right: 10,\n+                top: 10,\n+                child: IconButton(\n+                  icon: const Icon(Icons.cancel, color: Colors.red),\n+                  onPressed: () {\n+                    Navigator.of(context).pop();\n+                  },\n+                ),\n+              ),\n+            ],\n+          ),\n+        );\n+      },\n+    );\n+  }\n }\n \n-// ------------------- FULL SCREEN IMAGE VIEWER (from original code) ------------------- //\n-\n-class FullScreenImageViewer extends StatelessWidget {\n+class FullScreenImageViewer extends StatefulWidget {\n   final List<String> images;\n-  final int initialIndex;\n+  bool isMobile;\n+   FullScreenImageViewer(this.images, this.isMobile,{super.key});\n \n-  const FullScreenImageViewer({\n-    super.key,\n-    required this.images,\n-    this.initialIndex = 0,\n-  });\n+  @override\n+  _FullScreenImageViewerState createState() => _FullScreenImageViewerState();\n+}\n \n+class _FullScreenImageViewerState extends State<FullScreenImageViewer> {\n+  int _currentIndex = 0;\n+\n   @override\n   Widget build(BuildContext context) {\n     return Scaffold(\n-      backgroundColor: Colors.black,\n+      backgroundColor:\n+          Colors.black.withOpacity(0.8), // Background color for overlay\n       body: Stack(\n         children: [\n           PageView.builder(\n-            itemCount: images.length,\n-            controller: PageController(initialPage: initialIndex),\n+            itemCount: widget.images.length,\n+            controller: PageController(initialPage: _currentIndex),\n+            onPageChanged: (index) {\n+              setState(() {\n+                _currentIndex = index;\n+              });\n+            },\n             itemBuilder: (context, index) {\n               return Center(\n-                child: InteractiveViewer(\n-                  child: Image.network(images[index]),\n+                child: Image.network(\n+                  width:widget.isMobile ? MediaQuery.of(context).size.width:MediaQuery.of(context).size.width*0.5,\n+                  widget.images[index],\n+                  fit: BoxFit.contain,\n                 ),\n               );\n             },\n           ),\n           Positioned(\n             top: 40,\n             right: 20,\n             child: IconButton(\n-              icon: const Icon(Icons.close, color: Colors.white, size: 30),\n-              onPressed: () => Navigator.of(context).pop(),\n+              icon: const Icon(\n+                Icons.close,\n+                color: Colors.white,\n+                size: 30,\n+              ),\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n             ),\n           ),\n         ],\n       ),\n     );\n   }\n-}\n+}\n"
                },
                {
                    "date": 1756124494696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1235 +1,1235 @@\n-import 'package:carousel_slider/carousel_slider.dart';\n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:flutter/material.dart';\n-import 'package:intl/intl.dart';\n-import 'package:l_f/Frontend/Contants/lists.dart';\n-import 'package:l_f/Frontend/Home/Post/post_model.dart';\n-import 'package:l_f/Frontend/Profile/user_see_page.dart';\n+// import 'package:carousel_slider/carousel_slider.dart';\n+// import 'package:cloud_firestore/cloud_firestore.dart';\n+// import 'package:firebase_auth/firebase_auth.dart';\n+// import 'package:flutter/material.dart';\n+// import 'package:intl/intl.dart';\n+// import 'package:l_f/Frontend/Contants/lists.dart';\n+// import 'package:l_f/Frontend/Home/Post/post_model.dart';\n+// import 'package:l_f/Frontend/Profile/user_see_page.dart';\n \n-class LostFoundPage extends StatefulWidget {\n-  const LostFoundPage({super.key});\n+// class LostFoundPage extends StatefulWidget {\n+//   const LostFoundPage({super.key});\n \n-  @override\n-  State<LostFoundPage> createState() => _LostFoundPageState();\n-}\n+//   @override\n+//   State<LostFoundPage> createState() => _LostFoundPageState();\n+// }\n \n-class _LostFoundPageState extends State<LostFoundPage> {\n-  final Map<String, Map<String, String>> _userCache =\n-      {}; // Cache to store user data\n-  User? user = FirebaseAuth.instance.currentUser;\n-  // String? postId;\n+// class _LostFoundPageState extends State<LostFoundPage> {\n+//   final Map<String, Map<String, String>> _userCache =\n+//       {}; // Cache to store user data\n+//   User? user = FirebaseAuth.instance.currentUser;\n+//   // String? postId;\n \n-  List<PostModel> _filteredPosts = [];\n+//   List<PostModel> _filteredPosts = [];\n \n-  // Function to fetch filtered posts from Firestore\n-  void _filterPosts(\n-      String status, String location, DateTime? uploadDate, String title) {\n-    Query query = FirebaseFirestore.instance.collection('posts');\n+//   // Function to fetch filtered posts from Firestore\n+//   void _filterPosts(\n+//       String status, String location, DateTime? uploadDate, String title) {\n+//     Query query = FirebaseFirestore.instance.collection('posts');\n \n-    // Apply filters\n-    if (status.isNotEmpty) {\n-      query = query.where('status', isEqualTo: status);\n-    }\n-    if (location.isNotEmpty) {\n-      query = query.where('location', isEqualTo: location);\n-    }\n-    if (uploadDate != null) {\n-      query = query.where('uploadDate', isEqualTo: uploadDate);\n-    }\n-    if (title.isNotEmpty) {\n-      query = query.where('itemTitle', isEqualTo: title);\n-    }\n+//     // Apply filters\n+//     if (status.isNotEmpty) {\n+//       query = query.where('status', isEqualTo: status);\n+//     }\n+//     if (location.isNotEmpty) {\n+//       query = query.where('location', isEqualTo: location);\n+//     }\n+//     if (uploadDate != null) {\n+//       query = query.where('uploadDate', isEqualTo: uploadDate);\n+//     }\n+//     if (title.isNotEmpty) {\n+//       query = query.where('itemTitle', isEqualTo: title);\n+//     }\n \n-    // Get the results and update the UI\n-    query.get().then((snapshot) {\n-      setState(() {\n-        _filteredPosts = snapshot.docs\n-            .map((doc) => PostModel.fromJson(doc as Map<String, dynamic>))\n-            .toList();\n-      });\n-    });\n-  }\n+//     // Get the results and update the UI\n+//     query.get().then((snapshot) {\n+//       setState(() {\n+//         _filteredPosts = snapshot.docs\n+//             .map((doc) => PostModel.fromJson(doc as Map<String, dynamic>))\n+//             .toList();\n+//       });\n+//     });\n+//   }\n \n-  String _formatDate(Timestamp? timestamp) {\n-    if (timestamp == null) return 'Not available';\n-    DateTime date = timestamp.toDate();\n-    return DateFormat('dd MMMM yyyy').format(date);\n-  }\n+//   String _formatDate(Timestamp? timestamp) {\n+//     if (timestamp == null) return 'Not available';\n+//     DateTime date = timestamp.toDate();\n+//     return DateFormat('dd MMMM yyyy').format(date);\n+//   }\n \n-  Future<void> _deletePost(BuildContext context, String postId) async {\n-    try {\n-      await FirebaseFirestore.instance.collection('posts').doc(postId).delete();\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          backgroundColor: Colors.green,\n-          content: Text('Post deleted successfully'),\n-          behavior: SnackBarBehavior.floating,\n-          margin: EdgeInsets.all(16.0),\n-          duration: Duration(seconds: 2),\n-        ),\n-      );\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-            backgroundColor: Colors.red,\n-            content: Text('Failed to delete post: $e')),\n-      );\n-    }\n-  }\n+//   Future<void> _deletePost(BuildContext context, String postId) async {\n+//     try {\n+//       await FirebaseFirestore.instance.collection('posts').doc(postId).delete();\n+//       ScaffoldMessenger.of(context).showSnackBar(\n+//         const SnackBar(\n+//           backgroundColor: Colors.green,\n+//           content: Text('Post deleted successfully'),\n+//           behavior: SnackBarBehavior.floating,\n+//           margin: EdgeInsets.all(16.0),\n+//           duration: Duration(seconds: 2),\n+//         ),\n+//       );\n+//     } catch (e) {\n+//       ScaffoldMessenger.of(context).showSnackBar(\n+//         SnackBar(\n+//             backgroundColor: Colors.red,\n+//             content: Text('Failed to delete post: $e')),\n+//       );\n+//     }\n+//   }\n \n-  Future<Map<String, String>> _fetchUserNameAndProfilePic(String uid) async {\n-    if (_userCache.containsKey(uid)) {\n-      return _userCache[uid]!; // Return cached data if available\n-    }\n+//   Future<Map<String, String>> _fetchUserNameAndProfilePic(String uid) async {\n+//     if (_userCache.containsKey(uid)) {\n+//       return _userCache[uid]!; // Return cached data if available\n+//     }\n \n-    try {\n-      DocumentSnapshot userDoc =\n-          await FirebaseFirestore.instance.collection('users').doc(uid).get();\n+//     try {\n+//       DocumentSnapshot userDoc =\n+//           await FirebaseFirestore.instance.collection('users').doc(uid).get();\n \n-      if (!userDoc.exists) {\n-        throw Exception(\"User not found.\");\n-      }\n+//       if (!userDoc.exists) {\n+//         throw Exception(\"User not found.\");\n+//       }\n \n-      Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n+//       Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n \n-      String name = userData['name'] ?? 'NITH User';\n-      String profileImage = userData['profileImage'] ?? '';\n+//       String name = userData['name'] ?? 'NITH User';\n+//       String profileImage = userData['profileImage'] ?? '';\n \n-      // Cache the user data\n-      _userCache[uid] = {\n-        'name': name,\n-        'profileImage': profileImage,\n-      };\n+//       // Cache the user data\n+//       _userCache[uid] = {\n+//         'name': name,\n+//         'profileImage': profileImage,\n+//       };\n \n-      return _userCache[uid]!;\n-    } catch (e) {\n-      print(\"Error fetching user profile: $e\");\n-      throw Exception(\"Error fetching user profile.\");\n-    }\n-  }\n+//       return _userCache[uid]!;\n+//     } catch (e) {\n+//       print(\"Error fetching user profile: $e\");\n+//       throw Exception(\"Error fetching user profile.\");\n+//     }\n+//   }\n \n-  Stream<QuerySnapshot>? _postStream;\n+//   Stream<QuerySnapshot>? _postStream;\n \n-  @override\n-  void initState() {\n-    super.initState();\n-    // Initialize stream without filters\n-    _postStream = FirebaseFirestore.instance\n-        .collection('posts')\n-        .orderBy('timestamp', descending: true)\n-        .snapshots();\n-  }\n+//   @override\n+//   void initState() {\n+//     super.initState();\n+//     // Initialize stream without filters\n+//     _postStream = FirebaseFirestore.instance\n+//         .collection('posts')\n+//         .orderBy('timestamp', descending: true)\n+//         .snapshots();\n+//   }\n \n-  void _applyFilters() {\n-    // Start with the collection reference\n-    Query query = FirebaseFirestore.instance.collection('posts');\n+//   void _applyFilters() {\n+//     // Start with the collection reference\n+//     Query query = FirebaseFirestore.instance.collection('posts');\n \n-    // Apply Type filter (Lost/Found)\n-    if (selectedType != 'All') {\n-      query = query.where('status', isEqualTo: selectedType);\n-    }\n+//     // Apply Type filter (Lost/Found)\n+//     if (selectedType != 'All') {\n+//       query = query.where('status', isEqualTo: selectedType);\n+//     }\n \n-    // Apply Location filter\n-    if (selectedLocation != 'Campus, NITH') {\n-      query = query.where('location', isEqualTo: selectedLocation);\n-    }\n+//     // Apply Location filter\n+//     if (selectedLocation != 'Campus, NITH') {\n+//       query = query.where('location', isEqualTo: selectedLocation);\n+//     }\n \n-    // Apply Item Category filter\n-    if (selectedCategory != 'All') {\n-      query = query.where('item', isEqualTo: selectedCategory);\n-    }\n+//     // Apply Item Category filter\n+//     if (selectedCategory != 'All') {\n+//       query = query.where('item', isEqualTo: selectedCategory);\n+//     }\n \n-    // Apply Date filter (based on upload timestamp)\n-    DateTime now = DateTime.now();\n-    DateTime? startDate;\n+//     // Apply Date filter (based on upload timestamp)\n+//     DateTime now = DateTime.now();\n+//     DateTime? startDate;\n \n-    switch (selectedDateRange) {\n-      case 'Today':\n-        startDate = DateTime(now.year, now.month, now.day);\n-        break;\n-      case 'This Week':\n-        startDate = now.subtract(Duration(days: now.weekday - 1));\n-        break;\n-      case 'This Month':\n-        startDate = DateTime(now.year, now.month, 1);\n-        break;\n-      case 'This Year':\n-        startDate = DateTime(now.year, 1, 1);\n-        break;\n-      default:\n-        startDate = null;\n-    }\n+//     switch (selectedDateRange) {\n+//       case 'Today':\n+//         startDate = DateTime(now.year, now.month, now.day);\n+//         break;\n+//       case 'This Week':\n+//         startDate = now.subtract(Duration(days: now.weekday - 1));\n+//         break;\n+//       case 'This Month':\n+//         startDate = DateTime(now.year, now.month, 1);\n+//         break;\n+//       case 'This Year':\n+//         startDate = DateTime(now.year, 1, 1);\n+//         break;\n+//       default:\n+//         startDate = null;\n+//     }\n \n-    if (startDate != null) {\n-      query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n-    }\n+//     if (startDate != null) {\n+//       query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n+//     }\n \n-    // Update the stream for the StreamBuilder\n-    setState(() {\n-      _postStream = query.orderBy('timestamp', descending: true).snapshots();\n-    });\n-  }\n+//     // Update the stream for the StreamBuilder\n+//     setState(() {\n+//       _postStream = query.orderBy('timestamp', descending: true).snapshots();\n+//     });\n+//   }\n \n-  String selectedType = 'All';\n-  String selectedLocation = 'Campus, NITH';\n-  String selectedCategory = 'All';\n-  String selectedDateRange = 'All Time';\n+//   String selectedType = 'All';\n+//   String selectedLocation = 'Campus, NITH';\n+//   String selectedCategory = 'All';\n+//   String selectedDateRange = 'All Time';\n \n-// Dummy lists for dropdowns (replace with your provided lists)\n-  List<String> itemTypes = ['All', 'Lost', 'Found'];\n-  List<String> locations = locationsList;\n-  List<String> categories = [\n-    'All',\n-    'Mobile Phone',\n-    'Laptop',\n-    'Charger',\n-    'Wallet',\n-    'ID Card',\n-    'Hoodie',\n-    'Jacket/Coat',\n-    'Bat',\n-    'Electronics Item',\n-    'Cloth',\n-    'Belt',\n-    'Ball',\n-    'Book',\n-    'Earphones',\n-    'Earbuds',\n-    'Water Bottle',\n-    'Watch',\n-    'Specs',\n-    'Jewellry',\n-    'Shoes',\n-    'Keys',\n-    'Umbrella',\n-    'Other'\n-  ];\n-  List<String> dateRanges = [\n-    'All Time',\n-    'Today',\n-    'This Week',\n-    'This Month',\n-    'This Year'\n-  ];\n+// // Dummy lists for dropdowns (replace with your provided lists)\n+//   List<String> itemTypes = ['All', 'Lost', 'Found'];\n+//   List<String> locations = locationsList;\n+//   List<String> categories = [\n+//     'All',\n+//     'Mobile Phone',\n+//     'Laptop',\n+//     'Charger',\n+//     'Wallet',\n+//     'ID Card',\n+//     'Hoodie',\n+//     'Jacket/Coat',\n+//     'Bat',\n+//     'Electronics Item',\n+//     'Cloth',\n+//     'Belt',\n+//     'Ball',\n+//     'Book',\n+//     'Earphones',\n+//     'Earbuds',\n+//     'Water Bottle',\n+//     'Watch',\n+//     'Specs',\n+//     'Jewellry',\n+//     'Shoes',\n+//     'Keys',\n+//     'Umbrella',\n+//     'Other'\n+//   ];\n+//   List<String> dateRanges = [\n+//     'All Time',\n+//     'Today',\n+//     'This Week',\n+//     'This Month',\n+//     'This Year'\n+//   ];\n \n-// Filter Dropdowns\n-  Widget buildDropdowns() {\n-    return LayoutBuilder(builder: (context, constraints) {\n-      return Padding(\n-        padding: const EdgeInsets.symmetric(horizontal: 12.0),\n-        child: Row(\n-          mainAxisAlignment: MainAxisAlignment.center,\n-          mainAxisSize: MainAxisSize.min,\n-          children: [\n-            buildDropdown(selectedType, itemTypes, (newValue) {\n-              setState(() {\n-                selectedType = newValue!;\n-              });\n-              _applyFilters();\n-            }),\n-            const SizedBox(width: 10),\n-            buildDropdown(selectedLocation, locations, (newValue) {\n-              setState(() {\n-                selectedLocation = newValue!;\n-              });\n-              _applyFilters();\n-            }),\n-            const SizedBox(width: 10),\n-            buildDropdown(selectedCategory, categories, (newValue) {\n-              setState(() {\n-                selectedCategory = newValue!;\n-              });\n-              _applyFilters();\n-            }),\n-            const SizedBox(width: 10),\n-            buildDropdown(selectedDateRange, dateRanges, (newValue) {\n-              setState(() {\n-                selectedDateRange = newValue!;\n-              });\n-              _applyFilters();\n-            }),\n-          ],\n-        ),\n-      );\n-    });\n-  }\n+// // Filter Dropdowns\n+//   Widget buildDropdowns() {\n+//     return LayoutBuilder(builder: (context, constraints) {\n+//       return Padding(\n+//         padding: const EdgeInsets.symmetric(horizontal: 12.0),\n+//         child: Row(\n+//           mainAxisAlignment: MainAxisAlignment.center,\n+//           mainAxisSize: MainAxisSize.min,\n+//           children: [\n+//             buildDropdown(selectedType, itemTypes, (newValue) {\n+//               setState(() {\n+//                 selectedType = newValue!;\n+//               });\n+//               _applyFilters();\n+//             }),\n+//             const SizedBox(width: 10),\n+//             buildDropdown(selectedLocation, locations, (newValue) {\n+//               setState(() {\n+//                 selectedLocation = newValue!;\n+//               });\n+//               _applyFilters();\n+//             }),\n+//             const SizedBox(width: 10),\n+//             buildDropdown(selectedCategory, categories, (newValue) {\n+//               setState(() {\n+//                 selectedCategory = newValue!;\n+//               });\n+//               _applyFilters();\n+//             }),\n+//             const SizedBox(width: 10),\n+//             buildDropdown(selectedDateRange, dateRanges, (newValue) {\n+//               setState(() {\n+//                 selectedDateRange = newValue!;\n+//               });\n+//               _applyFilters();\n+//             }),\n+//           ],\n+//         ),\n+//       );\n+//     });\n+//   }\n \n-// Helper method to create a DropdownButton\n-  Widget buildDropdown(String selectedValue, List<String> items,\n-      ValueChanged<String?> onChanged) {\n-    return DropdownButton<String>(\n-      value: selectedValue,\n-      items: items.map((String value) {\n-        return DropdownMenuItem<String>(\n-          value: value,\n-          child: Text(value),\n-        );\n-      }).toList(),\n-      onChanged: onChanged,\n-    );\n-  }\n+// // Helper method to create a DropdownButton\n+//   Widget buildDropdown(String selectedValue, List<String> items,\n+//       ValueChanged<String?> onChanged) {\n+//     return DropdownButton<String>(\n+//       value: selectedValue,\n+//       items: items.map((String value) {\n+//         return DropdownMenuItem<String>(\n+//           value: value,\n+//           child: Text(value),\n+//         );\n+//       }).toList(),\n+//       onChanged: onChanged,\n+//     );\n+//   }\n \n-  @override\n-  Widget build(BuildContext context) {\n-    bool isMobile = MediaQuery.of(context).size.width < 600;\n-    return Scaffold(\n-      body: Column(\n-        children: [\n-          SingleChildScrollView(\n-              scrollDirection: Axis.horizontal, child: buildDropdowns()),\n-          Expanded(\n-            child: StreamBuilder<QuerySnapshot>(\n-              stream: _postStream,\n-              builder: (context, snapshot) {\n-                if (snapshot.connectionState == ConnectionState.waiting) {\n-                  return const Center(child: CircularProgressIndicator());\n-                }\n-                if (snapshot.hasError) {\n-                  print('ERROR ${snapshot.error}');\n-                  return const Center(child: Text('Error loading posts'));\n-                }\n+//   @override\n+//   Widget build(BuildContext context) {\n+//     bool isMobile = MediaQuery.of(context).size.width < 600;\n+//     return Scaffold(\n+//       body: Column(\n+//         children: [\n+//           SingleChildScrollView(\n+//               scrollDirection: Axis.horizontal, child: buildDropdowns()),\n+//           Expanded(\n+//             child: StreamBuilder<QuerySnapshot>(\n+//               stream: _postStream,\n+//               builder: (context, snapshot) {\n+//                 if (snapshot.connectionState == ConnectionState.waiting) {\n+//                   return const Center(child: CircularProgressIndicator());\n+//                 }\n+//                 if (snapshot.hasError) {\n+//                   print('ERROR ${snapshot.error}');\n+//                   return const Center(child: Text('Error loading posts'));\n+//                 }\n \n-                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-                  return const Center(\n-                      child: Center(child: Text('No posts available')));\n-                }\n+//                 if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+//                   return const Center(\n+//                       child: Center(child: Text('No posts available')));\n+//                 }\n \n-                final posts = snapshot.data!.docs.map((doc) {\n-                  final data = doc.data() as Map<String, dynamic>;\n-                  final String uid = data['postmakerId'];\n-                  final bool isClaimed = data['isClaimed'] ?? false;\n-                  final String? claimerUid = data['postClaimer'];\n-                  print(\"post claimerasss: : $claimerUid\");\n-                  print(\"POST IDDDDDDDD : ${data['postId']}\");\n-                  print(\"Is Post Claimed: $isClaimed\");\n+//                 final posts = snapshot.data!.docs.map((doc) {\n+//                   final data = doc.data() as Map<String, dynamic>;\n+//                   final String uid = data['postmakerId'];\n+//                   final bool isClaimed = data['isClaimed'] ?? false;\n+//                   final String? claimerUid = data['postClaimer'];\n+//                   print(\"post claimerasss: : $claimerUid\");\n+//                   print(\"POST IDDDDDDDD : ${data['postId']}\");\n+//                   print(\"Is Post Claimed: $isClaimed\");\n \n-                  return _fetchUserNameAndProfilePic(uid)\n-                      .then((userDetails) async {\n-                    String postClaimerName = '';\n-                    String postClaimerProfilePic = '';\n+//                   return _fetchUserNameAndProfilePic(uid)\n+//                       .then((userDetails) async {\n+//                     String postClaimerName = '';\n+//                     String postClaimerProfilePic = '';\n \n-                    if (isClaimed && claimerUid != null) {\n-                      final claimerDetails =\n-                          await _fetchUserNameAndProfilePic(claimerUid);\n-                      postClaimerName = claimerDetails['name'] ?? 'NITH User';\n-                      postClaimerProfilePic = claimerDetails['profileImage']!;\n-                    }\n+//                     if (isClaimed && claimerUid != null) {\n+//                       final claimerDetails =\n+//                           await _fetchUserNameAndProfilePic(claimerUid);\n+//                       postClaimerName = claimerDetails['name'] ?? 'NITH User';\n+//                       postClaimerProfilePic = claimerDetails['profileImage']!;\n+//                     }\n \n-                    return PostModel(\n-                      userName: userDetails['name'] ?? 'NITH User',\n-                      profileImageUrl: userDetails['profileImage'] ??\n-                          'https://static.wikia.nocookie.net/logopedia/images/e/ec/220px-National_Institute_of_Technology,_Hamirpur_Logo.png/revision/latest?cb=20200330143312',\n-                      postTime: _formatDate(data['timestamp']),\n-                      itemImages: List<String>.from(data['imageUrls'] ?? ''),\n-                      status: data['status'] ?? '',\n-                      title: data['item'] ?? '',\n-                      location: data['location'] ?? '',\n-                      description: data['description'] ?? '',\n-                      postmakerId: data['postmakerId'],\n-                      question: data['question'],\n-                      postId: data['postId'],\n-                      claimStatus: data['claimStatus'],\n-                      isClaimed: isClaimed,\n-                      postclaimerId: data['postClaimer'],\n-                      postClaimer:\n-                          postClaimerName.isNotEmpty ? postClaimerName : null,\n-                      postClaimerPic: postClaimerProfilePic.isNotEmpty\n-                          ? postClaimerProfilePic\n-                          : null,\n-                    );\n-                  });\n-                });\n+//                     return PostModel(\n+//                       userName: userDetails['name'] ?? 'NITH User',\n+//                       profileImageUrl: userDetails['profileImage'] ??\n+//                           'https://static.wikia.nocookie.net/logopedia/images/e/ec/220px-National_Institute_of_Technology,_Hamirpur_Logo.png/revision/latest?cb=20200330143312',\n+//                       postTime: _formatDate(data['timestamp']),\n+//                       itemImages: List<String>.from(data['imageUrls'] ?? ''),\n+//                       status: data['status'] ?? '',\n+//                       title: data['item'] ?? '',\n+//                       location: data['location'] ?? '',\n+//                       description: data['description'] ?? '',\n+//                       postmakerId: data['postmakerId'],\n+//                       question: data['question'],\n+//                       postId: data['postId'],\n+//                       claimStatus: data['claimStatus'],\n+//                       isClaimed: isClaimed,\n+//                       postclaimerId: data['postClaimer'],\n+//                       postClaimer:\n+//                           postClaimerName.isNotEmpty ? postClaimerName : null,\n+//                       postClaimerPic: postClaimerProfilePic.isNotEmpty\n+//                           ? postClaimerProfilePic\n+//                           : null,\n+//                     );\n+//                   });\n+//                 });\n \n-                return FutureBuilder<List<PostModel>>(\n-                  future: Future.wait(posts.toList()),\n-                  builder: (context, futureSnapshot) {\n-                    if (futureSnapshot.connectionState ==\n-                        ConnectionState.waiting) {\n-                      return const Center(child: CircularProgressIndicator());\n-                    }\n+//                 return FutureBuilder<List<PostModel>>(\n+//                   future: Future.wait(posts.toList()),\n+//                   builder: (context, futureSnapshot) {\n+//                     if (futureSnapshot.connectionState ==\n+//                         ConnectionState.waiting) {\n+//                       return const Center(child: CircularProgressIndicator());\n+//                     }\n \n-                    if (futureSnapshot.hasError) {\n-                      print(\"Error : ${futureSnapshot.error}\");\n-                      return const Center(child: Text('Error loading posts'));\n-                    }\n+//                     if (futureSnapshot.hasError) {\n+//                       print(\"Error : ${futureSnapshot.error}\");\n+//                       return const Center(child: Text('Error loading posts'));\n+//                     }\n \n-                    final postsList = futureSnapshot.data ?? [];\n+//                     final postsList = futureSnapshot.data ?? [];\n \n-                    return ListView.builder(\n-                      itemCount: postsList.length,\n-                      itemBuilder: (context, index) {\n-                        final post = postsList[index];\n-                        return Padding(\n-                          padding: const EdgeInsets.all(2.0),\n-                          child: Center(\n-                            child: SizedBox(\n-                              width: isMobile\n-                                  ? MediaQuery.of(context).size.width\n-                                  : 600,\n-                              child: Card(\n-                                elevation: 5,\n-                                shape: RoundedRectangleBorder(\n-                                  borderRadius: BorderRadius.circular(10),\n-                                ),\n-                                child: Column(\n-                                  crossAxisAlignment: CrossAxisAlignment.start,\n-                                  children: [\n-                                    // Header  of the POST (profiel,name.location,delete)\n-                                    GestureDetector(\n-                                      onTap: () {\n-                                        print(\n-                                            'EROROR ::: ${post.profileImageUrl}');\n-                                        Navigator.push(\n-                                            context,\n-                                            MaterialPageRoute(\n-                                                builder: (_) => ProfilePage2(\n-                                                    uid: post.postmakerId)));\n-                                      },\n-                                      child: ListTile(\n-                                        leading: CircleAvatar(\n-                                          radius: 30,\n-                                          backgroundImage: NetworkImage(\n-                                              post.profileImageUrl),\n-                                        ),\n-                                        title: Text(post.userName,\n-                                            style: const TextStyle(\n-                                                fontWeight: FontWeight.bold)),\n-                                        subtitle: Text(\n-                                            \"Location : ${post.location} , NITH\"),\n-                                        trailing: PopupMenuButton<String>(\n-                                          onSelected: (value) {\n-                                            if (value == 'Delete') {\n-                                              if (user!.uid ==\n-                                                  post.postmakerId) {\n-                                                _showDeleteConfirmation(\n-                                                    context, post);\n-                                              } else {\n-                                                ScaffoldMessenger.of(context)\n-                                                    .showSnackBar(\n-                                                  const SnackBar(\n-                                                      backgroundColor:\n-                                                          Colors.red,\n-                                                      content: Text(\n-                                                          \"You can't delete this post\")),\n-                                                );\n-                                              }\n-                                            }\n-                                          },\n-                                          itemBuilder: (BuildContext context) {\n-                                            return {'Delete'}\n-                                                .map((String choice) {\n-                                              return PopupMenuItem<String>(\n-                                                value: choice,\n-                                                child: Text(choice),\n-                                              );\n-                                            }).toList();\n-                                          },\n-                                        ),\n-                                      ),\n-                                    ),\n+//                     return ListView.builder(\n+//                       itemCount: postsList.length,\n+//                       itemBuilder: (context, index) {\n+//                         final post = postsList[index];\n+//                         return Padding(\n+//                           padding: const EdgeInsets.all(2.0),\n+//                           child: Center(\n+//                             child: SizedBox(\n+//                               width: isMobile\n+//                                   ? MediaQuery.of(context).size.width\n+//                                   : 600,\n+//                               child: Card(\n+//                                 elevation: 5,\n+//                                 shape: RoundedRectangleBorder(\n+//                                   borderRadius: BorderRadius.circular(10),\n+//                                 ),\n+//                                 child: Column(\n+//                                   crossAxisAlignment: CrossAxisAlignment.start,\n+//                                   children: [\n+//                                     // Header  of the POST (profiel,name.location,delete)\n+//                                     GestureDetector(\n+//                                       onTap: () {\n+//                                         print(\n+//                                             'EROROR ::: ${post.profileImageUrl}');\n+//                                         Navigator.push(\n+//                                             context,\n+//                                             MaterialPageRoute(\n+//                                                 builder: (_) => ProfilePage2(\n+//                                                     uid: post.postmakerId)));\n+//                                       },\n+//                                       child: ListTile(\n+//                                         leading: CircleAvatar(\n+//                                           radius: 30,\n+//                                           backgroundImage: NetworkImage(\n+//                                               post.profileImageUrl),\n+//                                         ),\n+//                                         title: Text(post.userName,\n+//                                             style: const TextStyle(\n+//                                                 fontWeight: FontWeight.bold)),\n+//                                         subtitle: Text(\n+//                                             \"Location : ${post.location} , NITH\"),\n+//                                         trailing: PopupMenuButton<String>(\n+//                                           onSelected: (value) {\n+//                                             if (value == 'Delete') {\n+//                                               if (user!.uid ==\n+//                                                   post.postmakerId) {\n+//                                                 _showDeleteConfirmation(\n+//                                                     context, post);\n+//                                               } else {\n+//                                                 ScaffoldMessenger.of(context)\n+//                                                     .showSnackBar(\n+//                                                   const SnackBar(\n+//                                                       backgroundColor:\n+//                                                           Colors.red,\n+//                                                       content: Text(\n+//                                                           \"You can't delete this post\")),\n+//                                                 );\n+//                                               }\n+//                                             }\n+//                                           },\n+//                                           itemBuilder: (BuildContext context) {\n+//                                             return {'Delete'}\n+//                                                 .map((String choice) {\n+//                                               return PopupMenuItem<String>(\n+//                                                 value: choice,\n+//                                                 child: Text(choice),\n+//                                               );\n+//                                             }).toList();\n+//                                           },\n+//                                         ),\n+//                                       ),\n+//                                     ),\n \n-                                    // LOST OR FOUND\n-                                    Stack(\n-                                      children: [\n-                                        CarouselSlider(\n-                                          options: CarouselOptions(\n-                                            autoPlay: true,\n-                                            height: 450.0,\n-                                            enlargeCenterPage: true,\n-                                          ),\n-                                          items: post.itemImages\n-                                              .map<Widget>((imageUrl) {\n-                                            return GestureDetector(\n-                                              onTap: () {\n-                                                // Open image viewer when the image is tapped\n-                                                Navigator.push(\n-                                                  context,\n-                                                  MaterialPageRoute(\n-                                                    builder: (context) =>\n-                                                        FullScreenImageViewer(\n-                                                            post.itemImages,isMobile),\n-                                                  ),\n-                                                );\n-                                              },\n-                                              child: ClipRRect(\n-                                                borderRadius:\n-                                                    BorderRadius.circular(10),\n-                                                child: Image.network(\n-                                                  imageUrl,\n-                                                  fit: BoxFit.cover,\n-                                                  width: MediaQuery.of(context)\n-                                                      .size\n-                                                      .width,\n-                                                  errorBuilder: (context, error,\n-                                                      stackTrace) {\n-                                                    return const Icon(\n-                                                        Icons.error);\n-                                                  },\n-                                                ),\n-                                              ),\n-                                            );\n-                                          }).toList(),\n-                                        ),\n-                                        Positioned(\n-                                          top: isMobile ? 16 : 6,\n-                                          left: 50,\n-                                          child: Container(\n-                                            padding: const EdgeInsets.symmetric(\n-                                                horizontal: 10, vertical: 5),\n-                                            decoration: BoxDecoration(\n-                                              color: post.status == 'Lost'\n-                                                  ? Colors.red\n-                                                  : Colors.green,\n-                                              borderRadius:\n-                                                  BorderRadius.circular(5),\n-                                            ),\n-                                            child: Text(\n-                                              post.status,\n-                                              style: const TextStyle(\n-                                                color: Colors.white,\n-                                                fontWeight: FontWeight.bold,\n-                                              ),\n-                                            ),\n-                                          ),\n-                                        ),\n-                                      ],\n-                                    ),\n+//                                     // LOST OR FOUND\n+//                                     Stack(\n+//                                       children: [\n+//                                         CarouselSlider(\n+//                                           options: CarouselOptions(\n+//                                             autoPlay: true,\n+//                                             height: 450.0,\n+//                                             enlargeCenterPage: true,\n+//                                           ),\n+//                                           items: post.itemImages\n+//                                               .map<Widget>((imageUrl) {\n+//                                             return GestureDetector(\n+//                                               onTap: () {\n+//                                                 // Open image viewer when the image is tapped\n+//                                                 Navigator.push(\n+//                                                   context,\n+//                                                   MaterialPageRoute(\n+//                                                     builder: (context) =>\n+//                                                         FullScreenImageViewer(\n+//                                                             post.itemImages,isMobile),\n+//                                                   ),\n+//                                                 );\n+//                                               },\n+//                                               child: ClipRRect(\n+//                                                 borderRadius:\n+//                                                     BorderRadius.circular(10),\n+//                                                 child: Image.network(\n+//                                                   imageUrl,\n+//                                                   fit: BoxFit.cover,\n+//                                                   width: MediaQuery.of(context)\n+//                                                       .size\n+//                                                       .width,\n+//                                                   errorBuilder: (context, error,\n+//                                                       stackTrace) {\n+//                                                     return const Icon(\n+//                                                         Icons.error);\n+//                                                   },\n+//                                                 ),\n+//                                               ),\n+//                                             );\n+//                                           }).toList(),\n+//                                         ),\n+//                                         Positioned(\n+//                                           top: isMobile ? 16 : 6,\n+//                                           left: 50,\n+//                                           child: Container(\n+//                                             padding: const EdgeInsets.symmetric(\n+//                                                 horizontal: 10, vertical: 5),\n+//                                             decoration: BoxDecoration(\n+//                                               color: post.status == 'Lost'\n+//                                                   ? Colors.red\n+//                                                   : Colors.green,\n+//                                               borderRadius:\n+//                                                   BorderRadius.circular(5),\n+//                                             ),\n+//                                             child: Text(\n+//                                               post.status,\n+//                                               style: const TextStyle(\n+//                                                 color: Colors.white,\n+//                                                 fontWeight: FontWeight.bold,\n+//                                               ),\n+//                                             ),\n+//                                           ),\n+//                                         ),\n+//                                       ],\n+//                                     ),\n \n-                                    Padding(\n-                                      padding: const EdgeInsets.symmetric(\n-                                          horizontal: 18.0, vertical: 10),\n-                                      child: Column(\n-                                        crossAxisAlignment:\n-                                            CrossAxisAlignment.start,\n-                                        children: [\n-                                          // ITEM item,date\n-                                          Row(\n-                                            mainAxisAlignment:\n-                                                MainAxisAlignment.spaceBetween,\n-                                            children: [\n-                                              Text(\n-                                                post.title == 'Other'\n-                                                    ? '${post.status} Item'\n-                                                    : post.title,\n-                                                overflow: TextOverflow.clip,\n-                                                softWrap: true,\n-                                                style: const TextStyle(\n-                                                    fontSize: 18,\n-                                                    fontWeight:\n-                                                        FontWeight.bold),\n-                                              ),\n-                                              const SizedBox(width: 5),\n-                                              Row(\n-                                                children: [\n-                                                  Text(\"${post.status} On : \",\n-                                                      overflow:\n-                                                          TextOverflow.clip,\n-                                                      softWrap: true,\n-                                                      style: const TextStyle(\n-                                                          color: Colors.red,\n-                                                          fontWeight:\n-                                                              FontWeight.bold)),\n-                                                  Text(post.postTime,\n-                                                      style: const TextStyle(\n-                                                          fontWeight:\n-                                                              FontWeight.bold)),\n-                                                ],\n-                                              ),\n-                                            ],\n-                                          ),\n-                                          const SizedBox(height: 5),\n+//                                     Padding(\n+//                                       padding: const EdgeInsets.symmetric(\n+//                                           horizontal: 18.0, vertical: 10),\n+//                                       child: Column(\n+//                                         crossAxisAlignment:\n+//                                             CrossAxisAlignment.start,\n+//                                         children: [\n+//                                           // ITEM item,date\n+//                                           Row(\n+//                                             mainAxisAlignment:\n+//                                                 MainAxisAlignment.spaceBetween,\n+//                                             children: [\n+//                                               Text(\n+//                                                 post.title == 'Other'\n+//                                                     ? '${post.status} Item'\n+//                                                     : post.title,\n+//                                                 overflow: TextOverflow.clip,\n+//                                                 softWrap: true,\n+//                                                 style: const TextStyle(\n+//                                                     fontSize: 18,\n+//                                                     fontWeight:\n+//                                                         FontWeight.bold),\n+//                                               ),\n+//                                               const SizedBox(width: 5),\n+//                                               Row(\n+//                                                 children: [\n+//                                                   Text(\"${post.status} On : \",\n+//                                                       overflow:\n+//                                                           TextOverflow.clip,\n+//                                                       softWrap: true,\n+//                                                       style: const TextStyle(\n+//                                                           color: Colors.red,\n+//                                                           fontWeight:\n+//                                                               FontWeight.bold)),\n+//                                                   Text(post.postTime,\n+//                                                       style: const TextStyle(\n+//                                                           fontWeight:\n+//                                                               FontWeight.bold)),\n+//                                                 ],\n+//                                               ),\n+//                                             ],\n+//                                           ),\n+//                                           const SizedBox(height: 5),\n \n-                                          //DESCRIPTION\n-                                          Row(\n-                                            crossAxisAlignment: CrossAxisAlignment\n-                                                .start, // Align text to the top\n-                                            children: [\n-                                              const Text(\n-                                                \"Description : \",\n-                                                style: TextStyle(\n-                                                  fontWeight: FontWeight.bold,\n-                                                ),\n-                                              ),\n-                                              const SizedBox(width: 4),\n-                                              Expanded(\n-                                                child: Text(\n-                                                  post.description,\n-                                                  overflow: TextOverflow.clip,\n-                                                  softWrap: true,\n-                                                  style: const TextStyle(\n-                                                    fontSize: 14,\n-                                                  ),\n-                                                ),\n-                                              ),\n-                                            ],\n-                                          ),\n-                                          const SizedBox(height: 10),\n+//                                           //DESCRIPTION\n+//                                           Row(\n+//                                             crossAxisAlignment: CrossAxisAlignment\n+//                                                 .start, // Align text to the top\n+//                                             children: [\n+//                                               const Text(\n+//                                                 \"Description : \",\n+//                                                 style: TextStyle(\n+//                                                   fontWeight: FontWeight.bold,\n+//                                                 ),\n+//                                               ),\n+//                                               const SizedBox(width: 4),\n+//                                               Expanded(\n+//                                                 child: Text(\n+//                                                   post.description,\n+//                                                   overflow: TextOverflow.clip,\n+//                                                   softWrap: true,\n+//                                                   style: const TextStyle(\n+//                                                     fontSize: 14,\n+//                                                   ),\n+//                                                 ),\n+//                                               ),\n+//                                             ],\n+//                                           ),\n+//                                           const SizedBox(height: 10),\n \n-                                          //BUTTONNS\n-                                          StreamBuilder<QuerySnapshot>(\n-                                              stream: FirebaseFirestore.instance\n-                                                  .collection('posts')\n-                                                  .doc(post.postId)\n-                                                  .collection('claims')\n-                                                  .where('senderId',\n-                                                      isEqualTo: user!.uid)\n-                                                  .snapshots(),\n-                                              builder:\n-                                                  (context, claimSnapshot) {\n-                                                if (claimSnapshot\n-                                                        .connectionState ==\n-                                                    ConnectionState.waiting) {\n-                                                  return const Center(\n-                                                      child:\n-                                                          CircularProgressIndicator());\n-                                                }\n+//                                           //BUTTONNS\n+//                                           StreamBuilder<QuerySnapshot>(\n+//                                               stream: FirebaseFirestore.instance\n+//                                                   .collection('posts')\n+//                                                   .doc(post.postId)\n+//                                                   .collection('claims')\n+//                                                   .where('senderId',\n+//                                                       isEqualTo: user!.uid)\n+//                                                   .snapshots(),\n+//                                               builder:\n+//                                                   (context, claimSnapshot) {\n+//                                                 if (claimSnapshot\n+//                                                         .connectionState ==\n+//                                                     ConnectionState.waiting) {\n+//                                                   return const Center(\n+//                                                       child:\n+//                                                           CircularProgressIndicator());\n+//                                                 }\n \n-                                                bool userHasRequestedClaim =\n-                                                    false;\n+//                                                 bool userHasRequestedClaim =\n+//                                                     false;\n \n-                                                if (claimSnapshot.hasData &&\n-                                                    claimSnapshot.data!.docs\n-                                                        .isNotEmpty) {\n-                                                  final claimData =\n-                                                      claimSnapshot\n-                                                              .data!.docs.first\n-                                                              .data()\n-                                                          as Map<String,\n-                                                              dynamic>;\n+//                                                 if (claimSnapshot.hasData &&\n+//                                                     claimSnapshot.data!.docs\n+//                                                         .isNotEmpty) {\n+//                                                   final claimData =\n+//                                                       claimSnapshot\n+//                                                               .data!.docs.first\n+//                                                               .data()\n+//                                                           as Map<String,\n+//                                                               dynamic>;\n \n-                                                  if (claimData[\n-                                                          'claimStatusC'] ==\n-                                                      'requested') {\n-                                                    userHasRequestedClaim =\n-                                                        true;\n-                                                  }\n-                                                  if (claimData[\n-                                                              'claimStatusC'] ==\n-                                                          'accepted' ||\n-                                                      claimData[\n-                                                              'claimStatusC'] ==\n-                                                          'declined') {\n-                                                    userHasRequestedClaim =\n-                                                        false;\n-                                                  }\n-                                                }\n+//                                                   if (claimData[\n+//                                                           'claimStatusC'] ==\n+//                                                       'requested') {\n+//                                                     userHasRequestedClaim =\n+//                                                         true;\n+//                                                   }\n+//                                                   if (claimData[\n+//                                                               'claimStatusC'] ==\n+//                                                           'accepted' ||\n+//                                                       claimData[\n+//                                                               'claimStatusC'] ==\n+//                                                           'declined') {\n+//                                                     userHasRequestedClaim =\n+//                                                         false;\n+//                                                   }\n+//                                                 }\n \n-                                                return Row(\n-                                                    mainAxisAlignment:\n-                                                        MainAxisAlignment\n-                                                            .spaceAround,\n-                                                    children: [\n-                                                      GestureDetector(\n-                                                        onTap: () {\n-                                                          _sharePost(\n-                                                              context,\n-                                                              post.title,\n-                                                              post.description);\n-                                                        },\n-                                                        child: const Row(\n-                                                          children: [\n-                                                            Icon(Icons\n-                                                                .share_rounded),\n-                                                            SizedBox(width: 3),\n-                                                            Text('Share'),\n-                                                          ],\n-                                                        ),\n-                                                      ),\n-                                                      if (post.postmakerId !=\n-                                                          user!.uid)\n-                                                        ElevatedButton(\n-                                                          onPressed: () {\n-                                                            _replyToPostmaker(\n-                                                                context,\n-                                                                post.postmakerId,\n-                                                                post.userName,\n-                                                                post.postId);\n-                                                          },\n-                                                          style: ElevatedButton\n-                                                              .styleFrom(\n-                                                            backgroundColor:\n-                                                                Colors.green\n-                                                                    .shade600,\n-                                                            shape:\n-                                                                RoundedRectangleBorder(\n-                                                              borderRadius:\n-                                                                  BorderRadius\n-                                                                      .circular(\n-                                                                          10),\n-                                                            ),\n-                                                          ),\n-                                                          child: const Row(\n-                                                            mainAxisAlignment:\n-                                                                MainAxisAlignment\n-                                                                    .center,\n-                                                            children: [\n\\ No newline at end of file\n-                                                              Icon(Icons.reply,\n-                                                                  color: Colors\n-                                                                      .white),\n-                                                              SizedBox(\n-                                                                  width: 3),\n-                                                              Text(\n-                                                                'Reply',\n-                                                                style: TextStyle(\n-                                                                    fontSize:\n-                                                                        16,\n-                                                                    color: Colors\n-                                                                        .white),\n-                                                              ),\n-                                                            ],\n-                                                          ),\n-                                                        ),\n+//                                                 return Row(\n+//                                                     mainAxisAlignment:\n+//                                                         MainAxisAlignment\n+//                                                             .spaceAround,\n+//                                                     children: [\n+//                                                       GestureDetector(\n+//                                                         onTap: () {\n+//                                                           _sharePost(\n+//                                                               context,\n+//                                                               post.title,\n+//                                                               post.description);\n+//                                                         },\n+//                                                         child: const Row(\n+//                                                           children: [\n+//                                                             Icon(Icons\n+//                                                                 .share_rounded),\n+//                                                             SizedBox(width: 3),\n+//                                                             Text('Share'),\n+//                                                           ],\n+//                                                         ),\n+//                                                       ),\n+//                                                       if (post.postmakerId !=\n+//                                                           user!.uid)\n+//                                                         ElevatedButton(\n+//                                                           onPressed: () {\n+//                                                             _replyToPostmaker(\n+//                                                                 context,\n+//                                                                 post.postmakerId,\n+//                                                                 post.userName,\n+//                                                                 post.postId);\n+//                                                           },\n+//                                                           style: ElevatedButton\n+//                                                               .styleFrom(\n+//                                                             backgroundColor:\n+//                                                                 Colors.green\n+//                                                                     .shade600,\n+//                                                             shape:\n+//                                                                 RoundedRectangleBorder(\n+//                                                               borderRadius:\n+//                                                                   BorderRadius\n+//                                                                       .circular(\n+//                                                                           10),\n+//                                                             ),\n+//                                                           ),\n+//                                                           child: const Row(\n+//                                                             mainAxisAlignment:\n+//                                                                 MainAxisAlignment\n+//                                                                     .center,\n+//                                                             children: [\n+//                                                               Icon(Icons.reply,\n+//                                                                   color: Colors\n+//                                                                       .white),\n+//                                                               SizedBox(\n+//                                                                   width: 3),\n+//                                                               Text(\n+//                                                                 'Reply',\n+//                                                                 style: TextStyle(\n+//                                                                     fontSize:\n+//                                                                         16,\n+//                                                                     color: Colors\n+//                                                                         .white),\n+//                                                               ),\n+//                                                             ],\n+//                                                           ),\n+//                                                         ),\n \n-                                                      //Claimed Button\n-                                                      if (post.status !=\n-                                                              'Lost' &&\n-                                                          post.isClaimed ==\n-                                                              true)\n-                                                        ElevatedButton(\n-                                                          onPressed: () {\n-                                                            _claimedPost(\n-                                                                context,\n-                                                                post.postclaimerId!,\n-                                                                post.title,\n-                                                                post.postClaimer!,\n-                                                                post.postId);\n-                                                          },\n-                                                          style: ElevatedButton\n-                                                              .styleFrom(\n-                                                            backgroundColor:\n-                                                                Colors\n-                                                                    .deepOrange\n-                                                                    .shade600,\n-                                                            shape:\n-                                                                RoundedRectangleBorder(\n-                                                              borderRadius:\n-                                                                  BorderRadius\n-                                                                      .circular(\n-                                                                          10),\n-                                                            ),\n-                                                          ),\n-                                                          child: const Row(\n-                                                            mainAxisAlignment:\n-                                                                MainAxisAlignment\n-                                                                    .center,\n-                                                            children: [\n-                                                              Icon(\n-                                                                  Icons\n-                                                                      .back_hand,\n-                                                                  color: Colors\n-                                                                      .white),\n-                                                              SizedBox(\n-                                                                  width: 3),\n-                                                              Text(\n-                                                                'Claimed',\n-                                                                style: TextStyle(\n-                                                                    fontSize:\n-                                                                        16,\n-                                                                    color: Colors\n-                                                                        .white),\n-                                                              ),\n-                                                            ],\n-                                                          ),\n-                                                        ),\n+//                                                       //Claimed Button\n+//                                                       if (post.status !=\n+//                                                               'Lost' &&\n+//                                                           post.isClaimed ==\n+//                                                               true)\n+//                                                         ElevatedButton(\n+//                                                           onPressed: () {\n+//                                                             _claimedPost(\n+//                                                                 context,\n+//                                                                 post.postclaimerId!,\n+//                                                                 post.title,\n+//                                                                 post.postClaimer!,\n+//                                                                 post.postId);\n+//                                                           },\n+//                                                           style: ElevatedButton\n+//                                                               .styleFrom(\n+//                                                             backgroundColor:\n+//                                                                 Colors\n+//                                                                     .deepOrange\n+//                                                                     .shade600,\n+//                                                             shape:\n+//                                                                 RoundedRectangleBorder(\n+//                                                               borderRadius:\n+//                                                                   BorderRadius\n+//                                                                       .circular(\n+//                                                                           10),\n+//                                                             ),\n+//                                                           ),\n+//                                                           child: const Row(\n+//                                                             mainAxisAlignment:\n+//                                                                 MainAxisAlignment\n+//                                                                     .center,\n+//                                                             children: [\n+//                                                               Icon(\n+//                                                                   Icons\n+//                                                                       .back_hand,\n+//                                                                   color: Colors\n+//                                                                       .white),\n+//                                                               SizedBox(\n+//                                                                   width: 3),\n+//                                                               Text(\n+//                                                                 'Claimed',\n+//                                                                 style: TextStyle(\n+//                                                                     fontSize:\n+//                                                                         16,\n+//                                                                     color: Colors\n+//                                                                         .white),\n+//                                                               ),\n+//                                                             ],\n+//                                                           ),\n+//                                                         ),\n \n-                                                      // Claim Buttton\n-                                                      if (post.postmakerId !=\n-                                                              user!.uid &&\n-                                                          post.status ==\n-                                                              'Found' &&\n-                                                          post.isClaimed ==\n-                                                              false &&\n-                                                          !userHasRequestedClaim)\n-                                                        ElevatedButton(\n-                                                          onPressed: () {\n-                                                            _claimPost(\n-                                                                context,\n-                                                                post.postmakerId,\n-                                                                post.title,\n-                                                                post.question!,\n-                                                                post.description,\n-                                                                post.postId);\n-                                                          },\n-                                                          style: ElevatedButton\n-                                                              .styleFrom(\n-                                                            backgroundColor:\n-                                                                Colors\n-                                                                    .deepOrange\n-                                                                    .shade600,\n-                                                            shape:\n-                                                                RoundedRectangleBorder(\n-                                                              borderRadius:\n-                                                                  BorderRadius\n-                                                                      .circular(\n-                                                                          10),\n-                                                            ),\n-                                                          ),\n-                                                          child: const Row(\n-                                                            mainAxisAlignment:\n-                                                                MainAxisAlignment\n-                                                                    .center,\n-                                                            children: [\n-                                                              Icon(\n-                                                                  Icons\n-                                                                      .back_hand,\n-                                                                  color: Colors\n-                                                                      .white),\n-                                                              SizedBox(\n-                                                                  width: 6),\n-                                                              Text(\n-                                                                'Claim',\n-                                                                style: TextStyle(\n-                                                                    fontSize:\n-                                                                        16,\n-                                                                    color: Colors\n-                                                                        .white),\n-                                                              ),\n-                                                            ],\n-                                                          ),\n-                                                        ),\n+//                                                       // Claim Buttton\n+//                                                       if (post.postmakerId !=\n+//                                                               user!.uid &&\n+//                                                           post.status ==\n+//                                                               'Found' &&\n+//                                                           post.isClaimed ==\n+//                                                               false &&\n+//                                                           !userHasRequestedClaim)\n+//                                                         ElevatedButton(\n+//                                                           onPressed: () {\n+//                                                             _claimPost(\n+//                                                                 context,\n+//                                                                 post.postmakerId,\n+//                                                                 post.title,\n+//                                                                 post.question!,\n+//                                                                 post.description,\n+//                                                                 post.postId);\n+//                                                           },\n+//                                                           style: ElevatedButton\n+//                                                               .styleFrom(\n+//                                                             backgroundColor:\n+//                                                                 Colors\n+//                                                                     .deepOrange\n+//                                                                     .shade600,\n+//                                                             shape:\n+//                                                                 RoundedRectangleBorder(\n+//                                                               borderRadius:\n+//                                                                   BorderRadius\n+//                                                                       .circular(\n+//                                                                           10),\n+//                                                             ),\n+//                                                           ),\n+//                                                           child: const Row(\n+//                                                             mainAxisAlignment:\n+//                                                                 MainAxisAlignment\n+//                                                                     .center,\n+//                                                             children: [\n+//                                                               Icon(\n+//                                                                   Icons\n+//                                                                       .back_hand,\n+//                                                                   color: Colors\n+//                                                                       .white),\n+//                                                               SizedBox(\n+//                                                                   width: 6),\n+//                                                               Text(\n+//                                                                 'Claim',\n+//                                                                 style: TextStyle(\n+//                                                                     fontSize:\n+//                                                                         16,\n+//                                                                     color: Colors\n+//                                                                         .white),\n+//                                                               ),\n+//                                                             ],\n+//                                                           ),\n+//                                                         ),\n \n-                                                      // Request Button\n-                                                      if (post.postmakerId !=\n-                                                              user!.uid &&\n-                                                          post.status ==\n-                                                              'Found' &&\n-                                                          post.isClaimed ==\n-                                                              false &&\n-                                                          userHasRequestedClaim)\n-                                                        ElevatedButton(\n-                                                          onPressed: () {},\n-                                                          style: ElevatedButton\n-                                                              .styleFrom(\n-                                                            backgroundColor:\n-                                                                Colors\n-                                                                    .deepOrange\n-                                                                    .shade600,\n-                                                            shape:\n-                                                                RoundedRectangleBorder(\n-                                                              borderRadius:\n-                                                                  BorderRadius\n-                                                                      .circular(\n-                                                                          10),\n-                                                            ),\n-                                                          ),\n-                                                          child: const Row(\n-                                                            mainAxisAlignment:\n-                                                                MainAxisAlignment\n-                                                                    .center,\n-                                                            children: [\n-                                                              Icon(\n-                                                                  Icons\n-                                                                      .back_hand,\n-                                                                  color: Colors\n-                                                                      .white),\n-                                                              SizedBox(\n-                                                                  width: 3),\n-                                                              Text(\n-                                                                'Requested',\n-                                                                style: TextStyle(\n-                                                                    fontSize:\n-                                                                        16,\n-                                                                    color: Colors\n-                                                                        .white),\n-                                                              ),\n-                                                            ],\n-                                                          ),\n-                                                        )\n-                                                    ]);\n-                                              })\n-                                        ],\n-                                      ),\n-                                    ),\n-                                  ],\n-                                ),\n-                              ),\n-                            ),\n-                          ),\n-                        );\n-                      },\n-                    );\n-                  },\n-                );\n-              },\n-            ),\n-          ),\n-        ],\n-      ),\n-    );\n-  }\n+//                                                       // Request Button\n+//                                                       if (post.postmakerId !=\n+//                                                               user!.uid &&\n+//                                                           post.status ==\n+//                                                               'Found' &&\n+//                                                           post.isClaimed ==\n+//                                                               false &&\n+//                                                           userHasRequestedClaim)\n+//                                                         ElevatedButton(\n+//                                                           onPressed: () {},\n+//                                                           style: ElevatedButton\n+//                                                               .styleFrom(\n+//                                                             backgroundColor:\n+//                                                                 Colors\n+//                                                                     .deepOrange\n+//                                                                     .shade600,\n+//                                                             shape:\n+//                                                                 RoundedRectangleBorder(\n+//                                                               borderRadius:\n+//                                                                   BorderRadius\n+//                                                                       .circular(\n+//                                                                           10),\n+//                                                             ),\n+//                                                           ),\n+//                                                           child: const Row(\n+//                                                             mainAxisAlignment:\n+//                                                                 MainAxisAlignment\n+//                                                                     .center,\n+//                                                             children: [\n+//                                                               Icon(\n+//                                                                   Icons\n+//                                                                       .back_hand,\n+//                                                                   color: Colors\n+//                                                                       .white),\n+//                                                               SizedBox(\n+//                                                                   width: 3),\n+//                                                               Text(\n+//                                                                 'Requested',\n+//                                                                 style: TextStyle(\n+//                                                                     fontSize:\n+//                                                                         16,\n+//                                                                     color: Colors\n+//                                                                         .white),\n+//                                                               ),\n+//                                                             ],\n+//                                                           ),\n+//                                                         )\n+//                                                     ]);\n+//                                               })\n+//                                         ],\n+//                                       ),\n+//                                     ),\n+//                                   ],\n+//                                 ),\n+//                               ),\n+//                             ),\n+//                           ),\n+//                         );\n+//                       },\n+//                     );\n+//                   },\n+//                 );\n+//               },\n+//             ),\n+//           ),\n+//         ],\n+//       ),\n+//     );\n+//   }\n \n-  void _replyToPostmaker(BuildContext context, String postmakerId,\n-      String postmaker, String postId) {\n-    TextEditingController messageController = TextEditingController();\n+//   void _replyToPostmaker(BuildContext context, String postmakerId,\n+//       String postmaker, String postId) {\n+//     TextEditingController messageController = TextEditingController();\n \n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Send a Reply'),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              Row(\n-                children: [\n-                  const Text('Reply to'),\n-                  TextButton(\n-                      onPressed: () {\n-                        Navigator.push(\n-                            context,\n-                            MaterialPageRoute(\n-                                builder: (_) =>\n-                                    ProfilePage2(uid: postmakerId)));\n-                      },\n-                      child: Text(postmaker))\n-                ],\n-              ),\n-              const SizedBox(height: 10),\n-              TextField(\n-                controller: messageController,\n-                decoration: const InputDecoration(\n-                  labelText: 'Your message',\n-                  alignLabelWithHint: true,\n-                  border: OutlineInputBorder(),\n-                ),\n-                maxLines: 3,\n-              ),\n-            ],\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () {\n-                Navigator.of(context).pop(); // Close the dialog without sending\n-              },\n-              child: const Text('Cancel'),\n-            ),\n-            TextButton(\n-              onPressed: () {\n-                String message = messageController.text.trim();\n-                if (message.isNotEmpty) {\n-                  _sendMessageToPostmaker(\n-                      context, postmakerId, message, postId);\n-                }\n-                ScaffoldMessenger.of(context).showSnackBar(\n-                  const SnackBar(\n-                    content: Text('Message sent successfully'),\n-                    behavior: SnackBarBehavior.floating,\n-                    margin: EdgeInsets.all(16.0),\n-                  ),\n-                );\n-                Navigator.of(context).pop(); // Close the dialog after sending\n-              },\n-              child: const Text('Send'),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+//     showDialog(\n+//       context: context,\n+//       builder: (BuildContext context) {\n+//         return AlertDialog(\n+//           title: const Text('Send a Reply'),\n+//           content: Column(\n+//             mainAxisSize: MainAxisSize.min,\n+//             children: [\n+//               Row(\n+//                 children: [\n+//                   const Text('Reply to'),\n+//                   TextButton(\n+//                       onPressed: () {\n+//                         Navigator.push(\n+//                             context,\n+//                             MaterialPageRoute(\n+//                                 builder: (_) =>\n+//                                     ProfilePage2(uid: postmakerId)));\n+//                       },\n+//                       child: Text(postmaker))\n+//                 ],\n+//               ),\n+//               const SizedBox(height: 10),\n+//               TextField(\n+//                 controller: messageController,\n+//                 decoration: const InputDecoration(\n+//                   labelText: 'Your message',\n+//                   alignLabelWithHint: true,\n+//                   border: OutlineInputBorder(),\n+//                 ),\n+//                 maxLines: 3,\n+//               ),\n+//             ],\n+//           ),\n+//           actions: [\n+//             TextButton(\n+//               onPressed: () {\n+//                 Navigator.of(context).pop(); // Close the dialog without sending\n+//               },\n+//               child: const Text('Cancel'),\n+//             ),\n+//             TextButton(\n+//               onPressed: () {\n+//                 String message = messageController.text.trim();\n+//                 if (message.isNotEmpty) {\n+//                   _sendMessageToPostmaker(\n+//                       context, postmakerId, message, postId);\n+//                 }\n+//                 ScaffoldMessenger.of(context).showSnackBar(\n+//                   const SnackBar(\n+//                     content: Text('Message sent successfully'),\n+//                     behavior: SnackBarBehavior.floating,\n+//                     margin: EdgeInsets.all(16.0),\n+//                   ),\n+//                 );\n+//                 Navigator.of(context).pop(); // Close the dialog after sending\n+//               },\n+//               child: const Text('Send'),\n+//             ),\n+//           ],\n+//         );\n+//       },\n+//     );\n+//   }\n \n-  Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n-      String message, String postId) async {\n-    try {\n-      // Add a chat message to Firestore\n-      await FirebaseFirestore.instance.collection('chats').add({\n-        'senderId': user!.uid,\n-        'receiverId': postmakerId,\n-        'participants': [user!.uid, postmakerId],\n-        'message': message,\n-        'postId': postId,\n-        'timestamp': Timestamp.now(),\n-      });\n+//   Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n+//       String message, String postId) async {\n+//     try {\n+//       // Add a chat message to Firestore\n+//       await FirebaseFirestore.instance.collection('chats').add({\n+//         'senderId': user!.uid,\n+//         'receiverId': postmakerId,\n+//         'participants': [user!.uid, postmakerId],\n+//         'message': message,\n+//         'postId': postId,\n+//         'timestamp': Timestamp.now(),\n+//       });\n \n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          content: Text('Message sent successfully'),\n-          behavior: SnackBarBehavior.floating,\n-          margin: EdgeInsets.all(16.0),\n-        ),\n-      );\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-          content: Text('Failed to send message: $e'),\n-          backgroundColor: Colors.red,\n-        ),\n-      );\n-    }\n-  }\n+//       ScaffoldMessenger.of(context).showSnackBar(\n+//         const SnackBar(\n+//           content: Text('Message sent successfully'),\n+//           behavior: SnackBarBehavior.floating,\n+//           margin: EdgeInsets.all(16.0),\n+//         ),\n+//       );\n+//     } catch (e) {\n+//       ScaffoldMessenger.of(context).showSnackBar(\n+//         SnackBar(\n+//           content: Text('Failed to send message: $e'),\n+//           backgroundColor: Colors.red,\n+//         ),\n+//       );\n+//     }\n+//   }\n \n-  void _claimPost(BuildContext context, String postmakerId, String postTitle,\n-      String postQuestion, String postdescription, String postId) {\n-    TextEditingController answerController = TextEditingController();\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Claim Item'),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              const Text('Question from the post owner:'),\n-              const SizedBox(height: 10),\n-              Text(postQuestion,\n-                  style: const TextStyle(fontWeight: FontWeight.bold)),\n-              const SizedBox(height: 20),\n-              TextField(\n-                controller: answerController,\n-                decoration: const InputDecoration(\n-                  labelText: 'Your answer',\n-                  alignLabelWithHint: true,\n-                  border: OutlineInputBorder(),\n-                ),\n-                maxLines: 3,\n-              ),\n-            ],\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () {\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Cancel'),\n-            ),\n-            TextButton(\n-              onPressed: () {\n-                String answer = answerController.text.trim();\n-                if (answer.isNotEmpty) {\n-                  _sendAnswerToPostmaker(\n-                      context, answer, postId, postmakerId, 'requested');\n-                }\n-                ScaffoldMessenger.of(context).showSnackBar(\n-                  const SnackBar(\n-                    content: Text('Request sent successfully'),\n-                    behavior: SnackBarBehavior.floating,\n-                    margin: EdgeInsets.all(16.0),\n-                  ),\n-                );\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Send'),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+//   void _claimPost(BuildContext context, String postmakerId, String postTitle,\n+//       String postQuestion, String postdescription, String postId) {\n+//     TextEditingController answerController = TextEditingController();\n+//     showDialog(\n+//       context: context,\n+//       builder: (BuildContext context) {\n+//         return AlertDialog(\n+//           title: const Text('Claim Item'),\n+//           content: Column(\n+//             mainAxisSize: MainAxisSize.min,\n+//             children: [\n+//               const Text('Question from the post owner:'),\n+//               const SizedBox(height: 10),\n+//               Text(postQuestion,\n+//                   style: const TextStyle(fontWeight: FontWeight.bold)),\n+//               const SizedBox(height: 20),\n+//               TextField(\n+//                 controller: answerController,\n+//                 decoration: const InputDecoration(\n+//                   labelText: 'Your answer',\n+//                   alignLabelWithHint: true,\n+//                   border: OutlineInputBorder(),\n+//                 ),\n+//                 maxLines: 3,\n+//               ),\n+//             ],\n+//           ),\n+//           actions: [\n+//             TextButton(\n+//               onPressed: () {\n+//                 Navigator.of(context).pop();\n+//               },\n+//               child: const Text('Cancel'),\n+//             ),\n+//             TextButton(\n+//               onPressed: () {\n+//                 String answer = answerController.text.trim();\n+//                 if (answer.isNotEmpty) {\n+//                   _sendAnswerToPostmaker(\n+//                       context, answer, postId, postmakerId, 'requested');\n+//                 }\n+//                 ScaffoldMessenger.of(context).showSnackBar(\n+//                   const SnackBar(\n+//                     content: Text('Request sent successfully'),\n+//                     behavior: SnackBarBehavior.floating,\n+//                     margin: EdgeInsets.all(16.0),\n+//                   ),\n+//                 );\n+//                 Navigator.of(context).pop();\n+//               },\n+//               child: const Text('Send'),\n+//             ),\n+//           ],\n+//         );\n+//       },\n+//     );\n+//   }\n \n-  void _claimedPost(BuildContext context, String postclaimerId,\n-      String postTitle, String claimername, String postId) {\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: Text('Claimed Item : $postTitle',\n-              style:\n-                  const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              Row(\n-                children: [\n-                  const Text('Already claimed by :',\n-                      style: TextStyle(fontWeight: FontWeight.bold)),\n-                  TextButton(\n-                      onPressed: () {\n-                        Navigator.push(\n-                            context,\n-                            MaterialPageRoute(\n-                                builder: (_) =>\n-                                    ProfilePage2(uid: postclaimerId)));\n-                      },\n-                      child: Text(\n-                          user!.uid == postclaimerId ? 'You' : claimername,\n-                          style: const TextStyle(fontWeight: FontWeight.bold))),\n-                ],\n-              ),\n-              const SizedBox(height: 10),\n-            ],\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () {\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Cancel'),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+//   void _claimedPost(BuildContext context, String postclaimerId,\n+//       String postTitle, String claimername, String postId) {\n+//     showDialog(\n+//       context: context,\n+//       builder: (BuildContext context) {\n+//         return AlertDialog(\n+//           title: Text('Claimed Item : $postTitle',\n+//               style:\n+//                   const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n+//           content: Column(\n+//             mainAxisSize: MainAxisSize.min,\n+//             children: [\n+//               Row(\n+//                 children: [\n+//                   const Text('Already claimed by :',\n+//                       style: TextStyle(fontWeight: FontWeight.bold)),\n+//                   TextButton(\n+//                       onPressed: () {\n+//                         Navigator.push(\n+//                             context,\n+//                             MaterialPageRoute(\n+//                                 builder: (_) =>\n+//                                     ProfilePage2(uid: postclaimerId)));\n+//                       },\n+//                       child: Text(\n+//                           user!.uid == postclaimerId ? 'You' : claimername,\n+//                           style: const TextStyle(fontWeight: FontWeight.bold))),\n+//                 ],\n+//               ),\n+//               const SizedBox(height: 10),\n+//             ],\n+//           ),\n+//           actions: [\n+//             TextButton(\n+//               onPressed: () {\n+//                 Navigator.of(context).pop();\n+//               },\n+//               child: const Text('Cancel'),\n+//             ),\n+//           ],\n+//         );\n+//       },\n+//     );\n+//   }\n \n-  Future<void> _sendAnswerToPostmaker(\n-    BuildContext context,\n-    String answer,\n-    String postId,\n-    String postmakerId,\n-    String statusofRequest,\n-  ) async {\n-    try {\n-      // Reference to the specific post's claims subcollection\n-      CollectionReference claimsRef = FirebaseFirestore.instance\n-          .collection('posts')\n-          .doc(postId) // Get the post document using its ID\n-          .collection('claims'); // Access the subcollection\n+//   Future<void> _sendAnswerToPostmaker(\n+//     BuildContext context,\n+//     String answer,\n+//     String postId,\n+//     String postmakerId,\n+//     String statusofRequest,\n+//   ) async {\n+//     try {\n+//       // Reference to the specific post's claims subcollection\n+//       CollectionReference claimsRef = FirebaseFirestore.instance\n+//           .collection('posts')\n+//           .doc(postId) // Get the post document using its ID\n+//           .collection('claims'); // Access the subcollection\n \n-      // Add a new claim document\n-      await claimsRef.add({\n-        'senderId': user!.uid,\n-        'answer': answer,\n-        'claimStatusC': statusofRequest,\n-        'timestamp': Timestamp.now(),\n-        'isClaimed': false,\n-        'receiverId': postmakerId,\n-      });\n+//       // Add a new claim document\n+//       await claimsRef.add({\n+//         'senderId': user!.uid,\n+//         'answer': answer,\n+//         'claimStatusC': statusofRequest,\n+//         'timestamp': Timestamp.now(),\n+//         'isClaimed': false,\n+//         'receiverId': postmakerId,\n+//       });\n \n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          content: Text('Your answer has been sent to the post maker'),\n-          behavior: SnackBarBehavior.floating,\n-          margin: EdgeInsets.all(16.0),\n-        ),\n-      );\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-          content: Text('Failed to send answer: $e'),\n-          backgroundColor: Colors.red,\n-        ),\n-      );\n-    }\n-  }\n+//       ScaffoldMessenger.of(context).showSnackBar(\n+//         const SnackBar(\n+//           content: Text('Your answer has been sent to the post maker'),\n+//           behavior: SnackBarBehavior.floating,\n+//           margin: EdgeInsets.all(16.0),\n+//         ),\n+//       );\n+//     } catch (e) {\n+//       ScaffoldMessenger.of(context).showSnackBar(\n+//         SnackBar(\n+//           content: Text('Failed to send answer: $e'),\n+//           backgroundColor: Colors.red,\n+//         ),\n+//       );\n+//     }\n+//   }\n \n-  void _sharePost(BuildContext context, String title, String description) {\n-    final content = 'Check out this post: $title\\nDescription: $description';\n-    final snackBar = SnackBar(content: Text('Shared! $content'));\n-    ScaffoldMessenger.of(context).showSnackBar(snackBar);\n-  }\n+//   void _sharePost(BuildContext context, String title, String description) {\n+//     final content = 'Check out this post: $title\\nDescription: $description';\n+//     final snackBar = SnackBar(content: Text('Shared! $content'));\n+//     ScaffoldMessenger.of(context).showSnackBar(snackBar);\n+//   }\n \n-  void _showDeleteConfirmation(BuildContext context, PostModel post) {\n-    // postId = post.postId;\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Delete Post'),\n-          content: const Text(\n-            'Are you sure you want to delete this post?',\n-            style: TextStyle(fontWeight: FontWeight.w700),\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () async {\n-                // Call your delete functionality here\n-                ScaffoldMessenger.of(context).showSnackBar(\n-                  const SnackBar(\n-                      backgroundColor: Colors.deepOrange,\n-                      content: Text('Post deleted successfully')),\n-                );\n+//   void _showDeleteConfirmation(BuildContext context, PostModel post) {\n+//     // postId = post.postId;\n+//     showDialog(\n+//       context: context,\n+//       builder: (BuildContext context) {\n+//         return AlertDialog(\n+//           title: const Text('Delete Post'),\n+//           content: const Text(\n+//             'Are you sure you want to delete this post?',\n+//             style: TextStyle(fontWeight: FontWeight.w700),\n+//           ),\n+//           actions: [\n+//             TextButton(\n+//               onPressed: () async {\n+//                 // Call your delete functionality here\n+//                 ScaffoldMessenger.of(context).showSnackBar(\n+//                   const SnackBar(\n+//                       backgroundColor: Colors.deepOrange,\n+//                       content: Text('Post deleted successfully')),\n+//                 );\n \n-                await _deletePost(context, post.postId);\n+//                 await _deletePost(context, post.postId);\n \n-                Navigator.of(context).pop();\n-              },\n-              child: const Text(\n-                'Yes',\n-                style: TextStyle(fontWeight: FontWeight.bold),\n-              ),\n-            ),\n-            TextButton(\n-              onPressed: () => Navigator.of(context).pop(),\n-              child: const Text(\n-                'No',\n-                style: TextStyle(fontWeight: FontWeight.bold),\n-              ),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+//                 Navigator.of(context).pop();\n+//               },\n+//               child: const Text(\n+//                 'Yes',\n+//                 style: TextStyle(fontWeight: FontWeight.bold),\n+//               ),\n+//             ),\n+//             TextButton(\n+//               onPressed: () => Navigator.of(context).pop(),\n+//               child: const Text(\n+//                 'No',\n+//                 style: TextStyle(fontWeight: FontWeight.bold),\n+//               ),\n+//             ),\n+//           ],\n+//         );\n+//       },\n+//     );\n+//   }\n \n-  void _showFullImageDialog(BuildContext context, String imageUrl) {\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return Dialog(\n-          child: Stack(\n-            children: [\n-              Image.network(imageUrl),\n-              Positioned(\n-                right: 10,\n-                top: 10,\n-                child: IconButton(\n-                  icon: const Icon(Icons.cancel, color: Colors.red),\n-                  onPressed: () {\n-                    Navigator.of(context).pop();\n-                  },\n-                ),\n-              ),\n-            ],\n-          ),\n-        );\n-      },\n-    );\n-  }\n-}\n+//   void _showFullImageDialog(BuildContext context, String imageUrl) {\n+//     showDialog(\n+//       context: context,\n+//       builder: (BuildContext context) {\n+//         return Dialog(\n+//           child: Stack(\n+//             children: [\n+//               Image.network(imageUrl),\n+//               Positioned(\n+//                 right: 10,\n+//                 top: 10,\n+//                 child: IconButton(\n+//                   icon: const Icon(Icons.cancel, color: Colors.red),\n+//                   onPressed: () {\n+//                     Navigator.of(context).pop();\n+//                   },\n+//                 ),\n+//               ),\n+//             ],\n+//           ),\n+//         );\n+//       },\n+//     );\n+//   }\n+// }\n \n-class FullScreenImageViewer extends StatefulWidget {\n-  final List<String> images;\n-  bool isMobile;\n-   FullScreenImageViewer(this.images, this.isMobile,{super.key});\n+// class FullScreenImageViewer extends StatefulWidget {\n+//   final List<String> images;\n+//   bool isMobile;\n+//    FullScreenImageViewer(this.images, this.isMobile,{super.key});\n \n-  @override\n-  _FullScreenImageViewerState createState() => _FullScreenImageViewerState();\n-}\n+//   @override\n+//   _FullScreenImageViewerState createState() => _FullScreenImageViewerState();\n+// }\n \n-class _FullScreenImageViewerState extends State<FullScreenImageViewer> {\n-  int _currentIndex = 0;\n+// class _FullScreenImageViewerState extends State<FullScreenImageViewer> {\n+//   int _currentIndex = 0;\n \n-  @override\n-  Widget build(BuildContext context) {\n-    return Scaffold(\n-      backgroundColor:\n-          Colors.black.withOpacity(0.8), // Background color for overlay\n-      body: Stack(\n-        children: [\n-          PageView.builder(\n-            itemCount: widget.images.length,\n-            controller: PageController(initialPage: _currentIndex),\n-            onPageChanged: (index) {\n-              setState(() {\n-                _currentIndex = index;\n-              });\n-            },\n-            itemBuilder: (context, index) {\n-              return Center(\n-                child: Image.network(\n-                  width:widget.isMobile ? MediaQuery.of(context).size.width:MediaQuery.of(context).size.width*0.5,\n-                  widget.images[index],\n-                  fit: BoxFit.contain,\n-                ),\n-              );\n-            },\n-          ),\n-          Positioned(\n-            top: 40,\n-            right: 20,\n-            child: IconButton(\n-              icon: const Icon(\n-                Icons.close,\n-                color: Colors.white,\n-                size: 30,\n-              ),\n-              onPressed: () {\n-                Navigator.of(context).pop();\n-              },\n-            ),\n-          ),\n-        ],\n-      ),\n-    );\n-  }\n-}\n+//   @override\n+//   Widget build(BuildContext context) {\n+//     return Scaffold(\n+//       backgroundColor:\n+//           Colors.black.withOpacity(0.8), // Background color for overlay\n+//       body: Stack(\n+//         children: [\n+//           PageView.builder(\n+//             itemCount: widget.images.length,\n+//             controller: PageController(initialPage: _currentIndex),\n+//             onPageChanged: (index) {\n+//               setState(() {\n+//                 _currentIndex = index;\n+//               });\n+//             },\n+//             itemBuilder: (context, index) {\n+//               return Center(\n+//                 child: Image.network(\n+//                   width:widget.isMobile ? MediaQuery.of(context).size.width:MediaQuery.of(context).size.width*0.5,\n+//                   widget.images[index],\n+//                   fit: BoxFit.contain,\n+//                 ),\n+//               );\n+//             },\n+//           ),\n+//           Positioned(\n+//             top: 40,\n+//             right: 20,\n+//             child: IconButton(\n+//               icon: const Icon(\n+//                 Icons.close,\n+//                 color: Colors.white,\n+//                 size: 30,\n+//               ),\n+//               onPressed: () {\n+//                 Navigator.of(context).pop();\n+//               },\n+//             ),\n+//           ),\n+//         ],\n+//       ),\n+//     );\n+//   }\n+// }\n"
                },
                {
                    "date": 1756125051084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1235 +1,1235 @@\n-// import 'package:carousel_slider/carousel_slider.dart';\n-// import 'package:cloud_firestore/cloud_firestore.dart';\n-// import 'package:firebase_auth/firebase_auth.dart';\n-// import 'package:flutter/material.dart';\n-// import 'package:intl/intl.dart';\n-// import 'package:l_f/Frontend/Contants/lists.dart';\n-// import 'package:l_f/Frontend/Home/Post/post_model.dart';\n-// import 'package:l_f/Frontend/Profile/user_see_page.dart';\n+import 'package:carousel_slider/carousel_slider.dart';\n+import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:flutter/material.dart';\n+import 'package:intl/intl.dart';\n+import 'package:l_f/Frontend/Contants/lists.dart';\n+import 'package:l_f/Frontend/Home/Post/post_model.dart';\n+import 'package:l_f/Frontend/Profile/user_see_page.dart';\n \n-// class LostFoundPage extends StatefulWidget {\n-//   const LostFoundPage({super.key});\n+class LostFoundPage extends StatefulWidget {\n+  const LostFoundPage({super.key});\n \n-//   @override\n-//   State<LostFoundPage> createState() => _LostFoundPageState();\n-// }\n+  @override\n+  State<LostFoundPage> createState() => _LostFoundPageState();\n+}\n \n-// class _LostFoundPageState extends State<LostFoundPage> {\n-//   final Map<String, Map<String, String>> _userCache =\n-//       {}; // Cache to store user data\n-//   User? user = FirebaseAuth.instance.currentUser;\n-//   // String? postId;\n+class _LostFoundPageState extends State<LostFoundPage> {\n+  final Map<String, Map<String, String>> _userCache =\n+      {}; // Cache to store user data\n+  User? user = FirebaseAuth.instance.currentUser;\n+  // String? postId;\n \n-//   List<PostModel> _filteredPosts = [];\n+  List<PostModel> _filteredPosts = [];\n \n-//   // Function to fetch filtered posts from Firestore\n-//   void _filterPosts(\n-//       String status, String location, DateTime? uploadDate, String title) {\n-//     Query query = FirebaseFirestore.instance.collection('posts');\n+  // Function to fetch filtered posts from Firestore\n+  void _filterPosts(\n+      String status, String location, DateTime? uploadDate, String title) {\n+    Query query = FirebaseFirestore.instance.collection('posts');\n \n-//     // Apply filters\n-//     if (status.isNotEmpty) {\n-//       query = query.where('status', isEqualTo: status);\n-//     }\n-//     if (location.isNotEmpty) {\n-//       query = query.where('location', isEqualTo: location);\n-//     }\n-//     if (uploadDate != null) {\n-//       query = query.where('uploadDate', isEqualTo: uploadDate);\n-//     }\n-//     if (title.isNotEmpty) {\n-//       query = query.where('itemTitle', isEqualTo: title);\n-//     }\n+    // Apply filters\n+    if (status.isNotEmpty) {\n+      query = query.where('status', isEqualTo: status);\n+    }\n+    if (location.isNotEmpty) {\n+      query = query.where('location', isEqualTo: location);\n+    }\n+    if (uploadDate != null) {\n+      query = query.where('uploadDate', isEqualTo: uploadDate);\n+    }\n+    if (title.isNotEmpty) {\n+      query = query.where('itemTitle', isEqualTo: title);\n+    }\n \n-//     // Get the results and update the UI\n-//     query.get().then((snapshot) {\n-//       setState(() {\n-//         _filteredPosts = snapshot.docs\n-//             .map((doc) => PostModel.fromJson(doc as Map<String, dynamic>))\n-//             .toList();\n-//       });\n-//     });\n-//   }\n+    // Get the results and update the UI\n+    query.get().then((snapshot) {\n+      setState(() {\n+        _filteredPosts = snapshot.docs\n+            .map((doc) => PostModel.fromJson(doc as Map<String, dynamic>))\n+            .toList();\n+      });\n+    });\n+  }\n \n-//   String _formatDate(Timestamp? timestamp) {\n-//     if (timestamp == null) return 'Not available';\n-//     DateTime date = timestamp.toDate();\n-//     return DateFormat('dd MMMM yyyy').format(date);\n-//   }\n+  String _formatDate(Timestamp? timestamp) {\n+    if (timestamp == null) return 'Not available';\n+    DateTime date = timestamp.toDate();\n+    return DateFormat('dd MMMM yyyy').format(date);\n+  }\n \n-//   Future<void> _deletePost(BuildContext context, String postId) async {\n-//     try {\n-//       await FirebaseFirestore.instance.collection('posts').doc(postId).delete();\n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         const SnackBar(\n-//           backgroundColor: Colors.green,\n-//           content: Text('Post deleted successfully'),\n-//           behavior: SnackBarBehavior.floating,\n-//           margin: EdgeInsets.all(16.0),\n-//           duration: Duration(seconds: 2),\n-//         ),\n-//       );\n-//     } catch (e) {\n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         SnackBar(\n-//             backgroundColor: Colors.red,\n-//             content: Text('Failed to delete post: $e')),\n-//       );\n-//     }\n-//   }\n+  Future<void> _deletePost(BuildContext context, String postId) async {\n+    try {\n+      await FirebaseFirestore.instance.collection('posts').doc(postId).delete();\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          backgroundColor: Colors.green,\n+          content: Text('Post deleted successfully'),\n+          behavior: SnackBarBehavior.floating,\n+          margin: EdgeInsets.all(16.0),\n+          duration: Duration(seconds: 2),\n+        ),\n+      );\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+            backgroundColor: Colors.red,\n+            content: Text('Failed to delete post: $e')),\n+      );\n+    }\n+  }\n \n-//   Future<Map<String, String>> _fetchUserNameAndProfilePic(String uid) async {\n-//     if (_userCache.containsKey(uid)) {\n-//       return _userCache[uid]!; // Return cached data if available\n-//     }\n+  Future<Map<String, String>> _fetchUserNameAndProfilePic(String uid) async {\n+    if (_userCache.containsKey(uid)) {\n+      return _userCache[uid]!; // Return cached data if available\n+    }\n \n-//     try {\n-//       DocumentSnapshot userDoc =\n-//           await FirebaseFirestore.instance.collection('users').doc(uid).get();\n+    try {\n+      DocumentSnapshot userDoc =\n+          await FirebaseFirestore.instance.collection('users').doc(uid).get();\n \n-//       if (!userDoc.exists) {\n-//         throw Exception(\"User not found.\");\n-//       }\n+      if (!userDoc.exists) {\n+        throw Exception(\"User not found.\");\n+      }\n \n-//       Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n+      Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n \n-//       String name = userData['name'] ?? 'NITH User';\n-//       String profileImage = userData['profileImage'] ?? '';\n+      String name = userData['name'] ?? 'NITH User';\n+      String profileImage = userData['profileImage'] ?? '';\n \n-//       // Cache the user data\n-//       _userCache[uid] = {\n-//         'name': name,\n-//         'profileImage': profileImage,\n-//       };\n+      // Cache the user data\n+      _userCache[uid] = {\n+        'name': name,\n+        'profileImage': profileImage,\n+      };\n \n-//       return _userCache[uid]!;\n-//     } catch (e) {\n-//       print(\"Error fetching user profile: $e\");\n-//       throw Exception(\"Error fetching user profile.\");\n-//     }\n-//   }\n+      return _userCache[uid]!;\n+    } catch (e) {\n+      print(\"Error fetching user profile: $e\");\n+      throw Exception(\"Error fetching user profile.\");\n+    }\n+  }\n \n-//   Stream<QuerySnapshot>? _postStream;\n+  Stream<QuerySnapshot>? _postStream;\n \n-//   @override\n-//   void initState() {\n-//     super.initState();\n-//     // Initialize stream without filters\n-//     _postStream = FirebaseFirestore.instance\n-//         .collection('posts')\n-//         .orderBy('timestamp', descending: true)\n-//         .snapshots();\n-//   }\n+  @override\n+  void initState() {\n+    super.initState();\n+    // Initialize stream without filters\n+    _postStream = FirebaseFirestore.instance\n+        .collection('posts')\n+        .orderBy('timestamp', descending: true)\n+        .snapshots();\n+  }\n \n-//   void _applyFilters() {\n-//     // Start with the collection reference\n-//     Query query = FirebaseFirestore.instance.collection('posts');\n+  void _applyFilters() {\n+    // Start with the collection reference\n+    Query query = FirebaseFirestore.instance.collection('posts');\n \n-//     // Apply Type filter (Lost/Found)\n-//     if (selectedType != 'All') {\n-//       query = query.where('status', isEqualTo: selectedType);\n-//     }\n+    // Apply Type filter (Lost/Found)\n+    if (selectedType != 'All') {\n+      query = query.where('status', isEqualTo: selectedType);\n+    }\n \n-//     // Apply Location filter\n-//     if (selectedLocation != 'Campus, NITH') {\n-//       query = query.where('location', isEqualTo: selectedLocation);\n-//     }\n+    // Apply Location filter\n+    if (selectedLocation != 'Campus, NITH') {\n+      query = query.where('location', isEqualTo: selectedLocation);\n+    }\n \n-//     // Apply Item Category filter\n-//     if (selectedCategory != 'All') {\n-//       query = query.where('item', isEqualTo: selectedCategory);\n-//     }\n+    // Apply Item Category filter\n+    if (selectedCategory != 'All') {\n+      query = query.where('item', isEqualTo: selectedCategory);\n+    }\n \n-//     // Apply Date filter (based on upload timestamp)\n-//     DateTime now = DateTime.now();\n-//     DateTime? startDate;\n+    // Apply Date filter (based on upload timestamp)\n+    DateTime now = DateTime.now();\n+    DateTime? startDate;\n \n-//     switch (selectedDateRange) {\n-//       case 'Today':\n-//         startDate = DateTime(now.year, now.month, now.day);\n-//         break;\n-//       case 'This Week':\n-//         startDate = now.subtract(Duration(days: now.weekday - 1));\n-//         break;\n-//       case 'This Month':\n-//         startDate = DateTime(now.year, now.month, 1);\n-//         break;\n-//       case 'This Year':\n-//         startDate = DateTime(now.year, 1, 1);\n-//         break;\n-//       default:\n-//         startDate = null;\n-//     }\n+    switch (selectedDateRange) {\n+      case 'Today':\n+        startDate = DateTime(now.year, now.month, now.day);\n+        break;\n+      case 'This Week':\n+        startDate = now.subtract(Duration(days: now.weekday - 1));\n+        break;\n+      case 'This Month':\n+        startDate = DateTime(now.year, now.month, 1);\n+        break;\n+      case 'This Year':\n+        startDate = DateTime(now.year, 1, 1);\n+        break;\n+      default:\n+        startDate = null;\n+    }\n \n-//     if (startDate != null) {\n-//       query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n-//     }\n+    if (startDate != null) {\n+      query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n+    }\n \n-//     // Update the stream for the StreamBuilder\n-//     setState(() {\n-//       _postStream = query.orderBy('timestamp', descending: true).snapshots();\n-//     });\n-//   }\n+    // Update the stream for the StreamBuilder\n+    setState(() {\n+      _postStream = query.orderBy('timestamp', descending: true).snapshots();\n+    });\n+  }\n \n-//   String selectedType = 'All';\n-//   String selectedLocation = 'Campus, NITH';\n-//   String selectedCategory = 'All';\n-//   String selectedDateRange = 'All Time';\n+  String selectedType = 'All';\n+  String selectedLocation = 'Campus, NITH';\n+  String selectedCategory = 'All';\n+  String selectedDateRange = 'All Time';\n \n-// // Dummy lists for dropdowns (replace with your provided lists)\n-//   List<String> itemTypes = ['All', 'Lost', 'Found'];\n-//   List<String> locations = locationsList;\n-//   List<String> categories = [\n-//     'All',\n-//     'Mobile Phone',\n-//     'Laptop',\n-//     'Charger',\n-//     'Wallet',\n-//     'ID Card',\n-//     'Hoodie',\n-//     'Jacket/Coat',\n-//     'Bat',\n-//     'Electronics Item',\n-//     'Cloth',\n-//     'Belt',\n-//     'Ball',\n-//     'Book',\n-//     'Earphones',\n-//     'Earbuds',\n-//     'Water Bottle',\n-//     'Watch',\n-//     'Specs',\n-//     'Jewellry',\n-//     'Shoes',\n-//     'Keys',\n-//     'Umbrella',\n-//     'Other'\n-//   ];\n-//   List<String> dateRanges = [\n-//     'All Time',\n-//     'Today',\n-//     'This Week',\n-//     'This Month',\n-//     'This Year'\n-//   ];\n+// Dummy lists for dropdowns (replace with your provided lists)\n+  List<String> itemTypes = ['All', 'Lost', 'Found'];\n+  List<String> locations = locationsList;\n+  List<String> categories = [\n+    'All',\n+    'Mobile Phone',\n+    'Laptop',\n+    'Charger',\n+    'Wallet',\n+    'ID Card',\n+    'Hoodie',\n+    'Jacket/Coat',\n+    'Bat',\n+    'Electronics Item',\n+    'Cloth',\n+    'Belt',\n+    'Ball',\n+    'Book',\n+    'Earphones',\n+    'Earbuds',\n+    'Water Bottle',\n+    'Watch',\n+    'Specs',\n+    'Jewellry',\n+    'Shoes',\n+    'Keys',\n+    'Umbrella',\n+    'Other'\n+  ];\n+  List<String> dateRanges = [\n+    'All Time',\n+    'Today',\n+    'This Week',\n+    'This Month',\n+    'This Year'\n+  ];\n \n-// // Filter Dropdowns\n-//   Widget buildDropdowns() {\n-//     return LayoutBuilder(builder: (context, constraints) {\n-//       return Padding(\n-//         padding: const EdgeInsets.symmetric(horizontal: 12.0),\n-//         child: Row(\n-//           mainAxisAlignment: MainAxisAlignment.center,\n-//           mainAxisSize: MainAxisSize.min,\n-//           children: [\n-//             buildDropdown(selectedType, itemTypes, (newValue) {\n-//               setState(() {\n-//                 selectedType = newValue!;\n-//               });\n-//               _applyFilters();\n-//             }),\n-//             const SizedBox(width: 10),\n-//             buildDropdown(selectedLocation, locations, (newValue) {\n-//               setState(() {\n-//                 selectedLocation = newValue!;\n-//               });\n-//               _applyFilters();\n-//             }),\n-//             const SizedBox(width: 10),\n-//             buildDropdown(selectedCategory, categories, (newValue) {\n-//               setState(() {\n-//                 selectedCategory = newValue!;\n-//               });\n-//               _applyFilters();\n-//             }),\n-//             const SizedBox(width: 10),\n-//             buildDropdown(selectedDateRange, dateRanges, (newValue) {\n-//               setState(() {\n-//                 selectedDateRange = newValue!;\n-//               });\n-//               _applyFilters();\n-//             }),\n-//           ],\n-//         ),\n-//       );\n-//     });\n-//   }\n+// Filter Dropdowns\n+  Widget buildDropdowns() {\n+    return LayoutBuilder(builder: (context, constraints) {\n+      return Padding(\n+        padding: const EdgeInsets.symmetric(horizontal: 12.0),\n+        child: Row(\n+          mainAxisAlignment: MainAxisAlignment.center,\n+          mainAxisSize: MainAxisSize.min,\n+          children: [\n+            buildDropdown(selectedType, itemTypes, (newValue) {\n+              setState(() {\n+                selectedType = newValue!;\n+              });\n+              _applyFilters();\n+            }),\n+            const SizedBox(width: 10),\n+            buildDropdown(selectedLocation, locations, (newValue) {\n+              setState(() {\n+                selectedLocation = newValue!;\n+              });\n+              _applyFilters();\n+            }),\n+            const SizedBox(width: 10),\n+            buildDropdown(selectedCategory, categories, (newValue) {\n+              setState(() {\n+                selectedCategory = newValue!;\n+              });\n+              _applyFilters();\n+            }),\n+            const SizedBox(width: 10),\n+            buildDropdown(selectedDateRange, dateRanges, (newValue) {\n+              setState(() {\n+                selectedDateRange = newValue!;\n+              });\n+              _applyFilters();\n+            }),\n+          ],\n+        ),\n+      );\n+    });\n+  }\n \n-// // Helper method to create a DropdownButton\n-//   Widget buildDropdown(String selectedValue, List<String> items,\n-//       ValueChanged<String?> onChanged) {\n-//     return DropdownButton<String>(\n-//       value: selectedValue,\n-//       items: items.map((String value) {\n-//         return DropdownMenuItem<String>(\n-//           value: value,\n-//           child: Text(value),\n-//         );\n-//       }).toList(),\n-//       onChanged: onChanged,\n-//     );\n-//   }\n+// Helper method to create a DropdownButton\n+  Widget buildDropdown(String selectedValue, List<String> items,\n+      ValueChanged<String?> onChanged) {\n+    return DropdownButton<String>(\n+      value: selectedValue,\n+      items: items.map((String value) {\n+        return DropdownMenuItem<String>(\n+          value: value,\n+          child: Text(value),\n+        );\n+      }).toList(),\n+      onChanged: onChanged,\n+    );\n+  }\n \n-//   @override\n-//   Widget build(BuildContext context) {\n-//     bool isMobile = MediaQuery.of(context).size.width < 600;\n-//     return Scaffold(\n-//       body: Column(\n-//         children: [\n-//           SingleChildScrollView(\n-//               scrollDirection: Axis.horizontal, child: buildDropdowns()),\n-//           Expanded(\n-//             child: StreamBuilder<QuerySnapshot>(\n-//               stream: _postStream,\n-//               builder: (context, snapshot) {\n-//                 if (snapshot.connectionState == ConnectionState.waiting) {\n-//                   return const Center(child: CircularProgressIndicator());\n-//                 }\n-//                 if (snapshot.hasError) {\n-//                   print('ERROR ${snapshot.error}');\n-//                   return const Center(child: Text('Error loading posts'));\n-//                 }\n+  @override\n+  Widget build(BuildContext context) {\n+    bool isMobile = MediaQuery.of(context).size.width < 600;\n+    return Scaffold(\n+      body: Column(\n+        children: [\n+          SingleChildScrollView(\n+              scrollDirection: Axis.horizontal, child: buildDropdowns()),\n+          Expanded(\n+            child: StreamBuilder<QuerySnapshot>(\n+              stream: _postStream,\n+              builder: (context, snapshot) {\n+                if (snapshot.connectionState == ConnectionState.waiting) {\n+                  return const Center(child: CircularProgressIndicator());\n+                }\n+                if (snapshot.hasError) {\n+                  print('ERROR ${snapshot.error}');\n+                  return const Center(child: Text('Error loading posts'));\n+                }\n \n-//                 if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-//                   return const Center(\n-//                       child: Center(child: Text('No posts available')));\n-//                 }\n+                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+                  return const Center(\n+                      child: Center(child: Text('No posts available')));\n+                }\n \n-//                 final posts = snapshot.data!.docs.map((doc) {\n-//                   final data = doc.data() as Map<String, dynamic>;\n-//                   final String uid = data['postmakerId'];\n-//                   final bool isClaimed = data['isClaimed'] ?? false;\n-//                   final String? claimerUid = data['postClaimer'];\n-//                   print(\"post claimerasss: : $claimerUid\");\n-//                   print(\"POST IDDDDDDDD : ${data['postId']}\");\n-//                   print(\"Is Post Claimed: $isClaimed\");\n+                final posts = snapshot.data!.docs.map((doc) {\n+                  final data = doc.data() as Map<String, dynamic>;\n+                  final String uid = data['postmakerId'];\n+                  final bool isClaimed = data['isClaimed'] ?? false;\n+                  final String? claimerUid = data['postClaimer'];\n+                  print(\"post claimerasss: : $claimerUid\");\n+                  print(\"POST IDDDDDDDD : ${data['postId']}\");\n+                  print(\"Is Post Claimed: $isClaimed\");\n \n-//                   return _fetchUserNameAndProfilePic(uid)\n-//                       .then((userDetails) async {\n-//                     String postClaimerName = '';\n-//                     String postClaimerProfilePic = '';\n+                  return _fetchUserNameAndProfilePic(uid)\n+                      .then((userDetails) async {\n+                    String postClaimerName = '';\n+                    String postClaimerProfilePic = '';\n \n-//                     if (isClaimed && claimerUid != null) {\n-//                       final claimerDetails =\n-//                           await _fetchUserNameAndProfilePic(claimerUid);\n-//                       postClaimerName = claimerDetails['name'] ?? 'NITH User';\n-//                       postClaimerProfilePic = claimerDetails['profileImage']!;\n-//                     }\n+                    if (isClaimed && claimerUid != null) {\n+                      final claimerDetails =\n+                          await _fetchUserNameAndProfilePic(claimerUid);\n+                      postClaimerName = claimerDetails['name'] ?? 'NITH User';\n+                      postClaimerProfilePic = claimerDetails['profileImage']!;\n+                    }\n \n-//                     return PostModel(\n-//                       userName: userDetails['name'] ?? 'NITH User',\n-//                       profileImageUrl: userDetails['profileImage'] ??\n-//                           'https://static.wikia.nocookie.net/logopedia/images/e/ec/220px-National_Institute_of_Technology,_Hamirpur_Logo.png/revision/latest?cb=20200330143312',\n-//                       postTime: _formatDate(data['timestamp']),\n-//                       itemImages: List<String>.from(data['imageUrls'] ?? ''),\n-//                       status: data['status'] ?? '',\n-//                       title: data['item'] ?? '',\n-//                       location: data['location'] ?? '',\n-//                       description: data['description'] ?? '',\n-//                       postmakerId: data['postmakerId'],\n-//                       question: data['question'],\n-//                       postId: data['postId'],\n-//                       claimStatus: data['claimStatus'],\n-//                       isClaimed: isClaimed,\n-//                       postclaimerId: data['postClaimer'],\n-//                       postClaimer:\n-//                           postClaimerName.isNotEmpty ? postClaimerName : null,\n-//                       postClaimerPic: postClaimerProfilePic.isNotEmpty\n-//                           ? postClaimerProfilePic\n-//                           : null,\n-//                     );\n-//                   });\n-//                 });\n+                    return PostModel(\n+                      userName: userDetails['name'] ?? 'NITH User',\n+                      profileImageUrl: userDetails['profileImage'] ??\n+                          'https://static.wikia.nocookie.net/logopedia/images/e/ec/220px-National_Institute_of_Technology,_Hamirpur_Logo.png/revision/latest?cb=20200330143312',\n+                      postTime: _formatDate(data['timestamp']),\n+                      itemImages: List<String>.from(data['imageUrls'] ?? ''),\n+                      status: data['status'] ?? '',\n+                      title: data['item'] ?? '',\n+                      location: data['location'] ?? '',\n+                      description: data['description'] ?? '',\n+                      postmakerId: data['postmakerId'],\n+                      question: data['question'],\n+                      postId: data['postId'],\n+                      claimStatus: data['claimStatus'],\n+                      isClaimed: isClaimed,\n+                      postclaimerId: data['postClaimer'],\n+                      postClaimer:\n+                          postClaimerName.isNotEmpty ? postClaimerName : null,\n+                      postClaimerPic: postClaimerProfilePic.isNotEmpty\n+                          ? postClaimerProfilePic\n+                          : null,\n+                    );\n+                  });\n+                });\n \n-//                 return FutureBuilder<List<PostModel>>(\n-//                   future: Future.wait(posts.toList()),\n-//                   builder: (context, futureSnapshot) {\n-//                     if (futureSnapshot.connectionState ==\n-//                         ConnectionState.waiting) {\n-//                       return const Center(child: CircularProgressIndicator());\n-//                     }\n+                return FutureBuilder<List<PostModel>>(\n+                  future: Future.wait(posts.toList()),\n+                  builder: (context, futureSnapshot) {\n+                    if (futureSnapshot.connectionState ==\n+                        ConnectionState.waiting) {\n+                      return const Center(child: CircularProgressIndicator());\n+                    }\n \n-//                     if (futureSnapshot.hasError) {\n-//                       print(\"Error : ${futureSnapshot.error}\");\n-//                       return const Center(child: Text('Error loading posts'));\n-//                     }\n+                    if (futureSnapshot.hasError) {\n+                      print(\"Error : ${futureSnapshot.error}\");\n+                      return const Center(child: Text('Error loading posts'));\n+                    }\n \n-//                     final postsList = futureSnapshot.data ?? [];\n+                    final postsList = futureSnapshot.data ?? [];\n \n-//                     return ListView.builder(\n-//                       itemCount: postsList.length,\n-//                       itemBuilder: (context, index) {\n-//                         final post = postsList[index];\n-//                         return Padding(\n-//                           padding: const EdgeInsets.all(2.0),\n-//                           child: Center(\n-//                             child: SizedBox(\n-//                               width: isMobile\n-//                                   ? MediaQuery.of(context).size.width\n-//                                   : 600,\n-//                               child: Card(\n-//                                 elevation: 5,\n-//                                 shape: RoundedRectangleBorder(\n-//                                   borderRadius: BorderRadius.circular(10),\n-//                                 ),\n-//                                 child: Column(\n-//                                   crossAxisAlignment: CrossAxisAlignment.start,\n-//                                   children: [\n-//                                     // Header  of the POST (profiel,name.location,delete)\n-//                                     GestureDetector(\n-//                                       onTap: () {\n-//                                         print(\n-//                                             'EROROR ::: ${post.profileImageUrl}');\n-//                                         Navigator.push(\n-//                                             context,\n-//                                             MaterialPageRoute(\n-//                                                 builder: (_) => ProfilePage2(\n-//                                                     uid: post.postmakerId)));\n-//                                       },\n-//                                       child: ListTile(\n-//                                         leading: CircleAvatar(\n-//                                           radius: 30,\n-//                                           backgroundImage: NetworkImage(\n-//                                               post.profileImageUrl),\n-//                                         ),\n-//                                         title: Text(post.userName,\n-//                                             style: const TextStyle(\n-//                                                 fontWeight: FontWeight.bold)),\n-//                                         subtitle: Text(\n-//                                             \"Location : ${post.location} , NITH\"),\n-//                                         trailing: PopupMenuButton<String>(\n-//                                           onSelected: (value) {\n-//                                             if (value == 'Delete') {\n-//                                               if (user!.uid ==\n-//                                                   post.postmakerId) {\n-//                                                 _showDeleteConfirmation(\n-//                                                     context, post);\n-//                                               } else {\n-//                                                 ScaffoldMessenger.of(context)\n-//                                                     .showSnackBar(\n-//                                                   const SnackBar(\n-//                                                       backgroundColor:\n-//                                                           Colors.red,\n-//                                                       content: Text(\n-//                                                           \"You can't delete this post\")),\n-//                                                 );\n-//                                               }\n-//                                             }\n-//                                           },\n-//                                           itemBuilder: (BuildContext context) {\n-//                                             return {'Delete'}\n-//                                                 .map((String choice) {\n-//                                               return PopupMenuItem<String>(\n-//                                                 value: choice,\n-//                                                 child: Text(choice),\n-//                                               );\n-//                                             }).toList();\n-//                                           },\n-//                                         ),\n-//                                       ),\n-//                                     ),\n+                    return ListView.builder(\n+                      itemCount: postsList.length,\n+                      itemBuilder: (context, index) {\n+                        final post = postsList[index];\n+                        return Padding(\n+                          padding: const EdgeInsets.all(2.0),\n+                          child: Center(\n+                            child: SizedBox(\n+                              width: isMobile\n+                                  ? MediaQuery.of(context).size.width\n+                                  : 600,\n+                              child: Card(\n+                                elevation: 5,\n+                                shape: RoundedRectangleBorder(\n+                                  borderRadius: BorderRadius.circular(10),\n+                                ),\n+                                child: Column(\n+                                  crossAxisAlignment: CrossAxisAlignment.start,\n+                                  children: [\n+                                    // Header  of the POST (profiel,name.location,delete)\n+                                    GestureDetector(\n+                                      onTap: () {\n+                                        print(\n+                                            'EROROR ::: ${post.profileImageUrl}');\n+                                        Navigator.push(\n+                                            context,\n+                                            MaterialPageRoute(\n+                                                builder: (_) => ProfilePage2(\n+                                                    uid: post.postmakerId)));\n+                                      },\n+                                      child: ListTile(\n+                                        leading: CircleAvatar(\n+                                          radius: 30,\n+                                          backgroundImage: NetworkImage(\n+                                              post.profileImageUrl),\n+                                        ),\n+                                        title: Text(post.userName,\n+                                            style: const TextStyle(\n+                                                fontWeight: FontWeight.bold)),\n+                                        subtitle: Text(\n+                                            \"Location : ${post.location} , NITH\"),\n+                                        trailing: PopupMenuButton<String>(\n+                                          onSelected: (value) {\n+                                            if (value == 'Delete') {\n+                                              if (user!.uid ==\n+                                                  post.postmakerId) {\n+                                                _showDeleteConfirmation(\n+                                                    context, post);\n+                                              } else {\n+                                                ScaffoldMessenger.of(context)\n+                                                    .showSnackBar(\n+                                                  const SnackBar(\n+                                                      backgroundColor:\n+                                                          Colors.red,\n+                                                      content: Text(\n+                                                          \"You can't delete this post\")),\n+                                                );\n+                                              }\n+                                            }\n+                                          },\n+                                          itemBuilder: (BuildContext context) {\n+                                            return {'Delete'}\n+                                                .map((String choice) {\n+                                              return PopupMenuItem<String>(\n+                                                value: choice,\n+                                                child: Text(choice),\n+                                              );\n+                                            }).toList();\n+                                          },\n+                                        ),\n+                                      ),\n+                                    ),\n \n-//                                     // LOST OR FOUND\n-//                                     Stack(\n-//                                       children: [\n-//                                         CarouselSlider(\n-//                                           options: CarouselOptions(\n-//                                             autoPlay: true,\n-//                                             height: 450.0,\n-//                                             enlargeCenterPage: true,\n-//                                           ),\n-//                                           items: post.itemImages\n-//                                               .map<Widget>((imageUrl) {\n-//                                             return GestureDetector(\n-//                                               onTap: () {\n-//                                                 // Open image viewer when the image is tapped\n-//                                                 Navigator.push(\n-//                                                   context,\n-//                                                   MaterialPageRoute(\n-//                                                     builder: (context) =>\n-//                                                         FullScreenImageViewer(\n-//                                                             post.itemImages,isMobile),\n-//                                                   ),\n-//                                                 );\n-//                                               },\n-//                                               child: ClipRRect(\n-//                                                 borderRadius:\n-//                                                     BorderRadius.circular(10),\n-//                                                 child: Image.network(\n-//                                                   imageUrl,\n-//                                                   fit: BoxFit.cover,\n-//                                                   width: MediaQuery.of(context)\n-//                                                       .size\n-//                                                       .width,\n-//                                                   errorBuilder: (context, error,\n-//                                                       stackTrace) {\n-//                                                     return const Icon(\n-//                                                         Icons.error);\n-//                                                   },\n-//                                                 ),\n-//                                               ),\n-//                                             );\n-//                                           }).toList(),\n-//                                         ),\n-//                                         Positioned(\n-//                                           top: isMobile ? 16 : 6,\n-//                                           left: 50,\n-//                                           child: Container(\n-//                                             padding: const EdgeInsets.symmetric(\n-//                                                 horizontal: 10, vertical: 5),\n-//                                             decoration: BoxDecoration(\n-//                                               color: post.status == 'Lost'\n-//                                                   ? Colors.red\n-//                                                   : Colors.green,\n-//                                               borderRadius:\n-//                                                   BorderRadius.circular(5),\n-//                                             ),\n-//                                             child: Text(\n-//                                               post.status,\n-//                                               style: const TextStyle(\n-//                                                 color: Colors.white,\n-//                                                 fontWeight: FontWeight.bold,\n-//                                               ),\n-//                                             ),\n-//                                           ),\n-//                                         ),\n-//                                       ],\n-//                                     ),\n+                                    // LOST OR FOUND\n+                                    Stack(\n+                                      children: [\n+                                        CarouselSlider(\n+                                          options: CarouselOptions(\n+                                            autoPlay: true,\n+                                            height: 450.0,\n+                                            enlargeCenterPage: true,\n+                                          ),\n+                                          items: post.itemImages\n+                                              .map<Widget>((imageUrl) {\n+                                            return GestureDetector(\n+                                              onTap: () {\n+                                                // Open image viewer when the image is tapped\n+                                                Navigator.push(\n+                                                  context,\n+                                                  MaterialPageRoute(\n+                                                    builder: (context) =>\n+                                                        FullScreenImageViewer(\n+                                                            post.itemImages,isMobile),\n+                                                  ),\n+                                                );\n+                                              },\n+                                              child: ClipRRect(\n+                                                borderRadius:\n+                                                    BorderRadius.circular(10),\n+                                                child: Image.network(\n+                                                  imageUrl,\n+                                                  fit: BoxFit.cover,\n+                                                  width: MediaQuery.of(context)\n+                                                      .size\n+                                                      .width,\n+                                                  errorBuilder: (context, error,\n+                                                      stackTrace) {\n+                                                    return const Icon(\n+                                                        Icons.error);\n+                                                  },\n+                                                ),\n+                                              ),\n+                                            );\n+                                          }).toList(),\n+                                        ),\n+                                        Positioned(\n+                                          top: isMobile ? 16 : 6,\n+                                          left: 50,\n+                                          child: Container(\n+                                            padding: const EdgeInsets.symmetric(\n+                                                horizontal: 10, vertical: 5),\n+                                            decoration: BoxDecoration(\n+                                              color: post.status == 'Lost'\n+                                                  ? Colors.red\n+                                                  : Colors.green,\n+                                              borderRadius:\n+                                                  BorderRadius.circular(5),\n+                                            ),\n+                                            child: Text(\n+                                              post.status,\n+                                              style: const TextStyle(\n+                                                color: Colors.white,\n+                                                fontWeight: FontWeight.bold,\n+                                              ),\n+                                            ),\n+                                          ),\n+                                        ),\n+                                      ],\n+                                    ),\n \n-//                                     Padding(\n-//                                       padding: const EdgeInsets.symmetric(\n-//                                           horizontal: 18.0, vertical: 10),\n-//                                       child: Column(\n-//                                         crossAxisAlignment:\n-//                                             CrossAxisAlignment.start,\n-//                                         children: [\n-//                                           // ITEM item,date\n-//                                           Row(\n-//                                             mainAxisAlignment:\n-//                                                 MainAxisAlignment.spaceBetween,\n-//                                             children: [\n-//                                               Text(\n-//                                                 post.title == 'Other'\n-//                                                     ? '${post.status} Item'\n-//                                                     : post.title,\n-//                                                 overflow: TextOverflow.clip,\n-//                                                 softWrap: true,\n-//                                                 style: const TextStyle(\n-//                                                     fontSize: 18,\n-//                                                     fontWeight:\n-//                                                         FontWeight.bold),\n-//                                               ),\n-//                                               const SizedBox(width: 5),\n-//                                               Row(\n-//                                                 children: [\n-//                                                   Text(\"${post.status} On : \",\n-//                                                       overflow:\n-//                                                           TextOverflow.clip,\n-//                                                       softWrap: true,\n-//                                                       style: const TextStyle(\n-//                                                           color: Colors.red,\n-//                                                           fontWeight:\n-//                                                               FontWeight.bold)),\n-//                                                   Text(post.postTime,\n-//                                                       style: const TextStyle(\n-//                                                           fontWeight:\n-//                                                               FontWeight.bold)),\n-//                                                 ],\n-//                                               ),\n-//                                             ],\n-//                                           ),\n-//                                           const SizedBox(height: 5),\n+                                    Padding(\n+                                      padding: const EdgeInsets.symmetric(\n+                                          horizontal: 18.0, vertical: 10),\n+                                      child: Column(\n+                                        crossAxisAlignment:\n+                                            CrossAxisAlignment.start,\n+                                        children: [\n+                                          // ITEM item,date\n+                                          Row(\n+                                            mainAxisAlignment:\n+                                                MainAxisAlignment.spaceBetween,\n+                                            children: [\n+                                              Text(\n+                                                post.title == 'Other'\n+                                                    ? '${post.status} Item'\n+                                                    : post.title,\n+                                                overflow: TextOverflow.clip,\n+                                                softWrap: true,\n+                                                style: const TextStyle(\n+                                                    fontSize: 18,\n+                                                    fontWeight:\n+                                                        FontWeight.bold),\n+                                              ),\n+                                              const SizedBox(width: 5),\n+                                              Row(\n+                                                children: [\n+                                                  Text(\"${post.status} On : \",\n+                                                      overflow:\n+                                                          TextOverflow.clip,\n+                                                      softWrap: true,\n+                                                      style: const TextStyle(\n+                                                          color: Colors.red,\n+                                                          fontWeight:\n+                                                              FontWeight.bold)),\n+                                                  Text(post.postTime,\n+                                                      style: const TextStyle(\n+                                                          fontWeight:\n+                                                              FontWeight.bold)),\n+                                                ],\n+                                              ),\n+                                            ],\n+                                          ),\n+                                          const SizedBox(height: 5),\n \n-//                                           //DESCRIPTION\n-//                                           Row(\n-//                                             crossAxisAlignment: CrossAxisAlignment\n-//                                                 .start, // Align text to the top\n-//                                             children: [\n-//                                               const Text(\n-//                                                 \"Description : \",\n-//                                                 style: TextStyle(\n-//                                                   fontWeight: FontWeight.bold,\n-//                                                 ),\n-//                                               ),\n-//                                               const SizedBox(width: 4),\n-//                                               Expanded(\n-//                                                 child: Text(\n-//                                                   post.description,\n-//                                                   overflow: TextOverflow.clip,\n-//                                                   softWrap: true,\n-//                                                   style: const TextStyle(\n-//                                                     fontSize: 14,\n-//                                                   ),\n-//                                                 ),\n-//                                               ),\n-//                                             ],\n-//                                           ),\n-//                                           const SizedBox(height: 10),\n+                                          //DESCRIPTION\n+                                          Row(\n+                                            crossAxisAlignment: CrossAxisAlignment\n+                                                .start, // Align text to the top\n+                                            children: [\n+                                              const Text(\n+                                                \"Description : \",\n+                                                style: TextStyle(\n+                                                  fontWeight: FontWeight.bold,\n+                                                ),\n+                                              ),\n+                                              const SizedBox(width: 4),\n+                                              Expanded(\n+                                                child: Text(\n+                                                  post.description,\n+                                                  overflow: TextOverflow.clip,\n+                                                  softWrap: true,\n+                                                  style: const TextStyle(\n+                                                    fontSize: 14,\n+                                                  ),\n+                                                ),\n+                                              ),\n+                                            ],\n+                                          ),\n+                                          const SizedBox(height: 10),\n \n-//                                           //BUTTONNS\n-//                                           StreamBuilder<QuerySnapshot>(\n-//                                               stream: FirebaseFirestore.instance\n-//                                                   .collection('posts')\n-//                                                   .doc(post.postId)\n-//                                                   .collection('claims')\n-//                                                   .where('senderId',\n-//                                                       isEqualTo: user!.uid)\n-//                                                   .snapshots(),\n-//                                               builder:\n-//                                                   (context, claimSnapshot) {\n-//                                                 if (claimSnapshot\n-//                                                         .connectionState ==\n-//                                                     ConnectionState.waiting) {\n-//                                                   return const Center(\n-//                                                       child:\n-//                                                           CircularProgressIndicator());\n-//                                                 }\n+                                          //BUTTONNS\n+                                          StreamBuilder<QuerySnapshot>(\n+                                              stream: FirebaseFirestore.instance\n+                                                  .collection('posts')\n+                                                  .doc(post.postId)\n+                                                  .collection('claims')\n+                                                  .where('senderId',\n+                                                      isEqualTo: user!.uid)\n+                                                  .snapshots(),\n+                                              builder:\n+                                                  (context, claimSnapshot) {\n+                                                if (claimSnapshot\n+                                                        .connectionState ==\n+                                                    ConnectionState.waiting) {\n+                                                  return const Center(\n+                                                      child:\n+                                                          CircularProgressIndicator());\n+                                                }\n \n-//                                                 bool userHasRequestedClaim =\n-//                                                     false;\n+                                                bool userHasRequestedClaim =\n+                                                    false;\n \n-//                                                 if (claimSnapshot.hasData &&\n-//                                                     claimSnapshot.data!.docs\n-//                                                         .isNotEmpty) {\n-//                                                   final claimData =\n-//                                                       claimSnapshot\n-//                                                               .data!.docs.first\n-//                                                               .data()\n-//                                                           as Map<String,\n-//                                                               dynamic>;\n+                                                if (claimSnapshot.hasData &&\n+                                                    claimSnapshot.data!.docs\n+                                                        .isNotEmpty) {\n+                                                  final claimData =\n+                                                      claimSnapshot\n+                                                              .data!.docs.first\n+                                                              .data()\n+                                                          as Map<String,\n+                                                              dynamic>;\n \n-//                                                   if (claimData[\n-//                                                           'claimStatusC'] ==\n-//                                                       'requested') {\n-//                                                     userHasRequestedClaim =\n-//                                                         true;\n-//                                                   }\n-//                                                   if (claimData[\n-//                                                               'claimStatusC'] ==\n-//                                                           'accepted' ||\n-//                                                       claimData[\n-//                                                               'claimStatusC'] ==\n-//                                                           'declined') {\n-//                                                     userHasRequestedClaim =\n-//                                                         false;\n-//                                                   }\n-//                                                 }\n+                                                  if (claimData[\n+                                                          'claimStatusC'] ==\n+                                                      'requested') {\n+                                                    userHasRequestedClaim =\n+                                                        true;\n+                                                  }\n+                                                  if (claimData[\n+                                                              'claimStatusC'] ==\n+                                                          'accepted' ||\n+                                                      claimData[\n+                                                              'claimStatusC'] ==\n+                                                          'declined') {\n+                                                    userHasRequestedClaim =\n+                                                        false;\n+                                                  }\n+                                                }\n \n-//                                                 return Row(\n-//                                                     mainAxisAlignment:\n-//                                                         MainAxisAlignment\n-//                                                             .spaceAround,\n-//                                                     children: [\n-//                                                       GestureDetector(\n-//                                                         onTap: () {\n-//                                                           _sharePost(\n-//                                                               context,\n-//                                                               post.title,\n-//                                                               post.description);\n-//                                                         },\n-//                                                         child: const Row(\n-//                                                           children: [\n-//                                                             Icon(Icons\n-//                                                                 .share_rounded),\n-//                                                             SizedBox(width: 3),\n-//                                                             Text('Share'),\n-//                                                           ],\n-//                                                         ),\n-//                                                       ),\n-//                                                       if (post.postmakerId !=\n-//                                                           user!.uid)\n-//                                                         ElevatedButton(\n-//                                                           onPressed: () {\n-//                                                             _replyToPostmaker(\n-//                                                                 context,\n-//                                                                 post.postmakerId,\n-//                                                                 post.userName,\n-//                                                                 post.postId);\n-//                                                           },\n-//                                                           style: ElevatedButton\n-//                                                               .styleFrom(\n-//                                                             backgroundColor:\n-//                                                                 Colors.green\n-//                                                                     .shade600,\n-//                                                             shape:\n-//                                                                 RoundedRectangleBorder(\n-//                                                               borderRadius:\n-//                                                                   BorderRadius\n-//                                                                       .circular(\n-//                                                                           10),\n-//                                                             ),\n-//                                                           ),\n-//                                                           child: const Row(\n-//                                                             mainAxisAlignment:\n-//                                                                 MainAxisAlignment\n-//                                                                     .center,\n-//                                                             children: [\n-//                                                               Icon(Icons.reply,\n-//                                                                   color: Colors\n-//                                                                       .white),\n-//                                                               SizedBox(\n-//                                                                   width: 3),\n-//                                                               Text(\n-//                                                                 'Reply',\n-//                                                                 style: TextStyle(\n-//                                                                     fontSize:\n-//                                                                         16,\n-//                                                                     color: Colors\n-//                                                                         .white),\n-//                                                               ),\n-//                                                             ],\n-//                                                           ),\n-//                                                         ),\n+                                                return Row(\n+                                                    mainAxisAlignment:\n+                                                        MainAxisAlignment\n+                                                            .spaceAround,\n+                                                    children: [\n+                                                      GestureDetector(\n+                                                        onTap: () {\n+                                                          _sharePost(\n+                                                              context,\n+                                                              post.title,\n+                                                              post.description);\n+                                                        },\n+                                                        child: const Row(\n+                                                          children: [\n+                                                            Icon(Icons\n+                                                                .share_rounded),\n+                                                            SizedBox(width: 3),\n+                                                            Text('Share'),\n+                                                          ],\n+                                                        ),\n+                                                      ),\n+                                                      if (post.postmakerId !=\n+                                                          user!.uid)\n+                                                        ElevatedButton(\n+                                                          onPressed: () {\n+                                                            _replyToPostmaker(\n+                                                                context,\n+                                                                post.postmakerId,\n+                                                                post.userName,\n+                                                                post.postId);\n+                                                          },\n+                                                          style: ElevatedButton\n+                                                              .styleFrom(\n+                                                            backgroundColor:\n+                                                                Colors.green\n+                                                                    .shade600,\n+                                                            shape:\n+                                                                RoundedRectangleBorder(\n+                                                              borderRadius:\n+                                                                  BorderRadius\n+                                                                      .circular(\n+                                                                          10),\n+                                                            ),\n+                                                          ),\n+                                                          child: const Row(\n+                                                            mainAxisAlignment:\n+                                                                MainAxisAlignment\n+                                                                    .center,\n+                                                            children: [\n+                                                              Icon(Icons.reply,\n+                                                                  color: Colors\n+                                                                      .white),\n+                                                              SizedBox(\n+                                                                  width: 3),\n+                                                              Text(\n+                                                                'Reply',\n+                                                                style: TextStyle(\n+                                                                    fontSize:\n+                                                                        16,\n+                                                                    color: Colors\n+                                                                        .white),\n+                                                              ),\n+                                                            ],\n+                                                          ),\n+                                                        ),\n \n-//                                                       //Claimed Button\n-//                                                       if (post.status !=\n-//                                                               'Lost' &&\n-//                                                           post.isClaimed ==\n-//                                                               true)\n-//                                                         ElevatedButton(\n-//                                                           onPressed: () {\n-//                                                             _claimedPost(\n-//                                                                 context,\n-//                                                                 post.postclaimerId!,\n-//                                                                 post.title,\n-//                                                                 post.postClaimer!,\n-//                                                                 post.postId);\n-//                                                           },\n-//                                                           style: ElevatedButton\n-//                                                               .styleFrom(\n-//                                                             backgroundColor:\n-//                                                                 Colors\n-//                                                                     .deepOrange\n-//                                                                     .shade600,\n-//                                                             shape:\n-//                                                                 RoundedRectangleBorder(\n-//                                                               borderRadius:\n-//                                                                   BorderRadius\n-//                                                                       .circular(\n-//                                                                           10),\n-//                                                             ),\n-//                                                           ),\n-//                                                           child: const Row(\n-//                                                             mainAxisAlignment:\n-//                                                                 MainAxisAlignment\n-//                                                                     .center,\n-//                                                             children: [\n-//                                                               Icon(\n-//                                                                   Icons\n-//                                                                       .back_hand,\n-//                                                                   color: Colors\n-//                                                                       .white),\n-//                                                               SizedBox(\n-//                                                                   width: 3),\n-//                                                               Text(\n-//                                                                 'Claimed',\n-//                                                                 style: TextStyle(\n-//                                                                     fontSize:\n-//                                                                         16,\n-//                                                                     color: Colors\n-//                                                                         .white),\n-//                                                               ),\n-//                                                             ],\n-//                                                           ),\n-//                                                         ),\n+                                                      //Claimed Button\n+                                                      if (post.status !=\n+                                                              'Lost' &&\n+                                                          post.isClaimed ==\n+                                                              true)\n+                                                        ElevatedButton(\n+                                                          onPressed: () {\n+                                                            _claimedPost(\n+                                                                context,\n+                                                                post.postclaimerId!,\n+                                                                post.title,\n+                                                                post.postClaimer!,\n+                                                                post.postId);\n+                                                          },\n+                                                          style: ElevatedButton\n+                                                              .styleFrom(\n+                                                            backgroundColor:\n+                                                                Colors\n+                                                                    .deepOrange\n+                                                                    .shade600,\n+                                                            shape:\n+                                                                RoundedRectangleBorder(\n+                                                              borderRadius:\n+                                                                  BorderRadius\n+                                                                      .circular(\n+                                                                          10),\n+                                                            ),\n+                                                          ),\n+                                                          child: const Row(\n+                                                            mainAxisAlignment:\n+                                                                MainAxisAlignment\n+                                                                    .center,\n+                                                            children: [\n+                                                              Icon(\n+                                                                  Icons\n+                                                                      .back_hand,\n+                                                                  color: Colors\n+                                                                      .white),\n+                                                              SizedBox(\n+                                                                  width: 3),\n+                                                              Text(\n+                                                                'Claimed',\n+                                                                style: TextStyle(\n+                                                                    fontSize:\n+                                                                        16,\n+                                                                    color: Colors\n+                                                                        .white),\n+                                                              ),\n+                                                            ],\n+                                                          ),\n+                                                        ),\n \n-//                                                       // Claim Buttton\n-//                                                       if (post.postmakerId !=\n-//                                                               user!.uid &&\n-//                                                           post.status ==\n-//                                                               'Found' &&\n-//                                                           post.isClaimed ==\n-//                                                               false &&\n-//                                                           !userHasRequestedClaim)\n-//                                                         ElevatedButton(\n-//                                                           onPressed: () {\n-//                                                             _claimPost(\n-//                                                                 context,\n-//                                                                 post.postmakerId,\n-//                                                                 post.title,\n-//                                                                 post.question!,\n-//                                                                 post.description,\n-//                                                                 post.postId);\n-//                                                           },\n-//                                                           style: ElevatedButton\n-//                                                               .styleFrom(\n-//                                                             backgroundColor:\n-//                                                                 Colors\n-//                                                                     .deepOrange\n-//                                                                     .shade600,\n-//                                                             shape:\n-//                                                                 RoundedRectangleBorder(\n-//                                                               borderRadius:\n-//                                                                   BorderRadius\n-//                                                                       .circular(\n-//                                                                           10),\n-//                                                             ),\n-//                                                           ),\n-//                                                           child: const Row(\n-//                                                             mainAxisAlignment:\n-//                                                                 MainAxisAlignment\n-//                                                                     .center,\n-//                                                             children: [\n-//                                                               Icon(\n-//                                                                   Icons\n-//                                                                       .back_hand,\n-//                                                                   color: Colors\n-//                                                                       .white),\n-//                                                               SizedBox(\n-//                                                                   width: 6),\n-//                                                               Text(\n-//                                                                 'Claim',\n-//                                                                 style: TextStyle(\n-//                                                                     fontSize:\n-//                                                                         16,\n-//                                                                     color: Colors\n-//                                                                         .white),\n-//                                                               ),\n-//                                                             ],\n-//                                                           ),\n-//                                                         ),\n+                                                      // Claim Buttton\n+                                                      if (post.postmakerId !=\n+                                                              user!.uid &&\n+                                                          post.status ==\n+                                                              'Found' &&\n+                                                          post.isClaimed ==\n+                                                              false &&\n+                                                          !userHasRequestedClaim)\n+                                                        ElevatedButton(\n+                                                          onPressed: () {\n+                                                            _claimPost(\n+                                                                context,\n+                                                                post.postmakerId,\n+                                                                post.title,\n+                                                                post.question!,\n+                                                                post.description,\n+                                                                post.postId);\n+                                                          },\n+                                                          style: ElevatedButton\n+                                                              .styleFrom(\n+                                                            backgroundColor:\n+                                                                Colors\n+                                                                    .deepOrange\n+                                                                    .shade600,\n+                                                            shape:\n+                                                                RoundedRectangleBorder(\n+                                                              borderRadius:\n+                                                                  BorderRadius\n+                                                                      .circular(\n+                                                                          10),\n+                                                            ),\n+                                                          ),\n+                                                          child: const Row(\n+                                                            mainAxisAlignment:\n+                                                                MainAxisAlignment\n+                                                                    .center,\n+                                                            children: [\n+                                                              Icon(\n+                                                                  Icons\n+                                                                      .back_hand,\n+                                                                  color: Colors\n+                                                                      .white),\n+                                                              SizedBox(\n+                                                                  width: 6),\n+                                                              Text(\n+                                                                'Claim',\n+                                                                style: TextStyle(\n+                                                                    fontSize:\n+                                                                        16,\n+                                                                    color: Colors\n+                                                                        .white),\n+                                                              ),\n+                                                            ],\n+                                                          ),\n+                                                        ),\n \n-//                                                       // Request Button\n-//                                                       if (post.postmakerId !=\n-//                                                               user!.uid &&\n-//                                                           post.status ==\n-//                                                               'Found' &&\n-//                                                           post.isClaimed ==\n-//                                                               false &&\n-//                                                           userHasRequestedClaim)\n-//                                                         ElevatedButton(\n-//                                                           onPressed: () {},\n-//                                                           style: ElevatedButton\n-//                                                               .styleFrom(\n-//                                                             backgroundColor:\n-//                                                                 Colors\n-//                                                                     .deepOrange\n-//                                                                     .shade600,\n-//                                                             shape:\n-//                                                                 RoundedRectangleBorder(\n-//                                                               borderRadius:\n-//                                                                   BorderRadius\n-//                                                                       .circular(\n-//                                                                           10),\n-//                                                             ),\n-//                                                           ),\n-//                                                           child: const Row(\n-//                                                             mainAxisAlignment:\n-//                                                                 MainAxisAlignment\n-//                                                                     .center,\n-//                                                             children: [\n-//                                                               Icon(\n-//                                                                   Icons\n-//                                                                       .back_hand,\n-//                                                                   color: Colors\n-//                                                                       .white),\n-//                                                               SizedBox(\n-//                                                                   width: 3),\n-//                                                               Text(\n-//                                                                 'Requested',\n-//                                                                 style: TextStyle(\n-//                                                                     fontSize:\n-//                                                                         16,\n-//                                                                     color: Colors\n-//                                                                         .white),\n-//                                                               ),\n-//                                                             ],\n-//                                                           ),\n-//                                                         )\n-//                                                     ]);\n-//                                               })\n-//                                         ],\n-//                                       ),\n-//                                     ),\n-//                                   ],\n-//                                 ),\n-//                               ),\n-//                             ),\n-//                           ),\n-//                         );\n-//                       },\n-//                     );\n-//                   },\n-//                 );\n-//               },\n-//             ),\n-//           ),\n-//         ],\n-//       ),\n-//     );\n-//   }\n+                                                      // Request Button\n+                                                      if (post.postmakerId !=\n+                                                              user!.uid &&\n+                                                          post.status ==\n+                                                              'Found' &&\n+                                                          post.isClaimed ==\n+                                                              false &&\n+                                                          userHasRequestedClaim)\n+                                                        ElevatedButton(\n+                                                          onPressed: () {},\n+                                                          style: ElevatedButton\n+                                                              .styleFrom(\n+                                                            backgroundColor:\n+                                                                Colors\n+                                                                    .deepOrange\n+                                                                    .shade600,\n+                                                            shape:\n+                                                                RoundedRectangleBorder(\n+                                                              borderRadius:\n+                                                                  BorderRadius\n+                                                                      .circular(\n+                                                                          10),\n+                                                            ),\n+                                                          ),\n+                                                          child: const Row(\n+                                                            mainAxisAlignment:\n+                                                                MainAxisAlignment\n+                                                                    .center,\n+                                                            children: [\n+                                                              Icon(\n+                                                                  Icons\n+                                                                      .back_hand,\n+                                                                  color: Colors\n+                                                                      .white),\n+                                                              SizedBox(\n+                                                                  width: 3),\n+                                                              Text(\n+                                                                'Requested',\n+                                                                style: TextStyle(\n+                                                                    fontSize:\n+                                                                        16,\n+                                                                    color: Colors\n+                                                                        .white),\n+                                                              ),\n+                                                            ],\n+                                                          ),\n+                                                        )\n+                                                    ]);\n+                                              })\n+                                        ],\n+                                      ),\n+                                    ),\n+                                  ],\n+                                ),\n+                              ),\n+                            ),\n+                          ),\n+                        );\n+                      },\n+                    );\n+                  },\n+                );\n+              },\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n \n-//   void _replyToPostmaker(BuildContext context, String postmakerId,\n-//       String postmaker, String postId) {\n-//     TextEditingController messageController = TextEditingController();\n+  void _replyToPostmaker(BuildContext context, String postmakerId,\n+      String postmaker, String postId) {\n+    TextEditingController messageController = TextEditingController();\n \n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: const Text('Send a Reply'),\n-//           content: Column(\n-//             mainAxisSize: MainAxisSize.min,\n-//             children: [\n-//               Row(\n-//                 children: [\n-//                   const Text('Reply to'),\n-//                   TextButton(\n-//                       onPressed: () {\n-//                         Navigator.push(\n-//                             context,\n-//                             MaterialPageRoute(\n-//                                 builder: (_) =>\n-//                                     ProfilePage2(uid: postmakerId)));\n-//                       },\n-//                       child: Text(postmaker))\n-//                 ],\n-//               ),\n-//               const SizedBox(height: 10),\n-//               TextField(\n-//                 controller: messageController,\n-//                 decoration: const InputDecoration(\n-//                   labelText: 'Your message',\n-//                   alignLabelWithHint: true,\n-//                   border: OutlineInputBorder(),\n-//                 ),\n-//                 maxLines: 3,\n-//               ),\n-//             ],\n-//           ),\n-//           actions: [\n-//             TextButton(\n-//               onPressed: () {\n-//                 Navigator.of(context).pop(); // Close the dialog without sending\n-//               },\n-//               child: const Text('Cancel'),\n-//             ),\n-//             TextButton(\n-//               onPressed: () {\n-//                 String message = messageController.text.trim();\n-//                 if (message.isNotEmpty) {\n-//                   _sendMessageToPostmaker(\n-//                       context, postmakerId, message, postId);\n-//                 }\n-//                 ScaffoldMessenger.of(context).showSnackBar(\n-//                   const SnackBar(\n-//                     content: Text('Message sent successfully'),\n-//                     behavior: SnackBarBehavior.floating,\n-//                     margin: EdgeInsets.all(16.0),\n-//                   ),\n-//                 );\n-//                 Navigator.of(context).pop(); // Close the dialog after sending\n-//               },\n-//               child: const Text('Send'),\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Send a Reply'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              Row(\n+                children: [\n+                  const Text('Reply to'),\n+                  TextButton(\n+                      onPressed: () {\n+                        Navigator.push(\n+                            context,\n+                            MaterialPageRoute(\n+                                builder: (_) =>\n+                                    ProfilePage2(uid: postmakerId)));\n+                      },\n+                      child: Text(postmaker))\n+                ],\n+              ),\n+              const SizedBox(height: 10),\n+              TextField(\n+                controller: messageController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your message',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop(); // Close the dialog without sending\n+              },\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String message = messageController.text.trim();\n+                if (message.isNotEmpty) {\n+                  _sendMessageToPostmaker(\n+                      context, postmakerId, message, postId);\n+                }\n+                ScaffoldMessenger.of(context).showSnackBar(\n+                  const SnackBar(\n+                    content: Text('Message sent successfully'),\n+                    behavior: SnackBarBehavior.floating,\n+                    margin: EdgeInsets.all(16.0),\n+                  ),\n+                );\n+                Navigator.of(context).pop(); // Close the dialog after sending\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n-//       String message, String postId) async {\n-//     try {\n-//       // Add a chat message to Firestore\n-//       await FirebaseFirestore.instance.collection('chats').add({\n-//         'senderId': user!.uid,\n-//         'receiverId': postmakerId,\n-//         'participants': [user!.uid, postmakerId],\n-//         'message': message,\n-//         'postId': postId,\n-//         'timestamp': Timestamp.now(),\n-//       });\n+  Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n+      String message, String postId) async {\n+    try {\n+      // Add a chat message to Firestore\n+      await FirebaseFirestore.instance.collection('chats').add({\n+        'senderId': user!.uid,\n+        'receiverId': postmakerId,\n+        'participants': [user!.uid, postmakerId],\n+        'message': message,\n+        'postId': postId,\n+        'timestamp': Timestamp.now(),\n+      });\n \n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         const SnackBar(\n-//           content: Text('Message sent successfully'),\n-//           behavior: SnackBarBehavior.floating,\n-//           margin: EdgeInsets.all(16.0),\n-//         ),\n-//       );\n-//     } catch (e) {\n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         SnackBar(\n-//           content: Text('Failed to send message: $e'),\n-//           backgroundColor: Colors.red,\n-//         ),\n-//       );\n-//     }\n-//   }\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Message sent successfully'),\n+          behavior: SnackBarBehavior.floating,\n+          margin: EdgeInsets.all(16.0),\n+        ),\n+      );\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          content: Text('Failed to send message: $e'),\n+          backgroundColor: Colors.red,\n+        ),\n+      );\n+    }\n+  }\n \n-//   void _claimPost(BuildContext context, String postmakerId, String postTitle,\n-//       String postQuestion, String postdescription, String postId) {\n-//     TextEditingController answerController = TextEditingController();\n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: const Text('Claim Item'),\n-//           content: Column(\n-//             mainAxisSize: MainAxisSize.min,\n-//             children: [\n-//               const Text('Question from the post owner:'),\n-//               const SizedBox(height: 10),\n-//               Text(postQuestion,\n-//                   style: const TextStyle(fontWeight: FontWeight.bold)),\n-//               const SizedBox(height: 20),\n-//               TextField(\n-//                 controller: answerController,\n-//                 decoration: const InputDecoration(\n-//                   labelText: 'Your answer',\n-//                   alignLabelWithHint: true,\n-//                   border: OutlineInputBorder(),\n-//                 ),\n-//                 maxLines: 3,\n-//               ),\n-//             ],\n-//           ),\n-//           actions: [\n-//             TextButton(\n-//               onPressed: () {\n-//                 Navigator.of(context).pop();\n-//               },\n-//               child: const Text('Cancel'),\n-//             ),\n-//             TextButton(\n-//               onPressed: () {\n-//                 String answer = answerController.text.trim();\n-//                 if (answer.isNotEmpty) {\n-//                   _sendAnswerToPostmaker(\n-//                       context, answer, postId, postmakerId, 'requested');\n-//                 }\n-//                 ScaffoldMessenger.of(context).showSnackBar(\n-//                   const SnackBar(\n-//                     content: Text('Request sent successfully'),\n-//                     behavior: SnackBarBehavior.floating,\n-//                     margin: EdgeInsets.all(16.0),\n-//                   ),\n-//                 );\n-//                 Navigator.of(context).pop();\n-//               },\n-//               child: const Text('Send'),\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+  void _claimPost(BuildContext context, String postmakerId, String postTitle,\n+      String postQuestion, String postdescription, String postId) {\n+    TextEditingController answerController = TextEditingController();\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Claim Item'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              const Text('Question from the post owner:'),\n+              const SizedBox(height: 10),\n+              Text(postQuestion,\n+                  style: const TextStyle(fontWeight: FontWeight.bold)),\n+              const SizedBox(height: 20),\n+              TextField(\n+                controller: answerController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your answer',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String answer = answerController.text.trim();\n+                if (answer.isNotEmpty) {\n+                  _sendAnswerToPostmaker(\n+                      context, answer, postId, postmakerId, 'requested');\n+                }\n+                ScaffoldMessenger.of(context).showSnackBar(\n+                  const SnackBar(\n+                    content: Text('Request sent successfully'),\n+                    behavior: SnackBarBehavior.floating,\n+                    margin: EdgeInsets.all(16.0),\n+                  ),\n+                );\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   void _claimedPost(BuildContext context, String postclaimerId,\n-//       String postTitle, String claimername, String postId) {\n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: Text('Claimed Item : $postTitle',\n-//               style:\n-//                   const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n-//           content: Column(\n-//             mainAxisSize: MainAxisSize.min,\n-//             children: [\n-//               Row(\n-//                 children: [\n-//                   const Text('Already claimed by :',\n-//                       style: TextStyle(fontWeight: FontWeight.bold)),\n-//                   TextButton(\n-//                       onPressed: () {\n-//                         Navigator.push(\n-//                             context,\n-//                             MaterialPageRoute(\n-//                                 builder: (_) =>\n-//                                     ProfilePage2(uid: postclaimerId)));\n-//                       },\n-//                       child: Text(\n-//                           user!.uid == postclaimerId ? 'You' : claimername,\n-//                           style: const TextStyle(fontWeight: FontWeight.bold))),\n-//                 ],\n-//               ),\n-//               const SizedBox(height: 10),\n-//             ],\n-//           ),\n-//           actions: [\n-//             TextButton(\n-//               onPressed: () {\n-//                 Navigator.of(context).pop();\n-//               },\n-//               child: const Text('Cancel'),\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+  void _claimedPost(BuildContext context, String postclaimerId,\n+      String postTitle, String claimername, String postId) {\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: Text('Claimed Item : $postTitle',\n+              style:\n+                  const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              Row(\n+                children: [\n+                  const Text('Already claimed by :',\n+                      style: TextStyle(fontWeight: FontWeight.bold)),\n+                  TextButton(\n+                      onPressed: () {\n+                        Navigator.push(\n+                            context,\n+                            MaterialPageRoute(\n+                                builder: (_) =>\n+                                    ProfilePage2(uid: postclaimerId)));\n+                      },\n+                      child: Text(\n+                          user!.uid == postclaimerId ? 'You' : claimername,\n+                          style: const TextStyle(fontWeight: FontWeight.bold))),\n+                ],\n+              ),\n+              const SizedBox(height: 10),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Cancel'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   Future<void> _sendAnswerToPostmaker(\n-//     BuildContext context,\n-//     String answer,\n-//     String postId,\n-//     String postmakerId,\n-//     String statusofRequest,\n-//   ) async {\n-//     try {\n-//       // Reference to the specific post's claims subcollection\n-//       CollectionReference claimsRef = FirebaseFirestore.instance\n-//           .collection('posts')\n-//           .doc(postId) // Get the post document using its ID\n-//           .collection('claims'); // Access the subcollection\n+  Future<void> _sendAnswerToPostmaker(\n+    BuildContext context,\n+    String answer,\n+    String postId,\n+    String postmakerId,\n+    String statusofRequest,\n+  ) async {\n+    try {\n+      // Reference to the specific post's claims subcollection\n+      CollectionReference claimsRef = FirebaseFirestore.instance\n+          .collection('posts')\n+          .doc(postId) // Get the post document using its ID\n+          .collection('claims'); // Access the subcollection\n \n-//       // Add a new claim document\n-//       await claimsRef.add({\n-//         'senderId': user!.uid,\n-//         'answer': answer,\n-//         'claimStatusC': statusofRequest,\n-//         'timestamp': Timestamp.now(),\n-//         'isClaimed': false,\n-//         'receiverId': postmakerId,\n-//       });\n+      // Add a new claim document\n+      await claimsRef.add({\n+        'senderId': user!.uid,\n+        'answer': answer,\n+        'claimStatusC': statusofRequest,\n+        'timestamp': Timestamp.now(),\n+        'isClaimed': false,\n+        'receiverId': postmakerId,\n+      });\n \n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         const SnackBar(\n-//           content: Text('Your answer has been sent to the post maker'),\n-//           behavior: SnackBarBehavior.floating,\n-//           margin: EdgeInsets.all(16.0),\n-//         ),\n-//       );\n-//     } catch (e) {\n-//       ScaffoldMessenger.of(context).showSnackBar(\n-//         SnackBar(\n-//           content: Text('Failed to send answer: $e'),\n-//           backgroundColor: Colors.red,\n-//         ),\n-//       );\n-//     }\n-//   }\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Your answer has been sent to the post maker'),\n+          behavior: SnackBarBehavior.floating,\n+          margin: EdgeInsets.all(16.0),\n+        ),\n+      );\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          content: Text('Failed to send answer: $e'),\n+          backgroundColor: Colors.red,\n+        ),\n+      );\n+    }\n+  }\n \n-//   void _sharePost(BuildContext context, String title, String description) {\n-//     final content = 'Check out this post: $title\\nDescription: $description';\n-//     final snackBar = SnackBar(content: Text('Shared! $content'));\n-//     ScaffoldMessenger.of(context).showSnackBar(snackBar);\n-//   }\n+  void _sharePost(BuildContext context, String title, String description) {\n+    final content = 'Check out this post: $title\\nDescription: $description';\n+    final snackBar = SnackBar(content: Text('Shared! $content'));\n+    ScaffoldMessenger.of(context).showSnackBar(snackBar);\n+  }\n \n-//   void _showDeleteConfirmation(BuildContext context, PostModel post) {\n-//     // postId = post.postId;\n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return AlertDialog(\n-//           title: const Text('Delete Post'),\n-//           content: const Text(\n-//             'Are you sure you want to delete this post?',\n-//             style: TextStyle(fontWeight: FontWeight.w700),\n-//           ),\n-//           actions: [\n-//             TextButton(\n-//               onPressed: () async {\n-//                 // Call your delete functionality here\n-//                 ScaffoldMessenger.of(context).showSnackBar(\n-//                   const SnackBar(\n-//                       backgroundColor: Colors.deepOrange,\n-//                       content: Text('Post deleted successfully')),\n-//                 );\n+  void _showDeleteConfirmation(BuildContext context, PostModel post) {\n+    // postId = post.postId;\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Delete Post'),\n+          content: const Text(\n+            'Are you sure you want to delete this post?',\n+            style: TextStyle(fontWeight: FontWeight.w700),\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () async {\n+                // Call your delete functionality here\n+                ScaffoldMessenger.of(context).showSnackBar(\n+                  const SnackBar(\n+                      backgroundColor: Colors.deepOrange,\n+                      content: Text('Post deleted successfully')),\n+                );\n \n-//                 await _deletePost(context, post.postId);\n+                await _deletePost(context, post.postId);\n \n-//                 Navigator.of(context).pop();\n-//               },\n-//               child: const Text(\n-//                 'Yes',\n-//                 style: TextStyle(fontWeight: FontWeight.bold),\n-//               ),\n-//             ),\n-//             TextButton(\n-//               onPressed: () => Navigator.of(context).pop(),\n-//               child: const Text(\n-//                 'No',\n-//                 style: TextStyle(fontWeight: FontWeight.bold),\n-//               ),\n-//             ),\n-//           ],\n-//         );\n-//       },\n-//     );\n-//   }\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text(\n+                'Yes',\n+                style: TextStyle(fontWeight: FontWeight.bold),\n+              ),\n+            ),\n+            TextButton(\n+              onPressed: () => Navigator.of(context).pop(),\n+              child: const Text(\n+                'No',\n+                style: TextStyle(fontWeight: FontWeight.bold),\n+              ),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n \n-//   void _showFullImageDialog(BuildContext context, String imageUrl) {\n-//     showDialog(\n-//       context: context,\n-//       builder: (BuildContext context) {\n-//         return Dialog(\n-//           child: Stack(\n-//             children: [\n-//               Image.network(imageUrl),\n-//               Positioned(\n-//                 right: 10,\n-//                 top: 10,\n-//                 child: IconButton(\n-//                   icon: const Icon(Icons.cancel, color: Colors.red),\n-//                   onPressed: () {\n-//                     Navigator.of(context).pop();\n-//                   },\n-//                 ),\n-//               ),\n-//             ],\n-//           ),\n-//         );\n-//       },\n-//     );\n-//   }\n-// }\n+  void _showFullImageDialog(BuildContext context, String imageUrl) {\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return Dialog(\n+          child: Stack(\n+            children: [\n+              Image.network(imageUrl),\n+              Positioned(\n+                right: 10,\n+                top: 10,\n+                child: IconButton(\n+                  icon: const Icon(Icons.cancel, color: Colors.red),\n+                  onPressed: () {\n+                    Navigator.of(context).pop();\n+                  },\n+                ),\n+              ),\n+            ],\n+          ),\n+        );\n+      },\n+    );\n+  }\n+}\n \n-// class FullScreenImageViewer extends StatefulWidget {\n-//   final List<String> images;\n-//   bool isMobile;\n-//    FullScreenImageViewer(this.images, this.isMobile,{super.key});\n+class FullScreenImageViewer extends StatefulWidget {\n+  final List<String> images;\n+  bool isMobile;\n+   FullScreenImageViewer(this.images, this.isMobile,{super.key});\n \n-//   @override\n-//   _FullScreenImageViewerState createState() => _FullScreenImageViewerState();\n-// }\n+  @override\n+  _FullScreenImageViewerState createState() => _FullScreenImageViewerState();\n+}\n \n-// class _FullScreenImageViewerState extends State<FullScreenImageViewer> {\n-//   int _currentIndex = 0;\n+class _FullScreenImageViewerState extends State<FullScreenImageViewer> {\n+  int _currentIndex = 0;\n \n-//   @override\n-//   Widget build(BuildContext context) {\n-//     return Scaffold(\n-//       backgroundColor:\n-//           Colors.black.withOpacity(0.8), // Background color for overlay\n-//       body: Stack(\n-//         children: [\n-//           PageView.builder(\n-//             itemCount: widget.images.length,\n-//             controller: PageController(initialPage: _currentIndex),\n-//             onPageChanged: (index) {\n-//               setState(() {\n-//                 _currentIndex = index;\n-//               });\n-//             },\n-//             itemBuilder: (context, index) {\n-//               return Center(\n-//                 child: Image.network(\n-//                   width:widget.isMobile ? MediaQuery.of(context).size.width:MediaQuery.of(context).size.width*0.5,\n-//                   widget.images[index],\n-//                   fit: BoxFit.contain,\n-//                 ),\n-//               );\n-//             },\n-//           ),\n-//           Positioned(\n-//             top: 40,\n-//             right: 20,\n-//             child: IconButton(\n-//               icon: const Icon(\n-//                 Icons.close,\n-//                 color: Colors.white,\n-//                 size: 30,\n-//               ),\n-//               onPressed: () {\n-//                 Navigator.of(context).pop();\n-//               },\n-//             ),\n-//           ),\n-//         ],\n-//       ),\n-//     );\n-//   }\n-// }\n+  @override\n+  Widget build(BuildContext context) {\n+    return Scaffold(\n+      backgroundColor:\n+          Colors.black.withOpacity(0.8), // Background color for overlay\n+      body: Stack(\n+        children: [\n+          PageView.builder(\n+            itemCount: widget.images.length,\n+            controller: PageController(initialPage: _currentIndex),\n+            onPageChanged: (index) {\n+              setState(() {\n+                _currentIndex = index;\n+              });\n+            },\n+            itemBuilder: (context, index) {\n+              return Center(\n+                child: Image.network(\n+                  width:widget.isMobile ? MediaQuery.of(context).size.width:MediaQuery.of(context).size.width*0.5,\n+                  widget.images[index],\n+                  fit: BoxFit.contain,\n+                ),\n+              );\n+            },\n+          ),\n+          Positioned(\n+            top: 40,\n+            right: 20,\n+            child: IconButton(\n+              icon: const Icon(\n+                Icons.close,\n+                color: Colors.white,\n+                size: 30,\n+              ),\n+              onPressed: () {\n+                Navigator.of(context).pop();\n+              },\n+            ),\n+          ),\n+        ],\n+      ),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1756125353948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,9 @@\n             content: Text('Failed to delete post: $e')),\n       );\n     }\n   }\n+  \n \n   Future<Map<String, String>> _fetchUserNameAndProfilePic(String uid) async {\n     if (_userCache.containsKey(uid)) {\n       return _userCache[uid]!; // Return cached data if available\n"
                },
                {
                    "date": 1756125381329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,10 +76,120 @@\n             content: Text('Failed to delete post: $e')),\n       );\n     }\n   }\n-  \n \n+  // --- ADD THIS METHOD 1: To submit a report to Firestore ---\n+  Future<void> _submitReport(\n+      BuildContext context, PostModel post, String reason,\n+      {String? details}) async {\n+    if (user == null) return; // User must be logged in to report\n+\n+    try {\n+      await FirebaseFirestore.instance.collection('reports').add({\n+        'postId': post.postId,\n+        'postOwnerId': post.postmakerId,\n+        'reporterId': user!.uid,\n+        'reason': reason,\n+        'details': details ?? '',\n+        'timestamp': FieldValue.serverTimestamp(),\n+        'status': 'pending', // For moderation tracking\n+      });\n+\n+      if (!mounted) return;\n+      Navigator.of(context).pop(); // Close the report dialog\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          backgroundColor: Colors.green,\n+          content: Text('Report submitted successfully. Thank you.'),\n+        ),\n+      );\n+    } catch (e) {\n+      if (!mounted) return;\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          backgroundColor: Colors.red,\n+          content: Text('Failed to submit report: $e'),\n+        ),\n+      );\n+    }\n+  }\n+\n+  // --- ADD THIS METHOD 2: To show the report dialog ---\n+  void _showReportDialog(BuildContext context, PostModel post) {\n+    String? selectedReason;\n+    final otherReasonController = TextEditingController();\n+    final reportReasons = [\n+      'Spam or Misleading',\n+      'Inappropriate Content',\n+      'Potential Scam',\n+      'Harassment',\n+      'Other',\n+    ];\n+\n+    showDialog(\n+      context: context,\n+      builder: (dialogContext) {\n+        return StatefulBuilder(\n+          builder: (context, setDialogState) {\n+            return AlertDialog(\n+              title: const Text('Report Post'),\n+              content: SingleChildScrollView(\n+                child: Column(\n+                  mainAxisSize: MainAxisSize.min,\n+                  children: [\n+                    ...reportReasons.map((reason) => RadioListTile<String>(\n+                          title: Text(reason),\n+                          value: reason,\n+                          groupValue: selectedReason,\n+                          onChanged: (value) {\n+                            setDialogState(() {\n+                              selectedReason = value;\n+                            });\n+                          },\n+                        )),\n+                    if (selectedReason == 'Other')\n+                      Padding(\n+                        padding: const EdgeInsets.symmetric(horizontal: 16.0),\n+                        child: TextField(\n+                          controller: otherReasonController,\n+                          autofocus: true,\n+                          decoration: const InputDecoration(\n+                            hintText: 'Please provide details...',\n+                          ),\n+                        ),\n+                      ),\n+                  ],\n+                ),\n+              ),\n+              actions: [\n+                TextButton(\n+                  onPressed: () => Navigator.of(context).pop(),\n+                  child: const Text('Cancel'),\n+                ),\n+                ElevatedButton(\n+                  onPressed: selectedReason == null\n+                      ? null // Disable button until a reason is selected\n+                      : () {\n+                          _submitReport(\n+                            dialogContext,\n+                            post,\n+                            selectedReason!,\n+                            details: selectedReason == 'Other'\n+                                ? otherReasonController.text\n+                                : null,\n+                          );\n+                        },\n+                  child: const Text('Submit'),\n+                ),\n+              ],\n+            );\n+          },\n+        );\n+      },\n+    );\n+  }\n+\n   Future<Map<String, String>> _fetchUserNameAndProfilePic(String uid) async {\n     if (_userCache.containsKey(uid)) {\n       return _userCache[uid]!; // Return cached data if available\n     }\n@@ -426,8 +536,9 @@\n                                               );\n                                             }).toList();\n                                           },\n                                         ),\n+                                 \n                                       ),\n                                     ),\n \n                                     // LOST OR FOUND\n@@ -448,9 +559,10 @@\n                                                   context,\n                                                   MaterialPageRoute(\n                                                     builder: (context) =>\n                                                         FullScreenImageViewer(\n-                                                            post.itemImages,isMobile),\n+                                                            post.itemImages,\n+                                                            isMobile),\n                                                   ),\n                                                 );\n                                               },\n                                               child: ClipRRect(\n@@ -1180,9 +1292,9 @@\n \n class FullScreenImageViewer extends StatefulWidget {\n   final List<String> images;\n   bool isMobile;\n-   FullScreenImageViewer(this.images, this.isMobile,{super.key});\n+  FullScreenImageViewer(this.images, this.isMobile, {super.key});\n \n   @override\n   _FullScreenImageViewerState createState() => _FullScreenImageViewerState();\n }\n@@ -1207,9 +1319,11 @@\n             },\n             itemBuilder: (context, index) {\n               return Center(\n                 child: Image.network(\n-                  width:widget.isMobile ? MediaQuery.of(context).size.width:MediaQuery.of(context).size.width*0.5,\n+                  width: widget.isMobile\n+                      ? MediaQuery.of(context).size.width\n+                      : MediaQuery.of(context).size.width * 0.5,\n                   widget.images[index],\n                   fit: BoxFit.contain,\n                 ),\n               );\n"
                },
                {
                    "date": 1756125386702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -507,37 +507,72 @@\n                                             style: const TextStyle(\n                                                 fontWeight: FontWeight.bold)),\n                                         subtitle: Text(\n                                             \"Location : ${post.location} , NITH\"),\n-                                        trailing: PopupMenuButton<String>(\n-                                          onSelected: (value) {\n-                                            if (value == 'Delete') {\n-                                              if (user!.uid ==\n-                                                  post.postmakerId) {\n-                                                _showDeleteConfirmation(\n-                                                    context, post);\n-                                              } else {\n-                                                ScaffoldMessenger.of(context)\n-                                                    .showSnackBar(\n-                                                  const SnackBar(\n-                                                      backgroundColor:\n-                                                          Colors.red,\n-                                                      content: Text(\n-                                                          \"You can't delete this post\")),\n-                                                );\n-                                              }\n-                                            }\n-                                          },\n-                                          itemBuilder: (BuildContext context) {\n-                                            return {'Delete'}\n-                                                .map((String choice) {\n-                                              return PopupMenuItem<String>(\n-                                                value: choice,\n-                                                child: Text(choice),\n-                                              );\n-                                            }).toList();\n-                                          },\n-                                        ),\n+                                            // --- REPLACE the existing trailing property with this ---\n+trailing: PopupMenuButton<String>(\n+  onSelected: (value) {\n+    if (value == 'Delete') {\n+      // Assumes _showDeleteConfirmation is defined elsewhere in your class\n+      _showDeleteConfirmation(context, post); \n+    } else if (value == 'Report') {\n+      _showReportDialog(context, post);\n+    }\n+  },\n+  itemBuilder: (BuildContext context) {\n+    List<PopupMenuEntry<String>> menuItems = [];\n+    \n+    // Only show the delete option if the current user is the owner\n+    if (user?.uid == post.postmakerId) {\n+      menuItems.add(\n+        const PopupMenuItem<String>(\n+          value: 'Delete',\n+          child: Text('Delete'),\n+        ),\n+      );\n+    }\n+    \n+    // Always show the report option for other users' posts\n+    if (user?.uid != post.postmakerId) {\n+      menuItems.add(\n+        const PopupMenuItem<String>(\n+          value: 'Report',\n+          child: Text('Report'),\n+        ),\n+      );\n+    }\n+    return menuItems;\n+  },\n+),\n+                                        // trailing: PopupMenuButton<String>(\n+                                        //   onSelected: (value) {\n+                                        //     if (value == 'Delete') {\n+                                        //       if (user!.uid ==\n+                                        //           post.postmakerId) {\n+                                        //         _showDeleteConfirmation(\n+                                        //             context, post);\n+                                        //       } else {\n+                                        //         ScaffoldMessenger.of(context)\n+                                        //             .showSnackBar(\n+                                        //           const SnackBar(\n+                                        //               backgroundColor:\n+                                        //                   Colors.red,\n+                                        //               content: Text(\n+                                        //                   \"You can't delete this post\")),\n+                                        //         );\n+                                        //       }\n+                                        //     }\n+                                        //   },\n+                                        //   itemBuilder: (BuildContext context) {\n+                                        //     return {'Delete'}\n+                                        //         .map((String choice) {\n+                                        //       return PopupMenuItem<String>(\n+                                        //         value: choice,\n+                                        //         child: Text(choice),\n+                                        //       );\n+                                        //     }).toList();\n+                                        //   },\n+                                        // ),\n                                  \n                                       ),\n                                     ),\n \n"
                },
                {
                    "date": 1756128864553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -488,10 +488,10 @@\n                                   children: [\n                                     // Header  of the POST (profiel,name.location,delete)\n                                     GestureDetector(\n                                       onTap: () {\n-                                        print(\n-                                            'EROROR ::: ${post.profileImageUrl}');\n+                                        // print(\n+                                        //     'EROROR ::: ${post.profileImageUrl}');\n                                         Navigator.push(\n                                             context,\n                                             MaterialPageRoute(\n                                                 builder: (_) => ProfilePage2(\n@@ -507,43 +507,45 @@\n                                             style: const TextStyle(\n                                                 fontWeight: FontWeight.bold)),\n                                         subtitle: Text(\n                                             \"Location : ${post.location} , NITH\"),\n-                                            // --- REPLACE the existing trailing property with this ---\n-trailing: PopupMenuButton<String>(\n-  onSelected: (value) {\n-    if (value == 'Delete') {\n-      // Assumes _showDeleteConfirmation is defined elsewhere in your class\n-      _showDeleteConfirmation(context, post); \n-    } else if (value == 'Report') {\n-      _showReportDialog(context, post);\n-    }\n-  },\n-  itemBuilder: (BuildContext context) {\n-    List<PopupMenuEntry<String>> menuItems = [];\n-    \n-    // Only show the delete option if the current user is the owner\n-    if (user?.uid == post.postmakerId) {\n-      menuItems.add(\n-        const PopupMenuItem<String>(\n-          value: 'Delete',\n-          child: Text('Delete'),\n-        ),\n-      );\n-    }\n-    \n-    // Always show the report option for other users' posts\n-    if (user?.uid != post.postmakerId) {\n-      menuItems.add(\n-        const PopupMenuItem<String>(\n-          value: 'Report',\n-          child: Text('Report'),\n-        ),\n-      );\n-    }\n-    return menuItems;\n-  },\n-),\n+                                        // --- REPLACE the existing trailing property with this ---\n+                                        trailing: PopupMenuButton<String>(\n+                                          onSelected: (value) {\n+                                            if (value == 'Delete') {\n+                                              // Assumes _showDeleteConfirmation is defined elsewhere in your class\n+                                              _showDeleteConfirmation(\n+                                                  context, post);\n+                                            } else if (value == 'Report') {\n+                                              _showReportDialog(context, post);\n+                                            }\n+                                          },\n+                                          itemBuilder: (BuildContext context) {\n+                                            List<PopupMenuEntry<String>>\n+                                                menuItems = [];\n+\n+                                            // Only show the delete option if the current user is the owner\n+                                            if (user?.uid == post.postmakerId) {\n+                                              menuItems.add(\n+                                                const PopupMenuItem<String>(\n+                                                  value: 'Delete',\n+                                                  child: Text('Delete'),\n+                                                ),\n+                                              );\n+                                            }\n+\n+                                            // Always show the report option for other users' posts\n+                                            if (user?.uid != post.postmakerId) {\n+                                              menuItems.add(\n+                                                const PopupMenuItem<String>(\n+                                                  value: 'Report',\n+                                                  child: Text('Report'),\n+                                                ),\n+                                              );\n+                                            }\n+                                            return menuItems;\n+                                          },\n+                                        ),\n                                         // trailing: PopupMenuButton<String>(\n                                         //   onSelected: (value) {\n                                         //     if (value == 'Delete') {\n                                         //       if (user!.uid ==\n@@ -571,9 +573,8 @@\n                                         //       );\n                                         //     }).toList();\n                                         //   },\n                                         // ),\n-                                 \n                                       ),\n                                     ),\n \n                                     // LOST OR FOUND\n"
                },
                {
                    "date": 1756129468445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1024,13 +1024,9 @@\n                 children: [\n                   const Text('Reply to'),\n                   TextButton(\n                       onPressed: () {\n-                        Navigator.push(\n-                            context,\n-                            MaterialPageRoute(\n-                                builder: (_) =>\n-                                    ProfilePage2(uid: postmakerId)));\n+                     \n                       },\n                       child: Text(postmaker))\n                 ],\n               ),\n"
                },
                {
                    "date": 1756129524540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1024,9 +1024,38 @@\n                 children: [\n                   const Text('Reply to'),\n                   TextButton(\n                       onPressed: () {\n-                     \n+                        Navigator.push(\n+                          context,\n+                          PageRouteBuilder(\n+                            transitionDuration:\n+                                const Duration(milliseconds: 400), // smoothness\n+                            pageBuilder:\n+                                (context, animation, secondaryAnimation) =>\n+                                    ProfilePage2(uid: postmakerId),\n+                            transitionsBuilder: (context, animation,\n+                                secondaryAnimation, child) {\n+                              // Curve for smoother effect\n+                              final curvedAnimation = CurvedAnimation(\n+                                parent: animation,\n+                                curve: Curves.easeInOut,\n+                              );\n+\n+                              return SlideTransition(\n+                                position: Tween<Offset>(\n+                                  begin: const Offset(\n+                                      1.0, 0.0), // start from right\n+                                  end: Offset.zero,\n+                                ).animate(curvedAnimation),\n+                                child: FadeTransition(\n+                                  opacity: curvedAnimation,\n+                                  child: child,\n+                                ),\n+                              );\n+                            },\n+                          ),\n+                        );\n                       },\n                       child: Text(postmaker))\n                 ],\n               ),\n@@ -1178,13 +1207,9 @@\n                   const Text('Already claimed by :',\n                       style: TextStyle(fontWeight: FontWeight.bold)),\n                   TextButton(\n                       onPressed: () {\n-                        Navigator.push(\n-                            context,\n-                            MaterialPageRoute(\n-                                builder: (_) =>\n-                                    ProfilePage2(uid: postclaimerId)));\n+                       \n                       },\n                       child: Text(\n                           user!.uid == postclaimerId ? 'You' : claimername,\n                           style: const TextStyle(fontWeight: FontWeight.bold))),\n"
                },
                {
                    "date": 1756129529945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1207,9 +1207,35 @@\n                   const Text('Already claimed by :',\n                       style: TextStyle(fontWeight: FontWeight.bold)),\n                   TextButton(\n                       onPressed: () {\n-                       \n+                       Navigator.push(\n+  context,\n+  PageRouteBuilder(\n+    transitionDuration: const Duration(milliseconds: 400), // smoothness\n+    pageBuilder: (context, animation, secondaryAnimation) =>\n+        ProfilePage2(uid: ps),\n+    transitionsBuilder: (context, animation, secondaryAnimation, child) {\n+      // Curve for smoother effect\n+      final curvedAnimation = CurvedAnimation(\n+        parent: animation,\n+        curve: Curves.easeInOut,\n+      );\n+\n+      return SlideTransition(\n+        position: Tween<Offset>(\n+          begin: const Offset(1.0, 0.0), // start from right\n+          end: Offset.zero,\n+        ).animate(curvedAnimation),\n+        child: FadeTransition(\n+          opacity: curvedAnimation,\n+          child: child,\n+        ),\n+      );\n+    },\n+  ),\n+);\n+\n                       },\n                       child: Text(\n                           user!.uid == postclaimerId ? 'You' : claimername,\n                           style: const TextStyle(fontWeight: FontWeight.bold))),\n"
                },
                {
                    "date": 1756129530101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1212,9 +1212,9 @@\n   context,\n   PageRouteBuilder(\n     transitionDuration: const Duration(milliseconds: 400), // smoothness\n     pageBuilder: (context, animation, secondaryAnimation) =>\n-        ProfilePage2(uid: ps),\n+        ProfilePage2(uid: pso),\n     transitionsBuilder: (context, animation, secondaryAnimation, child) {\n       // Curve for smoother effect\n       final curvedAnimation = CurvedAnimation(\n         parent: animation,\n"
                },
                {
                    "date": 1756129541853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -490,13 +490,9 @@\n                                     GestureDetector(\n                                       onTap: () {\n                                         // print(\n                                         //     'EROROR ::: ${post.profileImageUrl}');\n-                                        Navigator.push(\n-                                            context,\n-                                            MaterialPageRoute(\n-                                                builder: (_) => ProfilePage2(\n-                                                    uid: post.postmakerId)));\n+                                      \n                                       },\n                                       child: ListTile(\n                                         leading: CircleAvatar(\n                                           radius: 30,\n@@ -1207,35 +1203,38 @@\n                   const Text('Already claimed by :',\n                       style: TextStyle(fontWeight: FontWeight.bold)),\n                   TextButton(\n                       onPressed: () {\n-                       Navigator.push(\n-  context,\n-  PageRouteBuilder(\n-    transitionDuration: const Duration(milliseconds: 400), // smoothness\n-    pageBuilder: (context, animation, secondaryAnimation) =>\n-        ProfilePage2(uid: pso),\n-    transitionsBuilder: (context, animation, secondaryAnimation, child) {\n-      // Curve for smoother effect\n-      final curvedAnimation = CurvedAnimation(\n-        parent: animation,\n-        curve: Curves.easeInOut,\n-      );\n+                        Navigator.push(\n+                          context,\n+                          PageRouteBuilder(\n+                            transitionDuration:\n+                                const Duration(milliseconds: 400), // smoothness\n+                            pageBuilder:\n+                                (context, animation, secondaryAnimation) =>\n+                                    ProfilePage2(uid: postclaimerId),\n+                            transitionsBuilder: (context, animation,\n+                                secondaryAnimation, child) {\n+                              // Curve for smoother effect\n+                              final curvedAnimation = CurvedAnimation(\n+                                parent: animation,\n+                                curve: Curves.easeInOut,\n+                              );\n \n-      return SlideTransition(\n-        position: Tween<Offset>(\n-          begin: const Offset(1.0, 0.0), // start from right\n-          end: Offset.zero,\n-        ).animate(curvedAnimation),\n-        child: FadeTransition(\n-          opacity: curvedAnimation,\n-          child: child,\n-        ),\n-      );\n-    },\n-  ),\n-);\n-\n+                              return SlideTransition(\n+                                position: Tween<Offset>(\n+                                  begin: const Offset(\n+                                      1.0, 0.0), // start from right\n+                                  end: Offset.zero,\n+                                ).animate(curvedAnimation),\n+                                child: FadeTransition(\n+                                  opacity: curvedAnimation,\n+                                  child: child,\n+                                ),\n+                              );\n+                            },\n+                          ),\n+                        );\n                       },\n                       child: Text(\n                           user!.uid == postclaimerId ? 'You' : claimername,\n                           style: const TextStyle(fontWeight: FontWeight.bold))),\n"
                },
                {
                    "date": 1756129548836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -490,9 +490,42 @@\n                                     GestureDetector(\n                                       onTap: () {\n                                         // print(\n                                         //     'EROROR ::: ${post.profileImageUrl}');\n-                                      \n+                                        Navigator.push(\n+                                          context,\n+                                          PageRouteBuilder(\n+                                            transitionDuration: const Duration(\n+                                                milliseconds:\n+                                                    400), // smoothness\n+                                            pageBuilder: (context, animation,\n+                                                    secondaryAnimation) =>\n+                                                ProfilePage2(uid: ),\n+                                            transitionsBuilder: (context,\n+                                                animation,\n+                                                secondaryAnimation,\n+                                                child) {\n+                                              // Curve for smoother effect\n+                                              final curvedAnimation =\n+                                                  CurvedAnimation(\n+                                                parent: animation,\n+                                                curve: Curves.easeInOut,\n+                                              );\n+\n+                                              return SlideTransition(\n+                                                position: Tween<Offset>(\n+                                                  begin: const Offset(1.0,\n+                                                      0.0), // start from right\n+                                                  end: Offset.zero,\n+                                                ).animate(curvedAnimation),\n+                                                child: FadeTransition(\n+                                                  opacity: curvedAnimation,\n+                                                  child: child,\n+                                                ),\n+                                              );\n+                                            },\n+                                          ),\n+                                        );\n                                       },\n                                       child: ListTile(\n                                         leading: CircleAvatar(\n                                           radius: 30,\n"
                }
            ],
            "date": 1756118698349,
            "name": "Commit-0",
            "content": "// import 'package:carousel_slider/carousel_slider.dart';\n// import 'package:cloud_firestore/cloud_firestore.dart';\n// import 'package:firebase_auth/firebase_auth.dart';\n// import 'package:flutter/material.dart';\n// import 'package:intl/intl.dart';\n// import 'package:l_f/Frontend/Contants/lists.dart';\n// import 'package:l_f/Frontend/Home/Post/post_model.dart';\n// import 'package:l_f/Frontend/Profile/user_see_page.dart';\n\n// class LostFoundPage extends StatefulWidget {\n//   const LostFoundPage({super.key});\n\n//   @override\n//   State<LostFoundPage> createState() => _LostFoundPageState();\n// }\n\n// class _LostFoundPageState extends State<LostFoundPage> {\n//   final Map<String, Map<String, String>> _userCache =\n//       {}; // Cache to store user data\n//   User? user = FirebaseAuth.instance.currentUser;\n//   // String? postId;\n\n//   List<PostModel> _filteredPosts = [];\n\n//   // Function to fetch filtered posts from Firestore\n//   void _filterPosts(\n//       String status, String location, DateTime? uploadDate, String title) {\n//     Query query = FirebaseFirestore.instance.collection('posts');\n\n//     // Apply filters\n//     if (status.isNotEmpty) {\n//       query = query.where('status', isEqualTo: status);\n//     }\n//     if (location.isNotEmpty) {\n//       query = query.where('location', isEqualTo: location);\n//     }\n//     if (uploadDate != null) {\n//       query = query.where('uploadDate', isEqualTo: uploadDate);\n//     }\n//     if (title.isNotEmpty) {\n//       query = query.where('itemTitle', isEqualTo: title);\n//     }\n\n//     // Get the results and update the UI\n//     query.get().then((snapshot) {\n//       setState(() {\n//         _filteredPosts = snapshot.docs\n//             .map((doc) => PostModel.fromJson(doc as Map<String, dynamic>))\n//             .toList();\n//       });\n//     });\n//   }\n\n//   String _formatDate(Timestamp? timestamp) {\n//     if (timestamp == null) return 'Not available';\n//     DateTime date = timestamp.toDate();\n//     return DateFormat('dd MMMM yyyy').format(date);\n//   }\n\n//   Future<void> _deletePost(BuildContext context, String postId) async {\n//     try {\n//       await FirebaseFirestore.instance.collection('posts').doc(postId).delete();\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         const SnackBar(\n//           backgroundColor: Colors.green,\n//           content: Text('Post deleted successfully'),\n//           behavior: SnackBarBehavior.floating,\n//           margin: EdgeInsets.all(16.0),\n//           duration: Duration(seconds: 2),\n//         ),\n//       );\n//     } catch (e) {\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         SnackBar(\n//             backgroundColor: Colors.red,\n//             content: Text('Failed to delete post: $e')),\n//       );\n//     }\n//   }\n\n//   Future<Map<String, String>> _fetchUserNameAndProfilePic(String uid) async {\n//     if (_userCache.containsKey(uid)) {\n//       return _userCache[uid]!; // Return cached data if available\n//     }\n\n//     try {\n//       DocumentSnapshot userDoc =\n//           await FirebaseFirestore.instance.collection('users').doc(uid).get();\n\n//       if (!userDoc.exists) {\n//         throw Exception(\"User not found.\");\n//       }\n\n//       Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n\n//       String name = userData['name'] ?? 'NITH User';\n//       String profileImage = userData['profileImage'] ?? '';\n\n//       // Cache the user data\n//       _userCache[uid] = {\n//         'name': name,\n//         'profileImage': profileImage,\n//       };\n\n//       return _userCache[uid]!;\n//     } catch (e) {\n//       print(\"Error fetching user profile: $e\");\n//       throw Exception(\"Error fetching user profile.\");\n//     }\n//   }\n\n//   Stream<QuerySnapshot>? _postStream;\n\n//   @override\n//   void initState() {\n//     super.initState();\n//     // Initialize stream without filters\n//     _postStream = FirebaseFirestore.instance\n//         .collection('posts')\n//         .orderBy('timestamp', descending: true)\n//         .snapshots();\n//   }\n\n//   void _applyFilters() {\n//     // Start with the collection reference\n//     Query query = FirebaseFirestore.instance.collection('posts');\n\n//     // Apply Type filter (Lost/Found)\n//     if (selectedType != 'All') {\n//       query = query.where('status', isEqualTo: selectedType);\n//     }\n\n//     // Apply Location filter\n//     if (selectedLocation != 'Campus, NITH') {\n//       query = query.where('location', isEqualTo: selectedLocation);\n//     }\n\n//     // Apply Item Category filter\n//     if (selectedCategory != 'All') {\n//       query = query.where('item', isEqualTo: selectedCategory);\n//     }\n\n//     // Apply Date filter (based on upload timestamp)\n//     DateTime now = DateTime.now();\n//     DateTime? startDate;\n\n//     switch (selectedDateRange) {\n//       case 'Today':\n//         startDate = DateTime(now.year, now.month, now.day);\n//         break;\n//       case 'This Week':\n//         startDate = now.subtract(Duration(days: now.weekday - 1));\n//         break;\n//       case 'This Month':\n//         startDate = DateTime(now.year, now.month, 1);\n//         break;\n//       case 'This Year':\n//         startDate = DateTime(now.year, 1, 1);\n//         break;\n//       default:\n//         startDate = null;\n//     }\n\n//     if (startDate != null) {\n//       query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n//     }\n\n//     // Update the stream for the StreamBuilder\n//     setState(() {\n//       _postStream = query.orderBy('timestamp', descending: true).snapshots();\n//     });\n//   }\n\n//   String selectedType = 'All';\n//   String selectedLocation = 'Campus, NITH';\n//   String selectedCategory = 'All';\n//   String selectedDateRange = 'All Time';\n\n// // Dummy lists for dropdowns (replace with your provided lists)\n//   List<String> itemTypes = ['All', 'Lost', 'Found'];\n//   List<String> locations = locationsList;\n//   List<String> categories = [\n//     'All',\n//     'Mobile Phone',\n//     'Laptop',\n//     'Charger',\n//     'Wallet',\n//     'ID Card',\n//     'Hoodie',\n//     'Jacket/Coat',\n//     'Bat',\n//     'Electronics Item',\n//     'Cloth',\n//     'Belt',\n//     'Ball',\n//     'Book',\n//     'Earphones',\n//     'Earbuds',\n//     'Water Bottle',\n//     'Watch',\n//     'Specs',\n//     'Jewellry',\n//     'Shoes',\n//     'Keys',\n//     'Umbrella',\n//     'Other'\n//   ];\n//   List<String> dateRanges = [\n//     'All Time',\n//     'Today',\n//     'This Week',\n//     'This Month',\n//     'This Year'\n//   ];\n\n// // Filter Dropdowns\n//   Widget buildDropdowns() {\n//     return LayoutBuilder(builder: (context, constraints) {\n//       return Padding(\n//         padding: const EdgeInsets.symmetric(horizontal: 12.0),\n//         child: Row(\n//           mainAxisAlignment: MainAxisAlignment.center,\n//           mainAxisSize: MainAxisSize.min,\n//           children: [\n//             buildDropdown(selectedType, itemTypes, (newValue) {\n//               setState(() {\n//                 selectedType = newValue!;\n//               });\n//               _applyFilters();\n//             }),\n//             const SizedBox(width: 10),\n//             buildDropdown(selectedLocation, locations, (newValue) {\n//               setState(() {\n//                 selectedLocation = newValue!;\n//               });\n//               _applyFilters();\n//             }),\n//             const SizedBox(width: 10),\n//             buildDropdown(selectedCategory, categories, (newValue) {\n//               setState(() {\n//                 selectedCategory = newValue!;\n//               });\n//               _applyFilters();\n//             }),\n//             const SizedBox(width: 10),\n//             buildDropdown(selectedDateRange, dateRanges, (newValue) {\n//               setState(() {\n//                 selectedDateRange = newValue!;\n//               });\n//               _applyFilters();\n//             }),\n//           ],\n//         ),\n//       );\n//     });\n//   }\n\n// // Helper method to create a DropdownButton\n//   Widget buildDropdown(String selectedValue, List<String> items,\n//       ValueChanged<String?> onChanged) {\n//     return DropdownButton<String>(\n//       value: selectedValue,\n//       items: items.map((String value) {\n//         return DropdownMenuItem<String>(\n//           value: value,\n//           child: Text(value),\n//         );\n//       }).toList(),\n//       onChanged: onChanged,\n//     );\n//   }\n\n//   @override\n//   Widget build(BuildContext context) {\n//     bool isMobile = MediaQuery.of(context).size.width < 600;\n//     return Scaffold(\n//       body: Column(\n//         children: [\n//           SingleChildScrollView(\n//               scrollDirection: Axis.horizontal, child: buildDropdowns()),\n//           Expanded(\n//             child: StreamBuilder<QuerySnapshot>(\n//               stream: _postStream,\n//               builder: (context, snapshot) {\n//                 if (snapshot.connectionState == ConnectionState.waiting) {\n//                   return const Center(child: CircularProgressIndicator());\n//                 }\n//                 if (snapshot.hasError) {\n//                   print('ERROR ${snapshot.error}');\n//                   return const Center(child: Text('Error loading posts'));\n//                 }\n\n//                 if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n//                   return const Center(\n//                       child: Center(child: Text('No posts available')));\n//                 }\n\n//                 final posts = snapshot.data!.docs.map((doc) {\n//                   final data = doc.data() as Map<String, dynamic>;\n//                   final String uid = data['postmakerId'];\n//                   final bool isClaimed = data['isClaimed'] ?? false;\n//                   final String? claimerUid = data['postClaimer'];\n//                   print(\"post claimerasss: : $claimerUid\");\n//                   print(\"POST IDDDDDDDD : ${data['postId']}\");\n//                   print(\"Is Post Claimed: $isClaimed\");\n\n//                   return _fetchUserNameAndProfilePic(uid)\n//                       .then((userDetails) async {\n//                     String postClaimerName = '';\n//                     String postClaimerProfilePic = '';\n\n//                     if (isClaimed && claimerUid != null) {\n//                       final claimerDetails =\n//                           await _fetchUserNameAndProfilePic(claimerUid);\n//                       postClaimerName = claimerDetails['name'] ?? 'NITH User';\n//                       postClaimerProfilePic = claimerDetails['profileImage']!;\n//                     }\n\n//                     return PostModel(\n//                       userName: userDetails['name'] ?? 'NITH User',\n//                       profileImageUrl: userDetails['profileImage'] ??\n//                           'https://static.wikia.nocookie.net/logopedia/images/e/ec/220px-National_Institute_of_Technology,_Hamirpur_Logo.png/revision/latest?cb=20200330143312',\n//                       postTime: _formatDate(data['timestamp']),\n//                       itemImages: List<String>.from(data['imageUrls'] ?? ''),\n//                       status: data['status'] ?? '',\n//                       title: data['item'] ?? '',\n//                       location: data['location'] ?? '',\n//                       description: data['description'] ?? '',\n//                       postmakerId: data['postmakerId'],\n//                       question: data['question'],\n//                       postId: data['postId'],\n//                       claimStatus: data['claimStatus'],\n//                       isClaimed: isClaimed,\n//                       postclaimerId: data['postClaimer'],\n//                       postClaimer:\n//                           postClaimerName.isNotEmpty ? postClaimerName : null,\n//                       postClaimerPic: postClaimerProfilePic.isNotEmpty\n//                           ? postClaimerProfilePic\n//                           : null,\n//                     );\n//                   });\n//                 });\n\n//                 return FutureBuilder<List<PostModel>>(\n//                   future: Future.wait(posts.toList()),\n//                   builder: (context, futureSnapshot) {\n//                     if (futureSnapshot.connectionState ==\n//                         ConnectionState.waiting) {\n//                       return const Center(child: CircularProgressIndicator());\n//                     }\n\n//                     if (futureSnapshot.hasError) {\n//                       print(\"Error : ${futureSnapshot.error}\");\n//                       return const Center(child: Text('Error loading posts'));\n//                     }\n\n//                     final postsList = futureSnapshot.data ?? [];\n\n//                     return ListView.builder(\n//                       itemCount: postsList.length,\n//                       itemBuilder: (context, index) {\n//                         final post = postsList[index];\n//                         return Padding(\n//                           padding: const EdgeInsets.all(2.0),\n//                           child: Center(\n//                             child: SizedBox(\n//                               width: isMobile\n//                                   ? MediaQuery.of(context).size.width\n//                                   : 600,\n//                               child: Card(\n//                                 elevation: 5,\n//                                 shape: RoundedRectangleBorder(\n//                                   borderRadius: BorderRadius.circular(10),\n//                                 ),\n//                                 child: Column(\n//                                   crossAxisAlignment: CrossAxisAlignment.start,\n//                                   children: [\n//                                     // Header  of the POST (profiel,name.location,delete)\n//                                     GestureDetector(\n//                                       onTap: () {\n//                                         print(\n//                                             'EROROR ::: ${post.profileImageUrl}');\n//                                         Navigator.push(\n//                                             context,\n//                                             MaterialPageRoute(\n//                                                 builder: (_) => ProfilePage2(\n//                                                     uid: post.postmakerId)));\n//                                       },\n//                                       child: ListTile(\n//                                         leading: CircleAvatar(\n//                                           radius: 30,\n//                                           backgroundImage: NetworkImage(\n//                                               post.profileImageUrl),\n//                                         ),\n//                                         title: Text(post.userName,\n//                                             style: const TextStyle(\n//                                                 fontWeight: FontWeight.bold)),\n//                                         subtitle: Text(\n//                                             \"Location : ${post.location} , NITH\"),\n//                                         trailing: PopupMenuButton<String>(\n//                                           onSelected: (value) {\n//                                             if (value == 'Delete') {\n//                                               if (user!.uid ==\n//                                                   post.postmakerId) {\n//                                                 _showDeleteConfirmation(\n//                                                     context, post);\n//                                               } else {\n//                                                 ScaffoldMessenger.of(context)\n//                                                     .showSnackBar(\n//                                                   const SnackBar(\n//                                                       backgroundColor:\n//                                                           Colors.red,\n//                                                       content: Text(\n//                                                           \"You can't delete this post\")),\n//                                                 );\n//                                               }\n//                                             }\n//                                           },\n//                                           itemBuilder: (BuildContext context) {\n//                                             return {'Delete'}\n//                                                 .map((String choice) {\n//                                               return PopupMenuItem<String>(\n//                                                 value: choice,\n//                                                 child: Text(choice),\n//                                               );\n//                                             }).toList();\n//                                           },\n//                                         ),\n//                                       ),\n//                                     ),\n\n//                                     // LOST OR FOUND\n//                                     Stack(\n//                                       children: [\n//                                         CarouselSlider(\n//                                           options: CarouselOptions(\n//                                             autoPlay: true,\n//                                             height: 450.0,\n//                                             enlargeCenterPage: true,\n//                                           ),\n//                                           items: post.itemImages\n//                                               .map<Widget>((imageUrl) {\n//                                             return GestureDetector(\n//                                               onTap: () {\n//                                                 // Open image viewer when the image is tapped\n//                                                 Navigator.push(\n//                                                   context,\n//                                                   MaterialPageRoute(\n//                                                     builder: (context) =>\n//                                                         FullScreenImageViewer(\n//                                                             post.itemImages,isMobile),\n//                                                   ),\n//                                                 );\n//                                               },\n//                                               child: ClipRRect(\n//                                                 borderRadius:\n//                                                     BorderRadius.circular(10),\n//                                                 child: Image.network(\n//                                                   imageUrl,\n//                                                   fit: BoxFit.cover,\n//                                                   width: MediaQuery.of(context)\n//                                                       .size\n//                                                       .width,\n//                                                   errorBuilder: (context, error,\n//                                                       stackTrace) {\n//                                                     return const Icon(\n//                                                         Icons.error);\n//                                                   },\n//                                                 ),\n//                                               ),\n//                                             );\n//                                           }).toList(),\n//                                         ),\n//                                         Positioned(\n//                                           top: isMobile ? 16 : 6,\n//                                           left: 50,\n//                                           child: Container(\n//                                             padding: const EdgeInsets.symmetric(\n//                                                 horizontal: 10, vertical: 5),\n//                                             decoration: BoxDecoration(\n//                                               color: post.status == 'Lost'\n//                                                   ? Colors.red\n//                                                   : Colors.green,\n//                                               borderRadius:\n//                                                   BorderRadius.circular(5),\n//                                             ),\n//                                             child: Text(\n//                                               post.status,\n//                                               style: const TextStyle(\n//                                                 color: Colors.white,\n//                                                 fontWeight: FontWeight.bold,\n//                                               ),\n//                                             ),\n//                                           ),\n//                                         ),\n//                                       ],\n//                                     ),\n\n//                                     Padding(\n//                                       padding: const EdgeInsets.symmetric(\n//                                           horizontal: 18.0, vertical: 10),\n//                                       child: Column(\n//                                         crossAxisAlignment:\n//                                             CrossAxisAlignment.start,\n//                                         children: [\n//                                           // ITEM item,date\n//                                           Row(\n//                                             mainAxisAlignment:\n//                                                 MainAxisAlignment.spaceBetween,\n//                                             children: [\n//                                               Text(\n//                                                 post.title == 'Other'\n//                                                     ? '${post.status} Item'\n//                                                     : post.title,\n//                                                 overflow: TextOverflow.clip,\n//                                                 softWrap: true,\n//                                                 style: const TextStyle(\n//                                                     fontSize: 18,\n//                                                     fontWeight:\n//                                                         FontWeight.bold),\n//                                               ),\n//                                               const SizedBox(width: 5),\n//                                               Row(\n//                                                 children: [\n//                                                   Text(\"${post.status} On : \",\n//                                                       overflow:\n//                                                           TextOverflow.clip,\n//                                                       softWrap: true,\n//                                                       style: const TextStyle(\n//                                                           color: Colors.red,\n//                                                           fontWeight:\n//                                                               FontWeight.bold)),\n//                                                   Text(post.postTime,\n//                                                       style: const TextStyle(\n//                                                           fontWeight:\n//                                                               FontWeight.bold)),\n//                                                 ],\n//                                               ),\n//                                             ],\n//                                           ),\n//                                           const SizedBox(height: 5),\n\n//                                           //DESCRIPTION\n//                                           Row(\n//                                             crossAxisAlignment: CrossAxisAlignment\n//                                                 .start, // Align text to the top\n//                                             children: [\n//                                               const Text(\n//                                                 \"Description : \",\n//                                                 style: TextStyle(\n//                                                   fontWeight: FontWeight.bold,\n//                                                 ),\n//                                               ),\n//                                               const SizedBox(width: 4),\n//                                               Expanded(\n//                                                 child: Text(\n//                                                   post.description,\n//                                                   overflow: TextOverflow.clip,\n//                                                   softWrap: true,\n//                                                   style: const TextStyle(\n//                                                     fontSize: 14,\n//                                                   ),\n//                                                 ),\n//                                               ),\n//                                             ],\n//                                           ),\n//                                           const SizedBox(height: 10),\n\n//                                           //BUTTONNS\n//                                           StreamBuilder<QuerySnapshot>(\n//                                               stream: FirebaseFirestore.instance\n//                                                   .collection('posts')\n//                                                   .doc(post.postId)\n//                                                   .collection('claims')\n//                                                   .where('senderId',\n//                                                       isEqualTo: user!.uid)\n//                                                   .snapshots(),\n//                                               builder:\n//                                                   (context, claimSnapshot) {\n//                                                 if (claimSnapshot\n//                                                         .connectionState ==\n//                                                     ConnectionState.waiting) {\n//                                                   return const Center(\n//                                                       child:\n//                                                           CircularProgressIndicator());\n//                                                 }\n\n//                                                 bool userHasRequestedClaim =\n//                                                     false;\n\n//                                                 if (claimSnapshot.hasData &&\n//                                                     claimSnapshot.data!.docs\n//                                                         .isNotEmpty) {\n//                                                   final claimData =\n//                                                       claimSnapshot\n//                                                               .data!.docs.first\n//                                                               .data()\n//                                                           as Map<String,\n//                                                               dynamic>;\n\n//                                                   if (claimData[\n//                                                           'claimStatusC'] ==\n//                                                       'requested') {\n//                                                     userHasRequestedClaim =\n//                                                         true;\n//                                                   }\n//                                                   if (claimData[\n//                                                               'claimStatusC'] ==\n//                                                           'accepted' ||\n//                                                       claimData[\n//                                                               'claimStatusC'] ==\n//                                                           'declined') {\n//                                                     userHasRequestedClaim =\n//                                                         false;\n//                                                   }\n//                                                 }\n\n//                                                 return Row(\n//                                                     mainAxisAlignment:\n//                                                         MainAxisAlignment\n//                                                             .spaceAround,\n//                                                     children: [\n//                                                       GestureDetector(\n//                                                         onTap: () {\n//                                                           _sharePost(\n//                                                               context,\n//                                                               post.title,\n//                                                               post.description);\n//                                                         },\n//                                                         child: const Row(\n//                                                           children: [\n//                                                             Icon(Icons\n//                                                                 .share_rounded),\n//                                                             SizedBox(width: 3),\n//                                                             Text('Share'),\n//                                                           ],\n//                                                         ),\n//                                                       ),\n//                                                       if (post.postmakerId !=\n//                                                           user!.uid)\n//                                                         ElevatedButton(\n//                                                           onPressed: () {\n//                                                             _replyToPostmaker(\n//                                                                 context,\n//                                                                 post.postmakerId,\n//                                                                 post.userName,\n//                                                                 post.postId);\n//                                                           },\n//                                                           style: ElevatedButton\n//                                                               .styleFrom(\n//                                                             backgroundColor:\n//                                                                 Colors.green\n//                                                                     .shade600,\n//                                                             shape:\n//                                                                 RoundedRectangleBorder(\n//                                                               borderRadius:\n//                                                                   BorderRadius\n//                                                                       .circular(\n//                                                                           10),\n//                                                             ),\n//                                                           ),\n//                                                           child: const Row(\n//                                                             mainAxisAlignment:\n//                                                                 MainAxisAlignment\n//                                                                     .center,\n//                                                             children: [\n//                                                               Icon(Icons.reply,\n//                                                                   color: Colors\n//                                                                       .white),\n//                                                               SizedBox(\n//                                                                   width: 3),\n//                                                               Text(\n//                                                                 'Reply',\n//                                                                 style: TextStyle(\n//                                                                     fontSize:\n//                                                                         16,\n//                                                                     color: Colors\n//                                                                         .white),\n//                                                               ),\n//                                                             ],\n//                                                           ),\n//                                                         ),\n\n//                                                       //Claimed Button\n//                                                       if (post.status !=\n//                                                               'Lost' &&\n//                                                           post.isClaimed ==\n//                                                               true)\n//                                                         ElevatedButton(\n//                                                           onPressed: () {\n//                                                             _claimedPost(\n//                                                                 context,\n//                                                                 post.postclaimerId!,\n//                                                                 post.title,\n//                                                                 post.postClaimer!,\n//                                                                 post.postId);\n//                                                           },\n//                                                           style: ElevatedButton\n//                                                               .styleFrom(\n//                                                             backgroundColor:\n//                                                                 Colors\n//                                                                     .deepOrange\n//                                                                     .shade600,\n//                                                             shape:\n//                                                                 RoundedRectangleBorder(\n//                                                               borderRadius:\n//                                                                   BorderRadius\n//                                                                       .circular(\n//                                                                           10),\n//                                                             ),\n//                                                           ),\n//                                                           child: const Row(\n//                                                             mainAxisAlignment:\n//                                                                 MainAxisAlignment\n//                                                                     .center,\n//                                                             children: [\n//                                                               Icon(\n//                                                                   Icons\n//                                                                       .back_hand,\n//                                                                   color: Colors\n//                                                                       .white),\n//                                                               SizedBox(\n//                                                                   width: 3),\n//                                                               Text(\n//                                                                 'Claimed',\n//                                                                 style: TextStyle(\n//                                                                     fontSize:\n//                                                                         16,\n//                                                                     color: Colors\n//                                                                         .white),\n//                                                               ),\n//                                                             ],\n//                                                           ),\n//                                                         ),\n\n//                                                       // Claim Buttton\n//                                                       if (post.postmakerId !=\n//                                                               user!.uid &&\n//                                                           post.status ==\n//                                                               'Found' &&\n//                                                           post.isClaimed ==\n//                                                               false &&\n//                                                           !userHasRequestedClaim)\n//                                                         ElevatedButton(\n//                                                           onPressed: () {\n//                                                             _claimPost(\n//                                                                 context,\n//                                                                 post.postmakerId,\n//                                                                 post.title,\n//                                                                 post.question!,\n//                                                                 post.description,\n//                                                                 post.postId);\n//                                                           },\n//                                                           style: ElevatedButton\n//                                                               .styleFrom(\n//                                                             backgroundColor:\n//                                                                 Colors\n//                                                                     .deepOrange\n//                                                                     .shade600,\n//                                                             shape:\n//                                                                 RoundedRectangleBorder(\n//                                                               borderRadius:\n//                                                                   BorderRadius\n//                                                                       .circular(\n//                                                                           10),\n//                                                             ),\n//                                                           ),\n//                                                           child: const Row(\n//                                                             mainAxisAlignment:\n//                                                                 MainAxisAlignment\n//                                                                     .center,\n//                                                             children: [\n//                                                               Icon(\n//                                                                   Icons\n//                                                                       .back_hand,\n//                                                                   color: Colors\n//                                                                       .white),\n//                                                               SizedBox(\n//                                                                   width: 6),\n//                                                               Text(\n//                                                                 'Claim',\n//                                                                 style: TextStyle(\n//                                                                     fontSize:\n//                                                                         16,\n//                                                                     color: Colors\n//                                                                         .white),\n//                                                               ),\n//                                                             ],\n//                                                           ),\n//                                                         ),\n\n//                                                       // Request Button\n//                                                       if (post.postmakerId !=\n//                                                               user!.uid &&\n//                                                           post.status ==\n//                                                               'Found' &&\n//                                                           post.isClaimed ==\n//                                                               false &&\n//                                                           userHasRequestedClaim)\n//                                                         ElevatedButton(\n//                                                           onPressed: () {},\n//                                                           style: ElevatedButton\n//                                                               .styleFrom(\n//                                                             backgroundColor:\n//                                                                 Colors\n//                                                                     .deepOrange\n//                                                                     .shade600,\n//                                                             shape:\n//                                                                 RoundedRectangleBorder(\n//                                                               borderRadius:\n//                                                                   BorderRadius\n//                                                                       .circular(\n//                                                                           10),\n//                                                             ),\n//                                                           ),\n//                                                           child: const Row(\n//                                                             mainAxisAlignment:\n//                                                                 MainAxisAlignment\n//                                                                     .center,\n//                                                             children: [\n//                                                               Icon(\n//                                                                   Icons\n//                                                                       .back_hand,\n//                                                                   color: Colors\n//                                                                       .white),\n//                                                               SizedBox(\n//                                                                   width: 3),\n//                                                               Text(\n//                                                                 'Requested',\n//                                                                 style: TextStyle(\n//                                                                     fontSize:\n//                                                                         16,\n//                                                                     color: Colors\n//                                                                         .white),\n//                                                               ),\n//                                                             ],\n//                                                           ),\n//                                                         )\n//                                                     ]);\n//                                               })\n//                                         ],\n//                                       ),\n//                                     ),\n//                                   ],\n//                                 ),\n//                               ),\n//                             ),\n//                           ),\n//                         );\n//                       },\n//                     );\n//                   },\n//                 );\n//               },\n//             ),\n//           ),\n//         ],\n//       ),\n//     );\n//   }\n\n//   void _replyToPostmaker(BuildContext context, String postmakerId,\n//       String postmaker, String postId) {\n//     TextEditingController messageController = TextEditingController();\n\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return AlertDialog(\n//           title: const Text('Send a Reply'),\n//           content: Column(\n//             mainAxisSize: MainAxisSize.min,\n//             children: [\n//               Row(\n//                 children: [\n//                   const Text('Reply to'),\n//                   TextButton(\n//                       onPressed: () {\n//                         Navigator.push(\n//                             context,\n//                             MaterialPageRoute(\n//                                 builder: (_) =>\n//                                     ProfilePage2(uid: postmakerId)));\n//                       },\n//                       child: Text(postmaker))\n//                 ],\n//               ),\n//               const SizedBox(height: 10),\n//               TextField(\n//                 controller: messageController,\n//                 decoration: const InputDecoration(\n//                   labelText: 'Your message',\n//                   alignLabelWithHint: true,\n//                   border: OutlineInputBorder(),\n//                 ),\n//                 maxLines: 3,\n//               ),\n//             ],\n//           ),\n//           actions: [\n//             TextButton(\n//               onPressed: () {\n//                 Navigator.of(context).pop(); // Close the dialog without sending\n//               },\n//               child: const Text('Cancel'),\n//             ),\n//             TextButton(\n//               onPressed: () {\n//                 String message = messageController.text.trim();\n//                 if (message.isNotEmpty) {\n//                   _sendMessageToPostmaker(\n//                       context, postmakerId, message, postId);\n//                 }\n//                 ScaffoldMessenger.of(context).showSnackBar(\n//                   const SnackBar(\n//                     content: Text('Message sent successfully'),\n//                     behavior: SnackBarBehavior.floating,\n//                     margin: EdgeInsets.all(16.0),\n//                   ),\n//                 );\n//                 Navigator.of(context).pop(); // Close the dialog after sending\n//               },\n//               child: const Text('Send'),\n//             ),\n//           ],\n//         );\n//       },\n//     );\n//   }\n\n//   Future<void> _sendMessageToPostmaker(BuildContext context, String postmakerId,\n//       String message, String postId) async {\n//     try {\n//       // Add a chat message to Firestore\n//       await FirebaseFirestore.instance.collection('chats').add({\n//         'senderId': user!.uid,\n//         'receiverId': postmakerId,\n//         'participants': [user!.uid, postmakerId],\n//         'message': message,\n//         'postId': postId,\n//         'timestamp': Timestamp.now(),\n//       });\n\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         const SnackBar(\n//           content: Text('Message sent successfully'),\n//           behavior: SnackBarBehavior.floating,\n//           margin: EdgeInsets.all(16.0),\n//         ),\n//       );\n//     } catch (e) {\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         SnackBar(\n//           content: Text('Failed to send message: $e'),\n//           backgroundColor: Colors.red,\n//         ),\n//       );\n//     }\n//   }\n\n//   void _claimPost(BuildContext context, String postmakerId, String postTitle,\n//       String postQuestion, String postdescription, String postId) {\n//     TextEditingController answerController = TextEditingController();\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return AlertDialog(\n//           title: const Text('Claim Item'),\n//           content: Column(\n//             mainAxisSize: MainAxisSize.min,\n//             children: [\n//               const Text('Question from the post owner:'),\n//               const SizedBox(height: 10),\n//               Text(postQuestion,\n//                   style: const TextStyle(fontWeight: FontWeight.bold)),\n//               const SizedBox(height: 20),\n//               TextField(\n//                 controller: answerController,\n//                 decoration: const InputDecoration(\n//                   labelText: 'Your answer',\n//                   alignLabelWithHint: true,\n//                   border: OutlineInputBorder(),\n//                 ),\n//                 maxLines: 3,\n//               ),\n//             ],\n//           ),\n//           actions: [\n//             TextButton(\n//               onPressed: () {\n//                 Navigator.of(context).pop();\n//               },\n//               child: const Text('Cancel'),\n//             ),\n//             TextButton(\n//               onPressed: () {\n//                 String answer = answerController.text.trim();\n//                 if (answer.isNotEmpty) {\n//                   _sendAnswerToPostmaker(\n//                       context, answer, postId, postmakerId, 'requested');\n//                 }\n//                 ScaffoldMessenger.of(context).showSnackBar(\n//                   const SnackBar(\n//                     content: Text('Request sent successfully'),\n//                     behavior: SnackBarBehavior.floating,\n//                     margin: EdgeInsets.all(16.0),\n//                   ),\n//                 );\n//                 Navigator.of(context).pop();\n//               },\n//               child: const Text('Send'),\n//             ),\n//           ],\n//         );\n//       },\n//     );\n//   }\n\n//   void _claimedPost(BuildContext context, String postclaimerId,\n//       String postTitle, String claimername, String postId) {\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return AlertDialog(\n//           title: Text('Claimed Item : $postTitle',\n//               style:\n//                   const TextStyle(fontSize: 19, fontWeight: FontWeight.bold)),\n//           content: Column(\n//             mainAxisSize: MainAxisSize.min,\n//             children: [\n//               Row(\n//                 children: [\n//                   const Text('Already claimed by :',\n//                       style: TextStyle(fontWeight: FontWeight.bold)),\n//                   TextButton(\n//                       onPressed: () {\n//                         Navigator.push(\n//                             context,\n//                             MaterialPageRoute(\n//                                 builder: (_) =>\n//                                     ProfilePage2(uid: postclaimerId)));\n//                       },\n//                       child: Text(\n//                           user!.uid == postclaimerId ? 'You' : claimername,\n//                           style: const TextStyle(fontWeight: FontWeight.bold))),\n//                 ],\n//               ),\n//               const SizedBox(height: 10),\n//             ],\n//           ),\n//           actions: [\n//             TextButton(\n//               onPressed: () {\n//                 Navigator.of(context).pop();\n//               },\n//               child: const Text('Cancel'),\n//             ),\n//           ],\n//         );\n//       },\n//     );\n//   }\n\n//   Future<void> _sendAnswerToPostmaker(\n//     BuildContext context,\n//     String answer,\n//     String postId,\n//     String postmakerId,\n//     String statusofRequest,\n//   ) async {\n//     try {\n//       // Reference to the specific post's claims subcollection\n//       CollectionReference claimsRef = FirebaseFirestore.instance\n//           .collection('posts')\n//           .doc(postId) // Get the post document using its ID\n//           .collection('claims'); // Access the subcollection\n\n//       // Add a new claim document\n//       await claimsRef.add({\n//         'senderId': user!.uid,\n//         'answer': answer,\n//         'claimStatusC': statusofRequest,\n//         'timestamp': Timestamp.now(),\n//         'isClaimed': false,\n//         'receiverId': postmakerId,\n//       });\n\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         const SnackBar(\n//           content: Text('Your answer has been sent to the post maker'),\n//           behavior: SnackBarBehavior.floating,\n//           margin: EdgeInsets.all(16.0),\n//         ),\n//       );\n//     } catch (e) {\n//       ScaffoldMessenger.of(context).showSnackBar(\n//         SnackBar(\n//           content: Text('Failed to send answer: $e'),\n//           backgroundColor: Colors.red,\n//         ),\n//       );\n//     }\n//   }\n\n//   void _sharePost(BuildContext context, String title, String description) {\n//     final content = 'Check out this post: $title\\nDescription: $description';\n//     final snackBar = SnackBar(content: Text('Shared! $content'));\n//     ScaffoldMessenger.of(context).showSnackBar(snackBar);\n//   }\n\n//   void _showDeleteConfirmation(BuildContext context, PostModel post) {\n//     // postId = post.postId;\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return AlertDialog(\n//           title: const Text('Delete Post'),\n//           content: const Text(\n//             'Are you sure you want to delete this post?',\n//             style: TextStyle(fontWeight: FontWeight.w700),\n//           ),\n//           actions: [\n//             TextButton(\n//               onPressed: () async {\n//                 // Call your delete functionality here\n//                 ScaffoldMessenger.of(context).showSnackBar(\n//                   const SnackBar(\n//                       backgroundColor: Colors.deepOrange,\n//                       content: Text('Post deleted successfully')),\n//                 );\n\n//                 await _deletePost(context, post.postId);\n\n//                 Navigator.of(context).pop();\n//               },\n//               child: const Text(\n//                 'Yes',\n//                 style: TextStyle(fontWeight: FontWeight.bold),\n//               ),\n//             ),\n//             TextButton(\n//               onPressed: () => Navigator.of(context).pop(),\n//               child: const Text(\n//                 'No',\n//                 style: TextStyle(fontWeight: FontWeight.bold),\n//               ),\n//             ),\n//           ],\n//         );\n//       },\n//     );\n//   }\n\n//   void _showFullImageDialog(BuildContext context, String imageUrl) {\n//     showDialog(\n//       context: context,\n//       builder: (BuildContext context) {\n//         return Dialog(\n//           child: Stack(\n//             children: [\n//               Image.network(imageUrl),\n//               Positioned(\n//                 right: 10,\n//                 top: 10,\n//                 child: IconButton(\n//                   icon: const Icon(Icons.cancel, color: Colors.red),\n//                   onPressed: () {\n//                     Navigator.of(context).pop();\n//                   },\n//                 ),\n//               ),\n//             ],\n//           ),\n//         );\n//       },\n//     );\n//   }\n// }\n\n// class FullScreenImageViewer extends StatefulWidget {\n//   final List<String> images;\n//   bool isMobile;\n//    FullScreenImageViewer(this.images, this.isMobile,{super.key});\n\n//   @override\n//   _FullScreenImageViewerState createState() => _FullScreenImageViewerState();\n// }\n\n// class _FullScreenImageViewerState extends State<FullScreenImageViewer> {\n//   int _currentIndex = 0;\n\n//   @override\n//   Widget build(BuildContext context) {\n//     return Scaffold(\n//       backgroundColor:\n//           Colors.black.withOpacity(0.8), // Background color for overlay\n//       body: Stack(\n//         children: [\n//           PageView.builder(\n//             itemCount: widget.images.length,\n//             controller: PageController(initialPage: _currentIndex),\n//             onPageChanged: (index) {\n//               setState(() {\n//                 _currentIndex = index;\n//               });\n//             },\n//             itemBuilder: (context, index) {\n//               return Center(\n//                 child: Image.network(\n//                   width:widget.isMobile ? MediaQuery.of(context).size.width:MediaQuery.of(context).size.width*0.5,\n//                   widget.images[index],\n//                   fit: BoxFit.contain,\n//                 ),\n//               );\n//             },\n//           ),\n//           Positioned(\n//             top: 40,\n//             right: 20,\n//             child: IconButton(\n//               icon: const Icon(\n//                 Icons.close,\n//                 color: Colors.white,\n//                 size: 30,\n//               ),\n//               onPressed: () {\n//                 Navigator.of(context).pop();\n//               },\n//             ),\n//           ),\n//         ],\n//       ),\n//     );\n//   }\n// }\n"
        }
    ]
}