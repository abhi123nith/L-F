{
    "sourceFile": "lib/Frontend/Profile/profile_page.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1756119096456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756122907300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,511 +1,511 @@\n-// import 'package:cloud_firestore/cloud_firestore.dart';\n-// import 'package:file_picker/file_picker.dart';\n-// import 'package:firebase_auth/firebase_auth.dart';\n-// import 'package:firebase_storage/firebase_storage.dart';\n-// import 'package:flutter/foundation.dart';\n-// import 'package:flutter/material.dart';\n-// import 'package:image_picker/image_picker.dart';\n-// import 'package:intl/intl.dart';\n-// import 'package:l_f/Frontend/Contants/lists.dart';\n+import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:file_picker/file_picker.dart';\n+import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:firebase_storage/firebase_storage.dart';\n+import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n+import 'package:image_picker/image_picker.dart';\n+import 'package:intl/intl.dart';\n+import 'package:l_f/Frontend/Contants/lists.dart';\n \n-// class ProfilePage extends StatefulWidget {\n-//   const ProfilePage({super.key});\n+class ProfilePage extends StatefulWidget {\n+  const ProfilePage({super.key});\n \n-//   @override\n-//   _ProfilePageState createState() => _ProfilePageState();\n-// }\n+  @override\n+  _ProfilePageState createState() => _ProfilePageState();\n+}\n \n-// class _ProfilePageState extends State<ProfilePage> {\n-//   List<Uint8List>? _imageBytes;\n-//   final TextEditingController _nameController = TextEditingController();\n-//   final TextEditingController _emailController = TextEditingController();\n-//   final TextEditingController _phoneController = TextEditingController();\n-//   final TextEditingController _rollController = TextEditingController();\n-//   final TextEditingController _branchController = TextEditingController();\n-//   final TextEditingController _degreeController = TextEditingController();\n-//   final TextEditingController _gendercontroller = TextEditingController();\n+class _ProfilePageState extends State<ProfilePage> {\n+  List<Uint8List>? _imageBytes;\n+  final TextEditingController _nameController = TextEditingController();\n+  final TextEditingController _emailController = TextEditingController();\n+  final TextEditingController _phoneController = TextEditingController();\n+  final TextEditingController _rollController = TextEditingController();\n+  final TextEditingController _branchController = TextEditingController();\n+  final TextEditingController _degreeController = TextEditingController();\n+  final TextEditingController _gendercontroller = TextEditingController();\n \n-//   String? year;\n-//   String? hostel;\n-//   String? degree;\n-//   String? rollNumber;\n-//   String? gender;\n-//   String? department;\n-//   String? joinedDate;\n+  String? year;\n+  String? hostel;\n+  String? degree;\n+  String? rollNumber;\n+  String? gender;\n+  String? department;\n+  String? joinedDate;\n \n-//   final List<String> btechyears = btechyearsList;\n-//   final List<String> mtecmscyear = mscMtechList;\n-//   final List<String> boyshostels = boyshostelsList;\n-//   final List<String> girlshostels = girlshostelsList;\n+  final List<String> btechyears = btechyearsList;\n+  final List<String> mtecmscyear = mscMtechList;\n+  final List<String> boyshostels = boyshostelsList;\n+  final List<String> girlshostels = girlshostelsList;\n \n-//   String? profileImageUrl;\n-//   late Future<Map<String, dynamic>?> _userDetails;\n-//   bool isEditing = false;\n-//   bool isLoading = true;\n-//   bool isUploadingImage = false;\n-//   bool isUpdatingProfile = false;\n+  String? profileImageUrl;\n+  late Future<Map<String, dynamic>?> _userDetails;\n+  bool isEditing = false;\n+  bool isLoading = true;\n+  bool isUploadingImage = false;\n+  bool isUpdatingProfile = false;\n \n-//   @override\n-//   void initState() {\n-//     super.initState();\n-//     _userDetails = getUserDetails().then((data) {\n-//       if (data != null) {\n-//         _nameController.text = data['name'] ?? '';\n-//         _emailController.text = data['email'] ?? '';\n-//         _phoneController.text = data['phonenumber'] ?? '';\n-//         _rollController.text = data['rollNumber'] ?? '12345678';\n-//         _branchController.text = (data['department'] ?? 'NITH') + ' Department';\n-//         profileImageUrl = data['profileImage'];\n-//         year = data['year'] ?? 'NITH';\n-//         hostel = data['hostel'] ?? 'NITH';\n-//         joinedDate = _formatDate(data['joinedDate']);\n-//         gender = data['gender'];\n-//         department = data['department'];\n-//         degree = data['degree'];\n-//         _degreeController.text = data['degree'] ?? '';\n-//         _gendercontroller.text = data['gender'] ?? '';\n-//       }\n-//       setState(() {\n-//         isLoading = false;\n-//       });\n-//       return data;\n-//     });\n-//   }\n+  @override\n+  void initState() {\n+    super.initState();\n+    _userDetails = getUserDetails().then((data) {\n+      if (data != null) {\n+        _nameController.text = data['name'] ?? '';\n+        _emailController.text = data['email'] ?? '';\n+        _phoneController.text = data['phonenumber'] ?? '';\n+        _rollController.text = data['rollNumber'] ?? '12345678';\n+        _branchController.text = (data['department'] ?? 'NITH') + ' Department';\n+        profileImageUrl = data['profileImage'];\n+        year = data['year'] ?? 'NITH';\n+        hostel = data['hostel'] ?? 'NITH';\n+        joinedDate = _formatDate(data['joinedDate']);\n+        gender = data['gender'];\n+        department = data['department'];\n+        degree = data['degree'];\n+        _degreeController.text = data['degree'] ?? '';\n+        _gendercontroller.text = data['gender'] ?? '';\n+      }\n+      setState(() {\n+        isLoading = false;\n+      });\n+      return data;\n+    });\n+  }\n \n-//   Future<void> _uploadProfileImage(Uint8List data) async {\n-//     setState(() {\n-//       isUploadingImage = true;\n-//     });\n-//     try {\n-//       final storageRef = FirebaseStorage.instance.ref().child(\n-//           'profileImages/${DateTime.now().toIso8601String()}'); // Use ISO format for better readability\n-//       final uploadTask = storageRef.putData(data);\n-//       final snapshot = await uploadTask.whenComplete(() => null);\n-//       final downloadUrl = await snapshot.ref.getDownloadURL();\n+  Future<void> _uploadProfileImage(Uint8List data) async {\n+    setState(() {\n+      isUploadingImage = true;\n+    });\n+    try {\n+      final storageRef = FirebaseStorage.instance.ref().child(\n+          'profileImages/${DateTime.now().toIso8601String()}'); // Use ISO format for better readability\n+      final uploadTask = storageRef.putData(data);\n+      final snapshot = await uploadTask.whenComplete(() => null);\n+      final downloadUrl = await snapshot.ref.getDownloadURL();\n \n-//       setState(() {\n-//         profileImageUrl = downloadUrl; // Save the URL instead of the raw bytes\n-//         isUploadingImage = false;\n-//       });\n-//     } catch (e) {\n-//       print('Error uploading image: $e');\n-//       setState(() {\n-//         isUploadingImage = false;\n-//       });\n-//     }\n-//   }\n+      setState(() {\n+        profileImageUrl = downloadUrl; // Save the URL instead of the raw bytes\n+        isUploadingImage = false;\n+      });\n+    } catch (e) {\n+      print('Error uploading image: $e');\n+      setState(() {\n+        isUploadingImage = false;\n+      });\n+    }\n+  }\n \n-//   Future<void> _pickImage() async {\n-//     try {\n-//       if (kIsWeb) {\n-//         // Use FilePicker for web\n-//         final result = await FilePicker.platform.pickFiles(\n-//           allowMultiple: false,\n-//           type: FileType.image,\n-//         );\n+  Future<void> _pickImage() async {\n+    try {\n+      if (kIsWeb) {\n+        // Use FilePicker for web\n+        final result = await FilePicker.platform.pickFiles(\n+          allowMultiple: false,\n+          type: FileType.image,\n+        );\n \n-//         if (result != null && result.files.isNotEmpty) {\n-//           final file = result.files.first;\n-//           if (file.bytes != null) {\n-//             await _uploadProfileImage(file.bytes!);\n-//           }\n-//         }\n-//       } else {\n-//         final ImagePicker picker = ImagePicker();\n-//         final XFile? pickedFile = await picker.pickImage(\n-//           source: ImageSource.gallery, // Use gallery to select an image\n-//         );\n+        if (result != null && result.files.isNotEmpty) {\n+          final file = result.files.first;\n+          if (file.bytes != null) {\n+            await _uploadProfileImage(file.bytes!);\n+          }\n+        }\n+      } else {\n+        final ImagePicker picker = ImagePicker();\n+        final XFile? pickedFile = await picker.pickImage(\n+          source: ImageSource.gallery, // Use gallery to select an image\n+        );\n \n-//         if (pickedFile != null) {\n-//           final Uint8List fileBytes = await pickedFile.readAsBytes();\n-//           await _uploadProfileImage(fileBytes); // Upload the selected image\n-//         }\n-//       }\n-//     } catch (e) {\n-//       print('Error picking file: $e');\n-//     }\n-//   }\n+        if (pickedFile != null) {\n+          final Uint8List fileBytes = await pickedFile.readAsBytes();\n+          await _uploadProfileImage(fileBytes); // Upload the selected image\n+        }\n+      }\n+    } catch (e) {\n+      print('Error picking file: $e');\n+    }\n+  }\n \n-//   Future<void> _updateUserDetails() async {\n-//     User? user = FirebaseAuth.instance.currentUser;\n+  Future<void> _updateUserDetails() async {\n+    User? user = FirebaseAuth.instance.currentUser;\n \n-//     if (user != null) {\n-//       setState(() {\n-//         isUpdatingProfile = true;\n-//       });\n-//       try {\n-//         await FirebaseFirestore.instance\n-//             .collection('users')\n-//             .doc(user.uid)\n-//             .update({\n-//           'name': _nameController.text,\n-//           'phonenumber': _phoneController.text,\n-//           'profileImage': profileImageUrl, // Use the URL of the uploaded image\n-//           'hostel': hostel,\n-//         });\n+    if (user != null) {\n+      setState(() {\n+        isUpdatingProfile = true;\n+      });\n+      try {\n+        await FirebaseFirestore.instance\n+            .collection('users')\n+            .doc(user.uid)\n+            .update({\n+          'name': _nameController.text,\n+          'phonenumber': _phoneController.text,\n+          'profileImage': profileImageUrl, // Use the URL of the uploaded image\n+          'hostel': hostel,\n+        });\n \n-//         setState(() {\n-//           isEditing = false;\n-//           isUpdatingProfile = false;\n-//         });\n+        setState(() {\n+          isEditing = false;\n+          isUpdatingProfile = false;\n+        });\n \n-//         // Show success message\n-//         ScaffoldMessenger.of(context).showSnackBar(\n-//           const SnackBar(\n-//               backgroundColor: Colors.green,\n-//               content: Text('Profile updated successfully!')),\n-//         );\n-//       } catch (e) {\n-//         print('Error updating profile: $e');\n-//         setState(() {\n-//           isUpdatingProfile = false;\n-//         });\n-//       }\n-//     } else {\n-//       // Handle case where user is not logged in\n-//       print('No user logged in.');\n-//     }\n-//   }\n+        // Show success message\n+        ScaffoldMessenger.of(context).showSnackBar(\n+          const SnackBar(\n+              backgroundColor: Colors.green,\n+              content: Text('Profile updated successfully!')),\n+        );\n+      } catch (e) {\n+        print('Error updating profile: $e');\n+        setState(() {\n+          isUpdatingProfile = false;\n+        });\n+      }\n+    } else {\n+      // Handle case where user is not logged in\n+      print('No user logged in.');\n+    }\n+  }\n \n-//   String _formatDate(Timestamp? timestamp) {\n-//     if (timestamp == null) return 'Not available';\n-//     DateTime date = timestamp.toDate();\n-//     return DateFormat('dd MMMM yyyy').format(date);\n-//   }\n+  String _formatDate(Timestamp? timestamp) {\n+    if (timestamp == null) return 'Not available';\n+    DateTime date = timestamp.toDate();\n+    return DateFormat('dd MMMM yyyy').format(date);\n+  }\n \n-//   Future<Map<String, dynamic>?> getUserDetails() async {\n-//     User? user = FirebaseAuth.instance.currentUser;\n-//     if (user != null) {\n-//       DocumentSnapshot userDoc = await FirebaseFirestore.instance\n-//           .collection('users')\n-//           .doc(user.uid)\n-//           .get();\n+  Future<Map<String, dynamic>?> getUserDetails() async {\n+    User? user = FirebaseAuth.instance.currentUser;\n+    if (user != null) {\n+      DocumentSnapshot userDoc = await FirebaseFirestore.instance\n+          .collection('users')\n+          .doc(user.uid)\n+          .get();\n \n-//       if (userDoc.exists) {\n-//         return userDoc.data() as Map<String, dynamic>?;\n-//       }\n-//     }\n-//     return null;\n-//   }\n+      if (userDoc.exists) {\n+        return userDoc.data() as Map<String, dynamic>?;\n+      }\n+    }\n+    return null;\n+  }\n \n-//   @override\n-//   Widget build(BuildContext context) {\n-//     bool isMobile = MediaQuery.of(context).size.width < 830;\n-//     Size widthSc = MediaQuery.of(context).size;\n-//     return Scaffold(\n-//       appBar: AppBar(\n-//         title: const Text('Profile'),\n-//         backgroundColor: Colors.deepOrange,\n-//         foregroundColor: Colors.white,\n-//         elevation: 4.0,\n-//       ),\n-//       body: isLoading\n-//           ? const Center(child: CircularProgressIndicator())\n-//           : SingleChildScrollView(\n-//               padding: EdgeInsets.symmetric(\n-//                   horizontal: isMobile ? 6 : widthSc.width * 0.3,\n-//                   vertical: isMobile ? 12 : 20),\n-//               child: Center(\n-//                 child: Column(\n-//                   crossAxisAlignment: CrossAxisAlignment.center,\n-//                   children: [\n-//                     _buildCard(\n-//                       child: Column(\n-//                         children: [\n-//                           Stack(\n-//                             children: [\n-//                               GestureDetector(\n-//                                 onTap: () {\n-//                                   if (profileImageUrl != null) {\n-//                                     showDialog(\n-//                                       context: context,\n-//                                       builder: (BuildContext context) {\n-//                                         return Dialog(\n-//                                           child: Stack(\n-//                                             children: [\n-//                                               Image.network(profileImageUrl!),\n-//                                               Positioned(\n-//                                                 right: 10,\n-//                                                 top: 10,\n-//                                                 child: IconButton(\n-//                                                   icon: const Icon(Icons.cancel,\n-//                                                       color: Colors.red),\n-//                                                   onPressed: () {\n-//                                                     Navigator.of(context).pop();\n-//                                                   },\n-//                                                 ),\n-//                                               ),\n-//                                             ],\n-//                                           ),\n-//                                         );\n-//                                       },\n-//                                     );\n-//                                   }\n-//                                 },\n-//                                 child: CircleAvatar(\n-//                                   radius: 80.0,\n-//                                   backgroundColor: Colors.grey[200],\n-//                                   backgroundImage: profileImageUrl != null\n-//                                       ? NetworkImage(profileImageUrl!)\n-//                                       : null,\n-//                                 ),\n-//                               ),\n-//                               if (isEditing)\n-//                                 Positioned(\n-//                                   bottom: 0,\n-//                                   right: 0,\n-//                                   child: Container(\n-//                                     decoration: BoxDecoration(\n-//                                       color: Colors.white,\n-//                                       shape: BoxShape.circle,\n-//                                       boxShadow: [\n-//                                         BoxShadow(\n-//                                           color: Colors.black.withOpacity(0.1),\n-//                                           blurRadius: 4.0,\n-//                                           offset: const Offset(0, 2),\n-//                                         ),\n-//                                       ],\n-//                                     ),\n-//                                     child: IconButton(\n-//                                       icon: const Icon(Icons.edit,\n-//                                           color: Colors.deepOrange),\n-//                                       onPressed: () {\n-//                                         _pickImage();\n-//                                       },\n-//                                     ),\n-//                                   ),\n-//                                 ),\n-//                             ],\n-//                           ),\n-//                           const SizedBox(height: 20.0),\n-//                           _buildEditableField(\"Name\", _nameController),\n-//                           _buildNonEditableEmailField(\n-//                               \"Email\", _emailController),\n-//                           _buildEditableField(\"Phone Number\", _phoneController),\n-//                           _buildNonEditableEmailField(\n-//                               \"Department\", _branchController),\n-//                           Row(\n-//                             mainAxisAlignment: MainAxisAlignment.center,\n-//                             children: [\n-//                               if (isEditing == false)\n-//                                 Card(\n-//                                   elevation: 3,\n-//                                   child: Center(\n-//                                       child: Padding(\n-//                                     padding: const EdgeInsets.all(8.0),\n-//                                     child: SizedBox(\n-//                                         child: Text(\n-//                                       degree!,\n-//                                       style: const TextStyle(\n-//                                           fontSize: 16,\n-//                                           color: Colors.black54,\n-//                                           fontWeight: FontWeight.bold),\n-//                                     )),\n-//                                   )),\n-//                                 ),\n-//                               if (_degreeController.text != 'PhD')\n-//                                 isEditing\n-//                                     ? DropdownButton<String>(\n-//                                         value: year,\n-//                                         hint: const Text('Select Year'),\n-//                                         items: (_degreeController.text ==\n-//                                                         'MTech' ||\n-//                                                     _degreeController.text ==\n-//                                                         'MSc'\n-//                                                 ? mtecmscyear\n-//                                                 : btechyears)\n-//                                             .map((String value) {\n-//                                           return DropdownMenuItem<String>(\n-//                                             value: value,\n-//                                             child: Text(value),\n-//                                           );\n-//                                         }).toList(),\n-//                                         onChanged: (newValue) {\n-//                                           setState(() {\n-//                                             year = newValue!;\n-//                                           });\n-//                                         },\n-//                                       )\n-//                                     : Card(\n-//                                         elevation: 3,\n-//                                         child: Center(\n-//                                             child: Padding(\n-//                                           padding: const EdgeInsets.all(8.0),\n-//                                           child: SizedBox(\n-//                                               child: Text(\n-//                                             year!,\n-//                                             style: const TextStyle(\n-//                                                 fontSize: 16,\n-//                                                 color: Colors.black54,\n-//                                                 fontWeight: FontWeight.bold),\n-//                                           )),\n\\ No newline at end of file\n-//                                         )),\n-//                                       ),\n-//                               isEditing\n-//                                   ? DropdownButton<String>(\n-//                                       value: hostel,\n-//                                       hint: const Text('Select Hostel'),\n-//                                       items: (_gendercontroller.text == 'Male'\n-//                                               ? boyshostels\n-//                                               : girlshostels)\n-//                                           .map((String value) {\n-//                                         return DropdownMenuItem<String>(\n-//                                           value: value,\n-//                                           child: Text(value),\n-//                                         );\n-//                                       }).toList(),\n-//                                       onChanged: (newValue) {\n-//                                         setState(() {\n-//                                           hostel = newValue!;\n-//                                         });\n-//                                       },\n-//                                     )\n-//                                   : Card(\n-//                                       elevation: 3,\n-//                                       child: Center(\n-//                                           child: Padding(\n-//                                         padding: const EdgeInsets.all(8.0),\n-//                                         child: SizedBox(\n-//                                             child: Text(\n-//                                           hostel!,\n-//                                           style: const TextStyle(\n-//                                               fontSize: 16,\n-//                                               color: Colors.black54,\n-//                                               fontWeight: FontWeight.bold),\n-//                                         )),\n-//                                       )),\n-//                                     ),\n-//                             ],\n-//                           ),\n-//                         ],\n-//                       ),\n-//                     ),\n-//                     const SizedBox(height: 20.0),\n-//                     isUpdatingProfile || isUploadingImage\n-//                         ? const CircularProgressIndicator()\n-//                         : isEditing\n-//                             ? ElevatedButton(\n-//                                 onPressed: () {\n-//                                   _updateUserDetails();\n-//                                 },\n-//                                 style: ElevatedButton.styleFrom(\n-//                                   padding: const EdgeInsets.symmetric(\n-//                                       horizontal: 30, vertical: 15),\n-//                                   backgroundColor: Colors.deepOrange,\n-//                                   foregroundColor: Colors.white,\n-//                                   shape: RoundedRectangleBorder(\n-//                                     borderRadius: BorderRadius.circular(9),\n-//                                   ),\n-//                                   elevation: 6.0,\n-//                                 ),\n-//                                 child: const Text(\n-//                                   \"Save Changes\",\n-//                                   style: TextStyle(fontSize: 18),\n-//                                 ),\n-//                               )\n-//                             : ElevatedButton(\n-//                                 onPressed: () {\n-//                                   setState(() {\n-//                                     isEditing = true;\n-//                                   });\n-//                                 },\n-//                                 style: ElevatedButton.styleFrom(\n-//                                   padding: const EdgeInsets.symmetric(\n-//                                       horizontal: 10,\n-//                                       vertical:\n-//                                           8), // Adjust padding as necessary\n-//                                   backgroundColor: Colors.deepOrange,\n-//                                   foregroundColor: Colors.white,\n-//                                   shape: RoundedRectangleBorder(\n-//                                     borderRadius: BorderRadius.circular(9),\n-//                                   ),\n-//                                   elevation: 6.0,\n-//                                 ),\n-//                                 child: const Row(\n-//                                   mainAxisSize: MainAxisSize.min,\n-//                                   children: [\n-//                                     Icon(Icons.edit),\n-//                                     SizedBox(width: 4),\n-//                                     Text(\n-//                                       \"Edit Profile\",\n-//                                       style: TextStyle(\n-//                                           fontSize: 18,\n-//                                           fontWeight: FontWeight.bold),\n-//                                     ),\n-//                                   ],\n-//                                 ),\n-//                               ),\n-//                   ],\n-//                 ),\n-//               ),\n-//             ),\n-//     );\n-//   }\n+  @override\n+  Widget build(BuildContext context) {\n+    bool isMobile = MediaQuery.of(context).size.width < 830;\n+    Size widthSc = MediaQuery.of(context).size;\n+    return Scaffold(\n+      appBar: AppBar(\n+        title: const Text('Profile'),\n+        backgroundColor: Colors.deepOrange,\n+        foregroundColor: Colors.white,\n+        elevation: 4.0,\n+      ),\n+      body: isLoading\n+          ? const Center(child: CircularProgressIndicator())\n+          : SingleChildScrollView(\n+              padding: EdgeInsets.symmetric(\n+                  horizontal: isMobile ? 6 : widthSc.width * 0.3,\n+                  vertical: isMobile ? 12 : 20),\n+              child: Center(\n+                child: Column(\n+                  crossAxisAlignment: CrossAxisAlignment.center,\n+                  children: [\n+                    _buildCard(\n+                      child: Column(\n+                        children: [\n+                          Stack(\n+                            children: [\n+                              GestureDetector(\n+                                onTap: () {\n+                                  if (profileImageUrl != null) {\n+                                    showDialog(\n+                                      context: context,\n+                                      builder: (BuildContext context) {\n+                                        return Dialog(\n+                                          child: Stack(\n+                                            children: [\n+                                              Image.network(profileImageUrl!),\n+                                              Positioned(\n+                                                right: 10,\n+                                                top: 10,\n+                                                child: IconButton(\n+                                                  icon: const Icon(Icons.cancel,\n+                                                      color: Colors.red),\n+                                                  onPressed: () {\n+                                                    Navigator.of(context).pop();\n+                                                  },\n+                                                ),\n+                                              ),\n+                                            ],\n+                                          ),\n+                                        );\n+                                      },\n+                                    );\n+                                  }\n+                                },\n+                                child: CircleAvatar(\n+                                  radius: 80.0,\n+                                  backgroundColor: Colors.grey[200],\n+                                  backgroundImage: profileImageUrl != null\n+                                      ? NetworkImage(profileImageUrl!)\n+                                      : null,\n+                                ),\n+                              ),\n+                              if (isEditing)\n+                                Positioned(\n+                                  bottom: 0,\n+                                  right: 0,\n+                                  child: Container(\n+                                    decoration: BoxDecoration(\n+                                      color: Colors.white,\n+                                      shape: BoxShape.circle,\n+                                      boxShadow: [\n+                                        BoxShadow(\n+                                          color: Colors.black.withOpacity(0.1),\n+                                          blurRadius: 4.0,\n+                                          offset: const Offset(0, 2),\n+                                        ),\n+                                      ],\n+                                    ),\n+                                    child: IconButton(\n+                                      icon: const Icon(Icons.edit,\n+                                          color: Colors.deepOrange),\n+                                      onPressed: () {\n+                                        _pickImage();\n+                                      },\n+                                    ),\n+                                  ),\n+                                ),\n+                            ],\n+                          ),\n+                          const SizedBox(height: 20.0),\n+                          _buildEditableField(\"Name\", _nameController),\n+                          _buildNonEditableEmailField(\n+                              \"Email\", _emailController),\n+                          _buildEditableField(\"Phone Number\", _phoneController),\n+                          _buildNonEditableEmailField(\n+                              \"Department\", _branchController),\n+                          Row(\n+                            mainAxisAlignment: MainAxisAlignment.center,\n+                            children: [\n+                              if (isEditing == false)\n+                                Card(\n+                                  elevation: 3,\n+                                  child: Center(\n+                                      child: Padding(\n+                                    padding: const EdgeInsets.all(8.0),\n+                                    child: SizedBox(\n+                                        child: Text(\n+                                      degree!,\n+                                      style: const TextStyle(\n+                                          fontSize: 16,\n+                                          color: Colors.black54,\n+                                          fontWeight: FontWeight.bold),\n+                                    )),\n+                                  )),\n+                                ),\n+                              if (_degreeController.text != 'PhD')\n+                                isEditing\n+                                    ? DropdownButton<String>(\n+                                        value: year,\n+                                        hint: const Text('Select Year'),\n+                                        items: (_degreeController.text ==\n+                                                        'MTech' ||\n+                                                    _degreeController.text ==\n+                                                        'MSc'\n+                                                ? mtecmscyear\n+                                                : btechyears)\n+                                            .map((String value) {\n+                                          return DropdownMenuItem<String>(\n+                                            value: value,\n+                                            child: Text(value),\n+                                          );\n+                                        }).toList(),\n+                                        onChanged: (newValue) {\n+                                          setState(() {\n+                                            year = newValue!;\n+                                          });\n+                                        },\n+                                      )\n+                                    : Card(\n+                                        elevation: 3,\n+                                        child: Center(\n+                                            child: Padding(\n+                                          padding: const EdgeInsets.all(8.0),\n+                                          child: SizedBox(\n+                                              child: Text(\n+                                            year!,\n+                                            style: const TextStyle(\n+                                                fontSize: 16,\n+                                                color: Colors.black54,\n+                                                fontWeight: FontWeight.bold),\n+                                          )),\n+                                        )),\n+                                      ),\n+                              isEditing\n+                                  ? DropdownButton<String>(\n+                                      value: hostel,\n+                                      hint: const Text('Select Hostel'),\n+                                      items: (_gendercontroller.text == 'Male'\n+                                              ? boyshostels\n+                                              : girlshostels)\n+                                          .map((String value) {\n+                                        return DropdownMenuItem<String>(\n+                                          value: value,\n+                                          child: Text(value),\n+                                        );\n+                                      }).toList(),\n+                                      onChanged: (newValue) {\n+                                        setState(() {\n+                                          hostel = newValue!;\n+                                        });\n+                                      },\n+                                    )\n+                                  : Card(\n+                                      elevation: 3,\n+                                      child: Center(\n+                                          child: Padding(\n+                                        padding: const EdgeInsets.all(8.0),\n+                                        child: SizedBox(\n+                                            child: Text(\n+                                          hostel!,\n+                                          style: const TextStyle(\n+                                              fontSize: 16,\n+                                              color: Colors.black54,\n+                                              fontWeight: FontWeight.bold),\n+                                        )),\n+                                      )),\n+                                    ),\n+                            ],\n+                          ),\n+                        ],\n+                      ),\n+                    ),\n+                    const SizedBox(height: 20.0),\n+                    isUpdatingProfile || isUploadingImage\n+                        ? const CircularProgressIndicator()\n+                        : isEditing\n+                            ? ElevatedButton(\n+                                onPressed: () {\n+                                  _updateUserDetails();\n+                                },\n+                                style: ElevatedButton.styleFrom(\n+                                  padding: const EdgeInsets.symmetric(\n+                                      horizontal: 30, vertical: 15),\n+                                  backgroundColor: Colors.deepOrange,\n+                                  foregroundColor: Colors.white,\n+                                  shape: RoundedRectangleBorder(\n+                                    borderRadius: BorderRadius.circular(9),\n+                                  ),\n+                                  elevation: 6.0,\n+                                ),\n+                                child: const Text(\n+                                  \"Save Changes\",\n+                                  style: TextStyle(fontSize: 18),\n+                                ),\n+                              )\n+                            : ElevatedButton(\n+                                onPressed: () {\n+                                  setState(() {\n+                                    isEditing = true;\n+                                  });\n+                                },\n+                                style: ElevatedButton.styleFrom(\n+                                  padding: const EdgeInsets.symmetric(\n+                                      horizontal: 10,\n+                                      vertical:\n+                                          8), // Adjust padding as necessary\n+                                  backgroundColor: Colors.deepOrange,\n+                                  foregroundColor: Colors.white,\n+                                  shape: RoundedRectangleBorder(\n+                                    borderRadius: BorderRadius.circular(9),\n+                                  ),\n+                                  elevation: 6.0,\n+                                ),\n+                                child: const Row(\n+                                  mainAxisSize: MainAxisSize.min,\n+                                  children: [\n+                                    Icon(Icons.edit),\n+                                    SizedBox(width: 4),\n+                                    Text(\n+                                      \"Edit Profile\",\n+                                      style: TextStyle(\n+                                          fontSize: 18,\n+                                          fontWeight: FontWeight.bold),\n+                                    ),\n+                                  ],\n+                                ),\n+                              ),\n+                  ],\n+                ),\n+              ),\n+            ),\n+    );\n+  }\n \n-//   Widget _buildCard({required Widget child}) {\n-//     return Card(\n-//       shape: RoundedRectangleBorder(\n-//         borderRadius: BorderRadius.circular(15.0),\n-//       ),\n-//       elevation: 8.0,\n-//       shadowColor: Colors.grey[400],\n-//       child: Padding(\n-//         padding: const EdgeInsets.all(16.0),\n-//         child: child,\n-//       ),\n-//     );\n-//   }\n+  Widget _buildCard({required Widget child}) {\n+    return Card(\n+      shape: RoundedRectangleBorder(\n+        borderRadius: BorderRadius.circular(15.0),\n+      ),\n+      elevation: 8.0,\n+      shadowColor: Colors.grey[400],\n+      child: Padding(\n+        padding: const EdgeInsets.all(16.0),\n+        child: child,\n+      ),\n+    );\n+  }\n \n-//   Widget _buildEditableField(String label, TextEditingController controller) {\n-//     return Column(\n-//       crossAxisAlignment: CrossAxisAlignment.start,\n-//       children: [\n-//         Text(\n-//           label,\n-//           style: const TextStyle(\n-//             fontSize: 16.0,\n-//             fontWeight: FontWeight.bold,\n-//           ),\n-//         ),\n-//         const SizedBox(height: 8.0),\n-//         TextFormField(\n-//           controller: controller,\n-//           enabled: isEditing,\n-//           decoration: InputDecoration(\n-//             border: OutlineInputBorder(\n-//               borderRadius: BorderRadius.circular(8.0),\n-//             ),\n-//           ),\n-//         ),\n-//         const SizedBox(height: 16.0),\n-//       ],\n-//     );\n-//   }\n+  Widget _buildEditableField(String label, TextEditingController controller) {\n+    return Column(\n+      crossAxisAlignment: CrossAxisAlignment.start,\n+      children: [\n+        Text(\n+          label,\n+          style: const TextStyle(\n+            fontSize: 16.0,\n+            fontWeight: FontWeight.bold,\n+          ),\n+        ),\n+        const SizedBox(height: 8.0),\n+        TextFormField(\n+          controller: controller,\n+          enabled: isEditing,\n+          decoration: InputDecoration(\n+            border: OutlineInputBorder(\n+              borderRadius: BorderRadius.circular(8.0),\n+            ),\n+          ),\n+        ),\n+        const SizedBox(height: 16.0),\n+      ],\n+    );\n+  }\n \n-//   Widget _buildNonEditableEmailField(\n-//       String label, TextEditingController controller) {\n-//     return Column(\n-//       crossAxisAlignment: CrossAxisAlignment.start,\n-//       children: [\n-//         Text(\n-//           label,\n-//           style: const TextStyle(\n-//             fontSize: 16.0,\n-//             fontWeight: FontWeight.bold,\n-//           ),\n-//         ),\n-//         const SizedBox(height: 8.0),\n-//         TextFormField(\n-//           controller: controller,\n-//           enabled: false,\n-//           decoration: InputDecoration(\n-//             border: OutlineInputBorder(\n-//               borderRadius: BorderRadius.circular(8.0),\n-//             ),\n-//           ),\n-//         ),\n-//         const SizedBox(height: 16.0),\n-//       ],\n-//     );\n-//   }\n-// }\n+  Widget _buildNonEditableEmailField(\n+      String label, TextEditingController controller) {\n+    return Column(\n+      crossAxisAlignment: CrossAxisAlignment.start,\n+      children: [\n+        Text(\n+          label,\n+          style: const TextStyle(\n+            fontSize: 16.0,\n+            fontWeight: FontWeight.bold,\n+          ),\n+        ),\n+        const SizedBox(height: 8.0),\n+        TextFormField(\n+          controller: controller,\n+          enabled: false,\n+          decoration: InputDecoration(\n+            border: OutlineInputBorder(\n+              borderRadius: BorderRadius.circular(8.0),\n+            ),\n+          ),\n+        ),\n+        const SizedBox(height: 16.0),\n+      ],\n+    );\n+  }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1756119096456,
            "name": "Commit-0",
            "content": "// import 'package:cloud_firestore/cloud_firestore.dart';\n// import 'package:file_picker/file_picker.dart';\n// import 'package:firebase_auth/firebase_auth.dart';\n// import 'package:firebase_storage/firebase_storage.dart';\n// import 'package:flutter/foundation.dart';\n// import 'package:flutter/material.dart';\n// import 'package:image_picker/image_picker.dart';\n// import 'package:intl/intl.dart';\n// import 'package:l_f/Frontend/Contants/lists.dart';\n\n// class ProfilePage extends StatefulWidget {\n//   const ProfilePage({super.key});\n\n//   @override\n//   _ProfilePageState createState() => _ProfilePageState();\n// }\n\n// class _ProfilePageState extends State<ProfilePage> {\n//   List<Uint8List>? _imageBytes;\n//   final TextEditingController _nameController = TextEditingController();\n//   final TextEditingController _emailController = TextEditingController();\n//   final TextEditingController _phoneController = TextEditingController();\n//   final TextEditingController _rollController = TextEditingController();\n//   final TextEditingController _branchController = TextEditingController();\n//   final TextEditingController _degreeController = TextEditingController();\n//   final TextEditingController _gendercontroller = TextEditingController();\n\n//   String? year;\n//   String? hostel;\n//   String? degree;\n//   String? rollNumber;\n//   String? gender;\n//   String? department;\n//   String? joinedDate;\n\n//   final List<String> btechyears = btechyearsList;\n//   final List<String> mtecmscyear = mscMtechList;\n//   final List<String> boyshostels = boyshostelsList;\n//   final List<String> girlshostels = girlshostelsList;\n\n//   String? profileImageUrl;\n//   late Future<Map<String, dynamic>?> _userDetails;\n//   bool isEditing = false;\n//   bool isLoading = true;\n//   bool isUploadingImage = false;\n//   bool isUpdatingProfile = false;\n\n//   @override\n//   void initState() {\n//     super.initState();\n//     _userDetails = getUserDetails().then((data) {\n//       if (data != null) {\n//         _nameController.text = data['name'] ?? '';\n//         _emailController.text = data['email'] ?? '';\n//         _phoneController.text = data['phonenumber'] ?? '';\n//         _rollController.text = data['rollNumber'] ?? '12345678';\n//         _branchController.text = (data['department'] ?? 'NITH') + ' Department';\n//         profileImageUrl = data['profileImage'];\n//         year = data['year'] ?? 'NITH';\n//         hostel = data['hostel'] ?? 'NITH';\n//         joinedDate = _formatDate(data['joinedDate']);\n//         gender = data['gender'];\n//         department = data['department'];\n//         degree = data['degree'];\n//         _degreeController.text = data['degree'] ?? '';\n//         _gendercontroller.text = data['gender'] ?? '';\n//       }\n//       setState(() {\n//         isLoading = false;\n//       });\n//       return data;\n//     });\n//   }\n\n//   Future<void> _uploadProfileImage(Uint8List data) async {\n//     setState(() {\n//       isUploadingImage = true;\n//     });\n//     try {\n//       final storageRef = FirebaseStorage.instance.ref().child(\n//           'profileImages/${DateTime.now().toIso8601String()}'); // Use ISO format for better readability\n//       final uploadTask = storageRef.putData(data);\n//       final snapshot = await uploadTask.whenComplete(() => null);\n//       final downloadUrl = await snapshot.ref.getDownloadURL();\n\n//       setState(() {\n//         profileImageUrl = downloadUrl; // Save the URL instead of the raw bytes\n//         isUploadingImage = false;\n//       });\n//     } catch (e) {\n//       print('Error uploading image: $e');\n//       setState(() {\n//         isUploadingImage = false;\n//       });\n//     }\n//   }\n\n//   Future<void> _pickImage() async {\n//     try {\n//       if (kIsWeb) {\n//         // Use FilePicker for web\n//         final result = await FilePicker.platform.pickFiles(\n//           allowMultiple: false,\n//           type: FileType.image,\n//         );\n\n//         if (result != null && result.files.isNotEmpty) {\n//           final file = result.files.first;\n//           if (file.bytes != null) {\n//             await _uploadProfileImage(file.bytes!);\n//           }\n//         }\n//       } else {\n//         final ImagePicker picker = ImagePicker();\n//         final XFile? pickedFile = await picker.pickImage(\n//           source: ImageSource.gallery, // Use gallery to select an image\n//         );\n\n//         if (pickedFile != null) {\n//           final Uint8List fileBytes = await pickedFile.readAsBytes();\n//           await _uploadProfileImage(fileBytes); // Upload the selected image\n//         }\n//       }\n//     } catch (e) {\n//       print('Error picking file: $e');\n//     }\n//   }\n\n//   Future<void> _updateUserDetails() async {\n//     User? user = FirebaseAuth.instance.currentUser;\n\n//     if (user != null) {\n//       setState(() {\n//         isUpdatingProfile = true;\n//       });\n//       try {\n//         await FirebaseFirestore.instance\n//             .collection('users')\n//             .doc(user.uid)\n//             .update({\n//           'name': _nameController.text,\n//           'phonenumber': _phoneController.text,\n//           'profileImage': profileImageUrl, // Use the URL of the uploaded image\n//           'hostel': hostel,\n//         });\n\n//         setState(() {\n//           isEditing = false;\n//           isUpdatingProfile = false;\n//         });\n\n//         // Show success message\n//         ScaffoldMessenger.of(context).showSnackBar(\n//           const SnackBar(\n//               backgroundColor: Colors.green,\n//               content: Text('Profile updated successfully!')),\n//         );\n//       } catch (e) {\n//         print('Error updating profile: $e');\n//         setState(() {\n//           isUpdatingProfile = false;\n//         });\n//       }\n//     } else {\n//       // Handle case where user is not logged in\n//       print('No user logged in.');\n//     }\n//   }\n\n//   String _formatDate(Timestamp? timestamp) {\n//     if (timestamp == null) return 'Not available';\n//     DateTime date = timestamp.toDate();\n//     return DateFormat('dd MMMM yyyy').format(date);\n//   }\n\n//   Future<Map<String, dynamic>?> getUserDetails() async {\n//     User? user = FirebaseAuth.instance.currentUser;\n//     if (user != null) {\n//       DocumentSnapshot userDoc = await FirebaseFirestore.instance\n//           .collection('users')\n//           .doc(user.uid)\n//           .get();\n\n//       if (userDoc.exists) {\n//         return userDoc.data() as Map<String, dynamic>?;\n//       }\n//     }\n//     return null;\n//   }\n\n//   @override\n//   Widget build(BuildContext context) {\n//     bool isMobile = MediaQuery.of(context).size.width < 830;\n//     Size widthSc = MediaQuery.of(context).size;\n//     return Scaffold(\n//       appBar: AppBar(\n//         title: const Text('Profile'),\n//         backgroundColor: Colors.deepOrange,\n//         foregroundColor: Colors.white,\n//         elevation: 4.0,\n//       ),\n//       body: isLoading\n//           ? const Center(child: CircularProgressIndicator())\n//           : SingleChildScrollView(\n//               padding: EdgeInsets.symmetric(\n//                   horizontal: isMobile ? 6 : widthSc.width * 0.3,\n//                   vertical: isMobile ? 12 : 20),\n//               child: Center(\n//                 child: Column(\n//                   crossAxisAlignment: CrossAxisAlignment.center,\n//                   children: [\n//                     _buildCard(\n//                       child: Column(\n//                         children: [\n//                           Stack(\n//                             children: [\n//                               GestureDetector(\n//                                 onTap: () {\n//                                   if (profileImageUrl != null) {\n//                                     showDialog(\n//                                       context: context,\n//                                       builder: (BuildContext context) {\n//                                         return Dialog(\n//                                           child: Stack(\n//                                             children: [\n//                                               Image.network(profileImageUrl!),\n//                                               Positioned(\n//                                                 right: 10,\n//                                                 top: 10,\n//                                                 child: IconButton(\n//                                                   icon: const Icon(Icons.cancel,\n//                                                       color: Colors.red),\n//                                                   onPressed: () {\n//                                                     Navigator.of(context).pop();\n//                                                   },\n//                                                 ),\n//                                               ),\n//                                             ],\n//                                           ),\n//                                         );\n//                                       },\n//                                     );\n//                                   }\n//                                 },\n//                                 child: CircleAvatar(\n//                                   radius: 80.0,\n//                                   backgroundColor: Colors.grey[200],\n//                                   backgroundImage: profileImageUrl != null\n//                                       ? NetworkImage(profileImageUrl!)\n//                                       : null,\n//                                 ),\n//                               ),\n//                               if (isEditing)\n//                                 Positioned(\n//                                   bottom: 0,\n//                                   right: 0,\n//                                   child: Container(\n//                                     decoration: BoxDecoration(\n//                                       color: Colors.white,\n//                                       shape: BoxShape.circle,\n//                                       boxShadow: [\n//                                         BoxShadow(\n//                                           color: Colors.black.withOpacity(0.1),\n//                                           blurRadius: 4.0,\n//                                           offset: const Offset(0, 2),\n//                                         ),\n//                                       ],\n//                                     ),\n//                                     child: IconButton(\n//                                       icon: const Icon(Icons.edit,\n//                                           color: Colors.deepOrange),\n//                                       onPressed: () {\n//                                         _pickImage();\n//                                       },\n//                                     ),\n//                                   ),\n//                                 ),\n//                             ],\n//                           ),\n//                           const SizedBox(height: 20.0),\n//                           _buildEditableField(\"Name\", _nameController),\n//                           _buildNonEditableEmailField(\n//                               \"Email\", _emailController),\n//                           _buildEditableField(\"Phone Number\", _phoneController),\n//                           _buildNonEditableEmailField(\n//                               \"Department\", _branchController),\n//                           Row(\n//                             mainAxisAlignment: MainAxisAlignment.center,\n//                             children: [\n//                               if (isEditing == false)\n//                                 Card(\n//                                   elevation: 3,\n//                                   child: Center(\n//                                       child: Padding(\n//                                     padding: const EdgeInsets.all(8.0),\n//                                     child: SizedBox(\n//                                         child: Text(\n//                                       degree!,\n//                                       style: const TextStyle(\n//                                           fontSize: 16,\n//                                           color: Colors.black54,\n//                                           fontWeight: FontWeight.bold),\n//                                     )),\n//                                   )),\n//                                 ),\n//                               if (_degreeController.text != 'PhD')\n//                                 isEditing\n//                                     ? DropdownButton<String>(\n//                                         value: year,\n//                                         hint: const Text('Select Year'),\n//                                         items: (_degreeController.text ==\n//                                                         'MTech' ||\n//                                                     _degreeController.text ==\n//                                                         'MSc'\n//                                                 ? mtecmscyear\n//                                                 : btechyears)\n//                                             .map((String value) {\n//                                           return DropdownMenuItem<String>(\n//                                             value: value,\n//                                             child: Text(value),\n//                                           );\n//                                         }).toList(),\n//                                         onChanged: (newValue) {\n//                                           setState(() {\n//                                             year = newValue!;\n//                                           });\n//                                         },\n//                                       )\n//                                     : Card(\n//                                         elevation: 3,\n//                                         child: Center(\n//                                             child: Padding(\n//                                           padding: const EdgeInsets.all(8.0),\n//                                           child: SizedBox(\n//                                               child: Text(\n//                                             year!,\n//                                             style: const TextStyle(\n//                                                 fontSize: 16,\n//                                                 color: Colors.black54,\n//                                                 fontWeight: FontWeight.bold),\n//                                           )),\n//                                         )),\n//                                       ),\n//                               isEditing\n//                                   ? DropdownButton<String>(\n//                                       value: hostel,\n//                                       hint: const Text('Select Hostel'),\n//                                       items: (_gendercontroller.text == 'Male'\n//                                               ? boyshostels\n//                                               : girlshostels)\n//                                           .map((String value) {\n//                                         return DropdownMenuItem<String>(\n//                                           value: value,\n//                                           child: Text(value),\n//                                         );\n//                                       }).toList(),\n//                                       onChanged: (newValue) {\n//                                         setState(() {\n//                                           hostel = newValue!;\n//                                         });\n//                                       },\n//                                     )\n//                                   : Card(\n//                                       elevation: 3,\n//                                       child: Center(\n//                                           child: Padding(\n//                                         padding: const EdgeInsets.all(8.0),\n//                                         child: SizedBox(\n//                                             child: Text(\n//                                           hostel!,\n//                                           style: const TextStyle(\n//                                               fontSize: 16,\n//                                               color: Colors.black54,\n//                                               fontWeight: FontWeight.bold),\n//                                         )),\n//                                       )),\n//                                     ),\n//                             ],\n//                           ),\n//                         ],\n//                       ),\n//                     ),\n//                     const SizedBox(height: 20.0),\n//                     isUpdatingProfile || isUploadingImage\n//                         ? const CircularProgressIndicator()\n//                         : isEditing\n//                             ? ElevatedButton(\n//                                 onPressed: () {\n//                                   _updateUserDetails();\n//                                 },\n//                                 style: ElevatedButton.styleFrom(\n//                                   padding: const EdgeInsets.symmetric(\n//                                       horizontal: 30, vertical: 15),\n//                                   backgroundColor: Colors.deepOrange,\n//                                   foregroundColor: Colors.white,\n//                                   shape: RoundedRectangleBorder(\n//                                     borderRadius: BorderRadius.circular(9),\n//                                   ),\n//                                   elevation: 6.0,\n//                                 ),\n//                                 child: const Text(\n//                                   \"Save Changes\",\n//                                   style: TextStyle(fontSize: 18),\n//                                 ),\n//                               )\n//                             : ElevatedButton(\n//                                 onPressed: () {\n//                                   setState(() {\n//                                     isEditing = true;\n//                                   });\n//                                 },\n//                                 style: ElevatedButton.styleFrom(\n//                                   padding: const EdgeInsets.symmetric(\n//                                       horizontal: 10,\n//                                       vertical:\n//                                           8), // Adjust padding as necessary\n//                                   backgroundColor: Colors.deepOrange,\n//                                   foregroundColor: Colors.white,\n//                                   shape: RoundedRectangleBorder(\n//                                     borderRadius: BorderRadius.circular(9),\n//                                   ),\n//                                   elevation: 6.0,\n//                                 ),\n//                                 child: const Row(\n//                                   mainAxisSize: MainAxisSize.min,\n//                                   children: [\n//                                     Icon(Icons.edit),\n//                                     SizedBox(width: 4),\n//                                     Text(\n//                                       \"Edit Profile\",\n//                                       style: TextStyle(\n//                                           fontSize: 18,\n//                                           fontWeight: FontWeight.bold),\n//                                     ),\n//                                   ],\n//                                 ),\n//                               ),\n//                   ],\n//                 ),\n//               ),\n//             ),\n//     );\n//   }\n\n//   Widget _buildCard({required Widget child}) {\n//     return Card(\n//       shape: RoundedRectangleBorder(\n//         borderRadius: BorderRadius.circular(15.0),\n//       ),\n//       elevation: 8.0,\n//       shadowColor: Colors.grey[400],\n//       child: Padding(\n//         padding: const EdgeInsets.all(16.0),\n//         child: child,\n//       ),\n//     );\n//   }\n\n//   Widget _buildEditableField(String label, TextEditingController controller) {\n//     return Column(\n//       crossAxisAlignment: CrossAxisAlignment.start,\n//       children: [\n//         Text(\n//           label,\n//           style: const TextStyle(\n//             fontSize: 16.0,\n//             fontWeight: FontWeight.bold,\n//           ),\n//         ),\n//         const SizedBox(height: 8.0),\n//         TextFormField(\n//           controller: controller,\n//           enabled: isEditing,\n//           decoration: InputDecoration(\n//             border: OutlineInputBorder(\n//               borderRadius: BorderRadius.circular(8.0),\n//             ),\n//           ),\n//         ),\n//         const SizedBox(height: 16.0),\n//       ],\n//     );\n//   }\n\n//   Widget _buildNonEditableEmailField(\n//       String label, TextEditingController controller) {\n//     return Column(\n//       crossAxisAlignment: CrossAxisAlignment.start,\n//       children: [\n//         Text(\n//           label,\n//           style: const TextStyle(\n//             fontSize: 16.0,\n//             fontWeight: FontWeight.bold,\n//           ),\n//         ),\n//         const SizedBox(height: 8.0),\n//         TextFormField(\n//           controller: controller,\n//           enabled: false,\n//           decoration: InputDecoration(\n//             border: OutlineInputBorder(\n//               borderRadius: BorderRadius.circular(8.0),\n//             ),\n//           ),\n//         ),\n//         const SizedBox(height: 16.0),\n//       ],\n//     );\n//   }\n// }"
        }
    ]
}