{
    "sourceFile": "lib/Frontend/Top/contact_us.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756127567538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756127567538,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\nimport 'dart:convert';\n\nclass ContactUsPage extends StatefulWidget {\n  const ContactUsPage({super.key});\n\n  @override\n  State<ContactUsPage> createState() => _ContactUsPageState();\n}\n\nclass _ContactUsPageState extends State<ContactUsPage> {\n  final _formKey = GlobalKey<FormState>();\n  final _nameController = TextEditingController();\n  final _emailController = TextEditingController();\n  final _messageController = TextEditingController();\n  bool _isSending = false;\n\n  Future<void> _sendEmail() async {\n    if (!_formKey.currentState!.validate()) {\n      return; // If form is not valid, do nothing.\n    }\n\n    setState(() {\n      _isSending = true;\n    });\n\n    // --- Replace these with your actual EmailJS IDs ---\n    const serviceId = 'YOUR_SERVICE_ID';\n    const templateId = 'YOUR_TEMPLATE_ID';\n    const userId = 'YOUR_PUBLIC_KEY';\n    // ----------------------------------------------------\n\n    final url = Uri.parse('https://api.emailjs.com/api/v1.0/email/send');\n    \n    try {\n      final response = await http.post(\n        url,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: json.encode({\n          'service_id': serviceId,\n          'template_id': templateId,\n          'user_id': userId,\n          'template_params': {\n            'from_name': _nameController.text,\n            'from_email': _emailController.text,\n            'message': _messageController.text,\n          },\n        }),\n      );\n\n      if (response.statusCode == 200) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Message sent successfully!'),\n            backgroundColor: Colors.green,\n          ),\n        );\n        _nameController.clear();\n        _emailController.clear();\n        _messageController.clear();\n      } else {\n        throw 'Failed to send email. Status code: ${response.statusCode}';\n      }\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(content: Text('Error: Could not send email. $e')),\n      );\n    } finally {\n      setState(() {\n        _isSending = false;\n      });\n    }\n  }\n\n  @override\n  void dispose() {\n    _nameController.dispose();\n    _emailController.dispose();\n    _messageController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text(\"Contact Us\"),\n        backgroundColor: Colors.deepOrange,\n        foregroundColor: Colors.white,\n      ),\n      body: SingleChildScrollView(\n        padding: const EdgeInsets.all(24.0),\n        child: Center(\n          child: ConstrainedBox(\n            constraints: const BoxConstraints(maxWidth: 600),\n            child: Form(\n              key: _formKey,\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.stretch,\n                children: [\n                  const Icon(Icons.email_outlined, size: 80, color: Colors.deepOrange),\n                  const SizedBox(height: 24),\n                  const Text(\n                    \"Get in Touch\",\n                    textAlign: TextAlign.center,\n                    style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold),\n                  ),\n                  const SizedBox(height: 8),\n                  const Text(\n                    \"Have a question or feedback? Fill out the form below to send us an email.\",\n                    textAlign: TextAlign.center,\n                    style: TextStyle(fontSize: 16, color: Colors.black54),\n                  ),\n                  const SizedBox(height: 32),\n                  TextFormField(\n                    controller: _nameController,\n                    decoration: const InputDecoration(labelText: 'Your Name', border: OutlineInputBorder()),\n                    validator: (value) => value!.isEmpty ? 'Please enter your name' : null,\n                  ),\n                  const SizedBox(height: 16),\n                  TextFormField(\n                    controller: _emailController,\n                    decoration: const InputDecoration(labelText: 'Your Email', border: OutlineInputBorder()),\n                    keyboardType: TextInputType.emailAddress,\n                    validator: (value) => value!.isEmpty || !value.contains('@') ? 'Please enter a valid email' : null,\n                  ),\n                  const SizedBox(height: 16),\n                  TextFormField(\n                    controller: _messageController,\n                    decoration: const InputDecoration(labelText: 'Message', border: OutlineInputBorder()),\n                    maxLines: 5,\n                    validator: (value) => value!.isEmpty ? 'Please enter your message' : null,\n                  ),\n                  const SizedBox(height: 24),\n                  ElevatedButton(\n                    onPressed: _isSending ? null : _sendEmail,\n                    style: ElevatedButton.styleFrom(\n                      backgroundColor: Colors.deepOrange,\n                      foregroundColor: Colors.white,\n                      padding: const EdgeInsets.symmetric(vertical: 16),\n                      textStyle: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n                    ),\n                    child: _isSending\n                        ? const CircularProgressIndicator(color: Colors.white)\n                        : const Text('Send Email'),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
        }
    ]
}