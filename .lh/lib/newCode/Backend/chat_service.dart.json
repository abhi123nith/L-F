{
    "sourceFile": "lib/newCode/Backend/chat_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1756118353534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756118431994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,10 @@\n // lib/Backend/chat_service.dart\n import 'dart:io';\n+\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:firebase_storage/firebase_storage.dart';\n-import 'package:flutter/foundation.dart';\n-import 'package:image_picker/image_picker.dart';\n \n class ChatService {\n   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n   final FirebaseStorage _storage = FirebaseStorage.instance;\n@@ -99,9 +98,12 @@\n \n   /// Updates an existing message with new text.\n   Future<void> updateMessage(String messageId, String newText) async {\n     try {\n-      await _firestore.collection('chats').doc(messageId).update({'message': newText});\n+      await _firestore\n+          .collection('chats')\n+          .doc(messageId)\n+          .update({'message': newText});\n     } catch (e) {\n       print(\"Error updating message: $e\");\n     }\n   }\n"
                },
                {
                    "date": 1756118438313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n     // Get chat ID by combining UIDs to ensure a unique chat for two users\n     List<String> participants = [currentUser!.uid, otherUserId];\n     participants.sort();\n-    String chatId = participants.join('_');\n+    participants.join('_');\n \n     return _firestore\n         .collection('chats')\n         .where('participants', arrayContains: currentUser!.uid)\n"
                },
                {
                    "date": 1756123071986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,110 +1,110 @@\n-// lib/Backend/chat_service.dart\n-import 'dart:io';\n+// // lib/Backend/chat_service.dart\n+// import 'dart:io';\n \n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:firebase_storage/firebase_storage.dart';\n+// import 'package:cloud_firestore/cloud_firestore.dart';\n+// import 'package:firebase_auth/firebase_auth.dart';\n+// import 'package:firebase_storage/firebase_storage.dart';\n \n-class ChatService {\n-  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n-  final FirebaseStorage _storage = FirebaseStorage.instance;\n-  final User? currentUser = FirebaseAuth.instance.currentUser;\n+// class ChatService {\n+//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n+//   final FirebaseStorage _storage = FirebaseStorage.instance;\n+//   final User? currentUser = FirebaseAuth.instance.currentUser;\n \n-  /// Fetches a stream of messages between the current user and another user.\n-  Stream<QuerySnapshot> getChatMessages(String otherUserId) {\n-    if (currentUser == null) {\n-      throw Exception('User not authenticated');\n-    }\n+//   /// Fetches a stream of messages between the current user and another user.\n+//   Stream<QuerySnapshot> getChatMessages(String otherUserId) {\n+//     if (currentUser == null) {\n+//       throw Exception('User not authenticated');\n+//     }\n \n-    // Get chat ID by combining UIDs to ensure a unique chat for two users\n-    List<String> participants = [currentUser!.uid, otherUserId];\n-    participants.sort();\n-    participants.join('_');\n+//     // Get chat ID by combining UIDs to ensure a unique chat for two users\n+//     List<String> participants = [currentUser!.uid, otherUserId];\n+//     participants.sort();\n+//     participants.join('_');\n \n-    return _firestore\n-        .collection('chats')\n-        .where('participants', arrayContains: currentUser!.uid)\n-        .orderBy('timestamp', descending: true)\n-        .snapshots();\n-  }\n+//     return _firestore\n+//         .collection('chats')\n+//         .where('participants', arrayContains: currentUser!.uid)\n+//         .orderBy('timestamp', descending: true)\n+//         .snapshots();\n+//   }\n \n-  /// Sends a new text message.\n-  Future<void> sendMessage({\n-    required String receiverId,\n-    required String message,\n-    String postId = '',\n-  }) async {\n-    if (currentUser == null || message.isEmpty) return;\n+//   /// Sends a new text message.\n+//   Future<void> sendMessage({\n+//     required String receiverId,\n+//     required String message,\n+//     String postId = '',\n+//   }) async {\n+//     if (currentUser == null || message.isEmpty) return;\n \n-    await _firestore.collection('chats').add({\n-      'senderId': currentUser!.uid,\n-      'receiverId': receiverId,\n-      'participants': [currentUser!.uid, receiverId],\n-      'message': message,\n-      'postId': postId,\n-      'timestamp': Timestamp.now(),\n-      'mediaUrl': '',\n-      'mediaType': '',\n-    });\n-  }\n+//     await _firestore.collection('chats').add({\n+//       'senderId': currentUser!.uid,\n+//       'receiverId': receiverId,\n+//       'participants': [currentUser!.uid, receiverId],\n+//       'message': message,\n+//       'postId': postId,\n+//       'timestamp': Timestamp.now(),\n+//       'mediaUrl': '',\n+//       'mediaType': '',\n+//     });\n+//   }\n \n-  /// Sends a new message with attached media.\n-  Future<void> sendMessageWithMedia({\n-    required String receiverId,\n-    required String message,\n-    required String fileUrl,\n-    required String mediaType,\n-  }) async {\n-    if (currentUser == null) return;\n-    await _firestore.collection('chats').add({\n-      'senderId': currentUser!.uid,\n-      'receiverId': receiverId,\n-      'participants': [currentUser!.uid, receiverId],\n-      'message': message,\n-      'postId': '',\n-      'timestamp': Timestamp.now(),\n-      'mediaUrl': fileUrl,\n-      'mediaType': mediaType,\n-    });\n-  }\n+//   /// Sends a new message with attached media.\n+//   Future<void> sendMessageWithMedia({\n+//     required String receiverId,\n+//     required String message,\n+//     required String fileUrl,\n+//     required String mediaType,\n+//   }) async {\n+//     if (currentUser == null) return;\n+//     await _firestore.collection('chats').add({\n+//       'senderId': currentUser!.uid,\n+//       'receiverId': receiverId,\n+//       'participants': [currentUser!.uid, receiverId],\n+//       'message': message,\n+//       'postId': '',\n+//       'timestamp': Timestamp.now(),\n+//       'mediaUrl': fileUrl,\n+//       'mediaType': mediaType,\n+//     });\n+//   }\n \n-  /// Uploads a file (image/video) to Firebase Storage.\n-  Future<String> uploadFile(File file) async {\n-    try {\n-      String fileName = DateTime.now().millisecondsSinceEpoch.toString();\n-      Reference storageRef = _storage.ref().child('chats/$fileName');\n+//   /// Uploads a file (image/video) to Firebase Storage.\n+//   Future<String> uploadFile(File file) async {\n+//     try {\n+//       String fileName = DateTime.now().millisecondsSinceEpoch.toString();\n+//       Reference storageRef = _storage.ref().child('chats/$fileName');\n \n-      UploadTask uploadTask = storageRef.putFile(file);\n-      TaskSnapshot taskSnapshot = await uploadTask;\n-      String fileUrl = await taskSnapshot.ref.getDownloadURL();\n-      return fileUrl;\n-    } catch (e) {\n-      print(\"Error uploading file: $e\");\n-      return '';\n-    }\n-  }\n+//       UploadTask uploadTask = storageRef.putFile(file);\n+//       TaskSnapshot taskSnapshot = await uploadTask;\n+//       String fileUrl = await taskSnapshot.ref.getDownloadURL();\n+//       return fileUrl;\n+//     } catch (e) {\n+//       print(\"Error uploading file: $e\");\n+//       return '';\n+//     }\n+//   }\n \n-  /// Deletes a message from Firestore and its associated media from Storage.\n-  Future<void> deleteMessage(String messageId, String mediaUrl) async {\n-    try {\n-      if (mediaUrl.isNotEmpty) {\n-        await _storage.refFromURL(mediaUrl).delete();\n-      }\n-      await _firestore.collection('chats').doc(messageId).delete();\n-    } catch (e) {\n-      print(\"Error deleting message: $e\");\n-    }\n-  }\n+//   /// Deletes a message from Firestore and its associated media from Storage.\n+//   Future<void> deleteMessage(String messageId, String mediaUrl) async {\n+//     try {\n+//       if (mediaUrl.isNotEmpty) {\n+//         await _storage.refFromURL(mediaUrl).delete();\n+//       }\n+//       await _firestore.collection('chats').doc(messageId).delete();\n+//     } catch (e) {\n+//       print(\"Error deleting message: $e\");\n+//     }\n+//   }\n \n-  /// Updates an existing message with new text.\n-  Future<void> updateMessage(String messageId, String newText) async {\n-    try {\n-      await _firestore\n-          .collection('chats')\n-          .doc(messageId)\n-          .update({'message': newText});\n-    } catch (e) {\n-      print(\"Error updating message: $e\");\n-    }\n-  }\n-}\n+//   /// Updates an existing message with new text.\n+//   Future<void> updateMessage(String messageId, String newText) async {\n+//     try {\n+//       await _firestore\n+//           .collection('chats')\n+//           .doc(messageId)\n+//           .update({'message': newText});\n+//     } catch (e) {\n+//       print(\"Error updating message: $e\");\n+//     }\n+//   }\n+// }\n"
                }
            ],
            "date": 1756118353534,
            "name": "Commit-0",
            "content": "// lib/Backend/chat_service.dart\nimport 'dart:io';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:firebase_storage/firebase_storage.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:image_picker/image_picker.dart';\n\nclass ChatService {\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n  final FirebaseStorage _storage = FirebaseStorage.instance;\n  final User? currentUser = FirebaseAuth.instance.currentUser;\n\n  /// Fetches a stream of messages between the current user and another user.\n  Stream<QuerySnapshot> getChatMessages(String otherUserId) {\n    if (currentUser == null) {\n      throw Exception('User not authenticated');\n    }\n\n    // Get chat ID by combining UIDs to ensure a unique chat for two users\n    List<String> participants = [currentUser!.uid, otherUserId];\n    participants.sort();\n    String chatId = participants.join('_');\n\n    return _firestore\n        .collection('chats')\n        .where('participants', arrayContains: currentUser!.uid)\n        .orderBy('timestamp', descending: true)\n        .snapshots();\n  }\n\n  /// Sends a new text message.\n  Future<void> sendMessage({\n    required String receiverId,\n    required String message,\n    String postId = '',\n  }) async {\n    if (currentUser == null || message.isEmpty) return;\n\n    await _firestore.collection('chats').add({\n      'senderId': currentUser!.uid,\n      'receiverId': receiverId,\n      'participants': [currentUser!.uid, receiverId],\n      'message': message,\n      'postId': postId,\n      'timestamp': Timestamp.now(),\n      'mediaUrl': '',\n      'mediaType': '',\n    });\n  }\n\n  /// Sends a new message with attached media.\n  Future<void> sendMessageWithMedia({\n    required String receiverId,\n    required String message,\n    required String fileUrl,\n    required String mediaType,\n  }) async {\n    if (currentUser == null) return;\n    await _firestore.collection('chats').add({\n      'senderId': currentUser!.uid,\n      'receiverId': receiverId,\n      'participants': [currentUser!.uid, receiverId],\n      'message': message,\n      'postId': '',\n      'timestamp': Timestamp.now(),\n      'mediaUrl': fileUrl,\n      'mediaType': mediaType,\n    });\n  }\n\n  /// Uploads a file (image/video) to Firebase Storage.\n  Future<String> uploadFile(File file) async {\n    try {\n      String fileName = DateTime.now().millisecondsSinceEpoch.toString();\n      Reference storageRef = _storage.ref().child('chats/$fileName');\n\n      UploadTask uploadTask = storageRef.putFile(file);\n      TaskSnapshot taskSnapshot = await uploadTask;\n      String fileUrl = await taskSnapshot.ref.getDownloadURL();\n      return fileUrl;\n    } catch (e) {\n      print(\"Error uploading file: $e\");\n      return '';\n    }\n  }\n\n  /// Deletes a message from Firestore and its associated media from Storage.\n  Future<void> deleteMessage(String messageId, String mediaUrl) async {\n    try {\n      if (mediaUrl.isNotEmpty) {\n        await _storage.refFromURL(mediaUrl).delete();\n      }\n      await _firestore.collection('chats').doc(messageId).delete();\n    } catch (e) {\n      print(\"Error deleting message: $e\");\n    }\n  }\n\n  /// Updates an existing message with new text.\n  Future<void> updateMessage(String messageId, String newText) async {\n    try {\n      await _firestore.collection('chats').doc(messageId).update({'message': newText});\n    } catch (e) {\n      print(\"Error updating message: $e\");\n    }\n  }\n}\n"
        }
    ]
}