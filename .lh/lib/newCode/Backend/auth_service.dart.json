{
    "sourceFile": "lib/newCode/Backend/auth_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1756114788159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756115376969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // lib/Backend/auth_service.dart\n+import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:cloud_firestore/cloud_firestore.dart';\n \n /// A service class to handle all Firebase Authentication and Firestore-related\n /// user data interactions.\n class AuthService {\n@@ -37,9 +37,9 @@\n \n       User? user = userCredential.user;\n       if (user != null) {\n         // Send email verification to the new user.\n-        await user.sendEmailVerification();\n+        await sendEmailVerification();\n         // Save the provided user data to Firestore under their UID.\n         await _firestore.collection('users').doc(user.uid).set(userData);\n       }\n       return user;\n@@ -57,8 +57,17 @@\n       rethrow;\n     }\n   }\n \n+  /// Sends a verification email to the currently authenticated user.\n+  /// This method is now **reusable** and can be called from any part of the app.\n+  Future<void> sendEmailVerification() async {\n+    User? user = _auth.currentUser;\n+    if (user != null) {\n+      await user.sendEmailVerification();\n+    }\n+  }\n+\n   /// Checks if a user's document exists in the Firestore database.\n   Future<bool> doesUserExist(String uid) async {\n     DocumentSnapshot userDoc = await _firestore.collection('users').doc(uid).get();\n     return userDoc.exists;\n"
                },
                {
                    "date": 1756123074554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,80 +1,80 @@\n-// lib/Backend/auth_service.dart\n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:firebase_auth/firebase_auth.dart';\n+// // lib/Backend/auth_service.dart\n+// import 'package:cloud_firestore/cloud_firestore.dart';\n+// import 'package:firebase_auth/firebase_auth.dart';\n \n-/// A service class to handle all Firebase Authentication and Firestore-related\n-/// user data interactions.\n-class AuthService {\n-  final FirebaseAuth _auth = FirebaseAuth.instance;\n-  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n+// /// A service class to handle all Firebase Authentication and Firestore-related\n+// /// user data interactions.\n+// class AuthService {\n+//   final FirebaseAuth _auth = FirebaseAuth.instance;\n+//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n \n-  /// Signs in a user with email and password.\n-  /// Throws a [FirebaseAuthException] on failure.\n-  Future<User?> signInWithEmailAndPassword(String email, String password) async {\n-    try {\n-      UserCredential userCredential = await _auth.signInWithEmailAndPassword(\n-        email: email.trim(),\n-        password: password.trim(),\n-      );\n-      return userCredential.user;\n-    } on FirebaseAuthException {\n-      rethrow;\n-    }\n-  }\n+//   /// Signs in a user with email and password.\n+//   /// Throws a [FirebaseAuthException] on failure.\n+//   Future<User?> signInWithEmailAndPassword(String email, String password) async {\n+//     try {\n+//       UserCredential userCredential = await _auth.signInWithEmailAndPassword(\n+//         email: email.trim(),\n+//         password: password.trim(),\n+//       );\n+//       return userCredential.user;\n+//     } on FirebaseAuthException {\n+//       rethrow;\n+//     }\n+//   }\n \n-  /// Creates a new user with email and password and saves user data to Firestore.\n-  /// Throws a [FirebaseAuthException] on failure.\n-  Future<User?> signUpUser({\n-    required String email,\n-    required String password,\n-    required Map<String, dynamic> userData,\n-  }) async {\n-    try {\n-      UserCredential userCredential = await _auth.createUserWithEmailAndPassword(\n-        email: email.trim(),\n-        password: password.trim(),\n-      );\n+//   /// Creates a new user with email and password and saves user data to Firestore.\n+//   /// Throws a [FirebaseAuthException] on failure.\n+//   Future<User?> signUpUser({\n+//     required String email,\n+//     required String password,\n+//     required Map<String, dynamic> userData,\n+//   }) async {\n+//     try {\n+//       UserCredential userCredential = await _auth.createUserWithEmailAndPassword(\n+//         email: email.trim(),\n+//         password: password.trim(),\n+//       );\n \n-      User? user = userCredential.user;\n-      if (user != null) {\n-        // Send email verification to the new user.\n-        await sendEmailVerification();\n-        // Save the provided user data to Firestore under their UID.\n-        await _firestore.collection('users').doc(user.uid).set(userData);\n-      }\n-      return user;\n-    } on FirebaseAuthException {\n-      rethrow;\n-    }\n-  }\n+//       User? user = userCredential.user;\n+//       if (user != null) {\n+//         // Send email verification to the new user.\n+//         await sendEmailVerification();\n+//         // Save the provided user data to Firestore under their UID.\n+//         await _firestore.collection('users').doc(user.uid).set(userData);\n+//       }\n+//       return user;\n+//     } on FirebaseAuthException {\n+//       rethrow;\n+//     }\n+//   }\n \n-  /// Sends a password reset email to the specified email address.\n-  /// Throws a [FirebaseAuthException] on failure.\n-  Future<void> sendPasswordResetEmail(String email) async {\n-    try {\n-      await _auth.sendPasswordResetEmail(email: email.trim());\n-    } on FirebaseAuthException {\n-      rethrow;\n-    }\n-  }\n+//   /// Sends a password reset email to the specified email address.\n+//   /// Throws a [FirebaseAuthException] on failure.\n+//   Future<void> sendPasswordResetEmail(String email) async {\n+//     try {\n+//       await _auth.sendPasswordResetEmail(email: email.trim());\n+//     } on FirebaseAuthException {\n+//       rethrow;\n+//     }\n+//   }\n \n-  /// Sends a verification email to the currently authenticated user.\n-  /// This method is now **reusable** and can be called from any part of the app.\n-  Future<void> sendEmailVerification() async {\n-    User? user = _auth.currentUser;\n-    if (user != null) {\n-      await user.sendEmailVerification();\n-    }\n-  }\n+//   /// Sends a verification email to the currently authenticated user.\n+//   /// This method is now **reusable** and can be called from any part of the app.\n+//   Future<void> sendEmailVerification() async {\n+//     User? user = _auth.currentUser;\n+//     if (user != null) {\n+//       await user.sendEmailVerification();\n+//     }\n+//   }\n \n-  /// Checks if a user's document exists in the Firestore database.\n-  Future<bool> doesUserExist(String uid) async {\n-    DocumentSnapshot userDoc = await _firestore.collection('users').doc(uid).get();\n-    return userDoc.exists;\n-  }\n+//   /// Checks if a user's document exists in the Firestore database.\n+//   Future<bool> doesUserExist(String uid) async {\n+//     DocumentSnapshot userDoc = await _firestore.collection('users').doc(uid).get();\n+//     return userDoc.exists;\n+//   }\n \n-  /// Signs out the currently authenticated user.\n-  Future<void> signOut() async {\n-    await _auth.signOut();\n-  }\n-}\n+//   /// Signs out the currently authenticated user.\n+//   Future<void> signOut() async {\n+//     await _auth.signOut();\n+//   }\n+// }\n"
                }
            ],
            "date": 1756114788159,
            "name": "Commit-0",
            "content": "// lib/Backend/auth_service.dart\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\n\n/// A service class to handle all Firebase Authentication and Firestore-related\n/// user data interactions.\nclass AuthService {\n  final FirebaseAuth _auth = FirebaseAuth.instance;\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n\n  /// Signs in a user with email and password.\n  /// Throws a [FirebaseAuthException] on failure.\n  Future<User?> signInWithEmailAndPassword(String email, String password) async {\n    try {\n      UserCredential userCredential = await _auth.signInWithEmailAndPassword(\n        email: email.trim(),\n        password: password.trim(),\n      );\n      return userCredential.user;\n    } on FirebaseAuthException {\n      rethrow;\n    }\n  }\n\n  /// Creates a new user with email and password and saves user data to Firestore.\n  /// Throws a [FirebaseAuthException] on failure.\n  Future<User?> signUpUser({\n    required String email,\n    required String password,\n    required Map<String, dynamic> userData,\n  }) async {\n    try {\n      UserCredential userCredential = await _auth.createUserWithEmailAndPassword(\n        email: email.trim(),\n        password: password.trim(),\n      );\n\n      User? user = userCredential.user;\n      if (user != null) {\n        // Send email verification to the new user.\n        await user.sendEmailVerification();\n        // Save the provided user data to Firestore under their UID.\n        await _firestore.collection('users').doc(user.uid).set(userData);\n      }\n      return user;\n    } on FirebaseAuthException {\n      rethrow;\n    }\n  }\n\n  /// Sends a password reset email to the specified email address.\n  /// Throws a [FirebaseAuthException] on failure.\n  Future<void> sendPasswordResetEmail(String email) async {\n    try {\n      await _auth.sendPasswordResetEmail(email: email.trim());\n    } on FirebaseAuthException {\n      rethrow;\n    }\n  }\n\n  /// Checks if a user's document exists in the Firestore database.\n  Future<bool> doesUserExist(String uid) async {\n    DocumentSnapshot userDoc = await _firestore.collection('users').doc(uid).get();\n    return userDoc.exists;\n  }\n\n  /// Signs out the currently authenticated user.\n  Future<void> signOut() async {\n    await _auth.signOut();\n  }\n}\n"
        }
    ]
}