{
    "sourceFile": "lib/newCode/Backend/firestore_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1756115908497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756116473488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,5 +98,89 @@\n \n     DocumentReference postRef = await _firestore.collection('posts').add(data);\n     await postRef.update({'postId': postRef.id});\n   }\n+\n+  /// Deletes a post from Firestore.\n+  Future<void> deletePost(BuildContext context, String postId) async {\n+    try {\n+      await _firestore.collection('posts').doc(postId).delete();\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          backgroundColor: Colors.green,\n+          content: Text('Post deleted successfully'),\n+          duration: Duration(seconds: 2),\n+        ),\n+      );\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          backgroundColor: Colors.red,\n+          content: Text('Failed to delete post: $e'),\n+        ),\n+      );\n+    }\n+  }\n+\n+  /// Sends a message to the postmaker (e.g., for general inquiries).\n+  Future<void> replyToPostmaker(BuildContext context, String postmakerId, String message, String postId) async {\n+    try {\n+      User? user = _auth.currentUser;\n+      if (user == null) throw Exception('User not authenticated.');\n+\n+      await _firestore.collection('chats').add({\n+        'senderId': user.uid,\n+        'receiverId': postmakerId,\n+        'participants': [user.uid, postmakerId],\n+        'message': message,\n+        'postId': postId,\n+        'timestamp': Timestamp.now(),\n+      });\n+      \n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Message sent successfully'),\n+          backgroundColor: Colors.green,\n+        ),\n+      );\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          content: Text('Failed to send message: $e'),\n+          backgroundColor: Colors.red,\n+        ),\n+      );\n+    }\n+  }\n+\n+  /// Sends a claim request to the post owner.\n+  Future<void> claimPost(BuildContext context, String postId, String postmakerId, String answer) async {\n+    try {\n+      User? user = _auth.currentUser;\n+      if (user == null) throw Exception('User not authenticated.');\n+\n+      final claimsRef = _firestore.collection('posts').doc(postId).collection('claims');\n+\n+      await claimsRef.add({\n+        'senderId': user.uid,\n+        'answer': answer,\n+        'claimStatusC': 'requested',\n+        'timestamp': Timestamp.now(),\n+        'receiverId': postmakerId,\n+      });\n+\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        const SnackBar(\n+          content: Text('Your claim request has been sent.'),\n+          backgroundColor: Colors.green,\n+        ),\n+      );\n+    } catch (e) {\n+      ScaffoldMessenger.of(context).showSnackBar(\n+        SnackBar(\n+          content: Text('Failed to send claim request: $e'),\n+          backgroundColor: Colors.red,\n+        ),\n+      );\n+    }\n+  }\n }\n"
                },
                {
                    "date": 1756116485489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:firebase_storage/firebase_storage.dart';\n import 'package:flutter/foundation.dart';\n+import 'package:flutter/material.dart';\n import 'package:image_picker/image_picker.dart';\n import 'package:file_picker/file_picker.dart';\n \n /// A service class to handle all Firestore and Firebase Storage operations\n"
                },
                {
                    "date": 1756123065977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,187 +1,187 @@\n-// lib/Backend/firestore_service.dart\n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:firebase_storage/firebase_storage.dart';\n-import 'package:flutter/foundation.dart';\n-import 'package:flutter/material.dart';\n-import 'package:image_picker/image_picker.dart';\n-import 'package:file_picker/file_picker.dart';\n+// // lib/Backend/firestore_service.dart\n+// import 'package:cloud_firestore/cloud_firestore.dart';\n+// import 'package:firebase_auth/firebase_auth.dart';\n+// import 'package:firebase_storage/firebase_storage.dart';\n+// import 'package:flutter/foundation.dart';\n+// import 'package:flutter/material.dart';\n+// import 'package:image_picker/image_picker.dart';\n+// import 'package:file_picker/file_picker.dart';\n \n-/// A service class to handle all Firestore and Firebase Storage operations\n-/// related to lost and found posts.\n-class FirestoreService {\n-  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n-  final FirebaseStorage _storage = FirebaseStorage.instance;\n-  final FirebaseAuth _auth = FirebaseAuth.instance;\n+// /// A service class to handle all Firestore and Firebase Storage operations\n+// /// related to lost and found posts.\n+// class FirestoreService {\n+//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n+//   final FirebaseStorage _storage = FirebaseStorage.instance;\n+//   final FirebaseAuth _auth = FirebaseAuth.instance;\n \n-  /// Fetches the current user's data from Firestore.\n-  Future<Map<String, dynamic>?> fetchUserData() async {\n-    User? user = _auth.currentUser;\n-    if (user == null) return null;\n-    DocumentSnapshot userDoc = await _firestore.collection('users').doc(user.uid).get();\n-    if (userDoc.exists) {\n-      return userDoc.data() as Map<String, dynamic>;\n-    }\n-    return null;\n-  }\n+//   /// Fetches the current user's data from Firestore.\n+//   Future<Map<String, dynamic>?> fetchUserData() async {\n+//     User? user = _auth.currentUser;\n+//     if (user == null) return null;\n+//     DocumentSnapshot userDoc = await _firestore.collection('users').doc(user.uid).get();\n+//     if (userDoc.exists) {\n+//       return userDoc.data() as Map<String, dynamic>;\n+//     }\n+//     return null;\n+//   }\n \n-  /// Handles the process of picking images, with platform-specific logic.\n-  Future<List<Uint8List>?> pickImages() async {\n-    try {\n-      if (kIsWeb) {\n-        // Use FilePicker for web\n-        final result = await FilePicker.platform.pickFiles(\n-          allowMultiple: true,\n-          type: FileType.image,\n-        );\n-        return result?.files.map((file) => file.bytes!).toList();\n-      } else {\n-        // Use ImagePicker for mobile\n-        final ImagePicker picker = ImagePicker();\n-        final List<XFile> pickedFiles = await picker.pickMultiImage();\n-        List<Uint8List> imageBytes = [];\n-        for (var pickedFile in pickedFiles) {\n-          final Uint8List fileBytes = await pickedFile.readAsBytes();\n-          imageBytes.add(fileBytes);\n-        }\n-        return imageBytes;\n-      }\n-    } catch (e) {\n-      print('Error picking files: $e');\n-      return null;\n-    }\n-  }\n+//   /// Handles the process of picking images, with platform-specific logic.\n+//   Future<List<Uint8List>?> pickImages() async {\n+//     try {\n+//       if (kIsWeb) {\n+//         // Use FilePicker for web\n+//         final result = await FilePicker.platform.pickFiles(\n+//           allowMultiple: true,\n+//           type: FileType.image,\n+//         );\n+//         return result?.files.map((file) => file.bytes!).toList();\n+//       } else {\n+//         // Use ImagePicker for mobile\n+//         final ImagePicker picker = ImagePicker();\n+//         final List<XFile> pickedFiles = await picker.pickMultiImage();\n+//         List<Uint8List> imageBytes = [];\n+//         for (var pickedFile in pickedFiles) {\n+//           final Uint8List fileBytes = await pickedFile.readAsBytes();\n+//           imageBytes.add(fileBytes);\n+//         }\n+//         return imageBytes;\n+//       }\n+//     } catch (e) {\n+//       print('Error picking files: $e');\n+//       return null;\n+//     }\n+//   }\n \n-  /// Uploads images to Firebase Storage and returns their download URLs.\n-  Future<List<String>> uploadImages(List<Uint8List> imageBytes) async {\n-    final uploadFutures = imageBytes.asMap().entries.map((entry) async {\n-      final index = entry.key;\n-      final imageByteData = entry.value;\n-      final fileName = 'images/${DateTime.now().millisecondsSinceEpoch}_$index.jpg';\n-      final ref = _storage.ref().child(fileName);\n-      await ref.putData(imageByteData);\n-      return ref.getDownloadURL();\n-    });\n-    return Future.wait(uploadFutures);\n-  }\n+//   /// Uploads images to Firebase Storage and returns their download URLs.\n+//   Future<List<String>> uploadImages(List<Uint8List> imageBytes) async {\n+//     final uploadFutures = imageBytes.asMap().entries.map((entry) async {\n+//       final index = entry.key;\n+//       final imageByteData = entry.value;\n+//       final fileName = 'images/${DateTime.now().millisecondsSinceEpoch}_$index.jpg';\n+//       final ref = _storage.ref().child(fileName);\n+//       await ref.putData(imageByteData);\n+//       return ref.getDownloadURL();\n+//     });\n+//     return Future.wait(uploadFutures);\n+//   }\n \n-  /// Creates a new post in Firestore with the given data.\n-  Future<void> createPost({\n-    required String status,\n-    required String title,\n-    required String location,\n-    required String description,\n-    required List<Uint8List> imageBytes,\n-    String? hostel,\n-    String? question,\n-  }) async {\n-    User? user = _auth.currentUser;\n-    if (user == null) {\n-      throw Exception('User not authenticated.');\n-    }\n+//   /// Creates a new post in Firestore with the given data.\n+//   Future<void> createPost({\n+//     required String status,\n+//     required String title,\n+//     required String location,\n+//     required String description,\n+//     required List<Uint8List> imageBytes,\n+//     String? hostel,\n+//     String? question,\n+//   }) async {\n+//     User? user = _auth.currentUser;\n+//     if (user == null) {\n+//       throw Exception('User not authenticated.');\n+//     }\n \n-    List<String> imageUrls = await uploadImages(imageBytes);\n+//     List<String> imageUrls = await uploadImages(imageBytes);\n \n-    final data = {\n-      'location': location,\n-      'item': title,\n-      'description': description,\n-      'imageUrls': imageUrls,\n-      'timestamp': FieldValue.serverTimestamp(),\n-      'postmakerId': user.uid,\n-      'isClaimed': false,\n-      'postClaimer': null,\n-      'claimStatus': \"\",\n-      'question': question,\n-      'status': status,\n-      'hostel': hostel,\n-    };\n+//     final data = {\n+//       'location': location,\n+//       'item': title,\n+//       'description': description,\n+//       'imageUrls': imageUrls,\n+//       'timestamp': FieldValue.serverTimestamp(),\n+//       'postmakerId': user.uid,\n+//       'isClaimed': false,\n+//       'postClaimer': null,\n+//       'claimStatus': \"\",\n+//       'question': question,\n+//       'status': status,\n+//       'hostel': hostel,\n+//     };\n \n-    DocumentReference postRef = await _firestore.collection('posts').add(data);\n-    await postRef.update({'postId': postRef.id});\n-  }\n+//     DocumentReference postRef = await _firestore.collection('posts').add(data);\n+//     await postRef.update({'postId': postRef.id});\n+//   }\n \n-  /// Deletes a post from Firestore.\n-  Future<void> deletePost(BuildContext context, String postId) async {\n-    try {\n-      await _firestore.collection('posts').doc(postId).delete();\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          backgroundColor: Colors.green,\n-          content: Text('Post deleted successfully'),\n-          duration: Duration(seconds: 2),\n-        ),\n-      );\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-          backgroundColor: Colors.red,\n-          content: Text('Failed to delete post: $e'),\n-        ),\n-      );\n-    }\n-  }\n+//   /// Deletes a post from Firestore.\n+//   Future<void> deletePost(BuildContext context, String postId) async {\n+//     try {\n+//       await _firestore.collection('posts').doc(postId).delete();\n+//       ScaffoldMessenger.of(context).showSnackBar(\n+//         const SnackBar(\n+//           backgroundColor: Colors.green,\n+//           content: Text('Post deleted successfully'),\n+//           duration: Duration(seconds: 2),\n+//         ),\n+//       );\n+//     } catch (e) {\n+//       ScaffoldMessenger.of(context).showSnackBar(\n+//         SnackBar(\n+//           backgroundColor: Colors.red,\n+//           content: Text('Failed to delete post: $e'),\n+//         ),\n+//       );\n+//     }\n+//   }\n \n-  /// Sends a message to the postmaker (e.g., for general inquiries).\n-  Future<void> replyToPostmaker(BuildContext context, String postmakerId, String message, String postId) async {\n-    try {\n-      User? user = _auth.currentUser;\n-      if (user == null) throw Exception('User not authenticated.');\n+//   /// Sends a message to the postmaker (e.g., for general inquiries).\n+//   Future<void> replyToPostmaker(BuildContext context, String postmakerId, String message, String postId) async {\n+//     try {\n+//       User? user = _auth.currentUser;\n+//       if (user == null) throw Exception('User not authenticated.');\n \n-      await _firestore.collection('chats').add({\n-        'senderId': user.uid,\n-        'receiverId': postmakerId,\n-        'participants': [user.uid, postmakerId],\n-        'message': message,\n-        'postId': postId,\n-        'timestamp': Timestamp.now(),\n-      });\n+//       await _firestore.collection('chats').add({\n+//         'senderId': user.uid,\n+//         'receiverId': postmakerId,\n+//         'participants': [user.uid, postmakerId],\n+//         'message': message,\n+//         'postId': postId,\n+//         'timestamp': Timestamp.now(),\n+//       });\n       \n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          content: Text('Message sent successfully'),\n-          backgroundColor: Colors.green,\n-        ),\n-      );\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-          content: Text('Failed to send message: $e'),\n-          backgroundColor: Colors.red,\n-        ),\n-      );\n-    }\n-  }\n+//       ScaffoldMessenger.of(context).showSnackBar(\n+//         const SnackBar(\n+//           content: Text('Message sent successfully'),\n+//           backgroundColor: Colors.green,\n+//         ),\n+//       );\n+//     } catch (e) {\n+//       ScaffoldMessenger.of(context).showSnackBar(\n+//         SnackBar(\n+//           content: Text('Failed to send message: $e'),\n+//           backgroundColor: Colors.red,\n+//         ),\n+//       );\n+//     }\n+//   }\n \n-  /// Sends a claim request to the post owner.\n-  Future<void> claimPost(BuildContext context, String postId, String postmakerId, String answer) async {\n-    try {\n-      User? user = _auth.currentUser;\n-      if (user == null) throw Exception('User not authenticated.');\n+//   /// Sends a claim request to the post owner.\n+//   Future<void> claimPost(BuildContext context, String postId, String postmakerId, String answer) async {\n+//     try {\n+//       User? user = _auth.currentUser;\n+//       if (user == null) throw Exception('User not authenticated.');\n \n-      final claimsRef = _firestore.collection('posts').doc(postId).collection('claims');\n+//       final claimsRef = _firestore.collection('posts').doc(postId).collection('claims');\n \n-      await claimsRef.add({\n-        'senderId': user.uid,\n-        'answer': answer,\n-        'claimStatusC': 'requested',\n-        'timestamp': Timestamp.now(),\n-        'receiverId': postmakerId,\n-      });\n+//       await claimsRef.add({\n+//         'senderId': user.uid,\n+//         'answer': answer,\n+//         'claimStatusC': 'requested',\n+//         'timestamp': Timestamp.now(),\n+//         'receiverId': postmakerId,\n+//       });\n \n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          content: Text('Your claim request has been sent.'),\n-          backgroundColor: Colors.green,\n-        ),\n-      );\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-          content: Text('Failed to send claim request: $e'),\n-          backgroundColor: Colors.red,\n-        ),\n-      );\n-    }\n-  }\n-}\n+//       ScaffoldMessenger.of(context).showSnackBar(\n+//         const SnackBar(\n+//           content: Text('Your claim request has been sent.'),\n+//           backgroundColor: Colors.green,\n+//         ),\n+//       );\n+//     } catch (e) {\n+//       ScaffoldMessenger.of(context).showSnackBar(\n+//         SnackBar(\n+//           content: Text('Failed to send claim request: $e'),\n+//           backgroundColor: Colors.red,\n+//         ),\n+//       );\n+//     }\n+//   }\n+// }\n"
                }
            ],
            "date": 1756115908497,
            "name": "Commit-0",
            "content": "// lib/Backend/firestore_service.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:firebase_storage/firebase_storage.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:file_picker/file_picker.dart';\n\n/// A service class to handle all Firestore and Firebase Storage operations\n/// related to lost and found posts.\nclass FirestoreService {\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n  final FirebaseStorage _storage = FirebaseStorage.instance;\n  final FirebaseAuth _auth = FirebaseAuth.instance;\n\n  /// Fetches the current user's data from Firestore.\n  Future<Map<String, dynamic>?> fetchUserData() async {\n    User? user = _auth.currentUser;\n    if (user == null) return null;\n    DocumentSnapshot userDoc = await _firestore.collection('users').doc(user.uid).get();\n    if (userDoc.exists) {\n      return userDoc.data() as Map<String, dynamic>;\n    }\n    return null;\n  }\n\n  /// Handles the process of picking images, with platform-specific logic.\n  Future<List<Uint8List>?> pickImages() async {\n    try {\n      if (kIsWeb) {\n        // Use FilePicker for web\n        final result = await FilePicker.platform.pickFiles(\n          allowMultiple: true,\n          type: FileType.image,\n        );\n        return result?.files.map((file) => file.bytes!).toList();\n      } else {\n        // Use ImagePicker for mobile\n        final ImagePicker picker = ImagePicker();\n        final List<XFile> pickedFiles = await picker.pickMultiImage();\n        List<Uint8List> imageBytes = [];\n        for (var pickedFile in pickedFiles) {\n          final Uint8List fileBytes = await pickedFile.readAsBytes();\n          imageBytes.add(fileBytes);\n        }\n        return imageBytes;\n      }\n    } catch (e) {\n      print('Error picking files: $e');\n      return null;\n    }\n  }\n\n  /// Uploads images to Firebase Storage and returns their download URLs.\n  Future<List<String>> uploadImages(List<Uint8List> imageBytes) async {\n    final uploadFutures = imageBytes.asMap().entries.map((entry) async {\n      final index = entry.key;\n      final imageByteData = entry.value;\n      final fileName = 'images/${DateTime.now().millisecondsSinceEpoch}_$index.jpg';\n      final ref = _storage.ref().child(fileName);\n      await ref.putData(imageByteData);\n      return ref.getDownloadURL();\n    });\n    return Future.wait(uploadFutures);\n  }\n\n  /// Creates a new post in Firestore with the given data.\n  Future<void> createPost({\n    required String status,\n    required String title,\n    required String location,\n    required String description,\n    required List<Uint8List> imageBytes,\n    String? hostel,\n    String? question,\n  }) async {\n    User? user = _auth.currentUser;\n    if (user == null) {\n      throw Exception('User not authenticated.');\n    }\n\n    List<String> imageUrls = await uploadImages(imageBytes);\n\n    final data = {\n      'location': location,\n      'item': title,\n      'description': description,\n      'imageUrls': imageUrls,\n      'timestamp': FieldValue.serverTimestamp(),\n      'postmakerId': user.uid,\n      'isClaimed': false,\n      'postClaimer': null,\n      'claimStatus': \"\",\n      'question': question,\n      'status': status,\n      'hostel': hostel,\n    };\n\n    DocumentReference postRef = await _firestore.collection('posts').add(data);\n    await postRef.update({'postId': postRef.id});\n  }\n}\n"
        }
    ]
}