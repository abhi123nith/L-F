{
    "sourceFile": "lib/newCode/Backend/post_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1756117105251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756117531282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,9 @@\n     required String status,\n     required String location,\n     required String category,\n     required String dateRange,\n+    String? postmakerId, // Add optional postmakerId filter\n   }) {\n     Query query = _firestore.collection('posts');\n \n     if (status != 'All') {\n@@ -113,8 +114,11 @@\n     }\n     if (category != 'All') {\n       query = query.where('item', isEqualTo: category);\n     }\n+    if (postmakerId != null) { // Apply postmakerId filter if it exists\n+      query = query.where('postmakerId', isEqualTo: postmakerId);\n+    }\n \n     DateTime now = DateTime.now();\n     DateTime? startDate;\n     switch (dateRange) {\n"
                },
                {
                    "date": 1756120715442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n   void sharePost(BuildContext context, String title, String description) {\n     final content = 'Check out this post: $title\\nDescription: $description';\n     final snackBar = SnackBar(content: Text('Shared! $content'));\n     ScaffoldMessenger.of(context).showSnackBar(snackBar);\n-  }\n+  } \n \n   /// Fetches a stream of posts from Firestore with optional filtering.\n   Stream<QuerySnapshot> getFilteredPosts({\n     required String status,\n"
                },
                {
                    "date": 1756120738261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,97 +6,8 @@\n class PostService {\n   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n   final User? currentUser = FirebaseAuth.instance.currentUser;\n \n-  /// Deletes a post from Firestore and handles UI feedback.\n-  Future<void> deletePost(BuildContext context, String postId) async {\n-    try {\n-      await _firestore.collection('posts').doc(postId).delete();\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          backgroundColor: Colors.green,\n-          content: Text('Post deleted successfully'),\n-          duration: Duration(seconds: 2),\n-        ),\n-      );\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-          backgroundColor: Colors.red,\n-          content: Text('Failed to delete post: $e'),\n-        ),\n-      );\n-    }\n-  }\n-\n-  /// Sends a message to the post maker.\n-  Future<void> replyToPostmaker(BuildContext context, String postmakerId, String message, String postId) async {\n-    try {\n-      if (currentUser == null) throw Exception('User not authenticated.');\n-      \n-      await _firestore.collection('chats').add({\n-        'senderId': currentUser!.uid,\n-        'receiverId': postmakerId,\n-        'participants': [currentUser!.uid, postmakerId],\n-        'message': message,\n-        'postId': postId,\n-        'timestamp': Timestamp.now(),\n-      });\n-      \n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          content: Text('Message sent successfully'),\n-          backgroundColor: Colors.green,\n-        ),\n-      );\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-          content: Text('Failed to send message: $e'),\n-          backgroundColor: Colors.red,\n-        ),\n-      );\n-    }\n-  }\n-\n-  /// Sends a claim request to the post owner.\n-  Future<void> claimPost(BuildContext context, String postId, String postmakerId, String answer) async {\n-    try {\n-      if (currentUser == null) throw Exception('User not authenticated.');\n-      \n-      final claimsRef = _firestore.collection('posts').doc(postId).collection('claims');\n-\n-      await claimsRef.add({\n-        'senderId': currentUser!.uid,\n-        'answer': answer,\n-        'claimStatusC': 'requested',\n-        'timestamp': Timestamp.now(),\n-        'receiverId': postmakerId,\n-      });\n-\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        const SnackBar(\n-          content: Text('Your claim request has been sent.'),\n-          backgroundColor: Colors.green,\n-        ),\n-      );\n-    } catch (e) {\n-      ScaffoldMessenger.of(context).showSnackBar(\n-        SnackBar(\n-          content: Text('Failed to send claim request: $e'),\n-          backgroundColor: Colors.red,\n-        ),\n-      );\n-    }\n-  }\n-\n-  /// Handles sharing a post.\n-  void sharePost(BuildContext context, String title, String description) {\n-    final content = 'Check out this post: $title\\nDescription: $description';\n-    final snackBar = SnackBar(content: Text('Shared! $content'));\n-    ScaffoldMessenger.of(context).showSnackBar(snackBar);\n-  } \n-\n   /// Fetches a stream of posts from Firestore with optional filtering.\n   Stream<QuerySnapshot> getFilteredPosts({\n     required String status,\n     required String location,\n"
                },
                {
                    "date": 1756120756383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,62 @@\n \n class PostService {\n   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n   final User? currentUser = FirebaseAuth.instance.currentUser;\n+ /// Deletes a post from Firestore. Throws an exception on failure.\n+  Future<void> deletePost(String postId) async {\n+    try {\n+      await _firestore.collection('posts').doc(postId).delete();\n+    } catch (e) {\n+      throw Exception('Failed to delete post: $e');\n+    }\n+  }\n \n+  /// Sends a message to the post maker. Throws an exception on failure.\n+  Future<void> replyToPostmaker(String postmakerId, String message, String postId) async {\n+    try {\n+      if (currentUser == null) throw Exception('User not authenticated.');\n+      if (message.isEmpty) return;\n+      \n+      await _firestore.collection('chats').add({\n+        'senderId': currentUser!.uid,\n+        'receiverId': postmakerId,\n+        'participants': [currentUser!.uid, postmakerId],\n+        'message': message,\n+        'postId': postId,\n+        'timestamp': Timestamp.now(),\n+      });\n+    } catch (e) {\n+      throw Exception('Failed to send message: $e');\n+    }\n+  }\n+\n+  /// Sends a claim request to the post owner. Throws an exception on failure.\n+  Future<void> claimPost(String postId, String postmakerId, String answer) async {\n+    try {\n+      if (currentUser == null) throw Exception('User not authenticated.');\n+      \n+      final claimsRef = _firestore.collection('posts').doc(postId).collection('claims');\n+\n+      await claimsRef.add({\n+        'senderId': currentUser!.uid,\n+        'answer': answer,\n+        'claimStatusC': 'requested',\n+        'timestamp': Timestamp.now(),\n+        'receiverId': postmakerId,\n+      });\n+    } catch (e) {\n+      throw Exception('Failed to send claim request: $e');\n+    }\n+  }\n+\n+  /// Handles sharing a post. This remains a UI function.\n+  void sharePost(BuildContext context, String title, String description) {\n+    final content = 'Check out this post: $title\\nDescription: $description';\n+    final snackBar = SnackBar(content: Text('Shared! $content'));\n+    ScaffoldMessenger.of(context).showSnackBar(snackBar);\n+  }\n+  \n   /// Fetches a stream of posts from Firestore with optional filtering.\n   Stream<QuerySnapshot> getFilteredPosts({\n     required String status,\n     required String location,\n"
                },
                {
                    "date": 1756123060226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,111 +1,116 @@\n-// lib/Backend/post_service.dart\n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:flutter/material.dart';\n+// // lib/Backend/post_service.dart\n+// import 'package:cloud_firestore/cloud_firestore.dart';\n+// import 'package:firebase_auth/firebase_auth.dart';\n+// import 'package:flutter/material.dart';\n \n-class PostService {\n-  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n-  final User? currentUser = FirebaseAuth.instance.currentUser;\n- /// Deletes a post from Firestore. Throws an exception on failure.\n-  Future<void> deletePost(String postId) async {\n-    try {\n-      await _firestore.collection('posts').doc(postId).delete();\n-    } catch (e) {\n-      throw Exception('Failed to delete post: $e');\n-    }\n-  }\n+// class PostService {\n+//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n+//   final User? currentUser = FirebaseAuth.instance.currentUser;\n \n-  /// Sends a message to the post maker. Throws an exception on failure.\n-  Future<void> replyToPostmaker(String postmakerId, String message, String postId) async {\n-    try {\n-      if (currentUser == null) throw Exception('User not authenticated.');\n-      if (message.isEmpty) return;\n-      \n-      await _firestore.collection('chats').add({\n-        'senderId': currentUser!.uid,\n-        'receiverId': postmakerId,\n-        'participants': [currentUser!.uid, postmakerId],\n-        'message': message,\n-        'postId': postId,\n-        'timestamp': Timestamp.now(),\n-      });\n-    } catch (e) {\n-      throw Exception('Failed to send message: $e');\n-    }\n-  }\n+//   /// Deletes a post from Firestore. Throws an exception on failure.\n+//   Future<void> deletePost(String postId) async {\n+//     try {\n+//       await _firestore.collection('posts').doc(postId).delete();\n+//     } catch (e) {\n+//       throw Exception('Failed to delete post: $e');\n+//     }\n+//   }\n \n-  /// Sends a claim request to the post owner. Throws an exception on failure.\n-  Future<void> claimPost(String postId, String postmakerId, String answer) async {\n-    try {\n-      if (currentUser == null) throw Exception('User not authenticated.');\n-      \n-      final claimsRef = _firestore.collection('posts').doc(postId).collection('claims');\n+//   /// Sends a message to the post maker. Throws an exception on failure.\n+//   Future<void> replyToPostmaker(\n+//       String postmakerId, String message, String postId) async {\n+//     try {\n+//       if (currentUser == null) throw Exception('User not authenticated.');\n+//       if (message.isEmpty) return;\n \n-      await claimsRef.add({\n-        'senderId': currentUser!.uid,\n-        'answer': answer,\n-        'claimStatusC': 'requested',\n-        'timestamp': Timestamp.now(),\n-        'receiverId': postmakerId,\n-      });\n-    } catch (e) {\n-      throw Exception('Failed to send claim request: $e');\n-    }\n-  }\n+//       await _firestore.collection('chats').add({\n+//         'senderId': currentUser!.uid,\n+//         'receiverId': postmakerId,\n+//         'participants': [currentUser!.uid, postmakerId],\n+//         'message': message,\n+//         'postId': postId,\n+//         'timestamp': Timestamp.now(),\n+//       });\n+//     } catch (e) {\n+//       throw Exception('Failed to send message: $e');\n+//     }\n+//   }\n \n-  /// Handles sharing a post. This remains a UI function.\n-  void sharePost(BuildContext context, String title, String description) {\n-    final content = 'Check out this post: $title\\nDescription: $description';\n-    final snackBar = SnackBar(content: Text('Shared! $content'));\n-    ScaffoldMessenger.of(context).showSnackBar(snackBar);\n-  }\n-  \n-  /// Fetches a stream of posts from Firestore with optional filtering.\n-  Stream<QuerySnapshot> getFilteredPosts({\n-    required String status,\n-    required String location,\n-    required String category,\n-    required String dateRange,\n-    String? postmakerId, // Add optional postmakerId filter\n-  }) {\n-    Query query = _firestore.collection('posts');\n+//   /// Sends a claim request to the post owner. Throws an exception on failure.\n+//   Future<void> claimPost(\n+//       String postId, String postmakerId, String answer) async {\n+//     try {\n+//       if (currentUser == null) throw Exception('User not authenticated.');\n \n-    if (status != 'All') {\n-      query = query.where('status', isEqualTo: status);\n-    }\n-    if (location != 'Campus, NITH') {\n-      query = query.where('location', isEqualTo: location);\n-    }\n-    if (category != 'All') {\n-      query = query.where('item', isEqualTo: category);\n-    }\n-    if (postmakerId != null) { // Apply postmakerId filter if it exists\n-      query = query.where('postmakerId', isEqualTo: postmakerId);\n-    }\n+//       final claimsRef =\n+//           _firestore.collection('posts').doc(postId).collection('claims');\n \n-    DateTime now = DateTime.now();\n-    DateTime? startDate;\n-    switch (dateRange) {\n-      case 'Today':\n-        startDate = DateTime(now.year, now.month, now.day);\n-        break;\n-      case 'This Week':\n-        startDate = now.subtract(Duration(days: now.weekday - 1));\n-        break;\n-      case 'This Month':\n-        startDate = DateTime(now.year, now.month, 1);\n-        break;\n-      case 'This Year':\n-        startDate = DateTime(now.year, 1, 1);\n-        break;\n-      default:\n-        startDate = null;\n-    }\n+//       await claimsRef.add({\n+//         'senderId': currentUser!.uid,\n+//         'answer': answer,\n+//         'claimStatusC': 'requested',\n+//         'timestamp': Timestamp.now(),\n+//         'receiverId': postmakerId,\n+//       });\n+//     } catch (e) {\n+//       throw Exception('Failed to send claim request: $e');\n+//     }\n+//   }\n \n-    if (startDate != null) {\n-      query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n-    }\n-    \n-    return query.orderBy('timestamp', descending: true).snapshots();\n-  }\n-}\n+//   /// Handles sharing a post. This remains a UI function.\n+//   void sharePost(BuildContext context, String title, String description) {\n+//     final content = 'Check out this post: $title\\nDescription: $description';\n+//     final snackBar = SnackBar(content: Text('Shared! $content'));\n+//     ScaffoldMessenger.of(context).showSnackBar(snackBar);\n+//   }\n+\n+//   /// Fetches a stream of posts from Firestore with optional filtering.\n+//   Stream<QuerySnapshot> getFilteredPosts({\n+//     required String status,\n+//     required String location,\n+//     required String category,\n+//     required String dateRange,\n+//     String? postmakerId, // Add optional postmakerId filter\n+//   }) {\n+//     Query query = _firestore.collection('posts');\n+\n+//     if (status != 'All') {\n+//       query = query.where('status', isEqualTo: status);\n+//     }\n+//     if (location != 'Campus, NITH') {\n+//       query = query.where('location', isEqualTo: location);\n+//     }\n+//     if (category != 'All') {\n+//       query = query.where('item', isEqualTo: category);\n+//     }\n+//     if (postmakerId != null) {\n+//       // Apply postmakerId filter if it exists\n+//       query = query.where('postmakerId', isEqualTo: postmakerId);\n+//     }\n+\n+//     DateTime now = DateTime.now();\n+//     DateTime? startDate;\n+//     switch (dateRange) {\n+//       case 'Today':\n+//         startDate = DateTime(now.year, now.month, now.day);\n+//         break;\n+//       case 'This Week':\n+//         startDate = now.subtract(Duration(days: now.weekday - 1));\n+//         break;\n+//       case 'This Month':\n+//         startDate = DateTime(now.year, now.month, 1);\n+//         break;\n+//       case 'This Year':\n+//         startDate = DateTime(now.year, 1, 1);\n+//         break;\n+//       default:\n+//         startDate = null;\n+//     }\n+\n+//     if (startDate != null) {\n+//       query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n+//     }\n+\n+//     return query.orderBy('timestamp', descending: true).snapshots();\n+//   }\n+// }\n"
                }
            ],
            "date": 1756117105251,
            "name": "Commit-0",
            "content": "// lib/Backend/post_service.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\n\nclass PostService {\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n  final User? currentUser = FirebaseAuth.instance.currentUser;\n\n  /// Deletes a post from Firestore and handles UI feedback.\n  Future<void> deletePost(BuildContext context, String postId) async {\n    try {\n      await _firestore.collection('posts').doc(postId).delete();\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          backgroundColor: Colors.green,\n          content: Text('Post deleted successfully'),\n          duration: Duration(seconds: 2),\n        ),\n      );\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(\n          backgroundColor: Colors.red,\n          content: Text('Failed to delete post: $e'),\n        ),\n      );\n    }\n  }\n\n  /// Sends a message to the post maker.\n  Future<void> replyToPostmaker(BuildContext context, String postmakerId, String message, String postId) async {\n    try {\n      if (currentUser == null) throw Exception('User not authenticated.');\n      \n      await _firestore.collection('chats').add({\n        'senderId': currentUser!.uid,\n        'receiverId': postmakerId,\n        'participants': [currentUser!.uid, postmakerId],\n        'message': message,\n        'postId': postId,\n        'timestamp': Timestamp.now(),\n      });\n      \n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          content: Text('Message sent successfully'),\n          backgroundColor: Colors.green,\n        ),\n      );\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(\n          content: Text('Failed to send message: $e'),\n          backgroundColor: Colors.red,\n        ),\n      );\n    }\n  }\n\n  /// Sends a claim request to the post owner.\n  Future<void> claimPost(BuildContext context, String postId, String postmakerId, String answer) async {\n    try {\n      if (currentUser == null) throw Exception('User not authenticated.');\n      \n      final claimsRef = _firestore.collection('posts').doc(postId).collection('claims');\n\n      await claimsRef.add({\n        'senderId': currentUser!.uid,\n        'answer': answer,\n        'claimStatusC': 'requested',\n        'timestamp': Timestamp.now(),\n        'receiverId': postmakerId,\n      });\n\n      ScaffoldMessenger.of(context).showSnackBar(\n        const SnackBar(\n          content: Text('Your claim request has been sent.'),\n          backgroundColor: Colors.green,\n        ),\n      );\n    } catch (e) {\n      ScaffoldMessenger.of(context).showSnackBar(\n        SnackBar(\n          content: Text('Failed to send claim request: $e'),\n          backgroundColor: Colors.red,\n        ),\n      );\n    }\n  }\n\n  /// Handles sharing a post.\n  void sharePost(BuildContext context, String title, String description) {\n    final content = 'Check out this post: $title\\nDescription: $description';\n    final snackBar = SnackBar(content: Text('Shared! $content'));\n    ScaffoldMessenger.of(context).showSnackBar(snackBar);\n  }\n\n  /// Fetches a stream of posts from Firestore with optional filtering.\n  Stream<QuerySnapshot> getFilteredPosts({\n    required String status,\n    required String location,\n    required String category,\n    required String dateRange,\n  }) {\n    Query query = _firestore.collection('posts');\n\n    if (status != 'All') {\n      query = query.where('status', isEqualTo: status);\n    }\n    if (location != 'Campus, NITH') {\n      query = query.where('location', isEqualTo: location);\n    }\n    if (category != 'All') {\n      query = query.where('item', isEqualTo: category);\n    }\n\n    DateTime now = DateTime.now();\n    DateTime? startDate;\n    switch (dateRange) {\n      case 'Today':\n        startDate = DateTime(now.year, now.month, now.day);\n        break;\n      case 'This Week':\n        startDate = now.subtract(Duration(days: now.weekday - 1));\n        break;\n      case 'This Month':\n        startDate = DateTime(now.year, now.month, 1);\n        break;\n      case 'This Year':\n        startDate = DateTime(now.year, 1, 1);\n        break;\n      default:\n        startDate = null;\n    }\n\n    if (startDate != null) {\n      query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n    }\n    \n    return query.orderBy('timestamp', descending: true).snapshots();\n  }\n}\n"
        }
    ]
}