{
    "sourceFile": "lib/newCode/Backend/claims_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1756117804833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756118112087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n // lib/Backend/claims_service.dart\n import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:flutter/material.dart';\n \n class ClaimsService {\n   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n \n"
                },
                {
                    "date": 1756123068337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,69 +1,69 @@\n-// lib/Backend/claims_service.dart\n-import 'package:cloud_firestore/cloud_firestore.dart';\n+// // lib/Backend/claims_service.dart\n+// import 'package:cloud_firestore/cloud_firestore.dart';\n \n-class ClaimsService {\n-  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n+// class ClaimsService {\n+//   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n \n-  /// Fetches a stream of all claims sent by the current user.\n-  Stream<QuerySnapshot> getSentClaims(String userId) {\n-    return _firestore\n-        .collection('posts')\n-        .where('postmakerId', isEqualTo: userId)\n-        .snapshots();\n-  }\n+//   /// Fetches a stream of all claims sent by the current user.\n+//   Stream<QuerySnapshot> getSentClaims(String userId) {\n+//     return _firestore\n+//         .collection('posts')\n+//         .where('postmakerId', isEqualTo: userId)\n+//         .snapshots();\n+//   }\n \n-  /// Fetches a stream of all claims received by the current user's posts.\n-  Stream<QuerySnapshot> getReceivedClaims(String userId) {\n-    return _firestore\n-        .collection('posts')\n-        .where('postmakerId', isEqualTo: userId)\n-        .snapshots();\n-  }\n+//   /// Fetches a stream of all claims received by the current user's posts.\n+//   Stream<QuerySnapshot> getReceivedClaims(String userId) {\n+//     return _firestore\n+//         .collection('posts')\n+//         .where('postmakerId', isEqualTo: userId)\n+//         .snapshots();\n+//   }\n \n-  /// Accepts a claim and updates the post and claim status.\n-  Future<void> acceptClaim({\n-    required String postId,\n-    required String claimId,\n-    required String postmakerId,\n-    required String claimerId,\n-  }) async {\n-    final postDocRef = _firestore.collection('posts').doc(postId);\n-    final claimDocRef = postDocRef.collection('claims').doc(claimId);\n+//   /// Accepts a claim and updates the post and claim status.\n+//   Future<void> acceptClaim({\n+//     required String postId,\n+//     required String claimId,\n+//     required String postmakerId,\n+//     required String claimerId,\n+//   }) async {\n+//     final postDocRef = _firestore.collection('posts').doc(postId);\n+//     final claimDocRef = postDocRef.collection('claims').doc(claimId);\n \n-    await _firestore.runTransaction((transaction) async {\n-      final postSnapshot = await transaction.get(postDocRef);\n-      if (!postSnapshot.exists) {\n-        throw Exception(\"Post does not exist!\");\n-      }\n-      final postData = postSnapshot.data() as Map<String, dynamic>;\n+//     await _firestore.runTransaction((transaction) async {\n+//       final postSnapshot = await transaction.get(postDocRef);\n+//       if (!postSnapshot.exists) {\n+//         throw Exception(\"Post does not exist!\");\n+//       }\n+//       final postData = postSnapshot.data() as Map<String, dynamic>;\n \n-      if (postData['isClaimed'] == true) {\n-        throw Exception(\"This post has already been claimed.\");\n-      }\n+//       if (postData['isClaimed'] == true) {\n+//         throw Exception(\"This post has already been claimed.\");\n+//       }\n \n-      transaction.update(postDocRef, {\n-        'isClaimed': true,\n-        'postClaimer': claimerId,\n-      });\n+//       transaction.update(postDocRef, {\n+//         'isClaimed': true,\n+//         'postClaimer': claimerId,\n+//       });\n \n-      transaction.update(claimDocRef, {\n-        'claimStatusC': 'accepted',\n-      });\n-    });\n-  }\n+//       transaction.update(claimDocRef, {\n+//         'claimStatusC': 'accepted',\n+//       });\n+//     });\n+//   }\n \n-  /// Declines a claim.\n-  Future<void> declineClaim({\n-    required String postId,\n-    required String claimId,\n-  }) async {\n-    final claimDocRef = _firestore\n-        .collection('posts')\n-        .doc(postId)\n-        .collection('claims')\n-        .doc(claimId);\n-    await claimDocRef.update({\n-      'claimStatusC': 'declined',\n-    });\n-  }\n-}\n+//   /// Declines a claim.\n+//   Future<void> declineClaim({\n+//     required String postId,\n+//     required String claimId,\n+//   }) async {\n+//     final claimDocRef = _firestore\n+//         .collection('posts')\n+//         .doc(postId)\n+//         .collection('claims')\n+//         .doc(claimId);\n+//     await claimDocRef.update({\n+//       'claimStatusC': 'declined',\n+//     });\n+//   }\n+// }\n"
                }
            ],
            "date": 1756117804833,
            "name": "Commit-0",
            "content": "// lib/Backend/claims_service.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:flutter/material.dart';\n\nclass ClaimsService {\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n\n  /// Fetches a stream of all claims sent by the current user.\n  Stream<QuerySnapshot> getSentClaims(String userId) {\n    return _firestore\n        .collection('posts')\n        .where('postmakerId', isEqualTo: userId)\n        .snapshots();\n  }\n\n  /// Fetches a stream of all claims received by the current user's posts.\n  Stream<QuerySnapshot> getReceivedClaims(String userId) {\n    return _firestore\n        .collection('posts')\n        .where('postmakerId', isEqualTo: userId)\n        .snapshots();\n  }\n\n  /// Accepts a claim and updates the post and claim status.\n  Future<void> acceptClaim({\n    required String postId,\n    required String claimId,\n    required String postmakerId,\n    required String claimerId,\n  }) async {\n    final postDocRef = _firestore.collection('posts').doc(postId);\n    final claimDocRef = postDocRef.collection('claims').doc(claimId);\n\n    await _firestore.runTransaction((transaction) async {\n      final postSnapshot = await transaction.get(postDocRef);\n      if (!postSnapshot.exists) {\n        throw Exception(\"Post does not exist!\");\n      }\n      final postData = postSnapshot.data() as Map<String, dynamic>;\n\n      if (postData['isClaimed'] == true) {\n        throw Exception(\"This post has already been claimed.\");\n      }\n\n      transaction.update(postDocRef, {\n        'isClaimed': true,\n        'postClaimer': claimerId,\n      });\n\n      transaction.update(claimDocRef, {\n        'claimStatusC': 'accepted',\n      });\n    });\n  }\n\n  /// Declines a claim.\n  Future<void> declineClaim({\n    required String postId,\n    required String claimId,\n  }) async {\n    final claimDocRef = _firestore\n        .collection('posts')\n        .doc(postId)\n        .collection('claims')\n        .doc(claimId);\n    await claimDocRef.update({\n      'claimStatusC': 'declined',\n    });\n  }\n}\n"
        }
    ]
}