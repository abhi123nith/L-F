{
    "sourceFile": "lib/newCode/Frontend/pages/my_posts/my_post_page.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1756117559609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756117570410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n // lib/Frontend/pages/my_posts_page.dart\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n+import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n import 'package:l_f/Frontend/components/post_card.dart';\n import 'package:l_f/Frontend/components/dialogs.dart';\n"
                },
                {
                    "date": 1756117576036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n+import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n import 'package:l_f/Frontend/components/post_card.dart';\n import 'package:l_f/Frontend/components/dialogs.dart';\n"
                },
                {
                    "date": 1756117581734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n+import 'package:l_f/newCode/service/user_service.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n import 'package:l_f/Frontend/components/post_card.dart';\n import 'package:l_f/Frontend/components/dialogs.dart';\n"
                },
                {
                    "date": 1756117588605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,16 +3,14 @@\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n-import 'package:l_f/services/user_service.dart';\n-import 'package:l_f/models/post_model.dart';\n-import 'package:l_f/Frontend/components/post_card.dart';\n-import 'package:l_f/Frontend/components/dialogs.dart';\n \n+\n class MyPostsPage extends StatefulWidget {\n   const MyPostsPage({super.key});\n \n   @override\n"
                },
                {
                    "date": 1756118011185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,15 +2,13 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n-import 'package:l_f/Backend/post_service.dart';\n import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n \n-\n class MyPostsPage extends StatefulWidget {\n   const MyPostsPage({super.key});\n \n   @override\n@@ -20,9 +18,9 @@\n class _MyPostsPageState extends State<MyPostsPage> {\n   final PostService _postService = PostService();\n   final UserService _userService = UserService();\n   final User? currentUser = FirebaseAuth.instance.currentUser;\n-  \n+\n   Stream<QuerySnapshot>? _postStream;\n \n   @override\n   void initState() {\n@@ -62,29 +60,34 @@\n             print('ERROR: ${snapshot.error}');\n             return const Center(child: Text('Error loading posts'));\n           }\n           if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-            return const Center(child: Text('You have not created any posts yet.'));\n+            return const Center(\n+                child: Text('You have not created any posts yet.'));\n           }\n \n           final posts = snapshot.data!.docs.map((doc) async {\n             final data = doc.data() as Map<String, dynamic>;\n-            final userDetails = await _userService.fetchUserData(data['postmakerId']);\n-            \n+            final userDetails =\n+                await _userService.fetchUserData(data['postmakerId']);\n+\n             // For MyPostsPage, the user has always requested a claim on their own posts (it's their own post)\n             final userHasRequestedClaim = true;\n \n             return PostModel(\n               postId: doc.id,\n               postmakerId: data['postmakerId'] ?? '',\n               userName: userDetails!['name'] ?? 'NITH User',\n-              profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n+              profileImageUrl: userDetails['profileImage'] ??\n+                  'https://placehold.co/100x100/png',\n               status: data['status'] ?? '',\n               title: data['item'] ?? '',\n               location: data['location'] ?? '',\n               description: data['description'] ?? '',\n               itemImages: List<String>.from(data['imageUrls'] ?? []),\n-              postTime: (data['timestamp'] as Timestamp).toDate().toString(), // Using toString for simplicity, can be formatted.\n+              postTime: (data['timestamp'] as Timestamp)\n+                  .toDate()\n+                  .toString(), // Using toString for simplicity, can be formatted.\n               question: data['question'],\n               isClaimed: data['isClaimed'] ?? false,\n               postClaimerId: data['postClaimer'],\n               postClaimerName: data['postClaimerName'],\n@@ -109,16 +112,27 @@\n                 itemBuilder: (context, index) {\n                   final post = postsList[index];\n                   return PostCard(\n                     post: post,\n-                    onDelete: () => showDeleteConfirmationDialog(context, () => _postService.deletePost(context, post.postId)),\n-                    onReply: () => showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n-                    onClaim: () => showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n-                    onShare: () => _postService.sharePost(context, post.title, post.description),\n+                    onDelete: () => showDeleteConfirmationDialog(context,\n+                        () => _postService.deletePost(context, post.postId)),\n+                    onReply: () => showReplyDialog(\n+                        context, post.postmakerId, post.userName, post.postId),\n+                    onClaim: () => showClaimDialog(\n+                        context,\n+                        post.postmakerId,\n+                        post.title,\n+                        post.question!,\n+                        post.description,\n+                        post.postId),\n+                    onShare: () => _postService.sharePost(\n+                        context, post.title, post.description),\n                     currentUserId: currentUser!.uid,\n                     isMobile: isMobile,\n-                    userHasRequestedClaim: false, // This is a placeholder, as the delete button will be visible for my own posts.\n+                    userHasRequestedClaim:\n+                        false, // This is a placeholder, as the delete button will be visible for my own posts.\n                   );\n+           \n                 },\n               );\n             },\n           );\n"
                },
                {
                    "date": 1756118080191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,13 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n-import 'package:l_f/newCode/Backend/post_service.dart';\n-import 'package:l_f/newCode/Frontend/components/post_card.dart';\n-import 'package:l_f/newCode/models/post_model.dart';\n-import 'package:l_f/newCode/service/user_service.dart';\n+import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/services/user_service.dart';\n+import 'package:l_f/models/post_model.dart';\n+import 'package:l_f/Frontend/components/post_card.dart';\n+import 'package:l_f/Frontend/components/dialogs.dart'; // Import dialogs\n \n class MyPostsPage extends StatefulWidget {\n   const MyPostsPage({super.key});\n \n@@ -18,9 +19,9 @@\n class _MyPostsPageState extends State<MyPostsPage> {\n   final PostService _postService = PostService();\n   final UserService _userService = UserService();\n   final User? currentUser = FirebaseAuth.instance.currentUser;\n-\n+  \n   Stream<QuerySnapshot>? _postStream;\n \n   @override\n   void initState() {\n@@ -35,8 +36,143 @@\n       );\n     }\n   }\n \n+  // Dialog implementations for post interactions\n+  void _showDeleteConfirmationDialog(BuildContext context, String postId) {\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Delete Post'),\n+          content: const Text(\n+            'Are you sure you want to delete this post?',\n+            style: TextStyle(fontWeight: FontWeight.w700),\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                _postService.deletePost(context, postId);\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n+            ),\n+            TextButton(\n+              onPressed: () => Navigator.of(context).pop(),\n+              child: const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n+\n+  void _showReplyDialog(BuildContext context, String postmakerId, String postmaker, String postId) {\n+    TextEditingController messageController = TextEditingController();\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Send a Reply'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              Row(\n+                children: [\n+                  const Text('Reply to'),\n+                  TextButton(\n+                    onPressed: () {\n+                      // Navigator.push(context, MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)));\n+                    },\n+                    child: Text(postmaker),\n+                  ),\n+                ],\n+              ),\n+              const SizedBox(height: 10),\n+              TextField(\n+                controller: messageController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your message',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () => Navigator.of(context).pop(),\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String message = messageController.text.trim();\n+                if (message.isNotEmpty) {\n+                  _postService.replyToPostmaker(context, postmakerId, message, postId);\n+                }\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n+\n+  void _showClaimDialog(BuildContext context, String postmakerId, String postTitle, String postQuestion, String postDescription, String postId) {\n+    TextEditingController answerController = TextEditingController();\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Claim Item'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              const Text('Question from the post owner:'),\n+              const SizedBox(height: 10),\n+              Text(postQuestion, style: const TextStyle(fontWeight: FontWeight.bold)),\n+              const SizedBox(height: 20),\n+              TextField(\n+                controller: answerController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your answer',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () => Navigator.of(context).pop(),\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String answer = answerController.text.trim();\n+                if (answer.isNotEmpty) {\n+                  _postService.claimPost(context, postId, postmakerId, answer);\n+                }\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n+  \n+  String _formatDate(Timestamp? timestamp) {\n+    if (timestamp == null) return 'Not available';\n+    DateTime date = timestamp.toDate();\n+    return DateFormat('dd MMMM yyyy').format(date);\n+  }\n+\n   @override\n   Widget build(BuildContext context) {\n     if (currentUser == null) {\n       return const Center(child: Text('Please log in to view your posts.'));\n@@ -60,34 +196,29 @@\n             print('ERROR: ${snapshot.error}');\n             return const Center(child: Text('Error loading posts'));\n           }\n           if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-            return const Center(\n-                child: Text('You have not created any posts yet.'));\n+            return const Center(child: Text('You have not created any posts yet.'));\n           }\n \n           final posts = snapshot.data!.docs.map((doc) async {\n             final data = doc.data() as Map<String, dynamic>;\n-            final userDetails =\n-                await _userService.fetchUserData(data['postmakerId']);\n-\n+            final userDetails = await _userService.fetchUserData(data['postmakerId']);\n+            \n             // For MyPostsPage, the user has always requested a claim on their own posts (it's their own post)\n             final userHasRequestedClaim = true;\n \n             return PostModel(\n               postId: doc.id,\n               postmakerId: data['postmakerId'] ?? '',\n               userName: userDetails!['name'] ?? 'NITH User',\n-              profileImageUrl: userDetails['profileImage'] ??\n-                  'https://placehold.co/100x100/png',\n+              profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n               status: data['status'] ?? '',\n               title: data['item'] ?? '',\n               location: data['location'] ?? '',\n               description: data['description'] ?? '',\n               itemImages: List<String>.from(data['imageUrls'] ?? []),\n-              postTime: (data['timestamp'] as Timestamp)\n-                  .toDate()\n-                  .toString(), // Using toString for simplicity, can be formatted.\n+              postTime: _formatDate(data['timestamp']),\n               question: data['question'],\n               isClaimed: data['isClaimed'] ?? false,\n               postClaimerId: data['postClaimer'],\n               postClaimerName: data['postClaimerName'],\n@@ -112,27 +243,16 @@\n                 itemBuilder: (context, index) {\n                   final post = postsList[index];\n                   return PostCard(\n                     post: post,\n-                    onDelete: () => showDeleteConfirmationDialog(context,\n-                        () => _postService.deletePost(context, post.postId)),\n-                    onReply: () => showReplyDialog(\n-                        context, post.postmakerId, post.userName, post.postId),\n-                    onClaim: () => showClaimDialog(\n-                        context,\n-                        post.postmakerId,\n-                        post.title,\n-                        post.question!,\n-                        post.description,\n-                        post.postId),\n-                    onShare: () => _postService.sharePost(\n-                        context, post.title, post.description),\n+                    onDelete: () => _showDeleteConfirmationDialog(context, post.postId),\n+                    onReply: () => _showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n+                    onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n+                    onShare: () => _postService.sharePost(context, post.title, post.description),\n                     currentUserId: currentUser!.uid,\n                     isMobile: isMobile,\n-                    userHasRequestedClaim:\n-                        false, // This is a placeholder, as the delete button will be visible for my own posts.\n+                    userHasRequestedClaim: false,\n                   );\n-           \n                 },\n               );\n             },\n           );\n@@ -140,10 +260,4 @@\n       ),\n     );\n   }\n }\n-\n-String _formatDate(Timestamp? timestamp) {\n-  if (timestamp == null) return 'Not available';\n-  DateTime date = timestamp.toDate();\n-  return DateFormat('dd MMMM yyyy').format(date);\n-}\n"
                },
                {
                    "date": 1756118086628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n import 'package:l_f/Frontend/components/post_card.dart';\n import 'package:l_f/Frontend/components/dialogs.dart'; // Import dialogs\n"
                },
                {
                    "date": 1756118098177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,11 @@\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n+import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n import 'package:l_f/Frontend/components/post_card.dart';\n import 'package:l_f/Frontend/components/dialogs.dart'; // Import dialogs\n"
                },
                {
                    "date": 1756118104880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,10 @@\n import 'package:l_f/Backend/post_service.dart';\n import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n-import 'package:l_f/services/user_service.dart';\n-import 'package:l_f/models/post_model.dart';\n-import 'package:l_f/Frontend/components/post_card.dart';\n-import 'package:l_f/Frontend/components/dialogs.dart'; // Import dialogs\n+import 'package:l_f/newCode/service/user_service.dart';\n+ // Import dialogs\n \n class MyPostsPage extends StatefulWidget {\n   const MyPostsPage({super.key});\n \n"
                },
                {
                    "date": 1756118158528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n-import 'package:l_f/Backend/post_service.dart';\n import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n@@ -205,9 +204,8 @@\n             final data = doc.data() as Map<String, dynamic>;\n             final userDetails = await _userService.fetchUserData(data['postmakerId']);\n             \n             // For MyPostsPage, the user has always requested a claim on their own posts (it's their own post)\n-            final userHasRequestedClaim = true;\n \n             return PostModel(\n               postId: doc.id,\n               postmakerId: data['postmakerId'] ?? '',\n"
                },
                {
                    "date": 1756121775275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n             TextButton(\n               onPressed: () {\n                 String answer = answerController.text.trim();\n                 if (answer.isNotEmpty) {\n-                  _postService.claimPost(context, postId, postmakerId, answer);\n+                  _postService.claimPost(context postId, postmakerId, answer);\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n"
                },
                {
                    "date": 1756121785512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n           ),\n           actions: [\n             TextButton(\n               onPressed: () {\n-                _postService.deletePost(context, postId);\n+                _postService.deletePost(, postId);\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n             ),\n@@ -107,9 +107,9 @@\n             TextButton(\n               onPressed: () {\n                 String message = messageController.text.trim();\n                 if (message.isNotEmpty) {\n-                  _postService.replyToPostmaker(context, postmakerId, message, postId);\n+                  _postService.replyToPostmaker( postmakerId, message, postId);\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n@@ -153,9 +153,9 @@\n             TextButton(\n               onPressed: () {\n                 String answer = answerController.text.trim();\n                 if (answer.isNotEmpty) {\n-                  _postService.claimPost(context postId, postmakerId, answer);\n+                  _postService.claimPost( postId, postmakerId, answer);\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n"
                },
                {
                    "date": 1756122987638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,262 +1,284 @@\n-// lib/Frontend/pages/my_posts_page.dart\n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:flutter/material.dart';\n-import 'package:intl/intl.dart';\n-import 'package:l_f/newCode/Backend/post_service.dart';\n-import 'package:l_f/newCode/Frontend/components/post_card.dart';\n-import 'package:l_f/newCode/models/post_model.dart';\n-import 'package:l_f/newCode/service/user_service.dart';\n- // Import dialogs\n+// // lib/Frontend/pages/my_posts_page.dart\n+// import 'package:cloud_firestore/cloud_firestore.dart';\n+// import 'package:firebase_auth/firebase_auth.dart';\n+// import 'package:flutter/material.dart';\n+// import 'package:intl/intl.dart';\n+// import 'package:l_f/newCode/Backend/post_service.dart';\n+// import 'package:l_f/newCode/Frontend/components/post_card.dart';\n+// import 'package:l_f/newCode/models/post_model.dart';\n+// import 'package:l_f/newCode/service/user_service.dart';\n+// // Import dialogs\n \n-class MyPostsPage extends StatefulWidget {\n-  const MyPostsPage({super.key});\n+// class MyPostsPage extends StatefulWidget {\n+//   const MyPostsPage({super.key});\n \n-  @override\n-  State<MyPostsPage> createState() => _MyPostsPageState();\n-}\n+//   @override\n+//   State<MyPostsPage> createState() => _MyPostsPageState();\n+// }\n \n-class _MyPostsPageState extends State<MyPostsPage> {\n-  final PostService _postService = PostService();\n-  final UserService _userService = UserService();\n-  final User? currentUser = FirebaseAuth.instance.currentUser;\n-  \n-  Stream<QuerySnapshot>? _postStream;\n+// class _MyPostsPageState extends State<MyPostsPage> {\n+//   final PostService _postService = PostService();\n+//   final UserService _userService = UserService();\n+//   final User? currentUser = FirebaseAuth.instance.currentUser;\n \n-  @override\n-  void initState() {\n-    super.initState();\n-    if (currentUser != null) {\n-      _postStream = _postService.getFilteredPosts(\n-        status: 'All',\n-        location: 'Campus, NITH',\n-        category: 'All',\n-        dateRange: 'All Time',\n-        postmakerId: currentUser!.uid,\n-      );\n-    }\n-  }\n+//   Stream<QuerySnapshot>? _postStream;\n \n-  // Dialog implementations for post interactions\n-  void _showDeleteConfirmationDialog(BuildContext context, String postId) {\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Delete Post'),\n-          content: const Text(\n-            'Are you sure you want to delete this post?',\n-            style: TextStyle(fontWeight: FontWeight.w700),\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () {\n-                _postService.deletePost(, postId);\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n-            ),\n-            TextButton(\n-              onPressed: () => Navigator.of(context).pop(),\n-              child: const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+//   @override\n+//   void initState() {\n+//     super.initState();\n+//     if (currentUser != null) {\n+//       _postStream = _postService.getFilteredPosts(\n+//         status: 'All',\n+//         location: 'Campus, NITH',\n+//         category: 'All',\n+//         dateRange: 'All Time',\n+//         postmakerId: currentUser!.uid,\n+//       );\n+//     }\n+//   }\n \n-  void _showReplyDialog(BuildContext context, String postmakerId, String postmaker, String postId) {\n-    TextEditingController messageController = TextEditingController();\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Send a Reply'),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              Row(\n-                children: [\n-                  const Text('Reply to'),\n-                  TextButton(\n-                    onPressed: () {\n-                      // Navigator.push(context, MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)));\n-                    },\n-                    child: Text(postmaker),\n-                  ),\n-                ],\n-              ),\n-              const SizedBox(height: 10),\n-              TextField(\n-                controller: messageController,\n-                decoration: const InputDecoration(\n-                  labelText: 'Your message',\n-                  alignLabelWithHint: true,\n-                  border: OutlineInputBorder(),\n-                ),\n-                maxLines: 3,\n-              ),\n-            ],\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () => Navigator.of(context).pop(),\n-              child: const Text('Cancel'),\n-            ),\n-            TextButton(\n-              onPressed: () {\n-                String message = messageController.text.trim();\n-                if (message.isNotEmpty) {\n-                  _postService.replyToPostmaker( postmakerId, message, postId);\n-                }\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Send'),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+//   // Dialog implementations for post interactions\n+//   void _showDeleteConfirmationDialog(BuildContext context, String postId) {\n+//     showDialog(\n+//       context: context,\n+//       builder: (BuildContext context) {\n+//         return AlertDialog(\n+//           title: const Text('Delete Post'),\n+//           content: const Text(\n+//             'Are you sure you want to delete this post?',\n+//             style: TextStyle(fontWeight: FontWeight.w700),\n+//           ),\n+//           actions: [\n+//             TextButton(\n+//               onPressed: () {\n+//                 _postService.deletePost(postId);\n+//                 Navigator.of(context).pop();\n+//               },\n+//               child: const Text('Yes',\n+//                   style: TextStyle(fontWeight: FontWeight.bold)),\n+//             ),\n+//             TextButton(\n+//               onPressed: () => Navigator.of(context).pop(),\n+//               child: const Text('No',\n+//                   style: TextStyle(fontWeight: FontWeight.bold)),\n+//             ),\n+//           ],\n+//         );\n+//       },\n+//     );\n+//   }\n \n-  void _showClaimDialog(BuildContext context, String postmakerId, String postTitle, String postQuestion, String postDescription, String postId) {\n-    TextEditingController answerController = TextEditingController();\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Claim Item'),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              const Text('Question from the post owner:'),\n-              const SizedBox(height: 10),\n-              Text(postQuestion, style: const TextStyle(fontWeight: FontWeight.bold)),\n-              const SizedBox(height: 20),\n-              TextField(\n-                controller: answerController,\n-                decoration: const InputDecoration(\n-                  labelText: 'Your answer',\n-                  alignLabelWithHint: true,\n-                  border: OutlineInputBorder(),\n-                ),\n-                maxLines: 3,\n-              ),\n-            ],\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () => Navigator.of(context).pop(),\n-              child: const Text('Cancel'),\n-            ),\n-            TextButton(\n-              onPressed: () {\n-                String answer = answerController.text.trim();\n-                if (answer.isNotEmpty) {\n-                  _postService.claimPost( postId, postmakerId, answer);\n-                }\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Send'),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n-  \n-  String _formatDate(Timestamp? timestamp) {\n-    if (timestamp == null) return 'Not available';\n-    DateTime date = timestamp.toDate();\n-    return DateFormat('dd MMMM yyyy').format(date);\n-  }\n+//   void _showReplyDialog(BuildContext context, String postmakerId,\n+//       String postmaker, String postId) {\n+//     TextEditingController messageController = TextEditingController();\n+//     showDialog(\n+//       context: context,\n+//       builder: (BuildContext context) {\n+//         return AlertDialog(\n+//           title: const Text('Send a Reply'),\n+//           content: Column(\n+//             mainAxisSize: MainAxisSize.min,\n+//             children: [\n+//               Row(\n+//                 children: [\n+//                   const Text('Reply to'),\n+//                   TextButton(\n+//                     onPressed: () {\n+//                       // Navigator.push(context, MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)));\n+//                     },\n+//                     child: Text(postmaker),\n+//                   ),\n+//                 ],\n+//               ),\n+//               const SizedBox(height: 10),\n+//               TextField(\n+//                 controller: messageController,\n+//                 decoration: const InputDecoration(\n+//                   labelText: 'Your message',\n+//                   alignLabelWithHint: true,\n+//                   border: OutlineInputBorder(),\n+//                 ),\n+//                 maxLines: 3,\n+//               ),\n+//             ],\n+//           ),\n+//           actions: [\n+//             TextButton(\n+//               onPressed: () => Navigator.of(context).pop(),\n+//               child: const Text('Cancel'),\n+//             ),\n+//             TextButton(\n+//               onPressed: () {\n+//                 String message = messageController.text.trim();\n+//                 if (message.isNotEmpty) {\n+//                   _postService.replyToPostmaker(postmakerId, message, postId);\n+//                 }\n+//                 Navigator.of(context).pop();\n+//               },\n+//               child: const Text('Send'),\n+//             ),\n+//           ],\n+//         );\n+//       },\n+//     );\n+//   }\n \n-  @override\n-  Widget build(BuildContext context) {\n-    if (currentUser == null) {\n-      return const Center(child: Text('Please log in to view your posts.'));\n-    }\n+//   void _showClaimDialog(\n+//       BuildContext context,\n+//       String postmakerId,\n+//       String postTitle,\n+//       String postQuestion,\n+//       String postDescription,\n+//       String postId) {\n+//     TextEditingController answerController = TextEditingController();\n+//     showDialog(\n+//       context: context,\n+//       builder: (BuildContext context) {\n+//         return AlertDialog(\n+//           title: const Text('Claim Item'),\n+//           content: Column(\n+//             mainAxisSize: MainAxisSize.min,\n+//             children: [\n+//               const Text('Question from the post owner:'),\n+//               const SizedBox(height: 10),\n+//               Text(postQuestion,\n+//                   style: const TextStyle(fontWeight: FontWeight.bold)),\n+//               const SizedBox(height: 20),\n+//               TextField(\n+//                 controller: answerController,\n+//                 decoration: const InputDecoration(\n+//                   labelText: 'Your answer',\n+//                   alignLabelWithHint: true,\n+//                   border: OutlineInputBorder(),\n+//                 ),\n+//                 maxLines: 3,\n+//               ),\n+//             ],\n+//           ),\n+//           actions: [\n+//             TextButton(\n+//               onPressed: () => Navigator.of(context).pop(),\n+//               child: const Text('Cancel'),\n+//             ),\n+//             TextButton(\n+//               onPressed: () {\n+//                 String answer = answerController.text.trim();\n+//                 if (answer.isNotEmpty) {\n+//                   _postService.claimPost(postId, postmakerId, answer);\n+//                 }\n+//                 Navigator.of(context).pop();\n+//               },\n+//               child: const Text('Send'),\n+//             ),\n+//           ],\n+//         );\n+//       },\n+//     );\n+//   }\n \n-    bool isMobile = MediaQuery.of(context).size.width < 600;\n+//   String _formatDate(Timestamp? timestamp) {\n+//     if (timestamp == null) return 'Not available';\n+//     DateTime date = timestamp.toDate();\n+//     return DateFormat('dd MMMM yyyy').format(date);\n+//   }\n \n-    return Scaffold(\n-      appBar: AppBar(\n-        title: const Text('My Posts'),\n-        backgroundColor: Colors.deepOrange,\n-        foregroundColor: Colors.white,\n-      ),\n-      body: StreamBuilder<QuerySnapshot>(\n-        stream: _postStream,\n-        builder: (context, snapshot) {\n-          if (snapshot.connectionState == ConnectionState.waiting) {\n-            return const Center(child: CircularProgressIndicator());\n-          }\n-          if (snapshot.hasError) {\n-            print('ERROR: ${snapshot.error}');\n-            return const Center(child: Text('Error loading posts'));\n-          }\n-          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-            return const Center(child: Text('You have not created any posts yet.'));\n-          }\n+//   @override\n+//   Widget build(BuildContext context) {\n+//     if (currentUser == null) {\n+//       return const Center(child: Text('Please log in to view your posts.'));\n+//     }\n \n-          final posts = snapshot.data!.docs.map((doc) async {\n-            final data = doc.data() as Map<String, dynamic>;\n-            final userDetails = await _userService.fetchUserData(data['postmakerId']);\n-            \n-            // For MyPostsPage, the user has always requested a claim on their own posts (it's their own post)\n+//     bool isMobile = MediaQuery.of(context).size.width < 600;\n \n-            return PostModel(\n-              postId: doc.id,\n-              postmakerId: data['postmakerId'] ?? '',\n-              userName: userDetails!['name'] ?? 'NITH User',\n-              profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n-              status: data['status'] ?? '',\n-              title: data['item'] ?? '',\n-              location: data['location'] ?? '',\n-              description: data['description'] ?? '',\n-              itemImages: List<String>.from(data['imageUrls'] ?? []),\n-              postTime: _formatDate(data['timestamp']),\n-              question: data['question'],\n-              isClaimed: data['isClaimed'] ?? false,\n-              postClaimerId: data['postClaimer'],\n-              postClaimerName: data['postClaimerName'],\n-              postClaimerPic: data['postClaimerPic'],\n-            );\n-          });\n+//     return Scaffold(\n+//       appBar: AppBar(\n+//         title: const Text('My Posts'),\n+//         backgroundColor: Colors.deepOrange,\n+//         foregroundColor: Colors.white,\n+//       ),\n+//       body: StreamBuilder<QuerySnapshot>(\n+//         stream: _postStream,\n+//         builder: (context, snapshot) {\n+//           if (snapshot.connectionState == ConnectionState.waiting) {\n+//             return const Center(child: CircularProgressIndicator());\n+//           }\n+//           if (snapshot.hasError) {\n+//             print('ERROR: ${snapshot.error}');\n+//             return const Center(child: Text('Error loading posts'));\n+//           }\n+//           if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+//             return const Center(\n+//                 child: Text('You have not created any posts yet.'));\n+//           }\n \n-          return FutureBuilder<List<PostModel>>(\n-            future: Future.wait(posts),\n-            builder: (context, futureSnapshot) {\n-              if (futureSnapshot.connectionState == ConnectionState.waiting) {\n-                return const Center(child: CircularProgressIndicator());\n-              }\n-              if (futureSnapshot.hasError) {\n-                print(\"Error: ${futureSnapshot.error}\");\n-                return const Center(child: Text('Error loading posts'));\n-              }\n+//           final posts = snapshot.data!.docs.map((doc) async {\n+//             final data = doc.data() as Map<String, dynamic>;\n+//             final userDetails =\n+//                 await _userService.fetchUserData(data['postmakerId']);\n \n-              final postsList = futureSnapshot.data ?? [];\n-              return ListView.builder(\n-                itemCount: postsList.length,\n-                itemBuilder: (context, index) {\n-                  final post = postsList[index];\n-                  return PostCard(\n-                    post: post,\n-                    onDelete: () => _showDeleteConfirmationDialog(context, post.postId),\n-                    onReply: () => _showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n-                    onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n-                    onShare: () => _postService.sharePost(context, post.title, post.description),\n-                    currentUserId: currentUser!.uid,\n-                    isMobile: isMobile,\n-                    userHasRequestedClaim: false,\n-                  );\n-                },\n-              );\n-            },\n-          );\n-        },\n-      ),\n-    );\n-  }\n-}\n+//             // For MyPostsPage, the user has always requested a claim on their own posts (it's their own post)\n+\n+//             return PostModel(\n+//               postId: doc.id,\n+//               postmakerId: data['postmakerId'] ?? '',\n+//               userName: userDetails!['name'] ?? 'NITH User',\n+//               profileImageUrl: userDetails['profileImage'] ??\n+//                   'https://placehold.co/100x100/png',\n+//               status: data['status'] ?? '',\n+//               title: data['item'] ?? '',\n+//               location: data['location'] ?? '',\n+//               description: data['description'] ?? '',\n+//               itemImages: List<String>.from(data['imageUrls'] ?? []),\n+//               postTime: _formatDate(data['timestamp']),\n+//               question: data['question'],\n+//               isClaimed: data['isClaimed'] ?? false,\n+//               postClaimerId: data['postClaimer'],\n+//               postClaimerName: data['postClaimerName'],\n+//               postClaimerPic: data['postClaimerPic'],\n+//             );\n+//           });\n+\n+//           return FutureBuilder<List<PostModel>>(\n+//             future: Future.wait(posts),\n+//             builder: (context, futureSnapshot) {\n+//               if (futureSnapshot.connectionState == ConnectionState.waiting) {\n+//                 return const Center(child: CircularProgressIndicator());\n+//               }\n+//               if (futureSnapshot.hasError) {\n+//                 print(\"Error: ${futureSnapshot.error}\");\n+//                 return const Center(child: Text('Error loading posts'));\n+//               }\n+\n+//               final postsList = futureSnapshot.data ?? [];\n+//               return ListView.builder(\n+//                 itemCount: postsList.length,\n+//                 itemBuilder: (context, index) {\n+//                   final post = postsList[index];\n+//                   return PostCard(\n+//                     post: post,\n+//                     onDelete: () =>\n+//                         _showDeleteConfirmationDialog(context, post.postId),\n+//                     onReply: () => _showReplyDialog(\n+//                         context, post.postmakerId, post.userName, post.postId),\n+//                     onClaim: () => _showClaimDialog(\n+//                         context,\n+//                         post.postmakerId,\n+//                         post.title,\n+//                         post.question!,\n+//                         post.description,\n+//                         post.postId),\n+//                     onShare: () => _postService.sharePost(\n+//                         context, post.title, post.description),\n+//                     currentUserId: currentUser!.uid,\n+//                     isMobile: isMobile,\n+//                     userHasRequestedClaim: false,\n+//                   );\n+//                 },\n+//               );\n+//             },\n+//           );\n+//         },\n+//       ),\n+//     );\n+//   }\n+// }\n"
                }
            ],
            "date": 1756117559609,
            "name": "Commit-0",
            "content": "// lib/Frontend/pages/my_posts_page.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:l_f/Backend/post_service.dart';\nimport 'package:l_f/services/user_service.dart';\nimport 'package:l_f/models/post_model.dart';\nimport 'package:l_f/Frontend/components/post_card.dart';\nimport 'package:l_f/Frontend/components/dialogs.dart';\n\nclass MyPostsPage extends StatefulWidget {\n  const MyPostsPage({super.key});\n\n  @override\n  State<MyPostsPage> createState() => _MyPostsPageState();\n}\n\nclass _MyPostsPageState extends State<MyPostsPage> {\n  final PostService _postService = PostService();\n  final UserService _userService = UserService();\n  final User? currentUser = FirebaseAuth.instance.currentUser;\n  \n  Stream<QuerySnapshot>? _postStream;\n\n  @override\n  void initState() {\n    super.initState();\n    if (currentUser != null) {\n      _postStream = _postService.getFilteredPosts(\n        status: 'All',\n        location: 'Campus, NITH',\n        category: 'All',\n        dateRange: 'All Time',\n        postmakerId: currentUser!.uid,\n      );\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (currentUser == null) {\n      return const Center(child: Text('Please log in to view your posts.'));\n    }\n\n    bool isMobile = MediaQuery.of(context).size.width < 600;\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('My Posts'),\n        backgroundColor: Colors.deepOrange,\n        foregroundColor: Colors.white,\n      ),\n      body: StreamBuilder<QuerySnapshot>(\n        stream: _postStream,\n        builder: (context, snapshot) {\n          if (snapshot.connectionState == ConnectionState.waiting) {\n            return const Center(child: CircularProgressIndicator());\n          }\n          if (snapshot.hasError) {\n            print('ERROR: ${snapshot.error}');\n            return const Center(child: Text('Error loading posts'));\n          }\n          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n            return const Center(child: Text('You have not created any posts yet.'));\n          }\n\n          final posts = snapshot.data!.docs.map((doc) async {\n            final data = doc.data() as Map<String, dynamic>;\n            final userDetails = await _userService.fetchUserData(data['postmakerId']);\n            \n            // For MyPostsPage, the user has always requested a claim on their own posts (it's their own post)\n            final userHasRequestedClaim = true;\n\n            return PostModel(\n              postId: doc.id,\n              postmakerId: data['postmakerId'] ?? '',\n              userName: userDetails!['name'] ?? 'NITH User',\n              profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n              status: data['status'] ?? '',\n              title: data['item'] ?? '',\n              location: data['location'] ?? '',\n              description: data['description'] ?? '',\n              itemImages: List<String>.from(data['imageUrls'] ?? []),\n              postTime: (data['timestamp'] as Timestamp).toDate().toString(), // Using toString for simplicity, can be formatted.\n              question: data['question'],\n              isClaimed: data['isClaimed'] ?? false,\n              postClaimerId: data['postClaimer'],\n              postClaimerName: data['postClaimerName'],\n              postClaimerPic: data['postClaimerPic'],\n            );\n          });\n\n          return FutureBuilder<List<PostModel>>(\n            future: Future.wait(posts),\n            builder: (context, futureSnapshot) {\n              if (futureSnapshot.connectionState == ConnectionState.waiting) {\n                return const Center(child: CircularProgressIndicator());\n              }\n              if (futureSnapshot.hasError) {\n                print(\"Error: ${futureSnapshot.error}\");\n                return const Center(child: Text('Error loading posts'));\n              }\n\n              final postsList = futureSnapshot.data ?? [];\n              return ListView.builder(\n                itemCount: postsList.length,\n                itemBuilder: (context, index) {\n                  final post = postsList[index];\n                  return PostCard(\n                    post: post,\n                    onDelete: () => showDeleteConfirmationDialog(context, () => _postService.deletePost(context, post.postId)),\n                    onReply: () => showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n                    onClaim: () => showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n                    onShare: () => _postService.sharePost(context, post.title, post.description),\n                    currentUserId: currentUser!.uid,\n                    isMobile: isMobile,\n                    userHasRequestedClaim: false, // This is a placeholder, as the delete button will be visible for my own posts.\n                  );\n                },\n              );\n            },\n          );\n        },\n      ),\n    );\n  }\n}\n\nString _formatDate(Timestamp? timestamp) {\n  if (timestamp == null) return 'Not available';\n  DateTime date = timestamp.toDate();\n  return DateFormat('dd MMMM yyyy').format(date);\n}\n"
        }
    ]
}