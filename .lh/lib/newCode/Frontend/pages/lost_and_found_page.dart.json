{
    "sourceFile": "lib/newCode/Frontend/pages/lost_and_found_page.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1756116382628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756116388852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,10 @@\n // lib/Frontend/pages/lost_found_page.dart\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n-import 'package:l_f/Backend/firestore_service.dart';\n-import 'package:l_f/models/post_model.dart';\n-import 'package:l_f/services/user_service.dart';\n-import 'package:l_f/Frontend/components/post_card.dart';\n-import 'package:l_f/Frontend/components/filter_dropdowns.dart';\n \n+\n class LostFoundPage extends StatefulWidget {\n   const LostFoundPage({super.key});\n \n   @override\n"
                },
                {
                    "date": 1756116394611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n // lib/Frontend/pages/lost_found_page.dart\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n+import 'package:l_f/newCode/Backend/firestore_service.dart';\n \n \n class LostFoundPage extends StatefulWidget {\n   const LostFoundPage({super.key});\n"
                },
                {
                    "date": 1756116403297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,10 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:l_f/newCode/Backend/firestore_service.dart';\n+import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n+import 'package:l_f/newCode/service/user_service.dart';\n \n \n class LostFoundPage extends StatefulWidget {\n   const LostFoundPage({super.key});\n"
                },
                {
                    "date": 1756116412647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:l_f/newCode/Backend/firestore_service.dart';\n import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n+import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n \n \n class LostFoundPage extends StatefulWidget {\n"
                },
                {
                    "date": 1756117123520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,25 @@\n // lib/Frontend/pages/lost_found_page.dart\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n-import 'package:l_f/newCode/Backend/firestore_service.dart';\n-import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n-import 'package:l_f/newCode/models/post_model.dart';\n-import 'package:l_f/newCode/service/user_service.dart';\n+import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/services/user_service.dart';\n+import 'package:l_f/models/post_model.dart';\n+import 'package:l_f/Frontend/components/post_card.dart';\n+import 'package:l_f/Frontend/components/filter_dropdowns.dart';\n+import 'package:l_f/Frontend/components/dialogs.dart'; // Import dialogs\n+import 'package:l_f/Frontend/Contants/lists.dart';\n \n-\n class LostFoundPage extends StatefulWidget {\n   const LostFoundPage({super.key});\n \n   @override\n   State<LostFoundPage> createState() => _LostFoundPageState();\n }\n \n class _LostFoundPageState extends State<LostFoundPage> {\n-  final FirestoreService _firestoreService = FirestoreService();\n+  final PostService _postService = PostService();\n   final UserService _userService = UserService();\n   final User? currentUser = FirebaseAuth.instance.currentUser;\n   \n   String _selectedType = 'All';\n@@ -33,52 +35,18 @@\n     _applyFilters();\n   }\n \n   void _applyFilters() {\n-    Query query = FirebaseFirestore.instance.collection('posts');\n-\n-    if (_selectedType != 'All') {\n-      query = query.where('status', isEqualTo: _selectedType);\n-    }\n-    if (_selectedLocation != 'Campus, NITH') {\n-      query = query.where('location', isEqualTo: _selectedLocation);\n-    }\n-    if (_selectedCategory != 'All') {\n-      query = query.where('item', isEqualTo: _selectedCategory);\n-    }\n-\n-    DateTime now = DateTime.now();\n-    DateTime? startDate;\n-\n-    switch (_selectedDateRange) {\n-      case 'Today':\n-        startDate = DateTime(now.year, now.month, now.day);\n-        break;\n-      case 'This Week':\n-        startDate = now.subtract(Duration(days: now.weekday - 1));\n-        break;\n-      case 'This Month':\n-        startDate = DateTime(now.year, now.month, 1);\n-        break;\n-      case 'This Year':\n-        startDate = DateTime(now.year, 1, 1);\n-        break;\n-      default:\n-        startDate = null;\n-    }\n-\n-    if (startDate != null) {\n-      query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n-    }\n-\n     setState(() {\n-      _postStream = query.orderBy('timestamp', descending: true).snapshots();\n+      _postStream = _postService.getFilteredPosts(\n+        status: _selectedType,\n+        location: _selectedLocation,\n+        category: _selectedCategory,\n+        dateRange: _selectedDateRange,\n+      );\n     });\n   }\n \n-  // Moved dialog and post-related logic to be managed by the PostCard and dialogs.\n-  // The logic remains but is now triggered by the PostCard callbacks.\n-\n   @override\n   Widget build(BuildContext context) {\n     bool isMobile = MediaQuery.of(context).size.width < 600;\n \n@@ -123,11 +91,36 @@\n                 }\n \n                 final posts = snapshot.data!.docs.map((doc) async {\n                   final data = doc.data() as Map<String, dynamic>;\n-                  final userDetails = await _userService.fetchUserNameAndProfilePic(data['postmakerId']);\n+                  final userDetails = await _userService.fetchUserData(data['postmakerId']);\n+                  \n+                  // Check if the current user has already requested a claim\n+                  final claimSnapshot = await FirebaseFirestore.instance\n+                      .collection('posts')\n+                      .doc(doc.id)\n+                      .collection('claims')\n+                      .where('senderId', isEqualTo: currentUser!.uid)\n+                      .get();\n+                  final userHasRequestedClaim = claimSnapshot.docs.isNotEmpty;\n \n-                  return PostModel.fromFirestore(doc, userDetails);\n+                  return PostModel(\n+                    postId: doc.id,\n+                    postmakerId: data['postmakerId'] ?? '',\n+                    userName: userDetails!['name'] ?? 'NITH User',\n+                    profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n+                    status: data['status'] ?? '',\n+                    title: data['item'] ?? '',\n+                    location: data['location'] ?? '',\n+                    description: data['description'] ?? '',\n+                    itemImages: List<String>.from(data['imageUrls'] ?? []),\n+                    postTime: _formatDate(data['timestamp']),\n+                    question: data['question'],\n+                    isClaimed: data['isClaimed'] ?? false,\n+                    postClaimerId: data['postClaimer'],\n+                    postClaimerName: data['postClaimerName'],\n+                    postClaimerPic: data['postClaimerPic'],\n+                  );\n                 });\n \n                 return FutureBuilder<List<PostModel>>(\n                   future: Future.wait(posts),\n@@ -144,18 +137,17 @@\n                     return ListView.builder(\n                       itemCount: postsList.length,\n                       itemBuilder: (context, index) {\n                         final post = postsList[index];\n-                        // Using the new PostCard component\n                         return PostCard(\n                           post: post,\n-                          onDelete: _firestoreService.deletePost,\n-                          onReply: _firestoreService.replyToPostmaker,\n-                          onClaim: _firestoreService.claimPost,\n-                          onShare: _firestoreService.sharePost,\n+                          onDelete: () => showDeleteConfirmationDialog(context, () => _postService.deletePost(context, post.postId)),\n+                          onReply: () => showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n+                          onClaim: () => showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n+                          onShare: () => _postService.sharePost(context, post.title, post.description),\n                           currentUserId: currentUser!.uid,\n                           isMobile: isMobile,\n-                          userHasRequestedClaim: false, // This will be handled inside the PostCard\n+                          userHasRequestedClaim: false, // This logic will be handled inside the dialogs or post_card\n                         );\n                       },\n                     );\n                   },\n@@ -167,4 +159,137 @@\n       ),\n     );\n   }\n }\n+\n+// Dialogs now moved to dialogs.dart for reusability.\n+void showReplyDialog(BuildContext context, String postmakerId, String postmaker, String postId) {\n+  TextEditingController messageController = TextEditingController();\n+  final PostService postService = PostService();\n+\n+  showDialog(\n+    context: context,\n+    builder: (BuildContext context) {\n+      return AlertDialog(\n+        title: const Text('Send a Reply'),\n+        content: Column(\n+          mainAxisSize: MainAxisSize.min,\n+          children: [\n+            Row(\n+              children: [\n+                const Text('Reply to'),\n+                TextButton(\n+                  onPressed: () {\n+                    // Navigator.push(context, MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)));\n+                  },\n+                  child: Text(postmaker),\n+                ),\n+              ],\n+            ),\n+            const SizedBox(height: 10),\n+            TextField(\n+              controller: messageController,\n+              decoration: const InputDecoration(\n+                labelText: 'Your message',\n+                alignLabelWithHint: true,\n+                border: OutlineInputBorder(),\n+              ),\n+              maxLines: 3,\n+            ),\n+          ],\n+        ),\n+        actions: [\n+          TextButton(\n+            onPressed: () => Navigator.of(context).pop(),\n+            child: const Text('Cancel'),\n+          ),\n+          TextButton(\n+            onPressed: () {\n+              String message = messageController.text.trim();\n+              if (message.isNotEmpty) {\n+                postService.replyToPostmaker(context, postmakerId, message, postId);\n+              }\n+              Navigator.of(context).pop();\n+            },\n+            child: const Text('Send'),\n+          ),\n+        ],\n+      );\n+    },\n+  );\n+}\n+\n+void showClaimDialog(BuildContext context, String postmakerId, String postTitle, String postQuestion, String postDescription, String postId) {\n+  TextEditingController answerController = TextEditingController();\n+  final PostService postService = PostService();\n+\n+  showDialog(\n+    context: context,\n+    builder: (BuildContext context) {\n+      return AlertDialog(\n+        title: const Text('Claim Item'),\n+        content: Column(\n+          mainAxisSize: MainAxisSize.min,\n+          children: [\n+            const Text('Question from the post owner:'),\n+            const SizedBox(height: 10),\n+            Text(postQuestion, style: const TextStyle(fontWeight: FontWeight.bold)),\n+            const SizedBox(height: 20),\n+            TextField(\n+              controller: answerController,\n+              decoration: const InputDecoration(\n+                labelText: 'Your answer',\n+                alignLabelWithHint: true,\n+                border: OutlineInputBorder(),\n+              ),\n+              maxLines: 3,\n+            ),\n+          ],\n+        ),\n+        actions: [\n+          TextButton(\n+            onPressed: () => Navigator.of(context).pop(),\n+            child: const Text('Cancel'),\n+          ),\n+          TextButton(\n+            onPressed: () {\n+              String answer = answerController.text.trim();\n+              if (answer.isNotEmpty) {\n+                postService.claimPost(context, postId, postmakerId, answer);\n+              }\n+              Navigator.of(context).pop();\n+            },\n+            child: const Text('Send'),\n+          ),\n+        ],\n+      );\n+    },\n+  );\n+}\n+\n+void showDeleteConfirmationDialog(BuildContext context, VoidCallback onDelete) {\n+  showDialog(\n+    context: context,\n+    builder: (BuildContext context) {\n+      return AlertDialog(\n+        title: const Text('Delete Post'),\n+        content: const Text(\n+          'Are you sure you want to delete this post?',\n+          style: TextStyle(fontWeight: FontWeight.w700),\n+        ),\n+        actions: [\n+          TextButton(\n+            onPressed: () {\n+              onDelete();\n+              Navigator.of(context).pop();\n+            },\n+            child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n+          ),\n+          TextButton(\n+            onPressed: () => Navigator.of(context).pop(),\n+            child: const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n+          ),\n+        ],\n+      );\n+    },\n+  );\n+}\n"
                },
                {
                    "date": 1756117129540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n import 'package:l_f/Frontend/components/post_card.dart';\n import 'package:l_f/Frontend/components/filter_dropdowns.dart';\n"
                },
                {
                    "date": 1756117134782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:l_f/Backend/post_service.dart';\n import 'package:l_f/newCode/Backend/post_service.dart';\n+import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n import 'package:l_f/Frontend/components/post_card.dart';\n import 'package:l_f/Frontend/components/filter_dropdowns.dart';\n"
                },
                {
                    "date": 1756117146066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import 'package:flutter/material.dart';\n import 'package:l_f/Backend/post_service.dart';\n import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n+import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n import 'package:l_f/Frontend/components/post_card.dart';\n import 'package:l_f/Frontend/components/filter_dropdowns.dart';\n"
                },
                {
                    "date": 1756117161156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,17 +2,18 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/Frontend/Contants/lists.dart';\n+import 'package:l_f/Frontend/components/dialogs.dart'; // Import dialogs\n+import 'package:l_f/Frontend/components/filter_dropdowns.dart';\n+import 'package:l_f/Frontend/components/post_card.dart';\n+import 'package:l_f/models/post_model.dart';\n import 'package:l_f/newCode/Backend/post_service.dart';\n+import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/services/user_service.dart';\n-import 'package:l_f/models/post_model.dart';\n-import 'package:l_f/Frontend/components/post_card.dart';\n-import 'package:l_f/Frontend/components/filter_dropdowns.dart';\n-import 'package:l_f/Frontend/components/dialogs.dart'; // Import dialogs\n-import 'package:l_f/Frontend/Contants/lists.dart';\n \n class LostFoundPage extends StatefulWidget {\n   const LostFoundPage({super.key});\n \n@@ -23,9 +24,9 @@\n class _LostFoundPageState extends State<LostFoundPage> {\n   final PostService _postService = PostService();\n   final UserService _userService = UserService();\n   final User? currentUser = FirebaseAuth.instance.currentUser;\n-  \n+\n   String _selectedType = 'All';\n   String _selectedLocation = 'Campus, NITH';\n   String _selectedCategory = 'All';\n   String _selectedDateRange = 'All Time';\n@@ -94,10 +95,11 @@\n                 }\n \n                 final posts = snapshot.data!.docs.map((doc) async {\n                   final data = doc.data() as Map<String, dynamic>;\n-                  final userDetails = await _userService.fetchUserData(data['postmakerId']);\n-                  \n+                  final userDetails =\n+                      await _userService.fetchUserData(data['postmakerId']);\n+\n                   // Check if the current user has already requested a claim\n                   final claimSnapshot = await FirebaseFirestore.instance\n                       .collection('posts')\n                       .doc(doc.id)\n@@ -109,9 +111,10 @@\n                   return PostModel(\n                     postId: doc.id,\n                     postmakerId: data['postmakerId'] ?? '',\n                     userName: userDetails!['name'] ?? 'NITH User',\n-                    profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n+                    profileImageUrl: userDetails['profileImage'] ??\n+                        'https://placehold.co/100x100/png',\n                     status: data['status'] ?? '',\n                     title: data['item'] ?? '',\n                     location: data['location'] ?? '',\n                     description: data['description'] ?? '',\n@@ -127,9 +130,10 @@\n \n                 return FutureBuilder<List<PostModel>>(\n                   future: Future.wait(posts),\n                   builder: (context, futureSnapshot) {\n-                    if (futureSnapshot.connectionState == ConnectionState.waiting) {\n+                    if (futureSnapshot.connectionState ==\n+                        ConnectionState.waiting) {\n                       return const Center(child: CircularProgressIndicator());\n                     }\n                     if (futureSnapshot.hasError) {\n                       print(\"Error: ${futureSnapshot.error}\");\n@@ -142,15 +146,27 @@\n                       itemBuilder: (context, index) {\n                         final post = postsList[index];\n                         return PostCard(\n                           post: post,\n-                          onDelete: () => showDeleteConfirmationDialog(context, () => _postService.deletePost(context, post.postId)),\n-                          onReply: () => showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n-                          onClaim: () => showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n-                          onShare: () => _postService.sharePost(context, post.title, post.description),\n+                          onDelete: () => showDeleteConfirmationDialog(\n+                              context,\n+                              () => _postService.deletePost(\n+                                  context, post.postId)),\n+                          onReply: () => showReplyDialog(context,\n+                              post.postmakerId, post.userName, post.postId),\n+                          onClaim: () => showClaimDialog(\n+                              context,\n+                              post.postmakerId,\n+                              post.title,\n+                              post.question!,\n+                              post.description,\n+                              post.postId),\n+                          onShare: () => _postService.sharePost(\n+                              context, post.title, post.description),\n                           currentUserId: currentUser!.uid,\n                           isMobile: isMobile,\n-                          userHasRequestedClaim: false, // This logic will be handled inside the dialogs or post_card\n+                          userHasRequestedClaim:\n+                              false, // This logic will be handled inside the dialogs or post_card\n                         );\n                       },\n                     );\n                   },\n@@ -164,9 +180,10 @@\n   }\n }\n \n // Dialogs now moved to dialogs.dart for reusability.\n-void showReplyDialog(BuildContext context, String postmakerId, String postmaker, String postId) {\n+void showReplyDialog(\n+    BuildContext context, String postmakerId, String postmaker, String postId) {\n   TextEditingController messageController = TextEditingController();\n   final PostService postService = PostService();\n \n   showDialog(\n@@ -208,9 +225,10 @@\n           TextButton(\n             onPressed: () {\n               String message = messageController.text.trim();\n               if (message.isNotEmpty) {\n-                postService.replyToPostmaker(context, postmakerId, message, postId);\n+                postService.replyToPostmaker(\n+                    context, postmakerId, message, postId);\n               }\n               Navigator.of(context).pop();\n             },\n             child: const Text('Send'),\n@@ -220,9 +238,10 @@\n     },\n   );\n }\n \n-void showClaimDialog(BuildContext context, String postmakerId, String postTitle, String postQuestion, String postDescription, String postId) {\n+void showClaimDialog(BuildContext context, String postmakerId, String postTitle,\n+    String postQuestion, String postDescription, String postId) {\n   TextEditingController answerController = TextEditingController();\n   final PostService postService = PostService();\n \n   showDialog(\n@@ -234,9 +253,10 @@\n           mainAxisSize: MainAxisSize.min,\n           children: [\n             const Text('Question from the post owner:'),\n             const SizedBox(height: 10),\n-            Text(postQuestion, style: const TextStyle(fontWeight: FontWeight.bold)),\n+            Text(postQuestion,\n+                style: const TextStyle(fontWeight: FontWeight.bold)),\n             const SizedBox(height: 20),\n             TextField(\n               controller: answerController,\n               decoration: const InputDecoration(\n@@ -284,13 +304,15 @@\n             onPressed: () {\n               onDelete();\n               Navigator.of(context).pop();\n             },\n-            child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n+            child: const Text('Yes',\n+                style: TextStyle(fontWeight: FontWeight.bold)),\n           ),\n           TextButton(\n             onPressed: () => Navigator.of(context).pop(),\n-            child: const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n+            child:\n+                const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n           ),\n         ],\n       );\n     },\n"
                },
                {
                    "date": 1756117168891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n+import 'package:l_f/newCode/service/user_service.dart';\n import 'package:l_f/services/user_service.dart';\n \n class LostFoundPage extends StatefulWidget {\n   const LostFoundPage({super.key});\n"
                },
                {
                    "date": 1756117174853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,14 @@\n // lib/Frontend/pages/lost_found_page.dart\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n-import 'package:l_f/Backend/post_service.dart';\n-import 'package:l_f/Frontend/Contants/lists.dart';\n-import 'package:l_f/Frontend/components/dialogs.dart'; // Import dialogs\n-import 'package:l_f/Frontend/components/filter_dropdowns.dart';\n-import 'package:l_f/Frontend/components/post_card.dart';\n-import 'package:l_f/models/post_model.dart';\n+\n import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n-import 'package:l_f/services/user_service.dart';\n \n class LostFoundPage extends StatefulWidget {\n   const LostFoundPage({super.key});\n \n"
                },
                {
                    "date": 1756117395138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n // lib/Frontend/pages/lost_found_page.dart\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n+import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/services/user_service.dart';\n+import 'package:l_f/models/post_model.dart';\n+import 'package:l_f/Frontend/components/post_card.dart';\n+import 'package:l_f/Frontend/components/filter_dropdowns.dart';\n+import 'package:l_f/Frontend/Contants/lists.dart';\n \n-import 'package:l_f/newCode/Backend/post_service.dart';\n-import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n-import 'package:l_f/newCode/Frontend/components/post_card.dart';\n-import 'package:l_f/newCode/models/post_model.dart';\n-import 'package:l_f/newCode/service/user_service.dart';\n-\n class LostFoundPage extends StatefulWidget {\n   const LostFoundPage({super.key});\n \n   @override\n@@ -19,9 +19,9 @@\n class _LostFoundPageState extends State<LostFoundPage> {\n   final PostService _postService = PostService();\n   final UserService _userService = UserService();\n   final User? currentUser = FirebaseAuth.instance.currentUser;\n-\n+  \n   String _selectedType = 'All';\n   String _selectedLocation = 'Campus, NITH';\n   String _selectedCategory = 'All';\n   String _selectedDateRange = 'All Time';\n@@ -44,8 +44,143 @@\n       );\n     });\n   }\n \n+  // Dialog implementations moved here for clarity\n+  void _showDeleteConfirmationDialog(BuildContext context, String postId) {\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Delete Post'),\n+          content: const Text(\n+            'Are you sure you want to delete this post?',\n+            style: TextStyle(fontWeight: FontWeight.w700),\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                _postService.deletePost(context, postId);\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n+            ),\n+            TextButton(\n+              onPressed: () => Navigator.of(context).pop(),\n+              child: const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n+\n+  void _showReplyDialog(BuildContext context, String postmakerId, String postmaker, String postId) {\n+    TextEditingController messageController = TextEditingController();\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Send a Reply'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              Row(\n+                children: [\n+                  const Text('Reply to'),\n+                  TextButton(\n+                    onPressed: () {\n+                      // Navigator.push(context, MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)));\n+                    },\n+                    child: Text(postmaker),\n+                  ),\n+                ],\n+              ),\n+              const SizedBox(height: 10),\n+              TextField(\n+                controller: messageController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your message',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () => Navigator.of(context).pop(),\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String message = messageController.text.trim();\n+                if (message.isNotEmpty) {\n+                  _postService.replyToPostmaker(context, postmakerId, message, postId);\n+                }\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n+\n+  void _showClaimDialog(BuildContext context, String postmakerId, String postTitle, String postQuestion, String postDescription, String postId) {\n+    TextEditingController answerController = TextEditingController();\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Claim Item'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              const Text('Question from the post owner:'),\n+              const SizedBox(height: 10),\n+              Text(postQuestion, style: const TextStyle(fontWeight: FontWeight.bold)),\n+              const SizedBox(height: 20),\n+              TextField(\n+                controller: answerController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your answer',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () => Navigator.of(context).pop(),\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String answer = answerController.text.trim();\n+                if (answer.isNotEmpty) {\n+                  _postService.claimPost(context, postId, postmakerId, answer);\n+                }\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n+  \n+  String _formatDate(Timestamp? timestamp) {\n+    if (timestamp == null) return 'Not available';\n+    DateTime date = timestamp.toDate();\n+    return DateFormat('dd MMMM yyyy').format(date);\n+  }\n+\n   @override\n   Widget build(BuildContext context) {\n     bool isMobile = MediaQuery.of(context).size.width < 600;\n \n@@ -90,11 +225,10 @@\n                 }\n \n                 final posts = snapshot.data!.docs.map((doc) async {\n                   final data = doc.data() as Map<String, dynamic>;\n-                  final userDetails =\n-                      await _userService.fetchUserData(data['postmakerId']);\n-\n+                  final userDetails = await _userService.fetchUserData(data['postmakerId']);\n+                  \n                   // Check if the current user has already requested a claim\n                   final claimSnapshot = await FirebaseFirestore.instance\n                       .collection('posts')\n                       .doc(doc.id)\n@@ -106,10 +240,9 @@\n                   return PostModel(\n                     postId: doc.id,\n                     postmakerId: data['postmakerId'] ?? '',\n                     userName: userDetails!['name'] ?? 'NITH User',\n-                    profileImageUrl: userDetails['profileImage'] ??\n-                        'https://placehold.co/100x100/png',\n+                    profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n                     status: data['status'] ?? '',\n                     title: data['item'] ?? '',\n                     location: data['location'] ?? '',\n                     description: data['description'] ?? '',\n@@ -125,10 +258,9 @@\n \n                 return FutureBuilder<List<PostModel>>(\n                   future: Future.wait(posts),\n                   builder: (context, futureSnapshot) {\n-                    if (futureSnapshot.connectionState ==\n-                        ConnectionState.waiting) {\n+                    if (futureSnapshot.connectionState == ConnectionState.waiting) {\n                       return const Center(child: CircularProgressIndicator());\n                     }\n                     if (futureSnapshot.hasError) {\n                       print(\"Error: ${futureSnapshot.error}\");\n@@ -141,27 +273,15 @@\n                       itemBuilder: (context, index) {\n                         final post = postsList[index];\n                         return PostCard(\n                           post: post,\n-                          onDelete: () => showDeleteConfirmationDialog(\n-                              context,\n-                              () => _postService.deletePost(\n-                                  context, post.postId)),\n-                          onReply: () => showReplyDialog(context,\n-                              post.postmakerId, post.userName, post.postId),\n-                          onClaim: () => showClaimDialog(\n-                              context,\n-                              post.postmakerId,\n-                              post.title,\n-                              post.question!,\n-                              post.description,\n-                              post.postId),\n-                          onShare: () => _postService.sharePost(\n-                              context, post.title, post.description),\n+                          onDelete: () => _showDeleteConfirmationDialog(context, post.postId),\n+                          onReply: () => _showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n+                          onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n+                          onShare: () => _postService.sharePost(context, post.title, post.description),\n                           currentUserId: currentUser!.uid,\n                           isMobile: isMobile,\n-                          userHasRequestedClaim:\n-                              false, // This logic will be handled inside the dialogs or post_card\n+                          userHasRequestedClaim: false, // This will be handled inside the PostCard\n                         );\n                       },\n                     );\n                   },\n@@ -173,143 +293,4 @@\n       ),\n     );\n   }\n }\n-\n-// Dialogs now moved to dialogs.dart for reusability.\n-void showReplyDialog(\n-    BuildContext context, String postmakerId, String postmaker, String postId) {\n-  TextEditingController messageController = TextEditingController();\n-  final PostService postService = PostService();\n-\n-  showDialog(\n-    context: context,\n-    builder: (BuildContext context) {\n-      return AlertDialog(\n-        title: const Text('Send a Reply'),\n-        content: Column(\n-          mainAxisSize: MainAxisSize.min,\n-          children: [\n-            Row(\n-              children: [\n-                const Text('Reply to'),\n-                TextButton(\n-                  onPressed: () {\n-                    // Navigator.push(context, MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)));\n-                  },\n-                  child: Text(postmaker),\n-                ),\n-              ],\n-            ),\n-            const SizedBox(height: 10),\n-            TextField(\n-              controller: messageController,\n-              decoration: const InputDecoration(\n-                labelText: 'Your message',\n-                alignLabelWithHint: true,\n-                border: OutlineInputBorder(),\n-              ),\n-              maxLines: 3,\n-            ),\n-          ],\n-        ),\n-        actions: [\n-          TextButton(\n-            onPressed: () => Navigator.of(context).pop(),\n-            child: const Text('Cancel'),\n-          ),\n-          TextButton(\n-            onPressed: () {\n-              String message = messageController.text.trim();\n-              if (message.isNotEmpty) {\n-                postService.replyToPostmaker(\n-                    context, postmakerId, message, postId);\n-              }\n-              Navigator.of(context).pop();\n-            },\n-            child: const Text('Send'),\n-          ),\n-        ],\n-      );\n-    },\n-  );\n-}\n-\n-void showClaimDialog(BuildContext context, String postmakerId, String postTitle,\n-    String postQuestion, String postDescription, String postId) {\n-  TextEditingController answerController = TextEditingController();\n-  final PostService postService = PostService();\n-\n-  showDialog(\n-    context: context,\n-    builder: (BuildContext context) {\n-      return AlertDialog(\n-        title: const Text('Claim Item'),\n-        content: Column(\n-          mainAxisSize: MainAxisSize.min,\n-          children: [\n-            const Text('Question from the post owner:'),\n-            const SizedBox(height: 10),\n-            Text(postQuestion,\n-                style: const TextStyle(fontWeight: FontWeight.bold)),\n-            const SizedBox(height: 20),\n-            TextField(\n-              controller: answerController,\n-              decoration: const InputDecoration(\n-                labelText: 'Your answer',\n-                alignLabelWithHint: true,\n-                border: OutlineInputBorder(),\n-              ),\n-              maxLines: 3,\n-            ),\n-          ],\n-        ),\n-        actions: [\n-          TextButton(\n-            onPressed: () => Navigator.of(context).pop(),\n-            child: const Text('Cancel'),\n-          ),\n-          TextButton(\n-            onPressed: () {\n-              String answer = answerController.text.trim();\n-              if (answer.isNotEmpty) {\n-                postService.claimPost(context, postId, postmakerId, answer);\n-              }\n-              Navigator.of(context).pop();\n-            },\n-            child: const Text('Send'),\n-          ),\n-        ],\n-      );\n-    },\n-  );\n-}\n-\n-void showDeleteConfirmationDialog(BuildContext context, VoidCallback onDelete) {\n-  showDialog(\n-    context: context,\n-    builder: (BuildContext context) {\n-      return AlertDialog(\n-        title: const Text('Delete Post'),\n-        content: const Text(\n-          'Are you sure you want to delete this post?',\n-          style: TextStyle(fontWeight: FontWeight.w700),\n-        ),\n-        actions: [\n-          TextButton(\n-            onPressed: () {\n-              onDelete();\n-              Navigator.of(context).pop();\n-            },\n-            child: const Text('Yes',\n-                style: TextStyle(fontWeight: FontWeight.bold)),\n-          ),\n-          TextButton(\n-            onPressed: () => Navigator.of(context).pop(),\n-            child:\n-                const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n-          ),\n-        ],\n-      );\n-    },\n-  );\n-}\n"
                },
                {
                    "date": 1756117401314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n import 'package:l_f/Frontend/components/post_card.dart';\n import 'package:l_f/Frontend/components/filter_dropdowns.dart';\n"
                },
                {
                    "date": 1756117406794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:l_f/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n+import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n import 'package:l_f/Frontend/components/post_card.dart';\n import 'package:l_f/Frontend/components/filter_dropdowns.dart';\n"
                },
                {
                    "date": 1756117412358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n"
                },
                {
                    "date": 1756117423087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,11 @@\n // lib/Frontend/pages/lost_found_page.dart\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n+import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/services/user_service.dart';\n"
                },
                {
                    "date": 1756117429667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,17 +3,16 @@\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/Frontend/components/filter_dropdowns.dart';\n+import 'package:l_f/Frontend/components/post_card.dart';\n+import 'package:l_f/models/post_model.dart';\n import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n-import 'package:l_f/services/user_service.dart';\n-import 'package:l_f/models/post_model.dart';\n-import 'package:l_f/Frontend/components/post_card.dart';\n-import 'package:l_f/Frontend/components/filter_dropdowns.dart';\n-import 'package:l_f/Frontend/Contants/lists.dart';\n+import 'package:l_f/newCode/service/user_service.dart';\n \n class LostFoundPage extends StatefulWidget {\n   const LostFoundPage({super.key});\n \n@@ -24,9 +23,9 @@\n class _LostFoundPageState extends State<LostFoundPage> {\n   final PostService _postService = PostService();\n   final UserService _userService = UserService();\n   final User? currentUser = FirebaseAuth.instance.currentUser;\n-  \n+\n   String _selectedType = 'All';\n   String _selectedLocation = 'Campus, NITH';\n   String _selectedCategory = 'All';\n   String _selectedDateRange = 'All Time';\n@@ -66,21 +65,24 @@\n               onPressed: () {\n                 _postService.deletePost(context, postId);\n                 Navigator.of(context).pop();\n               },\n-              child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n+              child: const Text('Yes',\n+                  style: TextStyle(fontWeight: FontWeight.bold)),\n             ),\n             TextButton(\n               onPressed: () => Navigator.of(context).pop(),\n-              child: const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n+              child: const Text('No',\n+                  style: TextStyle(fontWeight: FontWeight.bold)),\n             ),\n           ],\n         );\n       },\n     );\n   }\n \n-  void _showReplyDialog(BuildContext context, String postmakerId, String postmaker, String postId) {\n+  void _showReplyDialog(BuildContext context, String postmakerId,\n+      String postmaker, String postId) {\n     TextEditingController messageController = TextEditingController();\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -120,9 +122,10 @@\n             TextButton(\n               onPressed: () {\n                 String message = messageController.text.trim();\n                 if (message.isNotEmpty) {\n-                  _postService.replyToPostmaker(context, postmakerId, message, postId);\n+                  _postService.replyToPostmaker(\n+                      context, postmakerId, message, postId);\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n@@ -132,9 +135,15 @@\n       },\n     );\n   }\n \n-  void _showClaimDialog(BuildContext context, String postmakerId, String postTitle, String postQuestion, String postDescription, String postId) {\n+  void _showClaimDialog(\n+      BuildContext context,\n+      String postmakerId,\n+      String postTitle,\n+      String postQuestion,\n+      String postDescription,\n+      String postId) {\n     TextEditingController answerController = TextEditingController();\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -144,9 +153,10 @@\n             mainAxisSize: MainAxisSize.min,\n             children: [\n               const Text('Question from the post owner:'),\n               const SizedBox(height: 10),\n-              Text(postQuestion, style: const TextStyle(fontWeight: FontWeight.bold)),\n+              Text(postQuestion,\n+                  style: const TextStyle(fontWeight: FontWeight.bold)),\n               const SizedBox(height: 20),\n               TextField(\n                 controller: answerController,\n                 decoration: const InputDecoration(\n@@ -177,9 +187,9 @@\n         );\n       },\n     );\n   }\n-  \n+\n   String _formatDate(Timestamp? timestamp) {\n     if (timestamp == null) return 'Not available';\n     DateTime date = timestamp.toDate();\n     return DateFormat('dd MMMM yyyy').format(date);\n@@ -230,10 +240,11 @@\n                 }\n \n                 final posts = snapshot.data!.docs.map((doc) async {\n                   final data = doc.data() as Map<String, dynamic>;\n-                  final userDetails = await _userService.fetchUserData(data['postmakerId']);\n-                  \n+                  final userDetails =\n+                      await _userService.fetchUserData(data['postmakerId']);\n+\n                   // Check if the current user has already requested a claim\n                   final claimSnapshot = await FirebaseFirestore.instance\n                       .collection('posts')\n                       .doc(doc.id)\n@@ -245,9 +256,10 @@\n                   return PostModel(\n                     postId: doc.id,\n                     postmakerId: data['postmakerId'] ?? '',\n                     userName: userDetails!['name'] ?? 'NITH User',\n-                    profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n+                    profileImageUrl: userDetails['profileImage'] ??\n+                        'https://placehold.co/100x100/png',\n                     status: data['status'] ?? '',\n                     title: data['item'] ?? '',\n                     location: data['location'] ?? '',\n                     description: data['description'] ?? '',\n@@ -263,9 +275,10 @@\n \n                 return FutureBuilder<List<PostModel>>(\n                   future: Future.wait(posts),\n                   builder: (context, futureSnapshot) {\n-                    if (futureSnapshot.connectionState == ConnectionState.waiting) {\n+                    if (futureSnapshot.connectionState ==\n+                        ConnectionState.waiting) {\n                       return const Center(child: CircularProgressIndicator());\n                     }\n                     if (futureSnapshot.hasError) {\n                       print(\"Error: ${futureSnapshot.error}\");\n@@ -278,15 +291,25 @@\n                       itemBuilder: (context, index) {\n                         final post = postsList[index];\n                         return PostCard(\n                           post: post,\n-                          onDelete: () => _showDeleteConfirmationDialog(context, post.postId),\n-                          onReply: () => _showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n-                          onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n-                          onShare: () => _postService.sharePost(context, post.title, post.description),\n+                          onDelete: () => _showDeleteConfirmationDialog(\n+                              context, post.postId),\n+                          onReply: () => _showReplyDialog(context,\n+                              post.postmakerId, post.userName, post.postId),\n+                          onClaim: () => _showClaimDialog(\n+                              context,\n+                              post.postmakerId,\n+                              post.title,\n+                              post.question!,\n+                              post.description,\n+                              post.postId),\n+                          onShare: () => _postService.sharePost(\n+                              context, post.title, post.description),\n                           currentUserId: currentUser!.uid,\n                           isMobile: isMobile,\n-                          userHasRequestedClaim: false, // This will be handled inside the PostCard\n+                          userHasRequestedClaim:\n+                              false, // This will be handled inside the PostCard\n                         );\n                       },\n                     );\n                   },\n"
                },
                {
                    "date": 1756118138268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,8 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n-import 'package:l_f/Backend/post_service.dart';\n-import 'package:l_f/Frontend/components/filter_dropdowns.dart';\n-import 'package:l_f/Frontend/components/post_card.dart';\n-import 'package:l_f/models/post_model.dart';\n import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n@@ -250,9 +246,8 @@\n                       .doc(doc.id)\n                       .collection('claims')\n                       .where('senderId', isEqualTo: currentUser!.uid)\n                       .get();\n-                  final userHasRequestedClaim = claimSnapshot.docs.isNotEmpty;\n \n                   return PostModel(\n                     postId: doc.id,\n                     postmakerId: data['postmakerId'] ?? '',\n"
                },
                {
                    "date": 1756120205598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,14 +240,8 @@\n                   final userDetails =\n                       await _userService.fetchUserData(data['postmakerId']);\n \n                   // Check if the current user has already requested a claim\n-                  final claimSnapshot = await FirebaseFirestore.instance\n-                      .collection('posts')\n-                      .doc(doc.id)\n-                      .collection('claims')\n-                      .where('senderId', isEqualTo: currentUser!.uid)\n-                      .get();\n \n                   return PostModel(\n                     postId: doc.id,\n                     postmakerId: data['postmakerId'] ?? '',\n"
                },
                {
                    "date": 1756120236562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n                 children: [\n                   const Text('Reply to'),\n                   TextButton(\n                     onPressed: () {\n-                      // Navigator.push(context, MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)));\n+                      Navigator.push(context, MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)));\n                     },\n                     child: Text(postmaker),\n                   ),\n                 ],\n"
                },
                {
                    "date": 1756120242167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import 'package:intl/intl.dart';\n import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n+import 'package:l_f/newCode/Frontend/pages/profile/user_see_page.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n \n class LostFoundPage extends StatefulWidget {\n@@ -91,9 +92,12 @@\n                 children: [\n                   const Text('Reply to'),\n                   TextButton(\n                     onPressed: () {\n-                      Navigator.push(context, MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)));\n+                      Navigator.push(\n+                          context,\n+                          MaterialPageRoute(\n+                              builder: (_) => UserSeePage(uid: postmakerId)));\n                     },\n                     child: Text(postmaker),\n                   ),\n                 ],\n"
                },
                {
                    "date": 1756120505888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n       );\n     });\n   }\n \n-  // Dialog implementations moved here for clarity\n+  // Dialog implementations\n   void _showDeleteConfirmationDialog(BuildContext context, String postId) {\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -62,24 +62,21 @@\n               onPressed: () {\n                 _postService.deletePost(context, postId);\n                 Navigator.of(context).pop();\n               },\n-              child: const Text('Yes',\n-                  style: TextStyle(fontWeight: FontWeight.bold)),\n+              child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n             ),\n             TextButton(\n               onPressed: () => Navigator.of(context).pop(),\n-              child: const Text('No',\n-                  style: TextStyle(fontWeight: FontWeight.bold)),\n+              child: const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n             ),\n           ],\n         );\n       },\n     );\n   }\n \n-  void _showReplyDialog(BuildContext context, String postmakerId,\n-      String postmaker, String postId) {\n+  void _showReplyDialog(BuildContext context, String postmakerId, String postmaker, String postId) {\n     TextEditingController messageController = TextEditingController();\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -93,11 +90,11 @@\n                   const Text('Reply to'),\n                   TextButton(\n                     onPressed: () {\n                       Navigator.push(\n-                          context,\n-                          MaterialPageRoute(\n-                              builder: (_) => UserSeePage(uid: postmakerId)));\n+                        context,\n+                        MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)),\n+                      );\n                     },\n                     child: Text(postmaker),\n                   ),\n                 ],\n@@ -122,10 +119,9 @@\n             TextButton(\n               onPressed: () {\n                 String message = messageController.text.trim();\n                 if (message.isNotEmpty) {\n-                  _postService.replyToPostmaker(\n-                      context, postmakerId, message, postId);\n+                  _postService.replyToPostmaker(context, postmakerId, message, postId);\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n@@ -135,15 +131,9 @@\n       },\n     );\n   }\n \n-  void _showClaimDialog(\n-      BuildContext context,\n-      String postmakerId,\n-      String postTitle,\n-      String postQuestion,\n-      String postDescription,\n-      String postId) {\n+  void _showClaimDialog(BuildContext context, String postmakerId, String postTitle, String postQuestion, String postDescription, String postId) {\n     TextEditingController answerController = TextEditingController();\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -153,10 +143,9 @@\n             mainAxisSize: MainAxisSize.min,\n             children: [\n               const Text('Question from the post owner:'),\n               const SizedBox(height: 10),\n-              Text(postQuestion,\n-                  style: const TextStyle(fontWeight: FontWeight.bold)),\n+              Text(postQuestion, style: const TextStyle(fontWeight: FontWeight.bold)),\n               const SizedBox(height: 20),\n               TextField(\n                 controller: answerController,\n                 decoration: const InputDecoration(\n@@ -240,19 +229,24 @@\n                 }\n \n                 final posts = snapshot.data!.docs.map((doc) async {\n                   final data = doc.data() as Map<String, dynamic>;\n-                  final userDetails =\n-                      await _userService.fetchUserData(data['postmakerId']);\n-\n+                  final userDetails = await _userService.fetchUserData(data['postmakerId']);\n+                  \n                   // Check if the current user has already requested a claim\n+                  final claimSnapshot = await FirebaseFirestore.instance\n+                      .collection('posts')\n+                      .doc(doc.id)\n+                      .collection('claims')\n+                      .where('senderId', isEqualTo: currentUser!.uid)\n+                      .get();\n+                  final userHasRequestedClaim = claimSnapshot.docs.isNotEmpty;\n \n                   return PostModel(\n                     postId: doc.id,\n                     postmakerId: data['postmakerId'] ?? '',\n                     userName: userDetails!['name'] ?? 'NITH User',\n-                    profileImageUrl: userDetails['profileImage'] ??\n-                        'https://placehold.co/100x100/png',\n+                    profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n                     status: data['status'] ?? '',\n                     title: data['item'] ?? '',\n                     location: data['location'] ?? '',\n                     description: data['description'] ?? '',\n@@ -268,10 +262,9 @@\n \n                 return FutureBuilder<List<PostModel>>(\n                   future: Future.wait(posts),\n                   builder: (context, futureSnapshot) {\n-                    if (futureSnapshot.connectionState ==\n-                        ConnectionState.waiting) {\n+                    if (futureSnapshot.connectionState == ConnectionState.waiting) {\n                       return const Center(child: CircularProgressIndicator());\n                     }\n                     if (futureSnapshot.hasError) {\n                       print(\"Error: ${futureSnapshot.error}\");\n@@ -284,25 +277,15 @@\n                       itemBuilder: (context, index) {\n                         final post = postsList[index];\n                         return PostCard(\n                           post: post,\n-                          onDelete: () => _showDeleteConfirmationDialog(\n-                              context, post.postId),\n-                          onReply: () => _showReplyDialog(context,\n-                              post.postmakerId, post.userName, post.postId),\n-                          onClaim: () => _showClaimDialog(\n-                              context,\n-                              post.postmakerId,\n-                              post.title,\n-                              post.question!,\n-                              post.description,\n-                              post.postId),\n-                          onShare: () => _postService.sharePost(\n-                              context, post.title, post.description),\n+                          onDelete: () => _showDeleteConfirmationDialog(context, post.postId),\n+                          onReply: () => _showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n+                          onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n+                          onShare: () => _postService.sharePost(context, post.title, post.description),\n                           currentUserId: currentUser!.uid,\n                           isMobile: isMobile,\n-                          userHasRequestedClaim:\n-                              false, // This will be handled inside the PostCard\n+                          userHasRequestedClaim: false, // This will be handled inside the PostCard\n                         );\n                       },\n                     );\n                   },\n"
                },
                {
                    "date": 1756120796478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n       );\n     });\n   }\n \n-  // Dialog implementations\n+  // Dialog implementations now handle the service calls and UI feedback\n   void _showDeleteConfirmationDialog(BuildContext context, String postId) {\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -58,10 +58,26 @@\n             style: TextStyle(fontWeight: FontWeight.w700),\n           ),\n           actions: [\n             TextButton(\n-              onPressed: () {\n-                _postService.deletePost(context, postId);\n+              onPressed: () async {\n+                try {\n+                  await _postService.deletePost(postId);\n+                  // Only show success message if the service call succeeds\n+                  ScaffoldMessenger.of(context).showSnackBar(\n+                    const SnackBar(\n+                      backgroundColor: Colors.green,\n+                      content: Text('Post deleted successfully'),\n+                    ),\n+                  );\n+                } catch (e) {\n+                  ScaffoldMessenger.of(context).showSnackBar(\n+                    SnackBar(\n+                      backgroundColor: Colors.red,\n+                      content: Text(e.toString()),\n+                    ),\n+                  );\n+                }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n             ),\n@@ -116,12 +132,27 @@\n               onPressed: () => Navigator.of(context).pop(),\n               child: const Text('Cancel'),\n             ),\n             TextButton(\n-              onPressed: () {\n+              onPressed: () async {\n                 String message = messageController.text.trim();\n                 if (message.isNotEmpty) {\n-                  _postService.replyToPostmaker(context, postmakerId, message, postId);\n+                  try {\n+                    await _postService.replyToPostmaker(postmakerId, message, postId);\n+                    ScaffoldMessenger.of(context).showSnackBar(\n+                      const SnackBar(\n+                        content: Text('Message sent successfully'),\n+                        backgroundColor: Colors.green,\n+                      ),\n+                    );\n+                  } catch (e) {\n+                    ScaffoldMessenger.of(context).showSnackBar(\n+                      SnackBar(\n+                        content: Text(e.toString()),\n+                        backgroundColor: Colors.red,\n+                      ),\n+                    );\n+                  }\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n@@ -162,12 +193,27 @@\n               onPressed: () => Navigator.of(context).pop(),\n               child: const Text('Cancel'),\n             ),\n             TextButton(\n-              onPressed: () {\n+              onPressed: () async {\n                 String answer = answerController.text.trim();\n                 if (answer.isNotEmpty) {\n-                  _postService.claimPost(context, postId, postmakerId, answer);\n+                  try {\n+                    await _postService.claimPost(postId, postmakerId, answer);\n+                    ScaffoldMessenger.of(context).showSnackBar(\n+                      const SnackBar(\n+                        content: Text('Request sent successfully'),\n+                        backgroundColor: Colors.green,\n+                      ),\n+                    );\n+                  } catch (e) {\n+                    ScaffoldMessenger.of(context).showSnackBar(\n+                      SnackBar(\n+                        content: Text(e.toString()),\n+                        backgroundColor: Colors.red,\n+                      ),\n+                    );\n+                  }\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n@@ -231,9 +277,8 @@\n                 final posts = snapshot.data!.docs.map((doc) async {\n                   final data = doc.data() as Map<String, dynamic>;\n                   final userDetails = await _userService.fetchUserData(data['postmakerId']);\n                   \n-                  // Check if the current user has already requested a claim\n                   final claimSnapshot = await FirebaseFirestore.instance\n                       .collection('posts')\n                       .doc(doc.id)\n                       .collection('claims')\n@@ -283,9 +328,9 @@\n                           onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n                           onShare: () => _postService.sharePost(context, post.title, post.description),\n                           currentUserId: currentUser!.uid,\n                           isMobile: isMobile,\n-                          userHasRequestedClaim: false, // This will be handled inside the PostCard\n+                          userHasRequestedClaim: false, // Corrected in a later step\n                         );\n                       },\n                     );\n                   },\n"
                },
                {
                    "date": 1756121734541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n       );\n     });\n   }\n \n-  // Dialog implementations now handle the service calls and UI feedback\n+  // Dialog implementations\n   void _showDeleteConfirmationDialog(BuildContext context, String postId) {\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -61,9 +61,8 @@\n             TextButton(\n               onPressed: () async {\n                 try {\n                   await _postService.deletePost(postId);\n-                  // Only show success message if the service call succeeds\n                   ScaffoldMessenger.of(context).showSnackBar(\n                     const SnackBar(\n                       backgroundColor: Colors.green,\n                       content: Text('Post deleted successfully'),\n"
                },
                {
                    "date": 1756121958317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,9 +327,9 @@\n                           onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n                           onShare: () => _postService.sharePost(context, post.title, post.description),\n                           currentUserId: currentUser!.uid,\n                           isMobile: isMobile,\n-                          userHasRequestedClaim: false, // Corrected in a later step\n+                          userHasRequestedClaim: post.postmakerId != currentUser!.uid, // Corrected logic\n                         );\n                       },\n                     );\n                   },\n"
                },
                {
                    "date": 1756122207323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,9 +327,9 @@\n                           onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n                           onShare: () => _postService.sharePost(context, post.title, post.description),\n                           currentUserId: currentUser!.uid,\n                           isMobile: isMobile,\n-                          userHasRequestedClaim: post.postmakerId != currentUser!.uid, // Corrected logic\n+                          userHasRequestedClaim: post.postmakerId != currentUser!.uid,\n                         );\n                       },\n                     );\n                   },\n"
                },
                {
                    "date": 1756122304907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,8 +282,9 @@\n                       .doc(doc.id)\n                       .collection('claims')\n                       .where('senderId', isEqualTo: currentUser!.uid)\n                       .get();\n+                  // Corrected line: userHasRequestedClaim now correctly checks the Firestore snapshot\n                   final userHasRequestedClaim = claimSnapshot.docs.isNotEmpty;\n \n                   return PostModel(\n                     postId: doc.id,\n"
                },
                {
                    "date": 1756122749151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,9 +282,8 @@\n                       .doc(doc.id)\n                       .collection('claims')\n                       .where('senderId', isEqualTo: currentUser!.uid)\n                       .get();\n-                  // Corrected line: userHasRequestedClaim now correctly checks the Firestore snapshot\n                   final userHasRequestedClaim = claimSnapshot.docs.isNotEmpty;\n \n                   return PostModel(\n                     postId: doc.id,\n@@ -328,9 +327,10 @@\n                           onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n                           onShare: () => _postService.sharePost(context, post.title, post.description),\n                           currentUserId: currentUser!.uid,\n                           isMobile: isMobile,\n-                          userHasRequestedClaim: post.postmakerId != currentUser!.uid,\n+                          // Corrected logic: only show the claim button if the post is \"Found\" and not already claimed\n+                          userHasRequestedClaim: post.isClaimed || post.status == 'Lost',\n                         );\n                       },\n                     );\n                   },\n"
                },
                {
                    "date": 1756122959865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,345 +1,345 @@\n-// lib/Frontend/pages/lost_found_page.dart\n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:flutter/material.dart';\n-import 'package:intl/intl.dart';\n-import 'package:l_f/newCode/Backend/post_service.dart';\n-import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n-import 'package:l_f/newCode/Frontend/components/post_card.dart';\n-import 'package:l_f/newCode/Frontend/pages/profile/user_see_page.dart';\n-import 'package:l_f/newCode/models/post_model.dart';\n-import 'package:l_f/newCode/service/user_service.dart';\n+// // lib/Frontend/pages/lost_found_page.dart\n+// import 'package:cloud_firestore/cloud_firestore.dart';\n+// import 'package:firebase_auth/firebase_auth.dart';\n+// import 'package:flutter/material.dart';\n+// import 'package:intl/intl.dart';\n+// import 'package:l_f/newCode/Backend/post_service.dart';\n+// import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n+// import 'package:l_f/newCode/Frontend/components/post_card.dart';\n+// import 'package:l_f/newCode/Frontend/pages/profile/user_see_page.dart';\n+// import 'package:l_f/newCode/models/post_model.dart';\n+// import 'package:l_f/newCode/service/user_service.dart';\n \n-class LostFoundPage extends StatefulWidget {\n-  const LostFoundPage({super.key});\n+// class LostFoundPage extends StatefulWidget {\n+//   const LostFoundPage({super.key});\n \n-  @override\n-  State<LostFoundPage> createState() => _LostFoundPageState();\n-}\n+//   @override\n+//   State<LostFoundPage> createState() => _LostFoundPageState();\n+// }\n \n-class _LostFoundPageState extends State<LostFoundPage> {\n-  final PostService _postService = PostService();\n-  final UserService _userService = UserService();\n-  final User? currentUser = FirebaseAuth.instance.currentUser;\n+// class _LostFoundPageState extends State<LostFoundPage> {\n+//   final PostService _postService = PostService();\n+//   final UserService _userService = UserService();\n+//   final User? currentUser = FirebaseAuth.instance.currentUser;\n \n-  String _selectedType = 'All';\n-  String _selectedLocation = 'Campus, NITH';\n-  String _selectedCategory = 'All';\n-  String _selectedDateRange = 'All Time';\n+//   String _selectedType = 'All';\n+//   String _selectedLocation = 'Campus, NITH';\n+//   String _selectedCategory = 'All';\n+//   String _selectedDateRange = 'All Time';\n \n-  Stream<QuerySnapshot>? _postStream;\n+//   Stream<QuerySnapshot>? _postStream;\n \n-  @override\n-  void initState() {\n-    super.initState();\n-    _applyFilters();\n-  }\n+//   @override\n+//   void initState() {\n+//     super.initState();\n+//     _applyFilters();\n+//   }\n \n-  void _applyFilters() {\n-    setState(() {\n-      _postStream = _postService.getFilteredPosts(\n-        status: _selectedType,\n-        location: _selectedLocation,\n-        category: _selectedCategory,\n-        dateRange: _selectedDateRange,\n-      );\n-    });\n-  }\n+//   void _applyFilters() {\n+//     setState(() {\n+//       _postStream = _postService.getFilteredPosts(\n+//         status: _selectedType,\n+//         location: _selectedLocation,\n+//         category: _selectedCategory,\n+//         dateRange: _selectedDateRange,\n+//       );\n+//     });\n+//   }\n \n-  // Dialog implementations\n-  void _showDeleteConfirmationDialog(BuildContext context, String postId) {\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Delete Post'),\n-          content: const Text(\n-            'Are you sure you want to delete this post?',\n-            style: TextStyle(fontWeight: FontWeight.w700),\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () async {\n-                try {\n-                  await _postService.deletePost(postId);\n-                  ScaffoldMessenger.of(context).showSnackBar(\n-                    const SnackBar(\n-                      backgroundColor: Colors.green,\n-                      content: Text('Post deleted successfully'),\n-                    ),\n-                  );\n-                } catch (e) {\n-                  ScaffoldMessenger.of(context).showSnackBar(\n-                    SnackBar(\n-                      backgroundColor: Colors.red,\n-                      content: Text(e.toString()),\n-                    ),\n-                  );\n-                }\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n-            ),\n-            TextButton(\n-              onPressed: () => Navigator.of(context).pop(),\n-              child: const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+//   // Dialog implementations\n+//   void _showDeleteConfirmationDialog(BuildContext context, String postId) {\n+//     showDialog(\n+//       context: context,\n+//       builder: (BuildContext context) {\n+//         return AlertDialog(\n+//           title: const Text('Delete Post'),\n+//           content: const Text(\n+//             'Are you sure you want to delete this post?',\n+//             style: TextStyle(fontWeight: FontWeight.w700),\n+//           ),\n+//           actions: [\n+//             TextButton(\n+//               onPressed: () async {\n+//                 try {\n+//                   await _postService.deletePost(postId);\n+//                   ScaffoldMessenger.of(context).showSnackBar(\n+//                     const SnackBar(\n+//                       backgroundColor: Colors.green,\n+//                       content: Text('Post deleted successfully'),\n+//                     ),\n+//                   );\n+//                 } catch (e) {\n+//                   ScaffoldMessenger.of(context).showSnackBar(\n+//                     SnackBar(\n+//                       backgroundColor: Colors.red,\n+//                       content: Text(e.toString()),\n+//                     ),\n+//                   );\n+//                 }\n+//                 Navigator.of(context).pop();\n+//               },\n+//               child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n+//             ),\n+//             TextButton(\n+//               onPressed: () => Navigator.of(context).pop(),\n+//               child: const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n+//             ),\n+//           ],\n+//         );\n+//       },\n+//     );\n+//   }\n \n-  void _showReplyDialog(BuildContext context, String postmakerId, String postmaker, String postId) {\n-    TextEditingController messageController = TextEditingController();\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Send a Reply'),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              Row(\n-                children: [\n-                  const Text('Reply to'),\n-                  TextButton(\n-                    onPressed: () {\n-                      Navigator.push(\n-                        context,\n-                        MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)),\n-                      );\n-                    },\n-                    child: Text(postmaker),\n-                  ),\n-                ],\n-              ),\n-              const SizedBox(height: 10),\n-              TextField(\n-                controller: messageController,\n-                decoration: const InputDecoration(\n-                  labelText: 'Your message',\n-                  alignLabelWithHint: true,\n-                  border: OutlineInputBorder(),\n-                ),\n-                maxLines: 3,\n-              ),\n-            ],\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () => Navigator.of(context).pop(),\n-              child: const Text('Cancel'),\n-            ),\n-            TextButton(\n-              onPressed: () async {\n-                String message = messageController.text.trim();\n-                if (message.isNotEmpty) {\n-                  try {\n-                    await _postService.replyToPostmaker(postmakerId, message, postId);\n-                    ScaffoldMessenger.of(context).showSnackBar(\n-                      const SnackBar(\n-                        content: Text('Message sent successfully'),\n-                        backgroundColor: Colors.green,\n-                      ),\n-                    );\n-                  } catch (e) {\n-                    ScaffoldMessenger.of(context).showSnackBar(\n-                      SnackBar(\n-                        content: Text(e.toString()),\n-                        backgroundColor: Colors.red,\n-                      ),\n-                    );\n-                  }\n-                }\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Send'),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+//   void _showReplyDialog(BuildContext context, String postmakerId, String postmaker, String postId) {\n+//     TextEditingController messageController = TextEditingController();\n+//     showDialog(\n+//       context: context,\n+//       builder: (BuildContext context) {\n+//         return AlertDialog(\n+//           title: const Text('Send a Reply'),\n+//           content: Column(\n+//             mainAxisSize: MainAxisSize.min,\n+//             children: [\n+//               Row(\n+//                 children: [\n+//                   const Text('Reply to'),\n+//                   TextButton(\n+//                     onPressed: () {\n+//                       Navigator.push(\n+//                         context,\n+//                         MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)),\n+//                       );\n+//                     },\n+//                     child: Text(postmaker),\n+//                   ),\n+//                 ],\n+//               ),\n+//               const SizedBox(height: 10),\n+//               TextField(\n+//                 controller: messageController,\n+//                 decoration: const InputDecoration(\n+//                   labelText: 'Your message',\n+//                   alignLabelWithHint: true,\n+//                   border: OutlineInputBorder(),\n+//                 ),\n+//                 maxLines: 3,\n+//               ),\n+//             ],\n+//           ),\n+//           actions: [\n+//             TextButton(\n+//               onPressed: () => Navigator.of(context).pop(),\n+//               child: const Text('Cancel'),\n+//             ),\n+//             TextButton(\n+//               onPressed: () async {\n+//                 String message = messageController.text.trim();\n+//                 if (message.isNotEmpty) {\n+//                   try {\n+//                     await _postService.replyToPostmaker(postmakerId, message, postId);\n+//                     ScaffoldMessenger.of(context).showSnackBar(\n+//                       const SnackBar(\n+//                         content: Text('Message sent successfully'),\n+//                         backgroundColor: Colors.green,\n+//                       ),\n+//                     );\n+//                   } catch (e) {\n+//                     ScaffoldMessenger.of(context).showSnackBar(\n+//                       SnackBar(\n+//                         content: Text(e.toString()),\n+//                         backgroundColor: Colors.red,\n+//                       ),\n+//                     );\n+//                   }\n+//                 }\n+//                 Navigator.of(context).pop();\n+//               },\n+//               child: const Text('Send'),\n+//             ),\n+//           ],\n+//         );\n+//       },\n+//     );\n+//   }\n \n-  void _showClaimDialog(BuildContext context, String postmakerId, String postTitle, String postQuestion, String postDescription, String postId) {\n-    TextEditingController answerController = TextEditingController();\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Claim Item'),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              const Text('Question from the post owner:'),\n-              const SizedBox(height: 10),\n-              Text(postQuestion, style: const TextStyle(fontWeight: FontWeight.bold)),\n-              const SizedBox(height: 20),\n-              TextField(\n-                controller: answerController,\n-                decoration: const InputDecoration(\n-                  labelText: 'Your answer',\n-                  alignLabelWithHint: true,\n-                  border: OutlineInputBorder(),\n-                ),\n-                maxLines: 3,\n-              ),\n-            ],\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () => Navigator.of(context).pop(),\n-              child: const Text('Cancel'),\n-            ),\n-            TextButton(\n-              onPressed: () async {\n-                String answer = answerController.text.trim();\n-                if (answer.isNotEmpty) {\n-                  try {\n-                    await _postService.claimPost(postId, postmakerId, answer);\n-                    ScaffoldMessenger.of(context).showSnackBar(\n-                      const SnackBar(\n-                        content: Text('Request sent successfully'),\n-                        backgroundColor: Colors.green,\n-                      ),\n-                    );\n-                  } catch (e) {\n-                    ScaffoldMessenger.of(context).showSnackBar(\n-                      SnackBar(\n-                        content: Text(e.toString()),\n-                        backgroundColor: Colors.red,\n-                      ),\n-                    );\n-                  }\n-                }\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Send'),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+//   void _showClaimDialog(BuildContext context, String postmakerId, String postTitle, String postQuestion, String postDescription, String postId) {\n+//     TextEditingController answerController = TextEditingController();\n+//     showDialog(\n+//       context: context,\n+//       builder: (BuildContext context) {\n+//         return AlertDialog(\n+//           title: const Text('Claim Item'),\n+//           content: Column(\n+//             mainAxisSize: MainAxisSize.min,\n+//             children: [\n+//               const Text('Question from the post owner:'),\n+//               const SizedBox(height: 10),\n+//               Text(postQuestion, style: const TextStyle(fontWeight: FontWeight.bold)),\n+//               const SizedBox(height: 20),\n+//               TextField(\n+//                 controller: answerController,\n+//                 decoration: const InputDecoration(\n+//                   labelText: 'Your answer',\n+//                   alignLabelWithHint: true,\n+//                   border: OutlineInputBorder(),\n+//                 ),\n+//                 maxLines: 3,\n+//               ),\n+//             ],\n+//           ),\n+//           actions: [\n+//             TextButton(\n+//               onPressed: () => Navigator.of(context).pop(),\n+//               child: const Text('Cancel'),\n+//             ),\n+//             TextButton(\n+//               onPressed: () async {\n+//                 String answer = answerController.text.trim();\n+//                 if (answer.isNotEmpty) {\n+//                   try {\n+//                     await _postService.claimPost(postId, postmakerId, answer);\n+//                     ScaffoldMessenger.of(context).showSnackBar(\n+//                       const SnackBar(\n+//                         content: Text('Request sent successfully'),\n+//                         backgroundColor: Colors.green,\n+//                       ),\n+//                     );\n+//                   } catch (e) {\n+//                     ScaffoldMessenger.of(context).showSnackBar(\n+//                       SnackBar(\n+//                         content: Text(e.toString()),\n+//                         backgroundColor: Colors.red,\n+//                       ),\n+//                     );\n+//                   }\n+//                 }\n+//                 Navigator.of(context).pop();\n+//               },\n+//               child: const Text('Send'),\n+//             ),\n+//           ],\n+//         );\n+//       },\n+//     );\n+//   }\n \n-  String _formatDate(Timestamp? timestamp) {\n-    if (timestamp == null) return 'Not available';\n-    DateTime date = timestamp.toDate();\n-    return DateFormat('dd MMMM yyyy').format(date);\n-  }\n+//   String _formatDate(Timestamp? timestamp) {\n+//     if (timestamp == null) return 'Not available';\n+//     DateTime date = timestamp.toDate();\n+//     return DateFormat('dd MMMM yyyy').format(date);\n+//   }\n \n-  @override\n-  Widget build(BuildContext context) {\n-    bool isMobile = MediaQuery.of(context).size.width < 600;\n+//   @override\n+//   Widget build(BuildContext context) {\n+//     bool isMobile = MediaQuery.of(context).size.width < 600;\n \n-    return Scaffold(\n-      body: Column(\n-        children: [\n-          FilterDropdowns(\n-            selectedType: _selectedType,\n-            selectedLocation: _selectedLocation,\n-            selectedCategory: _selectedCategory,\n-            selectedDateRange: _selectedDateRange,\n-            onTypeChanged: (newValue) {\n-              setState(() => _selectedType = newValue!);\n-              _applyFilters();\n-            },\n-            onLocationChanged: (newValue) {\n-              setState(() => _selectedLocation = newValue!);\n-              _applyFilters();\n-            },\n-            onCategoryChanged: (newValue) {\n-              setState(() => _selectedCategory = newValue!);\n-              _applyFilters();\n-            },\n-            onDateRangeChanged: (newValue) {\n-              setState(() => _selectedDateRange = newValue!);\n-              _applyFilters();\n-            },\n-          ),\n-          Expanded(\n-            child: StreamBuilder<QuerySnapshot>(\n-              stream: _postStream,\n-              builder: (context, snapshot) {\n-                if (snapshot.connectionState == ConnectionState.waiting) {\n-                  return const Center(child: CircularProgressIndicator());\n-                }\n-                if (snapshot.hasError) {\n-                  print('ERROR: ${snapshot.error}');\n-                  return const Center(child: Text('Error loading posts'));\n-                }\n-                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-                  return const Center(child: Text('No posts available'));\n-                }\n+//     return Scaffold(\n+//       body: Column(\n+//         children: [\n+//           FilterDropdowns(\n+//             selectedType: _selectedType,\n+//             selectedLocation: _selectedLocation,\n+//             selectedCategory: _selectedCategory,\n+//             selectedDateRange: _selectedDateRange,\n+//             onTypeChanged: (newValue) {\n+//               setState(() => _selectedType = newValue!);\n+//               _applyFilters();\n+//             },\n+//             onLocationChanged: (newValue) {\n+//               setState(() => _selectedLocation = newValue!);\n+//               _applyFilters();\n+//             },\n+//             onCategoryChanged: (newValue) {\n+//               setState(() => _selectedCategory = newValue!);\n+//               _applyFilters();\n+//             },\n+//             onDateRangeChanged: (newValue) {\n+//               setState(() => _selectedDateRange = newValue!);\n+//               _applyFilters();\n+//             },\n+//           ),\n+//           Expanded(\n+//             child: StreamBuilder<QuerySnapshot>(\n+//               stream: _postStream,\n+//               builder: (context, snapshot) {\n+//                 if (snapshot.connectionState == ConnectionState.waiting) {\n+//                   return const Center(child: CircularProgressIndicator());\n+//                 }\n+//                 if (snapshot.hasError) {\n+//                   print('ERROR: ${snapshot.error}');\n+//                   return const Center(child: Text('Error loading posts'));\n+//                 }\n+//                 if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+//                   return const Center(child: Text('No posts available'));\n+//                 }\n \n-                final posts = snapshot.data!.docs.map((doc) async {\n-                  final data = doc.data() as Map<String, dynamic>;\n-                  final userDetails = await _userService.fetchUserData(data['postmakerId']);\n+//                 final posts = snapshot.data!.docs.map((doc) async {\n+//                   final data = doc.data() as Map<String, dynamic>;\n+//                   final userDetails = await _userService.fetchUserData(data['postmakerId']);\n                   \n-                  final claimSnapshot = await FirebaseFirestore.instance\n-                      .collection('posts')\n-                      .doc(doc.id)\n-                      .collection('claims')\n-                      .where('senderId', isEqualTo: currentUser!.uid)\n-                      .get();\n-                  final userHasRequestedClaim = claimSnapshot.docs.isNotEmpty;\n+//                   final claimSnapshot = await FirebaseFirestore.instance\n+//                       .collection('posts')\n+//                       .doc(doc.id)\n+//                       .collection('claims')\n+//                       .where('senderId', isEqualTo: currentUser!.uid)\n+//                       .get();\n+//                   final userHasRequestedClaim = claimSnapshot.docs.isNotEmpty;\n \n-                  return PostModel(\n-                    postId: doc.id,\n-                    postmakerId: data['postmakerId'] ?? '',\n-                    userName: userDetails!['name'] ?? 'NITH User',\n-                    profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n-                    status: data['status'] ?? '',\n-                    title: data['item'] ?? '',\n-                    location: data['location'] ?? '',\n-                    description: data['description'] ?? '',\n-                    itemImages: List<String>.from(data['imageUrls'] ?? []),\n-                    postTime: _formatDate(data['timestamp']),\n-                    question: data['question'],\n-                    isClaimed: data['isClaimed'] ?? false,\n-                    postClaimerId: data['postClaimer'],\n-                    postClaimerName: data['postClaimerName'],\n-                    postClaimerPic: data['postClaimerPic'],\n-                  );\n-                });\n+//                   return PostModel(\n+//                     postId: doc.id,\n+//                     postmakerId: data['postmakerId'] ?? '',\n+//                     userName: userDetails!['name'] ?? 'NITH User',\n+//                     profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n+//                     status: data['status'] ?? '',\n+//                     title: data['item'] ?? '',\n+//                     location: data['location'] ?? '',\n+//                     description: data['description'] ?? '',\n+//                     itemImages: List<String>.from(data['imageUrls'] ?? []),\n+//                     postTime: _formatDate(data['timestamp']),\n+//                     question: data['question'],\n+//                     isClaimed: data['isClaimed'] ?? false,\n+//                     postClaimerId: data['postClaimer'],\n+//                     postClaimerName: data['postClaimerName'],\n+//                     postClaimerPic: data['postClaimerPic'],\n+//                   );\n+//                 });\n \n-                return FutureBuilder<List<PostModel>>(\n-                  future: Future.wait(posts),\n-                  builder: (context, futureSnapshot) {\n-                    if (futureSnapshot.connectionState == ConnectionState.waiting) {\n-                      return const Center(child: CircularProgressIndicator());\n-                    }\n-                    if (futureSnapshot.hasError) {\n-                      print(\"Error: ${futureSnapshot.error}\");\n-                      return const Center(child: Text('Error loading posts'));\n-                    }\n+//                 return FutureBuilder<List<PostModel>>(\n+//                   future: Future.wait(posts),\n+//                   builder: (context, futureSnapshot) {\n+//                     if (futureSnapshot.connectionState == ConnectionState.waiting) {\n+//                       return const Center(child: CircularProgressIndicator());\n+//                     }\n+//                     if (futureSnapshot.hasError) {\n+//                       print(\"Error: ${futureSnapshot.error}\");\n+//                       return const Center(child: Text('Error loading posts'));\n+//                     }\n \n-                    final postsList = futureSnapshot.data ?? [];\n-                    return ListView.builder(\n-                      itemCount: postsList.length,\n-                      itemBuilder: (context, index) {\n-                        final post = postsList[index];\n-                        return PostCard(\n-                          post: post,\n-                          onDelete: () => _showDeleteConfirmationDialog(context, post.postId),\n-                          onReply: () => _showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n-                          onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n-                          onShare: () => _postService.sharePost(context, post.title, post.description),\n-                          currentUserId: currentUser!.uid,\n-                          isMobile: isMobile,\n-                          // Corrected logic: only show the claim button if the post is \"Found\" and not already claimed\n-                          userHasRequestedClaim: post.isClaimed || post.status == 'Lost',\n-                        );\n-                      },\n-                    );\n-                  },\n-                );\n-              },\n-            ),\n-          ),\n-        ],\n-      ),\n-    );\n-  }\n-}\n+//                     final postsList = futureSnapshot.data ?? [];\n+//                     return ListView.builder(\n+//                       itemCount: postsList.length,\n+//                       itemBuilder: (context, index) {\n+//                         final post = postsList[index];\n+//                         return PostCard(\n+//                           post: post,\n+//                           onDelete: () => _showDeleteConfirmationDialog(context, post.postId),\n+//                           onReply: () => _showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n+//                           onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n+//                           onShare: () => _postService.sharePost(context, post.title, post.description),\n+//                           currentUserId: currentUser!.uid,\n+//                           isMobile: isMobile,\n+//                           // Corrected logic: only show the claim button if the post is \"Found\" and not already claimed\n+//                           userHasRequestedClaim: post.isClaimed || post.status == 'Lost',\n+//                         );\n+//                       },\n+//                     );\n+//                   },\n+//                 );\n+//               },\n+//             ),\n+//           ),\n+//         ],\n+//       ),\n+//     );\n+//   }\n+// }\n"
                }
            ],
            "date": 1756116382628,
            "name": "Commit-0",
            "content": "// lib/Frontend/pages/lost_found_page.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:l_f/Backend/firestore_service.dart';\nimport 'package:l_f/models/post_model.dart';\nimport 'package:l_f/services/user_service.dart';\nimport 'package:l_f/Frontend/components/post_card.dart';\nimport 'package:l_f/Frontend/components/filter_dropdowns.dart';\n\nclass LostFoundPage extends StatefulWidget {\n  const LostFoundPage({super.key});\n\n  @override\n  State<LostFoundPage> createState() => _LostFoundPageState();\n}\n\nclass _LostFoundPageState extends State<LostFoundPage> {\n  final FirestoreService _firestoreService = FirestoreService();\n  final UserService _userService = UserService();\n  final User? currentUser = FirebaseAuth.instance.currentUser;\n  \n  String _selectedType = 'All';\n  String _selectedLocation = 'Campus, NITH';\n  String _selectedCategory = 'All';\n  String _selectedDateRange = 'All Time';\n\n  Stream<QuerySnapshot>? _postStream;\n\n  @override\n  void initState() {\n    super.initState();\n    _applyFilters();\n  }\n\n  void _applyFilters() {\n    Query query = FirebaseFirestore.instance.collection('posts');\n\n    if (_selectedType != 'All') {\n      query = query.where('status', isEqualTo: _selectedType);\n    }\n    if (_selectedLocation != 'Campus, NITH') {\n      query = query.where('location', isEqualTo: _selectedLocation);\n    }\n    if (_selectedCategory != 'All') {\n      query = query.where('item', isEqualTo: _selectedCategory);\n    }\n\n    DateTime now = DateTime.now();\n    DateTime? startDate;\n\n    switch (_selectedDateRange) {\n      case 'Today':\n        startDate = DateTime(now.year, now.month, now.day);\n        break;\n      case 'This Week':\n        startDate = now.subtract(Duration(days: now.weekday - 1));\n        break;\n      case 'This Month':\n        startDate = DateTime(now.year, now.month, 1);\n        break;\n      case 'This Year':\n        startDate = DateTime(now.year, 1, 1);\n        break;\n      default:\n        startDate = null;\n    }\n\n    if (startDate != null) {\n      query = query.where('timestamp', isGreaterThanOrEqualTo: startDate);\n    }\n\n    setState(() {\n      _postStream = query.orderBy('timestamp', descending: true).snapshots();\n    });\n  }\n\n  // Moved dialog and post-related logic to be managed by the PostCard and dialogs.\n  // The logic remains but is now triggered by the PostCard callbacks.\n\n  @override\n  Widget build(BuildContext context) {\n    bool isMobile = MediaQuery.of(context).size.width < 600;\n\n    return Scaffold(\n      body: Column(\n        children: [\n          FilterDropdowns(\n            selectedType: _selectedType,\n            selectedLocation: _selectedLocation,\n            selectedCategory: _selectedCategory,\n            selectedDateRange: _selectedDateRange,\n            onTypeChanged: (newValue) {\n              setState(() => _selectedType = newValue!);\n              _applyFilters();\n            },\n            onLocationChanged: (newValue) {\n              setState(() => _selectedLocation = newValue!);\n              _applyFilters();\n            },\n            onCategoryChanged: (newValue) {\n              setState(() => _selectedCategory = newValue!);\n              _applyFilters();\n            },\n            onDateRangeChanged: (newValue) {\n              setState(() => _selectedDateRange = newValue!);\n              _applyFilters();\n            },\n          ),\n          Expanded(\n            child: StreamBuilder<QuerySnapshot>(\n              stream: _postStream,\n              builder: (context, snapshot) {\n                if (snapshot.connectionState == ConnectionState.waiting) {\n                  return const Center(child: CircularProgressIndicator());\n                }\n                if (snapshot.hasError) {\n                  print('ERROR: ${snapshot.error}');\n                  return const Center(child: Text('Error loading posts'));\n                }\n                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n                  return const Center(child: Text('No posts available'));\n                }\n\n                final posts = snapshot.data!.docs.map((doc) async {\n                  final data = doc.data() as Map<String, dynamic>;\n                  final userDetails = await _userService.fetchUserNameAndProfilePic(data['postmakerId']);\n\n                  return PostModel.fromFirestore(doc, userDetails);\n                });\n\n                return FutureBuilder<List<PostModel>>(\n                  future: Future.wait(posts),\n                  builder: (context, futureSnapshot) {\n                    if (futureSnapshot.connectionState == ConnectionState.waiting) {\n                      return const Center(child: CircularProgressIndicator());\n                    }\n                    if (futureSnapshot.hasError) {\n                      print(\"Error: ${futureSnapshot.error}\");\n                      return const Center(child: Text('Error loading posts'));\n                    }\n\n                    final postsList = futureSnapshot.data ?? [];\n                    return ListView.builder(\n                      itemCount: postsList.length,\n                      itemBuilder: (context, index) {\n                        final post = postsList[index];\n                        // Using the new PostCard component\n                        return PostCard(\n                          post: post,\n                          onDelete: _firestoreService.deletePost,\n                          onReply: _firestoreService.replyToPostmaker,\n                          onClaim: _firestoreService.claimPost,\n                          onShare: _firestoreService.sharePost,\n                          currentUserId: currentUser!.uid,\n                          isMobile: isMobile,\n                          userHasRequestedClaim: false, // This will be handled inside the PostCard\n                        );\n                      },\n                    );\n                  },\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
        }
    ]
}