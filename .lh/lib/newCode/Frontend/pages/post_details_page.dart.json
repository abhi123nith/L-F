{
    "sourceFile": "lib/newCode/Frontend/pages/post_details_page.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1756118873861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756118887626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/newCode/Frontend/components/post_card.dart';\n+import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n import 'package:l_f/Frontend/components/post_card.dart';\n import 'package:l_f/Frontend/components/dialogs.dart';\n"
                },
                {
                    "date": 1756118893256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n+import 'package:l_f/newCode/service/user_service.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n import 'package:l_f/Frontend/components/post_card.dart';\n import 'package:l_f/Frontend/components/dialogs.dart';\n"
                },
                {
                    "date": 1756118901590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,16 +3,14 @@\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n-import 'package:l_f/services/user_service.dart';\n-import 'package:l_f/models/post_model.dart';\n-import 'package:l_f/Frontend/components/post_card.dart';\n-import 'package:l_f/Frontend/components/dialogs.dart';\n \n+\n class PostDetailsPage extends StatefulWidget {\n   final String postId;\n   const PostDetailsPage({super.key, required this.postId});\n \n"
                },
                {
                    "date": 1756118945828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,13 @@\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n-import 'package:l_f/newCode/Backend/post_service.dart';\n-import 'package:l_f/newCode/Frontend/components/post_card.dart';\n-import 'package:l_f/newCode/models/post_model.dart';\n-import 'package:l_f/newCode/service/user_service.dart';\n+import 'package:l_f/services/user_service.dart';\n+import 'package:l_f/models/post_model.dart';\n+import 'package:l_f/Frontend/components/post_card.dart';\n+import 'package:l_f/Frontend/components/dialogs.dart';\n \n-\n class PostDetailsPage extends StatefulWidget {\n   final String postId;\n   const PostDetailsPage({super.key, required this.postId});\n \n@@ -79,8 +78,138 @@\n     DateTime date = timestamp.toDate();\n     return DateFormat('dd MMMM yyyy').format(date);\n   }\n \n+  // --- Start of new dialog implementations ---\n+  void _showDeleteConfirmationDialog(BuildContext context, String postId) {\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Delete Post'),\n+          content: const Text(\n+            'Are you sure you want to delete this post?',\n+            style: TextStyle(fontWeight: FontWeight.w700),\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () {\n+                _postService.deletePost(context, postId);\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n+            ),\n+            TextButton(\n+              onPressed: () => Navigator.of(context).pop(),\n+              child: const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n+\n+  void _showReplyDialog(BuildContext context, String postmakerId, String postmaker, String postId) {\n+    TextEditingController messageController = TextEditingController();\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Send a Reply'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              Row(\n+                children: [\n+                  const Text('Reply to'),\n+                  TextButton(\n+                    onPressed: () {\n+                      // Navigator.push(context, MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)));\n+                    },\n+                    child: Text(postmaker),\n+                  ),\n+                ],\n+              ),\n+              const SizedBox(height: 10),\n+              TextField(\n+                controller: messageController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your message',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () => Navigator.of(context).pop(),\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String message = messageController.text.trim();\n+                if (message.isNotEmpty) {\n+                  _postService.replyToPostmaker(context, postmakerId, message, postId);\n+                }\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n+\n+  void _showClaimDialog(BuildContext context, String postmakerId, String postTitle, String postQuestion, String postDescription, String postId) {\n+    TextEditingController answerController = TextEditingController();\n+    showDialog(\n+      context: context,\n+      builder: (BuildContext context) {\n+        return AlertDialog(\n+          title: const Text('Claim Item'),\n+          content: Column(\n+            mainAxisSize: MainAxisSize.min,\n+            children: [\n+              const Text('Question from the post owner:'),\n+              const SizedBox(height: 10),\n+              Text(postQuestion, style: const TextStyle(fontWeight: FontWeight.bold)),\n+              const SizedBox(height: 20),\n+              TextField(\n+                controller: answerController,\n+                decoration: const InputDecoration(\n+                  labelText: 'Your answer',\n+                  alignLabelWithHint: true,\n+                  border: OutlineInputBorder(),\n+                ),\n+                maxLines: 3,\n+              ),\n+            ],\n+          ),\n+          actions: [\n+            TextButton(\n+              onPressed: () => Navigator.of(context).pop(),\n+              child: const Text('Cancel'),\n+            ),\n+            TextButton(\n+              onPressed: () {\n+                String answer = answerController.text.trim();\n+                if (answer.isNotEmpty) {\n+                  _postService.claimPost(context, postId, postmakerId, answer);\n+                }\n+                Navigator.of(context).pop();\n+              },\n+              child: const Text('Send'),\n+            ),\n+          ],\n+        );\n+      },\n+    );\n+  }\n+  // --- End of new dialog implementations ---\n+\n   @override\n   Widget build(BuildContext context) {\n     bool isMobile = MediaQuery.of(context).size.width < 600;\n     \n@@ -104,11 +233,11 @@\n           return Center(\n             child: SingleChildScrollView(\n               child: PostCard(\n                 post: post,\n-                onDelete: () => showDeleteConfirmationDialog(context, () => _postService.deletePost(context, post.postId)),\n-                onReply: () => showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n-                onClaim: () => showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n+                onDelete: () => _showDeleteConfirmationDialog(context, post.postId),\n+                onReply: () => _showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n+                onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n                 onShare: () => _postService.sharePost(context, post.title, post.description),\n                 currentUserId: currentUser!.uid,\n                 isMobile: isMobile,\n                 userHasRequestedClaim: false, // This is handled internally in the card for now\n"
                },
                {
                    "date": 1756118957513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/newCode/Frontend/components/post_card.dart';\n+import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n import 'package:l_f/Frontend/components/post_card.dart';\n import 'package:l_f/Frontend/components/dialogs.dart';\n"
                },
                {
                    "date": 1756118963679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n+import 'package:l_f/newCode/service/user_service.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/models/post_model.dart';\n import 'package:l_f/Frontend/components/post_card.dart';\n import 'package:l_f/Frontend/components/dialogs.dart';\n"
                },
                {
                    "date": 1756118970889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,16 +3,14 @@\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/post_service.dart';\n+import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n-import 'package:l_f/services/user_service.dart';\n-import 'package:l_f/models/post_model.dart';\n-import 'package:l_f/Frontend/components/post_card.dart';\n-import 'package:l_f/Frontend/components/dialogs.dart';\n \n+\n class PostDetailsPage extends StatefulWidget {\n   final String postId;\n   const PostDetailsPage({super.key, required this.postId});\n \n"
                },
                {
                    "date": 1756118993995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,15 +2,13 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n-import 'package:l_f/Backend/post_service.dart';\n import 'package:l_f/newCode/Backend/post_service.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n \n-\n class PostDetailsPage extends StatefulWidget {\n   final String postId;\n   const PostDetailsPage({super.key, required this.postId});\n \n@@ -21,9 +19,9 @@\n class _PostDetailsPageState extends State<PostDetailsPage> {\n   final PostService _postService = PostService();\n   final UserService _userService = UserService();\n   final User? currentUser = FirebaseAuth.instance.currentUser;\n-  \n+\n   late Future<PostModel?> _postFuture;\n \n   @override\n   void initState() {\n@@ -32,21 +30,24 @@\n   }\n \n   Future<PostModel?> _fetchPostDetails() async {\n     try {\n-      final doc = await FirebaseFirestore.instance.collection('posts').doc(widget.postId).get();\n+      final doc = await FirebaseFirestore.instance\n+          .collection('posts')\n+          .doc(widget.postId)\n+          .get();\n       if (!doc.exists) {\n         return null;\n       }\n       final data = doc.data() as Map<String, dynamic>;\n       final userDetails = await _userService.fetchUserData(data['postmakerId']);\n-      final userHasRequestedClaim = await _hasRequestedClaim(doc.id, currentUser!.uid);\n \n       return PostModel(\n         postId: doc.id,\n         postmakerId: data['postmakerId'] ?? '',\n         userName: userDetails!['name'] ?? 'NITH User',\n-        profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n+        profileImageUrl:\n+            userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n         status: data['status'] ?? '',\n         title: data['item'] ?? '',\n         location: data['location'] ?? '',\n         description: data['description'] ?? '',\n@@ -72,9 +73,9 @@\n         .where('senderId', isEqualTo: userId)\n         .get();\n     return claimSnapshot.docs.isNotEmpty;\n   }\n-  \n+\n   String _formatDate(Timestamp? timestamp) {\n     if (timestamp == null) return 'Not available';\n     DateTime date = timestamp.toDate();\n     return DateFormat('dd MMMM yyyy').format(date);\n@@ -96,21 +97,24 @@\n               onPressed: () {\n                 _postService.deletePost(context, postId);\n                 Navigator.of(context).pop();\n               },\n-              child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n+              child: const Text('Yes',\n+                  style: TextStyle(fontWeight: FontWeight.bold)),\n             ),\n             TextButton(\n               onPressed: () => Navigator.of(context).pop(),\n-              child: const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n+              child: const Text('No',\n+                  style: TextStyle(fontWeight: FontWeight.bold)),\n             ),\n           ],\n         );\n       },\n     );\n   }\n \n-  void _showReplyDialog(BuildContext context, String postmakerId, String postmaker, String postId) {\n+  void _showReplyDialog(BuildContext context, String postmakerId,\n+      String postmaker, String postId) {\n     TextEditingController messageController = TextEditingController();\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -150,9 +154,10 @@\n             TextButton(\n               onPressed: () {\n                 String message = messageController.text.trim();\n                 if (message.isNotEmpty) {\n-                  _postService.replyToPostmaker(context, postmakerId, message, postId);\n+                  _postService.replyToPostmaker(\n+                      context, postmakerId, message, postId);\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n@@ -162,9 +167,15 @@\n       },\n     );\n   }\n \n-  void _showClaimDialog(BuildContext context, String postmakerId, String postTitle, String postQuestion, String postDescription, String postId) {\n+  void _showClaimDialog(\n+      BuildContext context,\n+      String postmakerId,\n+      String postTitle,\n+      String postQuestion,\n+      String postDescription,\n+      String postId) {\n     TextEditingController answerController = TextEditingController();\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -174,9 +185,10 @@\n             mainAxisSize: MainAxisSize.min,\n             children: [\n               const Text('Question from the post owner:'),\n               const SizedBox(height: 10),\n-              Text(postQuestion, style: const TextStyle(fontWeight: FontWeight.bold)),\n+              Text(postQuestion,\n+                  style: const TextStyle(fontWeight: FontWeight.bold)),\n               const SizedBox(height: 20),\n               TextField(\n                 controller: answerController,\n                 decoration: const InputDecoration(\n@@ -212,9 +224,9 @@\n \n   @override\n   Widget build(BuildContext context) {\n     bool isMobile = MediaQuery.of(context).size.width < 600;\n-    \n+\n     return Scaffold(\n       appBar: AppBar(\n         backgroundColor: Colors.deepOrange,\n         foregroundColor: Colors.white,\n@@ -234,15 +246,20 @@\n           return Center(\n             child: SingleChildScrollView(\n               child: PostCard(\n                 post: post,\n-                onDelete: () => _showDeleteConfirmationDialog(context, post.postId),\n-                onReply: () => _showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n-                onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n-                onShare: () => _postService.sharePost(context, post.title, post.description),\n+                onDelete: () =>\n+                    _showDeleteConfirmationDialog(context, post.postId),\n+                onReply: () => _showReplyDialog(\n+                    context, post.postmakerId, post.userName, post.postId),\n+                onClaim: () => _showClaimDialog(context, post.postmakerId,\n+                    post.title, post.question!, post.description, post.postId),\n+                onShare: () => _postService.sharePost(\n+                    context, post.title, post.description),\n                 currentUserId: currentUser!.uid,\n                 isMobile: isMobile,\n-                userHasRequestedClaim: false, // This is handled internally in the card for now\n+                userHasRequestedClaim:\n+                    false, // This is handled internally in the card for now\n               ),\n             ),\n           );\n         },\n"
                },
                {
                    "date": 1756121673697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,88 +1,53 @@\n-// lib/Frontend/pages/post_details_page.dart\n+// lib/Frontend/pages/lost_found_page.dart\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/newCode/Backend/post_service.dart';\n+import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n+import 'package:l_f/newCode/Frontend/pages/profile/user_see_page.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n \n-class PostDetailsPage extends StatefulWidget {\n-  final String postId;\n-  const PostDetailsPage({super.key, required this.postId});\n+class LostFoundPage extends StatefulWidget {\n+  const LostFoundPage({super.key});\n \n   @override\n-  State<PostDetailsPage> createState() => _PostDetailsPageState();\n+  State<LostFoundPage> createState() => _LostFoundPageState();\n }\n \n-class _PostDetailsPageState extends State<PostDetailsPage> {\n+class _LostFoundPageState extends State<LostFoundPage> {\n   final PostService _postService = PostService();\n   final UserService _userService = UserService();\n   final User? currentUser = FirebaseAuth.instance.currentUser;\n \n-  late Future<PostModel?> _postFuture;\n+  String _selectedType = 'All';\n+  String _selectedLocation = 'Campus, NITH';\n+  String _selectedCategory = 'All';\n+  String _selectedDateRange = 'All Time';\n \n+  Stream<QuerySnapshot>? _postStream;\n+\n   @override\n   void initState() {\n     super.initState();\n-    _postFuture = _fetchPostDetails();\n+    _applyFilters();\n   }\n \n-  Future<PostModel?> _fetchPostDetails() async {\n-    try {\n-      final doc = await FirebaseFirestore.instance\n-          .collection('posts')\n-          .doc(widget.postId)\n-          .get();\n-      if (!doc.exists) {\n-        return null;\n-      }\n-      final data = doc.data() as Map<String, dynamic>;\n-      final userDetails = await _userService.fetchUserData(data['postmakerId']);\n-\n-      return PostModel(\n-        postId: doc.id,\n-        postmakerId: data['postmakerId'] ?? '',\n-        userName: userDetails!['name'] ?? 'NITH User',\n-        profileImageUrl:\n-            userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n-        status: data['status'] ?? '',\n-        title: data['item'] ?? '',\n-        location: data['location'] ?? '',\n-        description: data['description'] ?? '',\n-        itemImages: List<String>.from(data['imageUrls'] ?? []),\n-        postTime: _formatDate(data['timestamp']),\n-        question: data['question'],\n-        isClaimed: data['isClaimed'] ?? false,\n-        postClaimerId: data['postClaimer'],\n-        postClaimerName: data['postClaimerName'],\n-        postClaimerPic: data['postClaimerPic'],\n+  void _applyFilters() {\n+    setState(() {\n+      _postStream = _postService.getFilteredPosts(\n+        status: _selectedType,\n+        location: _selectedLocation,\n+        category: _selectedCategory,\n+        dateRange: _selectedDateRange,\n       );\n-    } catch (e) {\n-      print(\"Error fetching post details: $e\");\n-      return null;\n-    }\n+    });\n   }\n \n-  Future<bool> _hasRequestedClaim(String postId, String userId) async {\n-    final claimSnapshot = await FirebaseFirestore.instance\n-        .collection('posts')\n-        .doc(postId)\n-        .collection('claims')\n-        .where('senderId', isEqualTo: userId)\n-        .get();\n-    return claimSnapshot.docs.isNotEmpty;\n-  }\n-\n-  String _formatDate(Timestamp? timestamp) {\n-    if (timestamp == null) return 'Not available';\n-    DateTime date = timestamp.toDate();\n-    return DateFormat('dd MMMM yyyy').format(date);\n-  }\n-\n-  // --- Start of new dialog implementations ---\n+  // Dialog implementations\n   void _showDeleteConfirmationDialog(BuildContext context, String postId) {\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -93,28 +58,40 @@\n             style: TextStyle(fontWeight: FontWeight.w700),\n           ),\n           actions: [\n             TextButton(\n-              onPressed: () {\n-                _postService.deletePost(context, postId);\n+              onPressed: () async {\n+                try {\n+                  await _postService.deletePost(postId);\n+                  ScaffoldMessenger.of(context).showSnackBar(\n+                    const SnackBar(\n+                      backgroundColor: Colors.green,\n+                      content: Text('Post deleted successfully'),\n+                    ),\n+                  );\n+                } catch (e) {\n+                  ScaffoldMessenger.of(context).showSnackBar(\n+                    SnackBar(\n+                      backgroundColor: Colors.red,\n+                      content: Text(e.toString()),\n+                    ),\n+                  );\n+                }\n                 Navigator.of(context).pop();\n               },\n-              child: const Text('Yes',\n-                  style: TextStyle(fontWeight: FontWeight.bold)),\n+              child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n             ),\n             TextButton(\n               onPressed: () => Navigator.of(context).pop(),\n-              child: const Text('No',\n-                  style: TextStyle(fontWeight: FontWeight.bold)),\n+              child: const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n             ),\n           ],\n         );\n       },\n     );\n   }\n \n-  void _showReplyDialog(BuildContext context, String postmakerId,\n-      String postmaker, String postId) {\n+  void _showReplyDialog(BuildContext context, String postmakerId, String postmaker, String postId) {\n     TextEditingController messageController = TextEditingController();\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -127,9 +104,12 @@\n                 children: [\n                   const Text('Reply to'),\n                   TextButton(\n                     onPressed: () {\n-                      // Navigator.push(context, MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)));\n+                      Navigator.push(\n+                        context,\n+                        MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)),\n+                      );\n                     },\n                     child: Text(postmaker),\n                   ),\n                 ],\n@@ -151,13 +131,27 @@\n               onPressed: () => Navigator.of(context).pop(),\n               child: const Text('Cancel'),\n             ),\n             TextButton(\n-              onPressed: () {\n+              onPressed: () async {\n                 String message = messageController.text.trim();\n                 if (message.isNotEmpty) {\n-                  _postService.replyToPostmaker(\n-                      context, postmakerId, message, postId);\n+                  try {\n+                    await _postService.replyToPostmaker(postmakerId, message, postId);\n+                    ScaffoldMessenger.of(context).showSnackBar(\n+                      const SnackBar(\n+                        content: Text('Message sent successfully'),\n+                        backgroundColor: Colors.green,\n+                      ),\n+                    );\n+                  } catch (e) {\n+                    ScaffoldMessenger.of(context).showSnackBar(\n+                      SnackBar(\n+                        content: Text(e.toString()),\n+                        backgroundColor: Colors.red,\n+                      ),\n+                    );\n+                  }\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n@@ -167,15 +161,9 @@\n       },\n     );\n   }\n \n-  void _showClaimDialog(\n-      BuildContext context,\n-      String postmakerId,\n-      String postTitle,\n-      String postQuestion,\n-      String postDescription,\n-      String postId) {\n+  void _showClaimDialog(BuildContext context, String postmakerId, String postTitle, String postQuestion, String postDescription, String postId) {\n     TextEditingController answerController = TextEditingController();\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -185,10 +173,9 @@\n             mainAxisSize: MainAxisSize.min,\n             children: [\n               const Text('Question from the post owner:'),\n               const SizedBox(height: 10),\n-              Text(postQuestion,\n-                  style: const TextStyle(fontWeight: FontWeight.bold)),\n+              Text(postQuestion, style: const TextStyle(fontWeight: FontWeight.bold)),\n               const SizedBox(height: 20),\n               TextField(\n                 controller: answerController,\n                 decoration: const InputDecoration(\n@@ -205,12 +192,27 @@\n               onPressed: () => Navigator.of(context).pop(),\n               child: const Text('Cancel'),\n             ),\n             TextButton(\n-              onPressed: () {\n+              onPressed: () async {\n                 String answer = answerController.text.trim();\n                 if (answer.isNotEmpty) {\n-                  _postService.claimPost(context, postId, postmakerId, answer);\n+                  try {\n+                    await _postService.claimPost(postId, postmakerId, answer);\n+                    ScaffoldMessenger.of(context).showSnackBar(\n+                      const SnackBar(\n+                        content: Text('Request sent successfully'),\n+                        backgroundColor: Colors.green,\n+                      ),\n+                    );\n+                  } catch (e) {\n+                    ScaffoldMessenger.of(context).showSnackBar(\n+                      SnackBar(\n+                        content: Text(e.toString()),\n+                        backgroundColor: Colors.red,\n+                      ),\n+                    );\n+                  }\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n@@ -219,51 +221,124 @@\n         );\n       },\n     );\n   }\n-  // --- End of new dialog implementations ---\n \n+  String _formatDate(Timestamp? timestamp) {\n+    if (timestamp == null) return 'Not available';\n+    DateTime date = timestamp.toDate();\n+    return DateFormat('dd MMMM yyyy').format(date);\n+  }\n+\n   @override\n   Widget build(BuildContext context) {\n     bool isMobile = MediaQuery.of(context).size.width < 600;\n \n     return Scaffold(\n-      appBar: AppBar(\n-        backgroundColor: Colors.deepOrange,\n-        foregroundColor: Colors.white,\n-        title: const Text('Post Detail'),\n-      ),\n-      body: FutureBuilder<PostModel?>(\n-        future: _postFuture,\n-        builder: (context, snapshot) {\n-          if (snapshot.connectionState == ConnectionState.waiting) {\n-            return const Center(child: CircularProgressIndicator());\n-          }\n-          if (snapshot.hasError || !snapshot.hasData || snapshot.data == null) {\n-            return const Center(child: Text('Error or post not found.'));\n-          }\n+      body: Column(\n+        children: [\n+          FilterDropdowns(\n+            selectedType: _selectedType,\n+            selectedLocation: _selectedLocation,\n+            selectedCategory: _selectedCategory,\n+            selectedDateRange: _selectedDateRange,\n+            onTypeChanged: (newValue) {\n+              setState(() => _selectedType = newValue!);\n+              _applyFilters();\n+            },\n+            onLocationChanged: (newValue) {\n+              setState(() => _selectedLocation = newValue!);\n+              _applyFilters();\n+            },\n+            onCategoryChanged: (newValue) {\n+              setState(() => _selectedCategory = newValue!);\n+              _applyFilters();\n+            },\n+            onDateRangeChanged: (newValue) {\n+              setState(() => _selectedDateRange = newValue!);\n+              _applyFilters();\n+            },\n+          ),\n+          Expanded(\n+            child: StreamBuilder<QuerySnapshot>(\n+              stream: _postStream,\n+              builder: (context, snapshot) {\n+                if (snapshot.connectionState == ConnectionState.waiting) {\n+                  return const Center(child: CircularProgressIndicator());\n+                }\n+                if (snapshot.hasError) {\n+                  print('ERROR: ${snapshot.error}');\n+                  return const Center(child: Text('Error loading posts'));\n+                }\n+                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+                  return const Center(child: Text('No posts available'));\n+                }\n \n-          final post = snapshot.data!;\n-          return Center(\n-            child: SingleChildScrollView(\n-              child: PostCard(\n-                post: post,\n-                onDelete: () =>\n-                    _showDeleteConfirmationDialog(context, post.postId),\n-                onReply: () => _showReplyDialog(\n-                    context, post.postmakerId, post.userName, post.postId),\n-                onClaim: () => _showClaimDialog(context, post.postmakerId,\n-                    post.title, post.question!, post.description, post.postId),\n-                onShare: () => _postService.sharePost(\n-                    context, post.title, post.description),\n-                currentUserId: currentUser!.uid,\n-                isMobile: isMobile,\n-                userHasRequestedClaim:\n-                    false, // This is handled internally in the card for now\n-              ),\n+                final posts = snapshot.data!.docs.map((doc) async {\n+                  final data = doc.data() as Map<String, dynamic>;\n+                  final userDetails = await _userService.fetchUserData(data['postmakerId']);\n+                  \n+                  final claimSnapshot = await FirebaseFirestore.instance\n+                      .collection('posts')\n+                      .doc(doc.id)\n+                      .collection('claims')\n+                      .where('senderId', isEqualTo: currentUser!.uid)\n+                      .get();\n+                  final userHasRequestedClaim = claimSnapshot.docs.isNotEmpty;\n+\n+                  return PostModel(\n+                    postId: doc.id,\n+                    postmakerId: data['postmakerId'] ?? '',\n+                    userName: userDetails!['name'] ?? 'NITH User',\n+                    profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n+                    status: data['status'] ?? '',\n+                    title: data['item'] ?? '',\n+                    location: data['location'] ?? '',\n+                    description: data['description'] ?? '',\n+                    itemImages: List<String>.from(data['imageUrls'] ?? []),\n+                    postTime: _formatDate(data['timestamp']),\n+                    question: data['question'],\n+                    isClaimed: data['isClaimed'] ?? false,\n+                    postClaimerId: data['postClaimer'],\n+                    postClaimerName: data['postClaimerName'],\n+                    postClaimerPic: data['postClaimerPic'],\n+                  );\n+                });\n+\n+                return FutureBuilder<List<PostModel>>(\n+                  future: Future.wait(posts),\n+                  builder: (context, futureSnapshot) {\n+                    if (futureSnapshot.connectionState == ConnectionState.waiting) {\n+                      return const Center(child: CircularProgressIndicator());\n+                    }\n+                    if (futureSnapshot.hasError) {\n+                      print(\"Error: ${futureSnapshot.error}\");\n+                      return const Center(child: Text('Error loading posts'));\n+                    }\n+\n+                    final postsList = futureSnapshot.data ?? [];\n+                    return ListView.builder(\n+                      itemCount: postsList.length,\n+                      itemBuilder: (context, index) {\n+                        final post = postsList[index];\n+                        return PostCard(\n+                          post: post,\n+                          onDelete: () => _showDeleteConfirmationDialog(context, post.postId),\n+                          onReply: () => _showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n+                          onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n+                          onShare: () => _postService.sharePost(context, post.title, post.description),\n+                          currentUserId: currentUser!.uid,\n+                          isMobile: isMobile,\n+                          userHasRequestedClaim: false, // Corrected in a later step\n+                        );\n+                      },\n+                    );\n+                  },\n+                );\n+              },\n             ),\n-          );\n-        },\n+          ),\n+        ],\n       ),\n     );\n   }\n }\n"
                },
                {
                    "date": 1756121725616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,88 @@\n-// lib/Frontend/pages/lost_found_page.dart\n+// lib/Frontend/pages/post_details_page.dart\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/newCode/Backend/post_service.dart';\n-import 'package:l_f/newCode/Frontend/components/filter_dropdowns.dart';\n import 'package:l_f/newCode/Frontend/components/post_card.dart';\n-import 'package:l_f/newCode/Frontend/pages/profile/user_see_page.dart';\n import 'package:l_f/newCode/models/post_model.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n \n-class LostFoundPage extends StatefulWidget {\n-  const LostFoundPage({super.key});\n+class PostDetailsPage extends StatefulWidget {\n+  final String postId;\n+  const PostDetailsPage({super.key, required this.postId});\n \n   @override\n-  State<LostFoundPage> createState() => _LostFoundPageState();\n+  State<PostDetailsPage> createState() => _PostDetailsPageState();\n }\n \n-class _LostFoundPageState extends State<LostFoundPage> {\n+class _PostDetailsPageState extends State<PostDetailsPage> {\n   final PostService _postService = PostService();\n   final UserService _userService = UserService();\n   final User? currentUser = FirebaseAuth.instance.currentUser;\n \n-  String _selectedType = 'All';\n-  String _selectedLocation = 'Campus, NITH';\n-  String _selectedCategory = 'All';\n-  String _selectedDateRange = 'All Time';\n+  late Future<PostModel?> _postFuture;\n \n-  Stream<QuerySnapshot>? _postStream;\n-\n   @override\n   void initState() {\n     super.initState();\n-    _applyFilters();\n+    _postFuture = _fetchPostDetails();\n   }\n \n-  void _applyFilters() {\n-    setState(() {\n-      _postStream = _postService.getFilteredPosts(\n-        status: _selectedType,\n-        location: _selectedLocation,\n-        category: _selectedCategory,\n-        dateRange: _selectedDateRange,\n+  Future<PostModel?> _fetchPostDetails() async {\n+    try {\n+      final doc = await FirebaseFirestore.instance\n+          .collection('posts')\n+          .doc(widget.postId)\n+          .get();\n+      if (!doc.exists) {\n+        return null;\n+      }\n+      final data = doc.data() as Map<String, dynamic>;\n+      final userDetails = await _userService.fetchUserData(data['postmakerId']);\n+\n+      return PostModel(\n+        postId: doc.id,\n+        postmakerId: data['postmakerId'] ?? '',\n+        userName: userDetails!['name'] ?? 'NITH User',\n+        profileImageUrl:\n+            userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n+        status: data['status'] ?? '',\n+        title: data['item'] ?? '',\n+        location: data['location'] ?? '',\n+        description: data['description'] ?? '',\n+        itemImages: List<String>.from(data['imageUrls'] ?? []),\n+        postTime: _formatDate(data['timestamp']),\n+        question: data['question'],\n+        isClaimed: data['isClaimed'] ?? false,\n+        postClaimerId: data['postClaimer'],\n+        postClaimerName: data['postClaimerName'],\n+        postClaimerPic: data['postClaimerPic'],\n       );\n-    });\n+    } catch (e) {\n+      print(\"Error fetching post details: $e\");\n+      return null;\n+    }\n   }\n \n-  // Dialog implementations\n+  Future<bool> _hasRequestedClaim(String postId, String userId) async {\n+    final claimSnapshot = await FirebaseFirestore.instance\n+        .collection('posts')\n+        .doc(postId)\n+        .collection('claims')\n+        .where('senderId', isEqualTo: userId)\n+        .get();\n+    return claimSnapshot.docs.isNotEmpty;\n+  }\n+\n+  String _formatDate(Timestamp? timestamp) {\n+    if (timestamp == null) return 'Not available';\n+    DateTime date = timestamp.toDate();\n+    return DateFormat('dd MMMM yyyy').format(date);\n+  }\n+\n+  // --- Start of new dialog implementations ---\n   void _showDeleteConfirmationDialog(BuildContext context, String postId) {\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -58,40 +93,28 @@\n             style: TextStyle(fontWeight: FontWeight.w700),\n           ),\n           actions: [\n             TextButton(\n-              onPressed: () async {\n-                try {\n-                  await _postService.deletePost(postId);\n-                  ScaffoldMessenger.of(context).showSnackBar(\n-                    const SnackBar(\n-                      backgroundColor: Colors.green,\n-                      content: Text('Post deleted successfully'),\n-                    ),\n-                  );\n-                } catch (e) {\n-                  ScaffoldMessenger.of(context).showSnackBar(\n-                    SnackBar(\n-                      backgroundColor: Colors.red,\n-                      content: Text(e.toString()),\n-                    ),\n-                  );\n-                }\n+              onPressed: () {\n+                _postService.deletePost(context, postId);\n                 Navigator.of(context).pop();\n               },\n-              child: const Text('Yes', style: TextStyle(fontWeight: FontWeight.bold)),\n+              child: const Text('Yes',\n+                  style: TextStyle(fontWeight: FontWeight.bold)),\n             ),\n             TextButton(\n               onPressed: () => Navigator.of(context).pop(),\n-              child: const Text('No', style: TextStyle(fontWeight: FontWeight.bold)),\n+              child: const Text('No',\n+                  style: TextStyle(fontWeight: FontWeight.bold)),\n             ),\n           ],\n         );\n       },\n     );\n   }\n \n-  void _showReplyDialog(BuildContext context, String postmakerId, String postmaker, String postId) {\n+  void _showReplyDialog(BuildContext context, String postmakerId,\n+      String postmaker, String postId) {\n     TextEditingController messageController = TextEditingController();\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -104,12 +127,9 @@\n                 children: [\n                   const Text('Reply to'),\n                   TextButton(\n                     onPressed: () {\n-                      Navigator.push(\n-                        context,\n-                        MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)),\n-                      );\n+                      // Navigator.push(context, MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)));\n                     },\n                     child: Text(postmaker),\n                   ),\n                 ],\n@@ -131,27 +151,13 @@\n               onPressed: () => Navigator.of(context).pop(),\n               child: const Text('Cancel'),\n             ),\n             TextButton(\n-              onPressed: () async {\n+              onPressed: () {\n                 String message = messageController.text.trim();\n                 if (message.isNotEmpty) {\n-                  try {\n-                    await _postService.replyToPostmaker(postmakerId, message, postId);\n-                    ScaffoldMessenger.of(context).showSnackBar(\n-                      const SnackBar(\n-                        content: Text('Message sent successfully'),\n-                        backgroundColor: Colors.green,\n-                      ),\n-                    );\n-                  } catch (e) {\n-                    ScaffoldMessenger.of(context).showSnackBar(\n-                      SnackBar(\n-                        content: Text(e.toString()),\n-                        backgroundColor: Colors.red,\n-                      ),\n-                    );\n-                  }\n+                  _postService.replyToPostmaker(\n+                      context, postmakerId, message, postId);\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n@@ -161,9 +167,15 @@\n       },\n     );\n   }\n \n-  void _showClaimDialog(BuildContext context, String postmakerId, String postTitle, String postQuestion, String postDescription, String postId) {\n+  void _showClaimDialog(\n+      BuildContext context,\n+      String postmakerId,\n+      String postTitle,\n+      String postQuestion,\n+      String postDescription,\n+      String postId) {\n     TextEditingController answerController = TextEditingController();\n     showDialog(\n       context: context,\n       builder: (BuildContext context) {\n@@ -173,9 +185,10 @@\n             mainAxisSize: MainAxisSize.min,\n             children: [\n               const Text('Question from the post owner:'),\n               const SizedBox(height: 10),\n-              Text(postQuestion, style: const TextStyle(fontWeight: FontWeight.bold)),\n+              Text(postQuestion,\n+                  style: const TextStyle(fontWeight: FontWeight.bold)),\n               const SizedBox(height: 20),\n               TextField(\n                 controller: answerController,\n                 decoration: const InputDecoration(\n@@ -192,27 +205,12 @@\n               onPressed: () => Navigator.of(context).pop(),\n               child: const Text('Cancel'),\n             ),\n             TextButton(\n-              onPressed: () async {\n+              onPressed: () {\n                 String answer = answerController.text.trim();\n                 if (answer.isNotEmpty) {\n-                  try {\n-                    await _postService.claimPost(postId, postmakerId, answer);\n-                    ScaffoldMessenger.of(context).showSnackBar(\n-                      const SnackBar(\n-                        content: Text('Request sent successfully'),\n-                        backgroundColor: Colors.green,\n-                      ),\n-                    );\n-                  } catch (e) {\n-                    ScaffoldMessenger.of(context).showSnackBar(\n-                      SnackBar(\n-                        content: Text(e.toString()),\n-                        backgroundColor: Colors.red,\n-                      ),\n-                    );\n-                  }\n+                  _postService.claimPost(context, postId, postmakerId, answer);\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n@@ -221,124 +219,51 @@\n         );\n       },\n     );\n   }\n+  // --- End of new dialog implementations ---\n \n-  String _formatDate(Timestamp? timestamp) {\n-    if (timestamp == null) return 'Not available';\n-    DateTime date = timestamp.toDate();\n-    return DateFormat('dd MMMM yyyy').format(date);\n-  }\n-\n   @override\n   Widget build(BuildContext context) {\n     bool isMobile = MediaQuery.of(context).size.width < 600;\n \n     return Scaffold(\n-      body: Column(\n-        children: [\n-          FilterDropdowns(\n-            selectedType: _selectedType,\n-            selectedLocation: _selectedLocation,\n-            selectedCategory: _selectedCategory,\n-            selectedDateRange: _selectedDateRange,\n-            onTypeChanged: (newValue) {\n-              setState(() => _selectedType = newValue!);\n-              _applyFilters();\n-            },\n-            onLocationChanged: (newValue) {\n-              setState(() => _selectedLocation = newValue!);\n-              _applyFilters();\n-            },\n-            onCategoryChanged: (newValue) {\n-              setState(() => _selectedCategory = newValue!);\n-              _applyFilters();\n-            },\n-            onDateRangeChanged: (newValue) {\n-              setState(() => _selectedDateRange = newValue!);\n-              _applyFilters();\n-            },\n-          ),\n-          Expanded(\n-            child: StreamBuilder<QuerySnapshot>(\n-              stream: _postStream,\n-              builder: (context, snapshot) {\n-                if (snapshot.connectionState == ConnectionState.waiting) {\n-                  return const Center(child: CircularProgressIndicator());\n-                }\n-                if (snapshot.hasError) {\n-                  print('ERROR: ${snapshot.error}');\n-                  return const Center(child: Text('Error loading posts'));\n-                }\n-                if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-                  return const Center(child: Text('No posts available'));\n-                }\n+      appBar: AppBar(\n+        backgroundColor: Colors.deepOrange,\n+        foregroundColor: Colors.white,\n+        title: const Text('Post Detail'),\n+      ),\n+      body: FutureBuilder<PostModel?>(\n+        future: _postFuture,\n+        builder: (context, snapshot) {\n+          if (snapshot.connectionState == ConnectionState.waiting) {\n+            return const Center(child: CircularProgressIndicator());\n+          }\n+          if (snapshot.hasError || !snapshot.hasData || snapshot.data == null) {\n+            return const Center(child: Text('Error or post not found.'));\n+          }\n \n-                final posts = snapshot.data!.docs.map((doc) async {\n-                  final data = doc.data() as Map<String, dynamic>;\n-                  final userDetails = await _userService.fetchUserData(data['postmakerId']);\n-                  \n-                  final claimSnapshot = await FirebaseFirestore.instance\n-                      .collection('posts')\n-                      .doc(doc.id)\n-                      .collection('claims')\n-                      .where('senderId', isEqualTo: currentUser!.uid)\n-                      .get();\n-                  final userHasRequestedClaim = claimSnapshot.docs.isNotEmpty;\n-\n-                  return PostModel(\n-                    postId: doc.id,\n-                    postmakerId: data['postmakerId'] ?? '',\n-                    userName: userDetails!['name'] ?? 'NITH User',\n-                    profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n-                    status: data['status'] ?? '',\n-                    title: data['item'] ?? '',\n-                    location: data['location'] ?? '',\n-                    description: data['description'] ?? '',\n-                    itemImages: List<String>.from(data['imageUrls'] ?? []),\n-                    postTime: _formatDate(data['timestamp']),\n-                    question: data['question'],\n-                    isClaimed: data['isClaimed'] ?? false,\n-                    postClaimerId: data['postClaimer'],\n-                    postClaimerName: data['postClaimerName'],\n-                    postClaimerPic: data['postClaimerPic'],\n-                  );\n-                });\n-\n-                return FutureBuilder<List<PostModel>>(\n-                  future: Future.wait(posts),\n-                  builder: (context, futureSnapshot) {\n-                    if (futureSnapshot.connectionState == ConnectionState.waiting) {\n-                      return const Center(child: CircularProgressIndicator());\n-                    }\n-                    if (futureSnapshot.hasError) {\n-                      print(\"Error: ${futureSnapshot.error}\");\n-                      return const Center(child: Text('Error loading posts'));\n-                    }\n-\n-                    final postsList = futureSnapshot.data ?? [];\n-                    return ListView.builder(\n-                      itemCount: postsList.length,\n-                      itemBuilder: (context, index) {\n-                        final post = postsList[index];\n-                        return PostCard(\n-                          post: post,\n-                          onDelete: () => _showDeleteConfirmationDialog(context, post.postId),\n-                          onReply: () => _showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n-                          onClaim: () => _showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n-                          onShare: () => _postService.sharePost(context, post.title, post.description),\n-                          currentUserId: currentUser!.uid,\n-                          isMobile: isMobile,\n-                          userHasRequestedClaim: false, // Corrected in a later step\n-                        );\n-                      },\n-                    );\n-                  },\n-                );\n-              },\n+          final post = snapshot.data!;\n+          return Center(\n+            child: SingleChildScrollView(\n+              child: PostCard(\n+                post: post,\n+                onDelete: () =>\n+                    _showDeleteConfirmationDialog(context, post.postId),\n+                onReply: () => _showReplyDialog(\n+                    context, post.postmakerId, post.userName, post.postId),\n+                onClaim: () => _showClaimDialog(context, post.postmakerId,\n+                    post.title, post.question!, post.description, post.postId),\n+                onShare: () => _postService.sharePost(\n+                    context, post.title, post.description),\n+                currentUserId: currentUser!.uid,\n+                isMobile: isMobile,\n+                userHasRequestedClaim:\n+                    false, // This is handled internally in the card for now\n+              ),\n             ),\n-          ),\n-        ],\n+          );\n+        },\n       ),\n     );\n   }\n }\n"
                },
                {
                    "date": 1756121751737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n           ),\n           actions: [\n             TextButton(\n               onPressed: () {\n-                _postService.deletePost(context, postId);\n+                _postService.deletePost(, postId);\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Yes',\n                   style: TextStyle(fontWeight: FontWeight.bold)),\n"
                },
                {
                    "date": 1756121757267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n           ),\n           actions: [\n             TextButton(\n               onPressed: () {\n-                _postService.deletePost(, postId);\n+                _postService.deletePost(postId);\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Yes',\n                   style: TextStyle(fontWeight: FontWeight.bold)),\n@@ -155,9 +155,9 @@\n               onPressed: () {\n                 String message = messageController.text.trim();\n                 if (message.isNotEmpty) {\n                   _postService.replyToPostmaker(\n-                      context, postmakerId, message, postId);\n+                       postmakerId, message, postId);\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n"
                },
                {
                    "date": 1756121762497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,10 +154,9 @@\n             TextButton(\n               onPressed: () {\n                 String message = messageController.text.trim();\n                 if (message.isNotEmpty) {\n-                  _postService.replyToPostmaker(\n-                       postmakerId, message, postId);\n+                  _postService.replyToPostmaker(postmakerId, message, postId);\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n@@ -208,9 +207,9 @@\n             TextButton(\n               onPressed: () {\n                 String answer = answerController.text.trim();\n                 if (answer.isNotEmpty) {\n-                  _postService.claimPost(context, postId, postmakerId, answer);\n+                  _postService.claimPost(postId, postmakerId, answer);\n                 }\n                 Navigator.of(context).pop();\n               },\n               child: const Text('Send'),\n"
                },
                {
                    "date": 1756122962672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,268 +1,268 @@\n-// lib/Frontend/pages/post_details_page.dart\n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:flutter/material.dart';\n-import 'package:intl/intl.dart';\n-import 'package:l_f/newCode/Backend/post_service.dart';\n-import 'package:l_f/newCode/Frontend/components/post_card.dart';\n-import 'package:l_f/newCode/models/post_model.dart';\n-import 'package:l_f/newCode/service/user_service.dart';\n+// // lib/Frontend/pages/post_details_page.dart\n+// import 'package:cloud_firestore/cloud_firestore.dart';\n+// import 'package:firebase_auth/firebase_auth.dart';\n+// import 'package:flutter/material.dart';\n+// import 'package:intl/intl.dart';\n+// import 'package:l_f/newCode/Backend/post_service.dart';\n+// import 'package:l_f/newCode/Frontend/components/post_card.dart';\n+// import 'package:l_f/newCode/models/post_model.dart';\n+// import 'package:l_f/newCode/service/user_service.dart';\n \n-class PostDetailsPage extends StatefulWidget {\n-  final String postId;\n-  const PostDetailsPage({super.key, required this.postId});\n+// class PostDetailsPage extends StatefulWidget {\n+//   final String postId;\n+//   const PostDetailsPage({super.key, required this.postId});\n \n-  @override\n-  State<PostDetailsPage> createState() => _PostDetailsPageState();\n-}\n+//   @override\n+//   State<PostDetailsPage> createState() => _PostDetailsPageState();\n+// }\n \n-class _PostDetailsPageState extends State<PostDetailsPage> {\n-  final PostService _postService = PostService();\n-  final UserService _userService = UserService();\n-  final User? currentUser = FirebaseAuth.instance.currentUser;\n+// class _PostDetailsPageState extends State<PostDetailsPage> {\n+//   final PostService _postService = PostService();\n+//   final UserService _userService = UserService();\n+//   final User? currentUser = FirebaseAuth.instance.currentUser;\n \n-  late Future<PostModel?> _postFuture;\n+//   late Future<PostModel?> _postFuture;\n \n-  @override\n-  void initState() {\n-    super.initState();\n-    _postFuture = _fetchPostDetails();\n-  }\n+//   @override\n+//   void initState() {\n+//     super.initState();\n+//     _postFuture = _fetchPostDetails();\n+//   }\n \n-  Future<PostModel?> _fetchPostDetails() async {\n-    try {\n-      final doc = await FirebaseFirestore.instance\n-          .collection('posts')\n-          .doc(widget.postId)\n-          .get();\n-      if (!doc.exists) {\n-        return null;\n-      }\n-      final data = doc.data() as Map<String, dynamic>;\n-      final userDetails = await _userService.fetchUserData(data['postmakerId']);\n+//   Future<PostModel?> _fetchPostDetails() async {\n+//     try {\n+//       final doc = await FirebaseFirestore.instance\n+//           .collection('posts')\n+//           .doc(widget.postId)\n+//           .get();\n+//       if (!doc.exists) {\n+//         return null;\n+//       }\n+//       final data = doc.data() as Map<String, dynamic>;\n+//       final userDetails = await _userService.fetchUserData(data['postmakerId']);\n \n-      return PostModel(\n-        postId: doc.id,\n-        postmakerId: data['postmakerId'] ?? '',\n-        userName: userDetails!['name'] ?? 'NITH User',\n-        profileImageUrl:\n-            userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n-        status: data['status'] ?? '',\n-        title: data['item'] ?? '',\n-        location: data['location'] ?? '',\n-        description: data['description'] ?? '',\n-        itemImages: List<String>.from(data['imageUrls'] ?? []),\n-        postTime: _formatDate(data['timestamp']),\n-        question: data['question'],\n-        isClaimed: data['isClaimed'] ?? false,\n-        postClaimerId: data['postClaimer'],\n-        postClaimerName: data['postClaimerName'],\n-        postClaimerPic: data['postClaimerPic'],\n-      );\n-    } catch (e) {\n-      print(\"Error fetching post details: $e\");\n-      return null;\n-    }\n-  }\n+//       return PostModel(\n+//         postId: doc.id,\n+//         postmakerId: data['postmakerId'] ?? '',\n+//         userName: userDetails!['name'] ?? 'NITH User',\n+//         profileImageUrl:\n+//             userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n+//         status: data['status'] ?? '',\n+//         title: data['item'] ?? '',\n+//         location: data['location'] ?? '',\n+//         description: data['description'] ?? '',\n+//         itemImages: List<String>.from(data['imageUrls'] ?? []),\n+//         postTime: _formatDate(data['timestamp']),\n+//         question: data['question'],\n+//         isClaimed: data['isClaimed'] ?? false,\n+//         postClaimerId: data['postClaimer'],\n+//         postClaimerName: data['postClaimerName'],\n+//         postClaimerPic: data['postClaimerPic'],\n+//       );\n+//     } catch (e) {\n+//       print(\"Error fetching post details: $e\");\n+//       return null;\n+//     }\n+//   }\n \n-  Future<bool> _hasRequestedClaim(String postId, String userId) async {\n-    final claimSnapshot = await FirebaseFirestore.instance\n-        .collection('posts')\n-        .doc(postId)\n-        .collection('claims')\n-        .where('senderId', isEqualTo: userId)\n-        .get();\n-    return claimSnapshot.docs.isNotEmpty;\n-  }\n+//   Future<bool> _hasRequestedClaim(String postId, String userId) async {\n+//     final claimSnapshot = await FirebaseFirestore.instance\n+//         .collection('posts')\n+//         .doc(postId)\n+//         .collection('claims')\n+//         .where('senderId', isEqualTo: userId)\n+//         .get();\n+//     return claimSnapshot.docs.isNotEmpty;\n+//   }\n \n-  String _formatDate(Timestamp? timestamp) {\n-    if (timestamp == null) return 'Not available';\n-    DateTime date = timestamp.toDate();\n-    return DateFormat('dd MMMM yyyy').format(date);\n-  }\n+//   String _formatDate(Timestamp? timestamp) {\n+//     if (timestamp == null) return 'Not available';\n+//     DateTime date = timestamp.toDate();\n+//     return DateFormat('dd MMMM yyyy').format(date);\n+//   }\n \n-  // --- Start of new dialog implementations ---\n-  void _showDeleteConfirmationDialog(BuildContext context, String postId) {\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Delete Post'),\n-          content: const Text(\n-            'Are you sure you want to delete this post?',\n-            style: TextStyle(fontWeight: FontWeight.w700),\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () {\n-                _postService.deletePost(postId);\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Yes',\n-                  style: TextStyle(fontWeight: FontWeight.bold)),\n-            ),\n-            TextButton(\n-              onPressed: () => Navigator.of(context).pop(),\n-              child: const Text('No',\n-                  style: TextStyle(fontWeight: FontWeight.bold)),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+//   // --- Start of new dialog implementations ---\n+//   void _showDeleteConfirmationDialog(BuildContext context, String postId) {\n+//     showDialog(\n+//       context: context,\n+//       builder: (BuildContext context) {\n+//         return AlertDialog(\n+//           title: const Text('Delete Post'),\n+//           content: const Text(\n+//             'Are you sure you want to delete this post?',\n+//             style: TextStyle(fontWeight: FontWeight.w700),\n+//           ),\n+//           actions: [\n+//             TextButton(\n+//               onPressed: () {\n+//                 _postService.deletePost(postId);\n+//                 Navigator.of(context).pop();\n+//               },\n+//               child: const Text('Yes',\n+//                   style: TextStyle(fontWeight: FontWeight.bold)),\n+//             ),\n+//             TextButton(\n+//               onPressed: () => Navigator.of(context).pop(),\n+//               child: const Text('No',\n+//                   style: TextStyle(fontWeight: FontWeight.bold)),\n+//             ),\n+//           ],\n+//         );\n+//       },\n+//     );\n+//   }\n \n-  void _showReplyDialog(BuildContext context, String postmakerId,\n-      String postmaker, String postId) {\n-    TextEditingController messageController = TextEditingController();\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Send a Reply'),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              Row(\n-                children: [\n-                  const Text('Reply to'),\n-                  TextButton(\n-                    onPressed: () {\n-                      // Navigator.push(context, MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)));\n-                    },\n-                    child: Text(postmaker),\n-                  ),\n-                ],\n-              ),\n-              const SizedBox(height: 10),\n-              TextField(\n-                controller: messageController,\n-                decoration: const InputDecoration(\n-                  labelText: 'Your message',\n-                  alignLabelWithHint: true,\n-                  border: OutlineInputBorder(),\n-                ),\n-                maxLines: 3,\n-              ),\n-            ],\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () => Navigator.of(context).pop(),\n-              child: const Text('Cancel'),\n-            ),\n-            TextButton(\n-              onPressed: () {\n-                String message = messageController.text.trim();\n-                if (message.isNotEmpty) {\n-                  _postService.replyToPostmaker(postmakerId, message, postId);\n-                }\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Send'),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n+//   void _showReplyDialog(BuildContext context, String postmakerId,\n+//       String postmaker, String postId) {\n+//     TextEditingController messageController = TextEditingController();\n+//     showDialog(\n+//       context: context,\n+//       builder: (BuildContext context) {\n+//         return AlertDialog(\n+//           title: const Text('Send a Reply'),\n+//           content: Column(\n+//             mainAxisSize: MainAxisSize.min,\n+//             children: [\n+//               Row(\n+//                 children: [\n+//                   const Text('Reply to'),\n+//                   TextButton(\n+//                     onPressed: () {\n+//                       // Navigator.push(context, MaterialPageRoute(builder: (_) => UserSeePage(uid: postmakerId)));\n+//                     },\n+//                     child: Text(postmaker),\n+//                   ),\n+//                 ],\n+//               ),\n+//               const SizedBox(height: 10),\n+//               TextField(\n+//                 controller: messageController,\n+//                 decoration: const InputDecoration(\n+//                   labelText: 'Your message',\n+//                   alignLabelWithHint: true,\n+//                   border: OutlineInputBorder(),\n+//                 ),\n+//                 maxLines: 3,\n+//               ),\n+//             ],\n+//           ),\n+//           actions: [\n+//             TextButton(\n+//               onPressed: () => Navigator.of(context).pop(),\n+//               child: const Text('Cancel'),\n+//             ),\n+//             TextButton(\n+//               onPressed: () {\n+//                 String message = messageController.text.trim();\n+//                 if (message.isNotEmpty) {\n+//                   _postService.replyToPostmaker(postmakerId, message, postId);\n+//                 }\n+//                 Navigator.of(context).pop();\n+//               },\n+//               child: const Text('Send'),\n+//             ),\n+//           ],\n+//         );\n+//       },\n+//     );\n+//   }\n \n-  void _showClaimDialog(\n-      BuildContext context,\n-      String postmakerId,\n-      String postTitle,\n-      String postQuestion,\n-      String postDescription,\n-      String postId) {\n-    TextEditingController answerController = TextEditingController();\n-    showDialog(\n-      context: context,\n-      builder: (BuildContext context) {\n-        return AlertDialog(\n-          title: const Text('Claim Item'),\n-          content: Column(\n-            mainAxisSize: MainAxisSize.min,\n-            children: [\n-              const Text('Question from the post owner:'),\n-              const SizedBox(height: 10),\n-              Text(postQuestion,\n-                  style: const TextStyle(fontWeight: FontWeight.bold)),\n-              const SizedBox(height: 20),\n-              TextField(\n-                controller: answerController,\n-                decoration: const InputDecoration(\n-                  labelText: 'Your answer',\n-                  alignLabelWithHint: true,\n-                  border: OutlineInputBorder(),\n-                ),\n-                maxLines: 3,\n-              ),\n-            ],\n-          ),\n-          actions: [\n-            TextButton(\n-              onPressed: () => Navigator.of(context).pop(),\n-              child: const Text('Cancel'),\n-            ),\n-            TextButton(\n-              onPressed: () {\n-                String answer = answerController.text.trim();\n-                if (answer.isNotEmpty) {\n-                  _postService.claimPost(postId, postmakerId, answer);\n-                }\n-                Navigator.of(context).pop();\n-              },\n-              child: const Text('Send'),\n-            ),\n-          ],\n-        );\n-      },\n-    );\n-  }\n-  // --- End of new dialog implementations ---\n+//   void _showClaimDialog(\n+//       BuildContext context,\n+//       String postmakerId,\n+//       String postTitle,\n+//       String postQuestion,\n+//       String postDescription,\n+//       String postId) {\n+//     TextEditingController answerController = TextEditingController();\n+//     showDialog(\n+//       context: context,\n+//       builder: (BuildContext context) {\n+//         return AlertDialog(\n+//           title: const Text('Claim Item'),\n+//           content: Column(\n+//             mainAxisSize: MainAxisSize.min,\n+//             children: [\n+//               const Text('Question from the post owner:'),\n+//               const SizedBox(height: 10),\n+//               Text(postQuestion,\n+//                   style: const TextStyle(fontWeight: FontWeight.bold)),\n+//               const SizedBox(height: 20),\n+//               TextField(\n+//                 controller: answerController,\n+//                 decoration: const InputDecoration(\n+//                   labelText: 'Your answer',\n+//                   alignLabelWithHint: true,\n+//                   border: OutlineInputBorder(),\n+//                 ),\n+//                 maxLines: 3,\n+//               ),\n+//             ],\n+//           ),\n+//           actions: [\n+//             TextButton(\n+//               onPressed: () => Navigator.of(context).pop(),\n+//               child: const Text('Cancel'),\n+//             ),\n+//             TextButton(\n+//               onPressed: () {\n+//                 String answer = answerController.text.trim();\n+//                 if (answer.isNotEmpty) {\n+//                   _postService.claimPost(postmakerId, postId, answer);\n+//                 }\n+//                 Navigator.of(context).pop();\n+//               },\n+//               child: const Text('Send'),\n+//             ),\n+//           ],\n+//         );\n+//       },\n+//     );\n+//   }\n+//   // --- End of new dialog implementations ---\n \n-  @override\n-  Widget build(BuildContext context) {\n-    bool isMobile = MediaQuery.of(context).size.width < 600;\n+//   @override\n+//   Widget build(BuildContext context) {\n+//     bool isMobile = MediaQuery.of(context).size.width < 600;\n \n-    return Scaffold(\n-      appBar: AppBar(\n-        backgroundColor: Colors.deepOrange,\n-        foregroundColor: Colors.white,\n-        title: const Text('Post Detail'),\n-      ),\n-      body: FutureBuilder<PostModel?>(\n-        future: _postFuture,\n-        builder: (context, snapshot) {\n-          if (snapshot.connectionState == ConnectionState.waiting) {\n-            return const Center(child: CircularProgressIndicator());\n-          }\n-          if (snapshot.hasError || !snapshot.hasData || snapshot.data == null) {\n-            return const Center(child: Text('Error or post not found.'));\n-          }\n+//     return Scaffold(\n+//       appBar: AppBar(\n+//         backgroundColor: Colors.deepOrange,\n+//         foregroundColor: Colors.white,\n+//         title: const Text('Post Detail'),\n+//       ),\n+//       body: FutureBuilder<PostModel?>(\n+//         future: _postFuture,\n+//         builder: (context, snapshot) {\n+//           if (snapshot.connectionState == ConnectionState.waiting) {\n+//             return const Center(child: CircularProgressIndicator());\n+//           }\n+//           if (snapshot.hasError || !snapshot.hasData || snapshot.data == null) {\n+//             return const Center(child: Text('Error or post not found.'));\n+//           }\n \n-          final post = snapshot.data!;\n-          return Center(\n-            child: SingleChildScrollView(\n-              child: PostCard(\n-                post: post,\n-                onDelete: () =>\n-                    _showDeleteConfirmationDialog(context, post.postId),\n-                onReply: () => _showReplyDialog(\n-                    context, post.postmakerId, post.userName, post.postId),\n-                onClaim: () => _showClaimDialog(context, post.postmakerId,\n-                    post.title, post.question!, post.description, post.postId),\n-                onShare: () => _postService.sharePost(\n-                    context, post.title, post.description),\n-                currentUserId: currentUser!.uid,\n-                isMobile: isMobile,\n-                userHasRequestedClaim:\n-                    false, // This is handled internally in the card for now\n-              ),\n-            ),\n-          );\n-        },\n-      ),\n-    );\n-  }\n-}\n+//           final post = snapshot.data!;\n+//           return Center(\n+//             child: SingleChildScrollView(\n+//               child: PostCard(\n+//                 post: post,\n+//                 onDelete: () =>\n+//                     _showDeleteConfirmationDialog(context, post.postId),\n+//                 onReply: () => _showReplyDialog(\n+//                     context, post.postmakerId, post.userName, post.postId),\n+//                 onClaim: () => _showClaimDialog(context, post.postmakerId,\n+//                     post.title, post.question!, post.description, post.postId),\n+//                 onShare: () => _postService.sharePost(\n+//                     context, post.title, post.description),\n+//                 currentUserId: currentUser!.uid,\n+//                 isMobile: isMobile,\n+//                 userHasRequestedClaim:\n+//                     false, // This is handled internally in the card for now\n+//               ),\n+//             ),\n+//           );\n+//         },\n+//       ),\n+//     );\n+//   }\n+// }\n"
                }
            ],
            "date": 1756118873861,
            "name": "Commit-0",
            "content": "// lib/Frontend/pages/post_details_page.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\nimport 'package:l_f/Backend/post_service.dart';\nimport 'package:l_f/services/user_service.dart';\nimport 'package:l_f/models/post_model.dart';\nimport 'package:l_f/Frontend/components/post_card.dart';\nimport 'package:l_f/Frontend/components/dialogs.dart';\n\nclass PostDetailsPage extends StatefulWidget {\n  final String postId;\n  const PostDetailsPage({super.key, required this.postId});\n\n  @override\n  State<PostDetailsPage> createState() => _PostDetailsPageState();\n}\n\nclass _PostDetailsPageState extends State<PostDetailsPage> {\n  final PostService _postService = PostService();\n  final UserService _userService = UserService();\n  final User? currentUser = FirebaseAuth.instance.currentUser;\n  \n  late Future<PostModel?> _postFuture;\n\n  @override\n  void initState() {\n    super.initState();\n    _postFuture = _fetchPostDetails();\n  }\n\n  Future<PostModel?> _fetchPostDetails() async {\n    try {\n      final doc = await FirebaseFirestore.instance.collection('posts').doc(widget.postId).get();\n      if (!doc.exists) {\n        return null;\n      }\n      final data = doc.data() as Map<String, dynamic>;\n      final userDetails = await _userService.fetchUserData(data['postmakerId']);\n      final userHasRequestedClaim = await _hasRequestedClaim(doc.id, currentUser!.uid);\n\n      return PostModel(\n        postId: doc.id,\n        postmakerId: data['postmakerId'] ?? '',\n        userName: userDetails!['name'] ?? 'NITH User',\n        profileImageUrl: userDetails['profileImage'] ?? 'https://placehold.co/100x100/png',\n        status: data['status'] ?? '',\n        title: data['item'] ?? '',\n        location: data['location'] ?? '',\n        description: data['description'] ?? '',\n        itemImages: List<String>.from(data['imageUrls'] ?? []),\n        postTime: _formatDate(data['timestamp']),\n        question: data['question'],\n        isClaimed: data['isClaimed'] ?? false,\n        postClaimerId: data['postClaimer'],\n        postClaimerName: data['postClaimerName'],\n        postClaimerPic: data['postClaimerPic'],\n      );\n    } catch (e) {\n      print(\"Error fetching post details: $e\");\n      return null;\n    }\n  }\n\n  Future<bool> _hasRequestedClaim(String postId, String userId) async {\n    final claimSnapshot = await FirebaseFirestore.instance\n        .collection('posts')\n        .doc(postId)\n        .collection('claims')\n        .where('senderId', isEqualTo: userId)\n        .get();\n    return claimSnapshot.docs.isNotEmpty;\n  }\n  \n  String _formatDate(Timestamp? timestamp) {\n    if (timestamp == null) return 'Not available';\n    DateTime date = timestamp.toDate();\n    return DateFormat('dd MMMM yyyy').format(date);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    bool isMobile = MediaQuery.of(context).size.width < 600;\n    \n    return Scaffold(\n      appBar: AppBar(\n        backgroundColor: Colors.deepOrange,\n        foregroundColor: Colors.white,\n        title: const Text('Post Detail'),\n      ),\n      body: FutureBuilder<PostModel?>(\n        future: _postFuture,\n        builder: (context, snapshot) {\n          if (snapshot.connectionState == ConnectionState.waiting) {\n            return const Center(child: CircularProgressIndicator());\n          }\n          if (snapshot.hasError || !snapshot.hasData || snapshot.data == null) {\n            return const Center(child: Text('Error or post not found.'));\n          }\n\n          final post = snapshot.data!;\n          return Center(\n            child: SingleChildScrollView(\n              child: PostCard(\n                post: post,\n                onDelete: () => showDeleteConfirmationDialog(context, () => _postService.deletePost(context, post.postId)),\n                onReply: () => showReplyDialog(context, post.postmakerId, post.userName, post.postId),\n                onClaim: () => showClaimDialog(context, post.postmakerId, post.title, post.question!, post.description, post.postId),\n                onShare: () => _postService.sharePost(context, post.title, post.description),\n                currentUserId: currentUser!.uid,\n                isMobile: isMobile,\n                userHasRequestedClaim: false, // This is handled internally in the card for now\n              ),\n            ),\n          );\n        },\n      ),\n    );\n  }\n}\n"
        }
    ]
}