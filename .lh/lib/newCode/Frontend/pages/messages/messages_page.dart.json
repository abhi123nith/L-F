{
    "sourceFile": "lib/newCode/Frontend/pages/messages/messages_page.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1756117847511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756117923215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/messages_service.dart';\n import 'package:l_f/Backend/claims_service.dart';\n+import 'package:l_f/newCode/Frontend/components/claim_list_item.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/Frontend/components/message_list_item.dart';\n import 'package:l_f/Frontend/components/claim_list_item.dart';\n import 'package:l_f/Frontend/Home/Post/Utils/full_post.dart';\n"
                },
                {
                    "date": 1756117928867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/messages_service.dart';\n import 'package:l_f/Backend/claims_service.dart';\n import 'package:l_f/newCode/Frontend/components/claim_list_item.dart';\n+import 'package:l_f/newCode/Frontend/components/message_list_item.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/Frontend/components/message_list_item.dart';\n import 'package:l_f/Frontend/components/claim_list_item.dart';\n import 'package:l_f/Frontend/Home/Post/Utils/full_post.dart';\n"
                },
                {
                    "date": 1756117936526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,12 @@\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/messages_service.dart';\n import 'package:l_f/Backend/claims_service.dart';\n+import 'package:l_f/newCode/Backend/claims_service.dart';\n import 'package:l_f/newCode/Frontend/components/claim_list_item.dart';\n import 'package:l_f/newCode/Frontend/components/message_list_item.dart';\n+import 'package:l_f/newCode/service/user_service.dart';\n import 'package:l_f/services/user_service.dart';\n import 'package:l_f/Frontend/components/message_list_item.dart';\n import 'package:l_f/Frontend/components/claim_list_item.dart';\n import 'package:l_f/Frontend/Home/Post/Utils/full_post.dart';\n"
                },
                {
                    "date": 1756117941993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,29 +2,30 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n+import 'package:l_f/Backend/claims_service.dart';\n import 'package:l_f/Backend/messages_service.dart';\n-import 'package:l_f/Backend/claims_service.dart';\n+import 'package:l_f/Frontend/Home/Post/Utils/full_post.dart';\n+import 'package:l_f/Frontend/MyList/my_posts.dart';\n+import 'package:l_f/Frontend/components/claim_list_item.dart';\n+import 'package:l_f/Frontend/components/message_list_item.dart';\n import 'package:l_f/newCode/Backend/claims_service.dart';\n+import 'package:l_f/newCode/Backend/messages_service.dart';\n import 'package:l_f/newCode/Frontend/components/claim_list_item.dart';\n import 'package:l_f/newCode/Frontend/components/message_list_item.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n import 'package:l_f/services/user_service.dart';\n-import 'package:l_f/Frontend/components/message_list_item.dart';\n-import 'package:l_f/Frontend/components/claim_list_item.dart';\n-import 'package:l_f/Frontend/Home/Post/Utils/full_post.dart';\n-import 'package:l_f/Frontend/MyList/my_posts.dart';\n-import 'package:l_f/Frontend/Profile/user_see_page.dart';\n \n class MessagesPage extends StatefulWidget {\n   const MessagesPage({super.key});\n \n   @override\n   State<MessagesPage> createState() => _MessagesPageState();\n }\n \n-class _MessagesPageState extends State<MessagesPage> with SingleTickerProviderStateMixin {\n+class _MessagesPageState extends State<MessagesPage>\n+    with SingleTickerProviderStateMixin {\n   final User? currentUser = FirebaseAuth.instance.currentUser;\n   late TabController _tabController;\n \n   final MessagesService _messagesService = MessagesService();\n@@ -46,12 +47,13 @@\n   @override\n   Widget build(BuildContext context) {\n     if (currentUser == null) {\n       return const Scaffold(\n-        body: Center(child: Text('Please log in to view your messages and claims.')),\n+        body: Center(\n+            child: Text('Please log in to view your messages and claims.')),\n       );\n     }\n-    \n+\n     return Scaffold(\n       appBar: AppBar(\n         backgroundColor: Colors.deepOrange,\n         foregroundColor: Colors.white,\n@@ -89,51 +91,58 @@\n \n         var latestMessagesMap = <String, DocumentSnapshot>{};\n         for (var doc in snapshot.data!.docs) {\n           var data = doc.data() as Map<String, dynamic>;\n-          var otherUserId = data['senderId'] == currentUser!.uid ? data['receiverId'] : data['senderId'];\n+          var otherUserId = data['senderId'] == currentUser!.uid\n+              ? data['receiverId']\n+              : data['senderId'];\n           if (!latestMessagesMap.containsKey(otherUserId)) {\n             latestMessagesMap[otherUserId] = doc;\n           }\n         }\n-        \n-        var sortedMessages = latestMessagesMap.values.toList()..sort((a, b) => (b['timestamp'] as Timestamp).compareTo(a['timestamp'] as Timestamp));\n \n+        var sortedMessages = latestMessagesMap.values.toList()\n+          ..sort((a, b) => (b['timestamp'] as Timestamp)\n+              .compareTo(a['timestamp'] as Timestamp));\n+\n         return ListView.builder(\n           itemCount: sortedMessages.length,\n           itemBuilder: (context, index) {\n             var message = sortedMessages[index];\n             var isSentByUser = message['senderId'] == currentUser!.uid;\n-            var otherUserId = isSentByUser ? message['receiverId'] : message['senderId'];\n+            var otherUserId =\n+                isSentByUser ? message['receiverId'] : message['senderId'];\n \n             return FutureBuilder<Map<String, dynamic>?>(\n               future: _userService.fetchUserData(otherUserId),\n               builder: (context, userSnapshot) {\n                 if (userSnapshot.connectionState == ConnectionState.waiting) {\n                   return const ListTile(title: Text('Loading user...'));\n                 }\n-                \n+\n                 if (!userSnapshot.hasData || userSnapshot.data == null) {\n                   return const SizedBox();\n                 }\n \n                 var userProfile = userSnapshot.data!;\n                 return MessageListItem(\n                   otherUserId: otherUserId,\n                   userName: userProfile['name'] ?? 'Unknown User',\n-                  userProfileImage: userProfile['profileImage'] ?? 'https://placehold.co/100x100/png',\n+                  userProfileImage: userProfile['profileImage'] ??\n+                      'https://placehold.co/100x100/png',\n                   messageText: message['message'],\n                   isSentByUser: isSentByUser,\n-                  formattedTimestamp: DateFormat('hh:mm a, d MMM yyyy').format((message['timestamp'] as Timestamp).toDate()),\n+                  formattedTimestamp: DateFormat('hh:mm a, d MMM yyyy')\n+                      .format((message['timestamp'] as Timestamp).toDate()),\n                 );\n               },\n             );\n           },\n         );\n       },\n     );\n   }\n-  \n+\n   Widget _buildClaimsTab() {\n     return DefaultTabController(\n       length: 2,\n       child: Column(\n@@ -182,11 +191,17 @@\n             final postId = post.id;\n             final postmakerId = postData['postmakerId'];\n \n             return StreamBuilder<QuerySnapshot>(\n-              stream: FirebaseFirestore.instance.collection('posts').doc(postId).collection('claims').where('senderId', isEqualTo: currentUser!.uid).snapshots(),\n+              stream: FirebaseFirestore.instance\n+                  .collection('posts')\n+                  .doc(postId)\n+                  .collection('claims')\n+                  .where('senderId', isEqualTo: currentUser!.uid)\n+                  .snapshots(),\n               builder: (context, claimSnapshot) {\n-                if (!claimSnapshot.hasData || claimSnapshot.data!.docs.isEmpty) {\n+                if (!claimSnapshot.hasData ||\n+                    claimSnapshot.data!.docs.isEmpty) {\n                   return const SizedBox.shrink();\n                 }\n \n                 final claim = claimSnapshot.data!.docs.first;\n@@ -194,9 +209,12 @@\n                   claim: claim,\n                   postData: postData,\n                   onTap: () {\n                     // Navigate to post details\n-                    Navigator.push(context, MaterialPageRoute(builder: (_) => PostDetailsPage(postId: postId)));\n+                    Navigator.push(\n+                        context,\n+                        MaterialPageRoute(\n+                            builder: (_) => PostDetailsPage(postId: postId)));\n                   },\n                 );\n               },\n             );\n@@ -221,29 +239,38 @@\n           final postData = postDoc.data() as Map<String, dynamic>;\n           final postmakerId = postData['postmakerId'];\n           return postmakerId == currentUser!.uid;\n         }).toList();\n-        \n+\n         return ListView.builder(\n           itemCount: postsWithClaims.length,\n           itemBuilder: (context, index) {\n             final post = postsWithClaims[index];\n             final postData = post.data() as Map<String, dynamic>;\n             final postId = post.id;\n \n             return StreamBuilder<QuerySnapshot>(\n-              stream: FirebaseFirestore.instance.collection('posts').doc(postId).collection('claims').where('receiverId', isEqualTo: currentUser!.uid).snapshots(),\n+              stream: FirebaseFirestore.instance\n+                  .collection('posts')\n+                  .doc(postId)\n+                  .collection('claims')\n+                  .where('receiverId', isEqualTo: currentUser!.uid)\n+                  .snapshots(),\n               builder: (context, claimSnapshot) {\n-                if (!claimSnapshot.hasData || claimSnapshot.data!.docs.isEmpty) {\n+                if (!claimSnapshot.hasData ||\n+                    claimSnapshot.data!.docs.isEmpty) {\n                   return const SizedBox.shrink();\n                 }\n \n                 final claim = claimSnapshot.data!.docs.first;\n                 return ClaimListItem(\n                   claim: claim,\n                   postData: postData,\n                   onTap: () {\n-                    Navigator.push(context, MaterialPageRoute(builder: (_) => PostDetailsPage(postId: postId)));\n+                    Navigator.push(\n+                        context,\n+                        MaterialPageRoute(\n+                            builder: (_) => PostDetailsPage(postId: postId)));\n                   },\n                   onAccept: () {\n                     _claimsService.acceptClaim(\n                       postId: postId,\n@@ -252,9 +279,10 @@\n                       claimerId: claim['senderId'],\n                     );\n                   },\n                   onDecline: () {\n-                    _claimsService.declineClaim(postId: postId, claimId: claim.id);\n+                    _claimsService.declineClaim(\n+                        postId: postId, claimId: claim.id);\n                   },\n                 );\n               },\n             );\n"
                },
                {
                    "date": 1756117947200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,16 +6,14 @@\n import 'package:l_f/Backend/claims_service.dart';\n import 'package:l_f/Backend/messages_service.dart';\n import 'package:l_f/Frontend/Home/Post/Utils/full_post.dart';\n import 'package:l_f/Frontend/MyList/my_posts.dart';\n-import 'package:l_f/Frontend/components/claim_list_item.dart';\n import 'package:l_f/Frontend/components/message_list_item.dart';\n import 'package:l_f/newCode/Backend/claims_service.dart';\n import 'package:l_f/newCode/Backend/messages_service.dart';\n import 'package:l_f/newCode/Frontend/components/claim_list_item.dart';\n import 'package:l_f/newCode/Frontend/components/message_list_item.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n-import 'package:l_f/services/user_service.dart';\n \n class MessagesPage extends StatefulWidget {\n   const MessagesPage({super.key});\n \n"
                },
                {
                    "date": 1756117953920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,13 +2,10 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n-import 'package:l_f/Backend/claims_service.dart';\n-import 'package:l_f/Backend/messages_service.dart';\n import 'package:l_f/Frontend/Home/Post/Utils/full_post.dart';\n import 'package:l_f/Frontend/MyList/my_posts.dart';\n-import 'package:l_f/Frontend/components/message_list_item.dart';\n import 'package:l_f/newCode/Backend/claims_service.dart';\n import 'package:l_f/newCode/Backend/messages_service.dart';\n import 'package:l_f/newCode/Frontend/components/claim_list_item.dart';\n import 'package:l_f/newCode/Frontend/components/message_list_item.dart';\n"
                },
                {
                    "date": 1756118149723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,8 @@\n           itemBuilder: (context, index) {\n             final post = postsWithClaims[index];\n             final postData = post.data() as Map<String, dynamic>;\n             final postId = post.id;\n-            final postmakerId = postData['postmakerId'];\n \n             return StreamBuilder<QuerySnapshot>(\n               stream: FirebaseFirestore.instance\n                   .collection('posts')\n"
                },
                {
                    "date": 1756118764391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n-import 'package:l_f/Frontend/Home/Post/Utils/full_post.dart';\n import 'package:l_f/Frontend/MyList/my_posts.dart';\n import 'package:l_f/newCode/Backend/claims_service.dart';\n import 'package:l_f/newCode/Backend/messages_service.dart';\n import 'package:l_f/newCode/Frontend/components/claim_list_item.dart';\n"
                },
                {
                    "date": 1756118984771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import 'package:l_f/newCode/Backend/claims_service.dart';\n import 'package:l_f/newCode/Backend/messages_service.dart';\n import 'package:l_f/newCode/Frontend/components/claim_list_item.dart';\n import 'package:l_f/newCode/Frontend/components/message_list_item.dart';\n+import 'package:l_f/newCode/Frontend/pages/post_details_page.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n \n class MessagesPage extends StatefulWidget {\n   const MessagesPage({super.key});\n"
                },
                {
                    "date": 1756119067891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import 'package:l_f/newCode/Backend/claims_service.dart';\n import 'package:l_f/newCode/Backend/messages_service.dart';\n import 'package:l_f/newCode/Frontend/components/claim_list_item.dart';\n import 'package:l_f/newCode/Frontend/components/message_list_item.dart';\n+import 'package:l_f/newCode/Frontend/pages/my_posts/my_post_page.dart';\n import 'package:l_f/newCode/Frontend/pages/post_details_page.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n \n class MessagesPage extends StatefulWidget {\n"
                },
                {
                    "date": 1756121716701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,15 +2,13 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n-import 'package:l_f/Frontend/MyList/my_posts.dart';\n import 'package:l_f/newCode/Backend/claims_service.dart';\n import 'package:l_f/newCode/Backend/messages_service.dart';\n import 'package:l_f/newCode/Frontend/components/claim_list_item.dart';\n import 'package:l_f/newCode/Frontend/components/message_list_item.dart';\n import 'package:l_f/newCode/Frontend/pages/my_posts/my_post_page.dart';\n-import 'package:l_f/newCode/Frontend/pages/post_details_page.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n \n class MessagesPage extends StatefulWidget {\n   const MessagesPage({super.key});\n"
                },
                {
                    "date": 1756121770713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import 'package:l_f/newCode/Backend/messages_service.dart';\n import 'package:l_f/newCode/Frontend/components/claim_list_item.dart';\n import 'package:l_f/newCode/Frontend/components/message_list_item.dart';\n import 'package:l_f/newCode/Frontend/pages/my_posts/my_post_page.dart';\n+import 'package:l_f/newCode/Frontend/pages/post_details_page.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n \n class MessagesPage extends StatefulWidget {\n   const MessagesPage({super.key});\n"
                },
                {
                    "date": 1756122990382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,288 +1,288 @@\n-// lib/Frontend/pages/messages_page.dart\n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:firebase_auth/firebase_auth.dart';\n-import 'package:flutter/material.dart';\n-import 'package:intl/intl.dart';\n-import 'package:l_f/newCode/Backend/claims_service.dart';\n-import 'package:l_f/newCode/Backend/messages_service.dart';\n-import 'package:l_f/newCode/Frontend/components/claim_list_item.dart';\n-import 'package:l_f/newCode/Frontend/components/message_list_item.dart';\n-import 'package:l_f/newCode/Frontend/pages/my_posts/my_post_page.dart';\n-import 'package:l_f/newCode/Frontend/pages/post_details_page.dart';\n-import 'package:l_f/newCode/service/user_service.dart';\n+// // lib/Frontend/pages/messages_page.dart\n+// import 'package:cloud_firestore/cloud_firestore.dart';\n+// import 'package:firebase_auth/firebase_auth.dart';\n+// import 'package:flutter/material.dart';\n+// import 'package:intl/intl.dart';\n+// import 'package:l_f/newCode/Backend/claims_service.dart';\n+// import 'package:l_f/newCode/Backend/messages_service.dart';\n+// import 'package:l_f/newCode/Frontend/components/claim_list_item.dart';\n+// import 'package:l_f/newCode/Frontend/components/message_list_item.dart';\n+// import 'package:l_f/newCode/Frontend/pages/my_posts/my_post_page.dart';\n+// import 'package:l_f/newCode/Frontend/pages/post_details_page.dart';\n+// import 'package:l_f/newCode/service/user_service.dart';\n \n-class MessagesPage extends StatefulWidget {\n-  const MessagesPage({super.key});\n+// class MessagesPage extends StatefulWidget {\n+//   const MessagesPage({super.key});\n \n-  @override\n-  State<MessagesPage> createState() => _MessagesPageState();\n-}\n+//   @override\n+//   State<MessagesPage> createState() => _MessagesPageState();\n+// }\n \n-class _MessagesPageState extends State<MessagesPage>\n-    with SingleTickerProviderStateMixin {\n-  final User? currentUser = FirebaseAuth.instance.currentUser;\n-  late TabController _tabController;\n+// class _MessagesPageState extends State<MessagesPage>\n+//     with SingleTickerProviderStateMixin {\n+//   final User? currentUser = FirebaseAuth.instance.currentUser;\n+//   late TabController _tabController;\n \n-  final MessagesService _messagesService = MessagesService();\n-  final ClaimsService _claimsService = ClaimsService();\n-  final UserService _userService = UserService();\n+//   final MessagesService _messagesService = MessagesService();\n+//   final ClaimsService _claimsService = ClaimsService();\n+//   final UserService _userService = UserService();\n \n-  @override\n-  void initState() {\n-    super.initState();\n-    _tabController = TabController(length: 3, vsync: this);\n-  }\n+//   @override\n+//   void initState() {\n+//     super.initState();\n+//     _tabController = TabController(length: 3, vsync: this);\n+//   }\n \n-  @override\n-  void dispose() {\n-    _tabController.dispose();\n-    super.dispose();\n-  }\n+//   @override\n+//   void dispose() {\n+//     _tabController.dispose();\n+//     super.dispose();\n+//   }\n \n-  @override\n-  Widget build(BuildContext context) {\n-    if (currentUser == null) {\n-      return const Scaffold(\n-        body: Center(\n-            child: Text('Please log in to view your messages and claims.')),\n-      );\n-    }\n+//   @override\n+//   Widget build(BuildContext context) {\n+//     if (currentUser == null) {\n+//       return const Scaffold(\n+//         body: Center(\n+//             child: Text('Please log in to view your messages and claims.')),\n+//       );\n+//     }\n \n-    return Scaffold(\n-      appBar: AppBar(\n-        backgroundColor: Colors.deepOrange,\n-        foregroundColor: Colors.white,\n-        title: const Text('Messages and Claims'),\n-        bottom: TabBar(\n-          controller: _tabController,\n-          tabs: const [\n-            Tab(text: 'Messages'),\n-            Tab(text: 'Claims'),\n-            Tab(text: 'My Posts'),\n-          ],\n-        ),\n-      ),\n-      body: TabBarView(\n-        controller: _tabController,\n-        children: [\n-          _buildMessagesTab(),\n-          _buildClaimsTab(),\n-          const MyPostsPage(),\n-        ],\n-      ),\n-    );\n-  }\n+//     return Scaffold(\n+//       appBar: AppBar(\n+//         backgroundColor: Colors.deepOrange,\n+//         foregroundColor: Colors.white,\n+//         title: const Text('Messages and Claims'),\n+//         bottom: TabBar(\n+//           controller: _tabController,\n+//           tabs: const [\n+//             Tab(text: 'Messages'),\n+//             Tab(text: 'Claims'),\n+//             Tab(text: 'My Posts'),\n+//           ],\n+//         ),\n+//       ),\n+//       body: TabBarView(\n+//         controller: _tabController,\n+//         children: [\n+//           _buildMessagesTab(),\n+//           _buildClaimsTab(),\n+//           const MyPostsPage(),\n+//         ],\n+//       ),\n+//     );\n+//   }\n \n-  Widget _buildMessagesTab() {\n-    return StreamBuilder<QuerySnapshot>(\n-      stream: _messagesService.getLatestMessages(),\n-      builder: (context, snapshot) {\n-        if (snapshot.connectionState == ConnectionState.waiting) {\n-          return const Center(child: CircularProgressIndicator());\n-        }\n-        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-          return const Center(child: Text('No Messages available'));\n-        }\n+//   Widget _buildMessagesTab() {\n+//     return StreamBuilder<QuerySnapshot>(\n+//       stream: _messagesService.getLatestMessages(),\n+//       builder: (context, snapshot) {\n+//         if (snapshot.connectionState == ConnectionState.waiting) {\n+//           return const Center(child: CircularProgressIndicator());\n+//         }\n+//         if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+//           return const Center(child: Text('No Messages available'));\n+//         }\n \n-        var latestMessagesMap = <String, DocumentSnapshot>{};\n-        for (var doc in snapshot.data!.docs) {\n-          var data = doc.data() as Map<String, dynamic>;\n-          var otherUserId = data['senderId'] == currentUser!.uid\n-              ? data['receiverId']\n-              : data['senderId'];\n-          if (!latestMessagesMap.containsKey(otherUserId)) {\n-            latestMessagesMap[otherUserId] = doc;\n-          }\n-        }\n+//         var latestMessagesMap = <String, DocumentSnapshot>{};\n+//         for (var doc in snapshot.data!.docs) {\n+//           var data = doc.data() as Map<String, dynamic>;\n+//           var otherUserId = data['senderId'] == currentUser!.uid\n+//               ? data['receiverId']\n+//               : data['senderId'];\n+//           if (!latestMessagesMap.containsKey(otherUserId)) {\n+//             latestMessagesMap[otherUserId] = doc;\n+//           }\n+//         }\n \n-        var sortedMessages = latestMessagesMap.values.toList()\n-          ..sort((a, b) => (b['timestamp'] as Timestamp)\n-              .compareTo(a['timestamp'] as Timestamp));\n+//         var sortedMessages = latestMessagesMap.values.toList()\n+//           ..sort((a, b) => (b['timestamp'] as Timestamp)\n+//               .compareTo(a['timestamp'] as Timestamp));\n \n-        return ListView.builder(\n-          itemCount: sortedMessages.length,\n-          itemBuilder: (context, index) {\n-            var message = sortedMessages[index];\n-            var isSentByUser = message['senderId'] == currentUser!.uid;\n-            var otherUserId =\n-                isSentByUser ? message['receiverId'] : message['senderId'];\n+//         return ListView.builder(\n+//           itemCount: sortedMessages.length,\n+//           itemBuilder: (context, index) {\n+//             var message = sortedMessages[index];\n+//             var isSentByUser = message['senderId'] == currentUser!.uid;\n+//             var otherUserId =\n+//                 isSentByUser ? message['receiverId'] : message['senderId'];\n \n-            return FutureBuilder<Map<String, dynamic>?>(\n-              future: _userService.fetchUserData(otherUserId),\n-              builder: (context, userSnapshot) {\n-                if (userSnapshot.connectionState == ConnectionState.waiting) {\n-                  return const ListTile(title: Text('Loading user...'));\n-                }\n+//             return FutureBuilder<Map<String, dynamic>?>(\n+//               future: _userService.fetchUserData(otherUserId),\n+//               builder: (context, userSnapshot) {\n+//                 if (userSnapshot.connectionState == ConnectionState.waiting) {\n+//                   return const ListTile(title: Text('Loading user...'));\n+//                 }\n \n-                if (!userSnapshot.hasData || userSnapshot.data == null) {\n-                  return const SizedBox();\n-                }\n+//                 if (!userSnapshot.hasData || userSnapshot.data == null) {\n+//                   return const SizedBox();\n+//                 }\n \n-                var userProfile = userSnapshot.data!;\n-                return MessageListItem(\n-                  otherUserId: otherUserId,\n-                  userName: userProfile['name'] ?? 'Unknown User',\n-                  userProfileImage: userProfile['profileImage'] ??\n-                      'https://placehold.co/100x100/png',\n-                  messageText: message['message'],\n-                  isSentByUser: isSentByUser,\n-                  formattedTimestamp: DateFormat('hh:mm a, d MMM yyyy')\n-                      .format((message['timestamp'] as Timestamp).toDate()),\n-                );\n-              },\n-            );\n-          },\n-        );\n-      },\n-    );\n-  }\n+//                 var userProfile = userSnapshot.data!;\n+//                 return MessageListItem(\n+//                   otherUserId: otherUserId,\n+//                   userName: userProfile['name'] ?? 'Unknown User',\n+//                   userProfileImage: userProfile['profileImage'] ??\n+//                       'https://placehold.co/100x100/png',\n+//                   messageText: message['message'],\n+//                   isSentByUser: isSentByUser,\n+//                   formattedTimestamp: DateFormat('hh:mm a, d MMM yyyy')\n+//                       .format((message['timestamp'] as Timestamp).toDate()),\n+//                 );\n+//               },\n+//             );\n+//           },\n+//         );\n+//       },\n+//     );\n+//   }\n \n-  Widget _buildClaimsTab() {\n-    return DefaultTabController(\n-      length: 2,\n-      child: Column(\n-        children: [\n-          const TabBar(\n-            tabs: [\n-              Tab(text: 'Sent Claims'),\n-              Tab(text: 'Received Claims'),\n-            ],\n-          ),\n-          Expanded(\n-            child: TabBarView(\n-              children: [\n-                _buildSentClaimsTab(),\n-                _buildReceivedClaimsTab(),\n-              ],\n-            ),\n-          ),\n-        ],\n-      ),\n-    );\n-  }\n+//   Widget _buildClaimsTab() {\n+//     return DefaultTabController(\n+//       length: 2,\n+//       child: Column(\n+//         children: [\n+//           const TabBar(\n+//             tabs: [\n+//               Tab(text: 'Sent Claims'),\n+//               Tab(text: 'Received Claims'),\n+//             ],\n+//           ),\n+//           Expanded(\n+//             child: TabBarView(\n+//               children: [\n+//                 _buildSentClaimsTab(),\n+//                 _buildReceivedClaimsTab(),\n+//               ],\n+//             ),\n+//           ),\n+//         ],\n+//       ),\n+//     );\n+//   }\n \n-  Widget _buildSentClaimsTab() {\n-    return StreamBuilder<QuerySnapshot>(\n-      stream: _claimsService.getSentClaims(currentUser!.uid),\n-      builder: (context, snapshot) {\n-        if (snapshot.connectionState == ConnectionState.waiting) {\n-          return const Center(child: CircularProgressIndicator());\n-        }\n-        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-          return const Center(child: Text('No Sent Claims available'));\n-        }\n+//   Widget _buildSentClaimsTab() {\n+//     return StreamBuilder<QuerySnapshot>(\n+//       stream: _claimsService.getSentClaims(currentUser!.uid),\n+//       builder: (context, snapshot) {\n+//         if (snapshot.connectionState == ConnectionState.waiting) {\n+//           return const Center(child: CircularProgressIndicator());\n+//         }\n+//         if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+//           return const Center(child: Text('No Sent Claims available'));\n+//         }\n \n-        final postsWithClaims = snapshot.data!.docs.where((postDoc) {\n-          final postData = postDoc.data() as Map<String, dynamic>;\n-          final postmakerId = postData['postmakerId'];\n-          return postmakerId != currentUser!.uid;\n-        }).toList();\n+//         final postsWithClaims = snapshot.data!.docs.where((postDoc) {\n+//           final postData = postDoc.data() as Map<String, dynamic>;\n+//           final postmakerId = postData['postmakerId'];\n+//           return postmakerId != currentUser!.uid;\n+//         }).toList();\n \n-        return ListView.builder(\n-          itemCount: postsWithClaims.length,\n-          itemBuilder: (context, index) {\n-            final post = postsWithClaims[index];\n-            final postData = post.data() as Map<String, dynamic>;\n-            final postId = post.id;\n+//         return ListView.builder(\n+//           itemCount: postsWithClaims.length,\n+//           itemBuilder: (context, index) {\n+//             final post = postsWithClaims[index];\n+//             final postData = post.data() as Map<String, dynamic>;\n+//             final postId = post.id;\n \n-            return StreamBuilder<QuerySnapshot>(\n-              stream: FirebaseFirestore.instance\n-                  .collection('posts')\n-                  .doc(postId)\n-                  .collection('claims')\n-                  .where('senderId', isEqualTo: currentUser!.uid)\n-                  .snapshots(),\n-              builder: (context, claimSnapshot) {\n-                if (!claimSnapshot.hasData ||\n-                    claimSnapshot.data!.docs.isEmpty) {\n-                  return const SizedBox.shrink();\n-                }\n+//             return StreamBuilder<QuerySnapshot>(\n+//               stream: FirebaseFirestore.instance\n+//                   .collection('posts')\n+//                   .doc(postId)\n+//                   .collection('claims')\n+//                   .where('senderId', isEqualTo: currentUser!.uid)\n+//                   .snapshots(),\n+//               builder: (context, claimSnapshot) {\n+//                 if (!claimSnapshot.hasData ||\n+//                     claimSnapshot.data!.docs.isEmpty) {\n+//                   return const SizedBox.shrink();\n+//                 }\n \n-                final claim = claimSnapshot.data!.docs.first;\n-                return ClaimListItem(\n-                  claim: claim,\n-                  postData: postData,\n-                  onTap: () {\n-                    // Navigate to post details\n-                    Navigator.push(\n-                        context,\n-                        MaterialPageRoute(\n-                            builder: (_) => PostDetailsPage(postId: postId)));\n-                  },\n-                );\n-              },\n-            );\n-          },\n-        );\n-      },\n-    );\n-  }\n+//                 final claim = claimSnapshot.data!.docs.first;\n+//                 return ClaimListItem(\n+//                   claim: claim,\n+//                   postData: postData,\n+//                   onTap: () {\n+//                     // Navigate to post details\n+//                     Navigator.push(\n+//                         context,\n+//                         MaterialPageRoute(\n+//                             builder: (_) => PostDetailsPage(postId: postId)));\n+//                   },\n+//                 );\n+//               },\n+//             );\n+//           },\n+//         );\n+//       },\n+//     );\n+//   }\n \n-  Widget _buildReceivedClaimsTab() {\n-    return StreamBuilder<QuerySnapshot>(\n-      stream: _claimsService.getReceivedClaims(currentUser!.uid),\n-      builder: (context, snapshot) {\n-        if (snapshot.connectionState == ConnectionState.waiting) {\n-          return const Center(child: CircularProgressIndicator());\n-        }\n-        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n-          return const Center(child: Text('No Received Claims available'));\n-        }\n+//   Widget _buildReceivedClaimsTab() {\n+//     return StreamBuilder<QuerySnapshot>(\n+//       stream: _claimsService.getReceivedClaims(currentUser!.uid),\n+//       builder: (context, snapshot) {\n+//         if (snapshot.connectionState == ConnectionState.waiting) {\n+//           return const Center(child: CircularProgressIndicator());\n+//         }\n+//         if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n+//           return const Center(child: Text('No Received Claims available'));\n+//         }\n \n-        final postsWithClaims = snapshot.data!.docs.where((postDoc) {\n-          final postData = postDoc.data() as Map<String, dynamic>;\n-          final postmakerId = postData['postmakerId'];\n-          return postmakerId == currentUser!.uid;\n-        }).toList();\n+//         final postsWithClaims = snapshot.data!.docs.where((postDoc) {\n+//           final postData = postDoc.data() as Map<String, dynamic>;\n+//           final postmakerId = postData['postmakerId'];\n+//           return postmakerId == currentUser!.uid;\n+//         }).toList();\n \n-        return ListView.builder(\n-          itemCount: postsWithClaims.length,\n-          itemBuilder: (context, index) {\n-            final post = postsWithClaims[index];\n-            final postData = post.data() as Map<String, dynamic>;\n-            final postId = post.id;\n+//         return ListView.builder(\n+//           itemCount: postsWithClaims.length,\n+//           itemBuilder: (context, index) {\n+//             final post = postsWithClaims[index];\n+//             final postData = post.data() as Map<String, dynamic>;\n+//             final postId = post.id;\n \n-            return StreamBuilder<QuerySnapshot>(\n-              stream: FirebaseFirestore.instance\n-                  .collection('posts')\n-                  .doc(postId)\n-                  .collection('claims')\n-                  .where('receiverId', isEqualTo: currentUser!.uid)\n-                  .snapshots(),\n-              builder: (context, claimSnapshot) {\n-                if (!claimSnapshot.hasData ||\n-                    claimSnapshot.data!.docs.isEmpty) {\n-                  return const SizedBox.shrink();\n-                }\n+//             return StreamBuilder<QuerySnapshot>(\n+//               stream: FirebaseFirestore.instance\n+//                   .collection('posts')\n+//                   .doc(postId)\n+//                   .collection('claims')\n+//                   .where('receiverId', isEqualTo: currentUser!.uid)\n+//                   .snapshots(),\n+//               builder: (context, claimSnapshot) {\n+//                 if (!claimSnapshot.hasData ||\n+//                     claimSnapshot.data!.docs.isEmpty) {\n+//                   return const SizedBox.shrink();\n+//                 }\n \n-                final claim = claimSnapshot.data!.docs.first;\n-                return ClaimListItem(\n-                  claim: claim,\n-                  postData: postData,\n-                  onTap: () {\n-                    Navigator.push(\n-                        context,\n-                        MaterialPageRoute(\n-                            builder: (_) => PostDetailsPage(postId: postId)));\n-                  },\n-                  onAccept: () {\n-                    _claimsService.acceptClaim(\n-                      postId: postId,\n-                      claimId: claim.id,\n-                      postmakerId: postData['postmakerId'],\n-                      claimerId: claim['senderId'],\n-                    );\n-                  },\n-                  onDecline: () {\n-                    _claimsService.declineClaim(\n-                        postId: postId, claimId: claim.id);\n-                  },\n-                );\n-              },\n-            );\n-          },\n-        );\n-      },\n-    );\n-  }\n-}\n+//                 final claim = claimSnapshot.data!.docs.first;\n+//                 return ClaimListItem(\n+//                   claim: claim,\n+//                   postData: postData,\n+//                   onTap: () {\n+//                     Navigator.push(\n+//                         context,\n+//                         MaterialPageRoute(\n+//                             builder: (_) => PostDetailsPage(postId: postId)));\n+//                   },\n+//                   onAccept: () {\n+//                     _claimsService.acceptClaim(\n+//                       postId: postId,\n+//                       claimId: claim.id,\n+//                       postmakerId: postData['postmakerId'],\n+//                       claimerId: claim['senderId'],\n+//                     );\n+//                   },\n+//                   onDecline: () {\n+//                     _claimsService.declineClaim(\n+//                         postId: postId, claimId: claim.id);\n+//                   },\n+//                 );\n+//               },\n+//             );\n+//           },\n+//         );\n+//       },\n+//     );\n+//   }\n+// }\n"
                }
            ],
            "date": 1756117847511,
            "name": "Commit-0",
            "content": "// lib/Frontend/pages/messages_page.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\nimport 'package:l_f/Backend/messages_service.dart';\nimport 'package:l_f/Backend/claims_service.dart';\nimport 'package:l_f/services/user_service.dart';\nimport 'package:l_f/Frontend/components/message_list_item.dart';\nimport 'package:l_f/Frontend/components/claim_list_item.dart';\nimport 'package:l_f/Frontend/Home/Post/Utils/full_post.dart';\nimport 'package:l_f/Frontend/MyList/my_posts.dart';\nimport 'package:l_f/Frontend/Profile/user_see_page.dart';\n\nclass MessagesPage extends StatefulWidget {\n  const MessagesPage({super.key});\n\n  @override\n  State<MessagesPage> createState() => _MessagesPageState();\n}\n\nclass _MessagesPageState extends State<MessagesPage> with SingleTickerProviderStateMixin {\n  final User? currentUser = FirebaseAuth.instance.currentUser;\n  late TabController _tabController;\n\n  final MessagesService _messagesService = MessagesService();\n  final ClaimsService _claimsService = ClaimsService();\n  final UserService _userService = UserService();\n\n  @override\n  void initState() {\n    super.initState();\n    _tabController = TabController(length: 3, vsync: this);\n  }\n\n  @override\n  void dispose() {\n    _tabController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (currentUser == null) {\n      return const Scaffold(\n        body: Center(child: Text('Please log in to view your messages and claims.')),\n      );\n    }\n    \n    return Scaffold(\n      appBar: AppBar(\n        backgroundColor: Colors.deepOrange,\n        foregroundColor: Colors.white,\n        title: const Text('Messages and Claims'),\n        bottom: TabBar(\n          controller: _tabController,\n          tabs: const [\n            Tab(text: 'Messages'),\n            Tab(text: 'Claims'),\n            Tab(text: 'My Posts'),\n          ],\n        ),\n      ),\n      body: TabBarView(\n        controller: _tabController,\n        children: [\n          _buildMessagesTab(),\n          _buildClaimsTab(),\n          const MyPostsPage(),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildMessagesTab() {\n    return StreamBuilder<QuerySnapshot>(\n      stream: _messagesService.getLatestMessages(),\n      builder: (context, snapshot) {\n        if (snapshot.connectionState == ConnectionState.waiting) {\n          return const Center(child: CircularProgressIndicator());\n        }\n        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n          return const Center(child: Text('No Messages available'));\n        }\n\n        var latestMessagesMap = <String, DocumentSnapshot>{};\n        for (var doc in snapshot.data!.docs) {\n          var data = doc.data() as Map<String, dynamic>;\n          var otherUserId = data['senderId'] == currentUser!.uid ? data['receiverId'] : data['senderId'];\n          if (!latestMessagesMap.containsKey(otherUserId)) {\n            latestMessagesMap[otherUserId] = doc;\n          }\n        }\n        \n        var sortedMessages = latestMessagesMap.values.toList()..sort((a, b) => (b['timestamp'] as Timestamp).compareTo(a['timestamp'] as Timestamp));\n\n        return ListView.builder(\n          itemCount: sortedMessages.length,\n          itemBuilder: (context, index) {\n            var message = sortedMessages[index];\n            var isSentByUser = message['senderId'] == currentUser!.uid;\n            var otherUserId = isSentByUser ? message['receiverId'] : message['senderId'];\n\n            return FutureBuilder<Map<String, dynamic>?>(\n              future: _userService.fetchUserData(otherUserId),\n              builder: (context, userSnapshot) {\n                if (userSnapshot.connectionState == ConnectionState.waiting) {\n                  return const ListTile(title: Text('Loading user...'));\n                }\n                \n                if (!userSnapshot.hasData || userSnapshot.data == null) {\n                  return const SizedBox();\n                }\n\n                var userProfile = userSnapshot.data!;\n                return MessageListItem(\n                  otherUserId: otherUserId,\n                  userName: userProfile['name'] ?? 'Unknown User',\n                  userProfileImage: userProfile['profileImage'] ?? 'https://placehold.co/100x100/png',\n                  messageText: message['message'],\n                  isSentByUser: isSentByUser,\n                  formattedTimestamp: DateFormat('hh:mm a, d MMM yyyy').format((message['timestamp'] as Timestamp).toDate()),\n                );\n              },\n            );\n          },\n        );\n      },\n    );\n  }\n  \n  Widget _buildClaimsTab() {\n    return DefaultTabController(\n      length: 2,\n      child: Column(\n        children: [\n          const TabBar(\n            tabs: [\n              Tab(text: 'Sent Claims'),\n              Tab(text: 'Received Claims'),\n            ],\n          ),\n          Expanded(\n            child: TabBarView(\n              children: [\n                _buildSentClaimsTab(),\n                _buildReceivedClaimsTab(),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Widget _buildSentClaimsTab() {\n    return StreamBuilder<QuerySnapshot>(\n      stream: _claimsService.getSentClaims(currentUser!.uid),\n      builder: (context, snapshot) {\n        if (snapshot.connectionState == ConnectionState.waiting) {\n          return const Center(child: CircularProgressIndicator());\n        }\n        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n          return const Center(child: Text('No Sent Claims available'));\n        }\n\n        final postsWithClaims = snapshot.data!.docs.where((postDoc) {\n          final postData = postDoc.data() as Map<String, dynamic>;\n          final postmakerId = postData['postmakerId'];\n          return postmakerId != currentUser!.uid;\n        }).toList();\n\n        return ListView.builder(\n          itemCount: postsWithClaims.length,\n          itemBuilder: (context, index) {\n            final post = postsWithClaims[index];\n            final postData = post.data() as Map<String, dynamic>;\n            final postId = post.id;\n            final postmakerId = postData['postmakerId'];\n\n            return StreamBuilder<QuerySnapshot>(\n              stream: FirebaseFirestore.instance.collection('posts').doc(postId).collection('claims').where('senderId', isEqualTo: currentUser!.uid).snapshots(),\n              builder: (context, claimSnapshot) {\n                if (!claimSnapshot.hasData || claimSnapshot.data!.docs.isEmpty) {\n                  return const SizedBox.shrink();\n                }\n\n                final claim = claimSnapshot.data!.docs.first;\n                return ClaimListItem(\n                  claim: claim,\n                  postData: postData,\n                  onTap: () {\n                    // Navigate to post details\n                    Navigator.push(context, MaterialPageRoute(builder: (_) => PostDetailsPage(postId: postId)));\n                  },\n                );\n              },\n            );\n          },\n        );\n      },\n    );\n  }\n\n  Widget _buildReceivedClaimsTab() {\n    return StreamBuilder<QuerySnapshot>(\n      stream: _claimsService.getReceivedClaims(currentUser!.uid),\n      builder: (context, snapshot) {\n        if (snapshot.connectionState == ConnectionState.waiting) {\n          return const Center(child: CircularProgressIndicator());\n        }\n        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n          return const Center(child: Text('No Received Claims available'));\n        }\n\n        final postsWithClaims = snapshot.data!.docs.where((postDoc) {\n          final postData = postDoc.data() as Map<String, dynamic>;\n          final postmakerId = postData['postmakerId'];\n          return postmakerId == currentUser!.uid;\n        }).toList();\n        \n        return ListView.builder(\n          itemCount: postsWithClaims.length,\n          itemBuilder: (context, index) {\n            final post = postsWithClaims[index];\n            final postData = post.data() as Map<String, dynamic>;\n            final postId = post.id;\n\n            return StreamBuilder<QuerySnapshot>(\n              stream: FirebaseFirestore.instance.collection('posts').doc(postId).collection('claims').where('receiverId', isEqualTo: currentUser!.uid).snapshots(),\n              builder: (context, claimSnapshot) {\n                if (!claimSnapshot.hasData || claimSnapshot.data!.docs.isEmpty) {\n                  return const SizedBox.shrink();\n                }\n\n                final claim = claimSnapshot.data!.docs.first;\n                return ClaimListItem(\n                  claim: claim,\n                  postData: postData,\n                  onTap: () {\n                    Navigator.push(context, MaterialPageRoute(builder: (_) => PostDetailsPage(postId: postId)));\n                  },\n                  onAccept: () {\n                    _claimsService.acceptClaim(\n                      postId: postId,\n                      claimId: claim.id,\n                      postmakerId: postData['postmakerId'],\n                      claimerId: claim['senderId'],\n                    );\n                  },\n                  onDecline: () {\n                    _claimsService.declineClaim(postId: postId, claimId: claim.id);\n                  },\n                );\n              },\n            );\n          },\n        );\n      },\n    );\n  }\n}\n"
        }
    ]
}