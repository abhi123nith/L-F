{
    "sourceFile": "lib/newCode/Frontend/components/claim_list_item.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1756117894073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756117905251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n import 'package:l_f/Backend/claims_service.dart';\n+import 'package:l_f/newCode/service/user_service.dart';\n import 'package:l_f/services/user_service.dart';\n \n class ClaimListItem extends StatelessWidget {\n   final DocumentSnapshot claim;\n"
                },
                {
                    "date": 1756117914105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,9 @@\n // lib/Frontend/components/claim_list_item.dart\n import 'package:cloud_firestore/cloud_firestore.dart';\n import 'package:flutter/material.dart';\n import 'package:intl/intl.dart';\n-import 'package:l_f/Backend/claims_service.dart';\n import 'package:l_f/newCode/service/user_service.dart';\n-import 'package:l_f/services/user_service.dart';\n \n class ClaimListItem extends StatelessWidget {\n   final DocumentSnapshot claim;\n   final Map<String, dynamic> postData;\n@@ -33,19 +31,21 @@\n     final String title = postData['item'] ?? 'Unknown Item';\n     final String question = postData['question'] ?? '';\n     final String answer = claimData['answer'] ?? '';\n     final Timestamp timestamp = claimData['timestamp'];\n-    final String formattedTime = DateFormat('hh:mm a, d MMM yyyy').format(timestamp.toDate());\n+    final String formattedTime =\n+        DateFormat('hh:mm a, d MMM yyyy').format(timestamp.toDate());\n \n     return FutureBuilder<Map<String, dynamic>?>(\n       future: UserService().fetchUserData(claimerId),\n       builder: (context, userSnapshot) {\n         if (!userSnapshot.hasData || userSnapshot.data == null) {\n           return const SizedBox.shrink();\n         }\n-        \n+\n         final claimerName = userSnapshot.data!['name'] ?? 'Unknown User';\n-        final claimerProfileImage = userSnapshot.data!['profileImage'] ?? 'https://placehold.co/100x100/png';\n+        final claimerProfileImage = userSnapshot.data!['profileImage'] ??\n+            'https://placehold.co/100x100/png';\n \n         return GestureDetector(\n           onTap: onTap,\n           child: Card(\n@@ -55,29 +55,43 @@\n               padding: const EdgeInsets.all(12.0),\n               child: Column(\n                 crossAxisAlignment: CrossAxisAlignment.start,\n                 children: [\n-                  Text(\"Post Title: $title\", style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),\n+                  Text(\"Post Title: $title\",\n+                      style: const TextStyle(\n+                          fontWeight: FontWeight.bold, fontSize: 16)),\n                   const SizedBox(height: 4),\n                   if (isReceived)\n-                    Text(\"Your Question: $question\", style: const TextStyle(fontWeight: FontWeight.w500, fontSize: 16)),\n+                    Text(\"Your Question: $question\",\n+                        style: const TextStyle(\n+                            fontWeight: FontWeight.w500, fontSize: 16)),\n                   const SizedBox(height: 4),\n                   Row(\n                     children: [\n-                      Text(\"$claimerName's Answer: \", style: const TextStyle(fontSize: 14, color: Colors.blueGrey)),\n+                      Text(\"$claimerName's Answer: \",\n+                          style: const TextStyle(\n+                              fontSize: 14, color: Colors.blueGrey)),\n                       Expanded(child: Text(answer)),\n                     ],\n                   ),\n                   const SizedBox(height: 4),\n                   Row(\n                     children: [\n-                      Text('Status: ', style: TextStyle(color: _getStatusColor(claimStatus), fontWeight: FontWeight.bold)),\n-                      Text(claimStatus.toString().toUpperCase(), style: const TextStyle(fontWeight: FontWeight.bold)),\n+                      Text('Status: ',\n+                          style: TextStyle(\n+                              color: _getStatusColor(claimStatus),\n+                              fontWeight: FontWeight.bold)),\n+                      Text(claimStatus.toString().toUpperCase(),\n+                          style: const TextStyle(fontWeight: FontWeight.bold)),\n                     ],\n                   ),\n                   const SizedBox(height: 4),\n-                  Text('Time & Date: $formattedTime', style: const TextStyle(fontSize: 12, color: Colors.grey)),\n-                  if (isReceived && claimStatus == 'requested' && onAccept != null && onDecline != null)\n+                  Text('Time & Date: $formattedTime',\n+                      style: const TextStyle(fontSize: 12, color: Colors.grey)),\n+                  if (isReceived &&\n+                      claimStatus == 'requested' &&\n+                      onAccept != null &&\n+                      onDecline != null)\n                     Padding(\n                       padding: const EdgeInsets.only(top: 8.0),\n                       child: Row(\n                         children: [\n@@ -88,9 +102,10 @@\n                           const SizedBox(width: 8),\n                           ElevatedButton(\n                             onPressed: onDecline,\n                             child: const Text('Decline'),\n-                            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n+                            style: ElevatedButton.styleFrom(\n+                                backgroundColor: Colors.red),\n                           ),\n                         ],\n                       ),\n                     ),\n"
                },
                {
                    "date": 1756118118539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,8 @@\n           return const SizedBox.shrink();\n         }\n \n         final claimerName = userSnapshot.data!['name'] ?? 'Unknown User';\n-        final claimerProfileImage = userSnapshot.data!['profileImage'] ??\n-            'https://placehold.co/100x100/png';\n \n         return GestureDetector(\n           onTap: onTap,\n           child: Card(\n"
                },
                {
                    "date": 1756118127356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,11 +99,11 @@\n                           ),\n                           const SizedBox(width: 8),\n                           ElevatedButton(\n                             onPressed: onDecline,\n-                            child: const Text('Decline'),\n                             style: ElevatedButton.styleFrom(\n                                 backgroundColor: Colors.red),\n+                            child: const Text('Decline'),\n                           ),\n                         ],\n                       ),\n                     ),\n"
                },
                {
                    "date": 1756123046673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,130 +1,130 @@\n-// lib/Frontend/components/claim_list_item.dart\n-import 'package:cloud_firestore/cloud_firestore.dart';\n-import 'package:flutter/material.dart';\n-import 'package:intl/intl.dart';\n-import 'package:l_f/newCode/service/user_service.dart';\n+// // lib/Frontend/components/claim_list_item.dart\n+// import 'package:cloud_firestore/cloud_firestore.dart';\n+// import 'package:flutter/material.dart';\n+// import 'package:intl/intl.dart';\n+// import 'package:l_f/newCode/service/user_service.dart';\n \n-class ClaimListItem extends StatelessWidget {\n-  final DocumentSnapshot claim;\n-  final Map<String, dynamic> postData;\n-  final VoidCallback onTap;\n-  final VoidCallback? onAccept;\n-  final VoidCallback? onDecline;\n+// class ClaimListItem extends StatelessWidget {\n+//   final DocumentSnapshot claim;\n+//   final Map<String, dynamic> postData;\n+//   final VoidCallback onTap;\n+//   final VoidCallback? onAccept;\n+//   final VoidCallback? onDecline;\n \n-  const ClaimListItem({\n-    super.key,\n-    required this.claim,\n-    required this.postData,\n-    required this.onTap,\n-    this.onAccept,\n-    this.onDecline,\n-  });\n+//   const ClaimListItem({\n+//     super.key,\n+//     required this.claim,\n+//     required this.postData,\n+//     required this.onTap,\n+//     this.onAccept,\n+//     this.onDecline,\n+//   });\n \n-  @override\n-  Widget build(BuildContext context) {\n-    final claimData = claim.data() as Map<String, dynamic>;\n-    final claimStatus = claimData['claimStatusC'];\n-    final claimerId = claimData['senderId'];\n-    final postmakerId = postData['postmakerId'];\n-    final isReceived = claimerId != postmakerId;\n+//   @override\n+//   Widget build(BuildContext context) {\n+//     final claimData = claim.data() as Map<String, dynamic>;\n+//     final claimStatus = claimData['claimStatusC'];\n+//     final claimerId = claimData['senderId'];\n+//     final postmakerId = postData['postmakerId'];\n+//     final isReceived = claimerId != postmakerId;\n \n-    final String title = postData['item'] ?? 'Unknown Item';\n-    final String question = postData['question'] ?? '';\n-    final String answer = claimData['answer'] ?? '';\n-    final Timestamp timestamp = claimData['timestamp'];\n-    final String formattedTime =\n-        DateFormat('hh:mm a, d MMM yyyy').format(timestamp.toDate());\n+//     final String title = postData['item'] ?? 'Unknown Item';\n+//     final String question = postData['question'] ?? '';\n+//     final String answer = claimData['answer'] ?? '';\n+//     final Timestamp timestamp = claimData['timestamp'];\n+//     final String formattedTime =\n+//         DateFormat('hh:mm a, d MMM yyyy').format(timestamp.toDate());\n \n-    return FutureBuilder<Map<String, dynamic>?>(\n-      future: UserService().fetchUserData(claimerId),\n-      builder: (context, userSnapshot) {\n-        if (!userSnapshot.hasData || userSnapshot.data == null) {\n-          return const SizedBox.shrink();\n-        }\n+//     return FutureBuilder<Map<String, dynamic>?>(\n+//       future: UserService().fetchUserData(claimerId),\n+//       builder: (context, userSnapshot) {\n+//         if (!userSnapshot.hasData || userSnapshot.data == null) {\n+//           return const SizedBox.shrink();\n+//         }\n \n-        final claimerName = userSnapshot.data!['name'] ?? 'Unknown User';\n+//         final claimerName = userSnapshot.data!['name'] ?? 'Unknown User';\n \n-        return GestureDetector(\n-          onTap: onTap,\n-          child: Card(\n-            elevation: 4,\n-            margin: const EdgeInsets.all(8.0),\n-            child: Padding(\n-              padding: const EdgeInsets.all(12.0),\n-              child: Column(\n-                crossAxisAlignment: CrossAxisAlignment.start,\n-                children: [\n-                  Text(\"Post Title: $title\",\n-                      style: const TextStyle(\n-                          fontWeight: FontWeight.bold, fontSize: 16)),\n-                  const SizedBox(height: 4),\n-                  if (isReceived)\n-                    Text(\"Your Question: $question\",\n-                        style: const TextStyle(\n-                            fontWeight: FontWeight.w500, fontSize: 16)),\n-                  const SizedBox(height: 4),\n-                  Row(\n-                    children: [\n-                      Text(\"$claimerName's Answer: \",\n-                          style: const TextStyle(\n-                              fontSize: 14, color: Colors.blueGrey)),\n-                      Expanded(child: Text(answer)),\n-                    ],\n-                  ),\n-                  const SizedBox(height: 4),\n-                  Row(\n-                    children: [\n-                      Text('Status: ',\n-                          style: TextStyle(\n-                              color: _getStatusColor(claimStatus),\n-                              fontWeight: FontWeight.bold)),\n-                      Text(claimStatus.toString().toUpperCase(),\n-                          style: const TextStyle(fontWeight: FontWeight.bold)),\n-                    ],\n-                  ),\n-                  const SizedBox(height: 4),\n-                  Text('Time & Date: $formattedTime',\n-                      style: const TextStyle(fontSize: 12, color: Colors.grey)),\n-                  if (isReceived &&\n-                      claimStatus == 'requested' &&\n-                      onAccept != null &&\n-                      onDecline != null)\n-                    Padding(\n-                      padding: const EdgeInsets.only(top: 8.0),\n-                      child: Row(\n-                        children: [\n-                          ElevatedButton(\n-                            onPressed: onAccept,\n-                            child: const Text('Accept'),\n-                          ),\n-                          const SizedBox(width: 8),\n-                          ElevatedButton(\n-                            onPressed: onDecline,\n-                            style: ElevatedButton.styleFrom(\n-                                backgroundColor: Colors.red),\n-                            child: const Text('Decline'),\n-                          ),\n-                        ],\n-                      ),\n-                    ),\n-                ],\n-              ),\n-            ),\n-          ),\n-        );\n-      },\n-    );\n-  }\n+//         return GestureDetector(\n+//           onTap: onTap,\n+//           child: Card(\n+//             elevation: 4,\n+//             margin: const EdgeInsets.all(8.0),\n+//             child: Padding(\n+//               padding: const EdgeInsets.all(12.0),\n+//               child: Column(\n+//                 crossAxisAlignment: CrossAxisAlignment.start,\n+//                 children: [\n+//                   Text(\"Post Title: $title\",\n+//                       style: const TextStyle(\n+//                           fontWeight: FontWeight.bold, fontSize: 16)),\n+//                   const SizedBox(height: 4),\n+//                   if (isReceived)\n+//                     Text(\"Your Question: $question\",\n+//                         style: const TextStyle(\n+//                             fontWeight: FontWeight.w500, fontSize: 16)),\n+//                   const SizedBox(height: 4),\n+//                   Row(\n+//                     children: [\n+//                       Text(\"$claimerName's Answer: \",\n+//                           style: const TextStyle(\n+//                               fontSize: 14, color: Colors.blueGrey)),\n+//                       Expanded(child: Text(answer)),\n+//                     ],\n+//                   ),\n+//                   const SizedBox(height: 4),\n+//                   Row(\n+//                     children: [\n+//                       Text('Status: ',\n+//                           style: TextStyle(\n+//                               color: _getStatusColor(claimStatus),\n+//                               fontWeight: FontWeight.bold)),\n+//                       Text(claimStatus.toString().toUpperCase(),\n+//                           style: const TextStyle(fontWeight: FontWeight.bold)),\n+//                     ],\n+//                   ),\n+//                   const SizedBox(height: 4),\n+//                   Text('Time & Date: $formattedTime',\n+//                       style: const TextStyle(fontSize: 12, color: Colors.grey)),\n+//                   if (isReceived &&\n+//                       claimStatus == 'requested' &&\n+//                       onAccept != null &&\n+//                       onDecline != null)\n+//                     Padding(\n+//                       padding: const EdgeInsets.only(top: 8.0),\n+//                       child: Row(\n+//                         children: [\n+//                           ElevatedButton(\n+//                             onPressed: onAccept,\n+//                             child: const Text('Accept'),\n+//                           ),\n+//                           const SizedBox(width: 8),\n+//                           ElevatedButton(\n+//                             onPressed: onDecline,\n+//                             style: ElevatedButton.styleFrom(\n+//                                 backgroundColor: Colors.red),\n+//                             child: const Text('Decline'),\n+//                           ),\n+//                         ],\n+//                       ),\n+//                     ),\n+//                 ],\n+//               ),\n+//             ),\n+//           ),\n+//         );\n+//       },\n+//     );\n+//   }\n \n-  Color _getStatusColor(String status) {\n-    switch (status) {\n-      case 'accepted':\n-        return Colors.green;\n-      case 'declined':\n-        return Colors.red;\n-      case 'requested':\n-      default:\n-        return Colors.blue;\n-    }\n-  }\n-}\n+//   Color _getStatusColor(String status) {\n+//     switch (status) {\n+//       case 'accepted':\n+//         return Colors.green;\n+//       case 'declined':\n+//         return Colors.red;\n+//       case 'requested':\n+//       default:\n+//         return Colors.blue;\n+//     }\n+//   }\n+// }\n"
                }
            ],
            "date": 1756117894073,
            "name": "Commit-0",
            "content": "// lib/Frontend/components/claim_list_item.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\nimport 'package:l_f/Backend/claims_service.dart';\nimport 'package:l_f/services/user_service.dart';\n\nclass ClaimListItem extends StatelessWidget {\n  final DocumentSnapshot claim;\n  final Map<String, dynamic> postData;\n  final VoidCallback onTap;\n  final VoidCallback? onAccept;\n  final VoidCallback? onDecline;\n\n  const ClaimListItem({\n    super.key,\n    required this.claim,\n    required this.postData,\n    required this.onTap,\n    this.onAccept,\n    this.onDecline,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    final claimData = claim.data() as Map<String, dynamic>;\n    final claimStatus = claimData['claimStatusC'];\n    final claimerId = claimData['senderId'];\n    final postmakerId = postData['postmakerId'];\n    final isReceived = claimerId != postmakerId;\n\n    final String title = postData['item'] ?? 'Unknown Item';\n    final String question = postData['question'] ?? '';\n    final String answer = claimData['answer'] ?? '';\n    final Timestamp timestamp = claimData['timestamp'];\n    final String formattedTime = DateFormat('hh:mm a, d MMM yyyy').format(timestamp.toDate());\n\n    return FutureBuilder<Map<String, dynamic>?>(\n      future: UserService().fetchUserData(claimerId),\n      builder: (context, userSnapshot) {\n        if (!userSnapshot.hasData || userSnapshot.data == null) {\n          return const SizedBox.shrink();\n        }\n        \n        final claimerName = userSnapshot.data!['name'] ?? 'Unknown User';\n        final claimerProfileImage = userSnapshot.data!['profileImage'] ?? 'https://placehold.co/100x100/png';\n\n        return GestureDetector(\n          onTap: onTap,\n          child: Card(\n            elevation: 4,\n            margin: const EdgeInsets.all(8.0),\n            child: Padding(\n              padding: const EdgeInsets.all(12.0),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  Text(\"Post Title: $title\", style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),\n                  const SizedBox(height: 4),\n                  if (isReceived)\n                    Text(\"Your Question: $question\", style: const TextStyle(fontWeight: FontWeight.w500, fontSize: 16)),\n                  const SizedBox(height: 4),\n                  Row(\n                    children: [\n                      Text(\"$claimerName's Answer: \", style: const TextStyle(fontSize: 14, color: Colors.blueGrey)),\n                      Expanded(child: Text(answer)),\n                    ],\n                  ),\n                  const SizedBox(height: 4),\n                  Row(\n                    children: [\n                      Text('Status: ', style: TextStyle(color: _getStatusColor(claimStatus), fontWeight: FontWeight.bold)),\n                      Text(claimStatus.toString().toUpperCase(), style: const TextStyle(fontWeight: FontWeight.bold)),\n                    ],\n                  ),\n                  const SizedBox(height: 4),\n                  Text('Time & Date: $formattedTime', style: const TextStyle(fontSize: 12, color: Colors.grey)),\n                  if (isReceived && claimStatus == 'requested' && onAccept != null && onDecline != null)\n                    Padding(\n                      padding: const EdgeInsets.only(top: 8.0),\n                      child: Row(\n                        children: [\n                          ElevatedButton(\n                            onPressed: onAccept,\n                            child: const Text('Accept'),\n                          ),\n                          const SizedBox(width: 8),\n                          ElevatedButton(\n                            onPressed: onDecline,\n                            child: const Text('Decline'),\n                            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n                          ),\n                        ],\n                      ),\n                    ),\n                ],\n              ),\n            ),\n          ),\n        );\n      },\n    );\n  }\n\n  Color _getStatusColor(String status) {\n    switch (status) {\n      case 'accepted':\n        return Colors.green;\n      case 'declined':\n        return Colors.red;\n      case 'requested':\n      default:\n        return Colors.blue;\n    }\n  }\n}\n"
        }
    ]
}