{
    "sourceFile": "lib/newCode/service/user_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1756116312039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756116669061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,88 @@\n // lib/services/user_service.dart\n import 'package:cloud_firestore/cloud_firestore.dart';\n+import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:firebase_storage/firebase_storage.dart';\n+import 'package:flutter/foundation.dart';\n+import 'package:image_picker/image_picker.dart';\n+import 'package:file_picker/file_picker.dart';\n \n-/// A service to handle user data fetching and caching to reduce redundant calls.\n+/// A service to handle user data fetching, caching, and updates.\n class UserService {\n   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n-  final Map<String, Map<String, String>> _userCache = {};\n+  final FirebaseStorage _storage = FirebaseStorage.instance;\n+  final Map<String, Map<String, dynamic>> _userCache = {};\n+  final FirebaseAuth _auth = FirebaseAuth.instance;\n \n   /// Fetches and caches a user's name and profile picture from Firestore.\n-  Future<Map<String, String>> fetchUserNameAndProfilePic(String uid) async {\n+  Future<Map<String, dynamic>?> fetchUserData(String uid) async {\n     if (_userCache.containsKey(uid)) {\n       return _userCache[uid]!; // Return cached data if available\n     }\n \n     try {\n       DocumentSnapshot userDoc = await _firestore.collection('users').doc(uid).get();\n \n       if (!userDoc.exists) {\n-        return {'name': 'NITH User', 'profileImage': ''};\n+        return null;\n       }\n \n       Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n+      \n+      // Cache the user data\n+      _userCache[uid] = userData;\n+      return _userCache[uid];\n+    } catch (e) {\n+      print(\"Error fetching user profile: $e\");\n+      return null;\n+    }\n+  }\n \n-      String name = userData['name'] ?? 'NITH User';\n-      String profileImage = userData['profileImage'] ?? '';\n+  /// Uploads a profile image to Firebase Storage and returns the download URL.\n+  Future<String?> uploadProfileImage(Uint8List imageBytes) async {\n+    try {\n+      final storageRef = _storage.ref().child(\n+          'profileImages/${DateTime.now().toIso8601String()}');\n+      final uploadTask = storageRef.putData(imageBytes);\n+      final snapshot = await uploadTask.whenComplete(() => null);\n+      final downloadUrl = await snapshot.ref.getDownloadURL();\n+      return downloadUrl;\n+    } catch (e) {\n+      print('Error uploading image: $e');\n+      return null;\n+    }\n+  }\n \n-      // Cache the user data\n-      _userCache[uid] = {'name': name, 'profileImage': profileImage};\n+  /// Handles the process of picking a single image, with platform-specific logic.\n+  Future<Uint8List?> pickSingleImage() async {\n+    try {\n+      if (kIsWeb) {\n+        final result = await FilePicker.platform.pickFiles(\n+          allowMultiple: false,\n+          type: FileType.image,\n+        );\n+        return result?.files.first.bytes;\n+      } else {\n+        final ImagePicker picker = ImagePicker();\n+        final XFile? pickedFile = await picker.pickImage(source: ImageSource.gallery);\n+        return pickedFile != null ? await pickedFile.readAsBytes() : null;\n+      }\n+    } catch (e) {\n+      print('Error picking file: $e');\n+      return null;\n+    }\n+  }\n \n-      return _userCache[uid]!;\n+  /// Updates user details in Firestore.\n+  Future<void> updateUserDetails(String uid, Map<String, dynamic> updatedData) async {\n+    try {\n+      await _firestore.collection('users').doc(uid).update(updatedData);\n+      // Update cache\n+      if (_userCache.containsKey(uid)) {\n+        _userCache[uid]!.addAll(updatedData);\n+      }\n     } catch (e) {\n-      print(\"Error fetching user profile: $e\");\n-      return {'name': 'NITH User', 'profileImage': ''};\n+      print('Error updating profile: $e');\n+      throw Exception('Failed to update profile.');\n     }\n   }\n }\n"
                }
            ],
            "date": 1756116312039,
            "name": "Commit-0",
            "content": "// lib/services/user_service.dart\nimport 'package:cloud_firestore/cloud_firestore.dart';\n\n/// A service to handle user data fetching and caching to reduce redundant calls.\nclass UserService {\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n  final Map<String, Map<String, String>> _userCache = {};\n\n  /// Fetches and caches a user's name and profile picture from Firestore.\n  Future<Map<String, String>> fetchUserNameAndProfilePic(String uid) async {\n    if (_userCache.containsKey(uid)) {\n      return _userCache[uid]!; // Return cached data if available\n    }\n\n    try {\n      DocumentSnapshot userDoc = await _firestore.collection('users').doc(uid).get();\n\n      if (!userDoc.exists) {\n        return {'name': 'NITH User', 'profileImage': ''};\n      }\n\n      Map<String, dynamic> userData = userDoc.data() as Map<String, dynamic>;\n\n      String name = userData['name'] ?? 'NITH User';\n      String profileImage = userData['profileImage'] ?? '';\n\n      // Cache the user data\n      _userCache[uid] = {'name': name, 'profileImage': profileImage};\n\n      return _userCache[uid]!;\n    } catch (e) {\n      print(\"Error fetching user profile: $e\");\n      return {'name': 'NITH User', 'profileImage': ''};\n    }\n  }\n}\n"
        }
    ]
}